
BLE_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074a0  080000c0  080000c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08007560  08007560  00017560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079b4  080079b4  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  080079b4  080079b4  000179b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079bc  080079bc  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079bc  080079bc  000179bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079c0  080079c0  000179c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  080079c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000a60  20000158  08007b1c  00020158  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb8  08007b1c  00020bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b026  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e77  00000000  00000000  0003b1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  0003f020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  00040430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211df  00000000  00000000  000416d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8f1  00000000  00000000  000628af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bded7  00000000  00000000  0007d1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013b077  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd4  00000000  00000000  0013b0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000158 	.word	0x20000158
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007534 	.word	0x08007534

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000015c 	.word	0x2000015c
 8000104:	08007534 	.word	0x08007534

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	469b      	mov	fp, r3
 800048e:	d433      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 8000490:	465a      	mov	r2, fp
 8000492:	4653      	mov	r3, sl
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83a      	bhi.n	800051a <__udivmoddi4+0xc2>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e078      	b.n	800059c <__udivmoddi4+0x144>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e075      	b.n	80005a2 <__udivmoddi4+0x14a>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e028      	b.n	8000522 <__udivmoddi4+0xca>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	2320      	movs	r3, #32
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	4652      	mov	r2, sl
 8000500:	40da      	lsrs	r2, r3
 8000502:	4641      	mov	r1, r8
 8000504:	0013      	movs	r3, r2
 8000506:	464a      	mov	r2, r9
 8000508:	408a      	lsls	r2, r1
 800050a:	0017      	movs	r7, r2
 800050c:	4642      	mov	r2, r8
 800050e:	431f      	orrs	r7, r3
 8000510:	4653      	mov	r3, sl
 8000512:	4093      	lsls	r3, r2
 8000514:	001e      	movs	r6, r3
 8000516:	42af      	cmp	r7, r5
 8000518:	d9c4      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051a:	2200      	movs	r2, #0
 800051c:	2300      	movs	r3, #0
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	4643      	mov	r3, r8
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0d9      	beq.n	80004dc <__udivmoddi4+0x84>
 8000528:	07fb      	lsls	r3, r7, #31
 800052a:	0872      	lsrs	r2, r6, #1
 800052c:	431a      	orrs	r2, r3
 800052e:	4646      	mov	r6, r8
 8000530:	087b      	lsrs	r3, r7, #1
 8000532:	e00e      	b.n	8000552 <__udivmoddi4+0xfa>
 8000534:	42ab      	cmp	r3, r5
 8000536:	d101      	bne.n	800053c <__udivmoddi4+0xe4>
 8000538:	42a2      	cmp	r2, r4
 800053a:	d80c      	bhi.n	8000556 <__udivmoddi4+0xfe>
 800053c:	1aa4      	subs	r4, r4, r2
 800053e:	419d      	sbcs	r5, r3
 8000540:	2001      	movs	r0, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2100      	movs	r1, #0
 8000548:	3e01      	subs	r6, #1
 800054a:	1824      	adds	r4, r4, r0
 800054c:	414d      	adcs	r5, r1
 800054e:	2e00      	cmp	r6, #0
 8000550:	d006      	beq.n	8000560 <__udivmoddi4+0x108>
 8000552:	42ab      	cmp	r3, r5
 8000554:	d9ee      	bls.n	8000534 <__udivmoddi4+0xdc>
 8000556:	3e01      	subs	r6, #1
 8000558:	1924      	adds	r4, r4, r4
 800055a:	416d      	adcs	r5, r5
 800055c:	2e00      	cmp	r6, #0
 800055e:	d1f8      	bne.n	8000552 <__udivmoddi4+0xfa>
 8000560:	9800      	ldr	r0, [sp, #0]
 8000562:	9901      	ldr	r1, [sp, #4]
 8000564:	465b      	mov	r3, fp
 8000566:	1900      	adds	r0, r0, r4
 8000568:	4169      	adcs	r1, r5
 800056a:	2b00      	cmp	r3, #0
 800056c:	db24      	blt.n	80005b8 <__udivmoddi4+0x160>
 800056e:	002b      	movs	r3, r5
 8000570:	465a      	mov	r2, fp
 8000572:	4644      	mov	r4, r8
 8000574:	40d3      	lsrs	r3, r2
 8000576:	002a      	movs	r2, r5
 8000578:	40e2      	lsrs	r2, r4
 800057a:	001c      	movs	r4, r3
 800057c:	465b      	mov	r3, fp
 800057e:	0015      	movs	r5, r2
 8000580:	2b00      	cmp	r3, #0
 8000582:	db2a      	blt.n	80005da <__udivmoddi4+0x182>
 8000584:	0026      	movs	r6, r4
 8000586:	409e      	lsls	r6, r3
 8000588:	0033      	movs	r3, r6
 800058a:	0026      	movs	r6, r4
 800058c:	4647      	mov	r7, r8
 800058e:	40be      	lsls	r6, r7
 8000590:	0032      	movs	r2, r6
 8000592:	1a80      	subs	r0, r0, r2
 8000594:	4199      	sbcs	r1, r3
 8000596:	9000      	str	r0, [sp, #0]
 8000598:	9101      	str	r1, [sp, #4]
 800059a:	e79f      	b.n	80004dc <__udivmoddi4+0x84>
 800059c:	42a3      	cmp	r3, r4
 800059e:	d8bc      	bhi.n	800051a <__udivmoddi4+0xc2>
 80005a0:	e783      	b.n	80004aa <__udivmoddi4+0x52>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	2200      	movs	r2, #0
 80005ac:	9100      	str	r1, [sp, #0]
 80005ae:	9201      	str	r2, [sp, #4]
 80005b0:	2201      	movs	r2, #1
 80005b2:	40da      	lsrs	r2, r3
 80005b4:	9201      	str	r2, [sp, #4]
 80005b6:	e786      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	002a      	movs	r2, r5
 80005c0:	4646      	mov	r6, r8
 80005c2:	409a      	lsls	r2, r3
 80005c4:	0023      	movs	r3, r4
 80005c6:	40f3      	lsrs	r3, r6
 80005c8:	4644      	mov	r4, r8
 80005ca:	4313      	orrs	r3, r2
 80005cc:	002a      	movs	r2, r5
 80005ce:	40e2      	lsrs	r2, r4
 80005d0:	001c      	movs	r4, r3
 80005d2:	465b      	mov	r3, fp
 80005d4:	0015      	movs	r5, r2
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	dad4      	bge.n	8000584 <__udivmoddi4+0x12c>
 80005da:	4642      	mov	r2, r8
 80005dc:	002f      	movs	r7, r5
 80005de:	2320      	movs	r3, #32
 80005e0:	0026      	movs	r6, r4
 80005e2:	4097      	lsls	r7, r2
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	40de      	lsrs	r6, r3
 80005e8:	003b      	movs	r3, r7
 80005ea:	4333      	orrs	r3, r6
 80005ec:	e7cd      	b.n	800058a <__udivmoddi4+0x132>
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	0008      	movs	r0, r1
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			; (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	; (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b089      	sub	sp, #36	; 0x24
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <HCI_TL_SPI_Init+0xa8>)
 800064e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <HCI_TL_SPI_Init+0xa8>)
 8000652:	2101      	movs	r1, #1
 8000654:	430a      	orrs	r2, r1
 8000656:	635a      	str	r2, [r3, #52]	; 0x34
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <HCI_TL_SPI_Init+0xa8>)
 800065a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065c:	2201      	movs	r2, #1
 800065e:	4013      	ands	r3, r2
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000664:	240c      	movs	r4, #12
 8000666:	193b      	adds	r3, r7, r4
 8000668:	2201      	movs	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2288      	movs	r2, #136	; 0x88
 8000670:	0352      	lsls	r2, r2, #13
 8000672:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	193b      	adds	r3, r7, r4
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800067a:	193a      	adds	r2, r7, r4
 800067c:	23a0      	movs	r3, #160	; 0xa0
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	0011      	movs	r1, r2
 8000682:	0018      	movs	r0, r3
 8000684:	f002 f884 	bl	8002790 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000688:	0021      	movs	r1, r4
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	000c      	movs	r4, r1
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2201      	movs	r2, #1
 8000698:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	193b      	adds	r3, r7, r4
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80006a6:	193a      	adds	r2, r7, r4
 80006a8:	23a0      	movs	r3, #160	; 0xa0
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	0011      	movs	r1, r2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f002 f86e 	bl	8002790 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80006b4:	0021      	movs	r1, r4
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2202      	movs	r2, #2
 80006ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2201      	movs	r2, #1
 80006c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80006ce:	187a      	adds	r2, r7, r1
 80006d0:	23a0      	movs	r3, #160	; 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f002 f85a 	bl	8002790 <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 80006dc:	f001 f994 	bl	8001a08 <BSP_SPI1_Init>
 80006e0:	0003      	movs	r3, r0
}
 80006e2:	0018      	movs	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b009      	add	sp, #36	; 0x24
 80006e8:	bd90      	pop	{r4, r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40021000 	.word	0x40021000

080006f0 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80006f4:	23a0      	movs	r3, #160	; 0xa0
 80006f6:	05db      	lsls	r3, r3, #23
 80006f8:	2101      	movs	r1, #1
 80006fa:	0018      	movs	r0, r3
 80006fc:	f002 f9b4 	bl	8002a68 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000700:	23a0      	movs	r3, #160	; 0xa0
 8000702:	05db      	lsls	r3, r3, #23
 8000704:	2102      	movs	r1, #2
 8000706:	0018      	movs	r0, r3
 8000708:	f002 f9ae 	bl	8002a68 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	005a      	lsls	r2, r3, #1
 8000710:	23a0      	movs	r3, #160	; 0xa0
 8000712:	05db      	lsls	r3, r3, #23
 8000714:	0011      	movs	r1, r2
 8000716:	0018      	movs	r0, r3
 8000718:	f002 f9a6 	bl	8002a68 <HAL_GPIO_DeInit>
  return 0;
 800071c:	2300      	movs	r3, #0
}
 800071e:	0018      	movs	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000728:	23a0      	movs	r3, #160	; 0xa0
 800072a:	05db      	lsls	r3, r3, #23
 800072c:	2201      	movs	r2, #1
 800072e:	2102      	movs	r1, #2
 8000730:	0018      	movs	r0, r3
 8000732:	f002 fa8e 	bl	8002c52 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000736:	2380      	movs	r3, #128	; 0x80
 8000738:	0059      	lsls	r1, r3, #1
 800073a:	23a0      	movs	r3, #160	; 0xa0
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	2200      	movs	r2, #0
 8000740:	0018      	movs	r0, r3
 8000742:	f002 fa86 	bl	8002c52 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000746:	2005      	movs	r0, #5
 8000748:	f001 fca0 	bl	800208c <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	0059      	lsls	r1, r3, #1
 8000750:	23a0      	movs	r3, #160	; 0xa0
 8000752:	05db      	lsls	r3, r3, #23
 8000754:	2201      	movs	r2, #1
 8000756:	0018      	movs	r0, r3
 8000758:	f002 fa7b 	bl	8002c52 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800075c:	2005      	movs	r0, #5
 800075e:	f001 fc95 	bl	800208c <HAL_Delay>
  return 0;
 8000762:	2300      	movs	r3, #0
}
 8000764:	0018      	movs	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800076c:	b5b0      	push	{r4, r5, r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	000a      	movs	r2, r1
 8000776:	1cbb      	adds	r3, r7, #2
 8000778:	801a      	strh	r2, [r3, #0]
  uint16_t byte_count;
  uint8_t len = 0;
 800077a:	231d      	movs	r3, #29
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
  uint8_t char_ff = 0xff;
 8000782:	231c      	movs	r3, #28
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	22ff      	movs	r2, #255	; 0xff
 8000788:	701a      	strb	r2, [r3, #0]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800078a:	2514      	movs	r5, #20
 800078c:	197b      	adds	r3, r7, r5
 800078e:	4a32      	ldr	r2, [pc, #200]	; (8000858 <HCI_TL_SPI_Receive+0xec>)
 8000790:	6811      	ldr	r1, [r2, #0]
 8000792:	6019      	str	r1, [r3, #0]
 8000794:	7912      	ldrb	r2, [r2, #4]
 8000796:	711a      	strb	r2, [r3, #4]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000798:	23a0      	movs	r3, #160	; 0xa0
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	2200      	movs	r2, #0
 800079e:	2102      	movs	r1, #2
 80007a0:	0018      	movs	r0, r3
 80007a2:	f002 fa56 	bl	8002c52 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80007a6:	240c      	movs	r4, #12
 80007a8:	1939      	adds	r1, r7, r4
 80007aa:	197b      	adds	r3, r7, r5
 80007ac:	2205      	movs	r2, #5
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 f95a 	bl	8001a68 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 80007b4:	0021      	movs	r1, r4
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d13d      	bne.n	800083a <HCI_TL_SPI_Receive+0xce>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	791b      	ldrb	r3, [r3, #4]
 80007c2:	021b      	lsls	r3, r3, #8
 80007c4:	b21a      	sxth	r2, r3
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	78db      	ldrb	r3, [r3, #3]
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	4313      	orrs	r3, r2
 80007ce:	b21a      	sxth	r2, r3
 80007d0:	211e      	movs	r1, #30
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	801a      	strh	r2, [r3, #0]

    if(byte_count > 0)
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d02d      	beq.n	800083a <HCI_TL_SPI_Receive+0xce>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 80007de:	187a      	adds	r2, r7, r1
 80007e0:	1cbb      	adds	r3, r7, #2
 80007e2:	8812      	ldrh	r2, [r2, #0]
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d903      	bls.n	80007f2 <HCI_TL_SPI_Receive+0x86>
        byte_count = size;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	1cba      	adds	r2, r7, #2
 80007ee:	8812      	ldrh	r2, [r2, #0]
 80007f0:	801a      	strh	r2, [r3, #0]
      }

      for(len = 0; len < byte_count; len++)
 80007f2:	231d      	movs	r3, #29
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
 80007fa:	e015      	b.n	8000828 <HCI_TL_SPI_Receive+0xbc>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80007fc:	241b      	movs	r4, #27
 80007fe:	1939      	adds	r1, r7, r4
 8000800:	231c      	movs	r3, #28
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	2201      	movs	r2, #1
 8000806:	0018      	movs	r0, r3
 8000808:	f001 f92e 	bl	8001a68 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 800080c:	211d      	movs	r1, #29
 800080e:	187b      	adds	r3, r7, r1
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	18d3      	adds	r3, r2, r3
 8000816:	193a      	adds	r2, r7, r4
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	b2d2      	uxtb	r2, r2
 800081c:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 800081e:	187b      	adds	r3, r7, r1
 8000820:	781a      	ldrb	r2, [r3, #0]
 8000822:	187b      	adds	r3, r7, r1
 8000824:	3201      	adds	r2, #1
 8000826:	701a      	strb	r2, [r3, #0]
 8000828:	231d      	movs	r3, #29
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b29b      	uxth	r3, r3
 8000830:	221e      	movs	r2, #30
 8000832:	18ba      	adds	r2, r7, r2
 8000834:	8812      	ldrh	r2, [r2, #0]
 8000836:	429a      	cmp	r2, r3
 8000838:	d8e0      	bhi.n	80007fc <HCI_TL_SPI_Receive+0x90>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800083a:	23a0      	movs	r3, #160	; 0xa0
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	2201      	movs	r2, #1
 8000840:	2102      	movs	r1, #2
 8000842:	0018      	movs	r0, r3
 8000844:	f002 fa05 	bl	8002c52 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8000848:	231d      	movs	r3, #29
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	781b      	ldrb	r3, [r3, #0]
}
 800084e:	0018      	movs	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	b008      	add	sp, #32
 8000854:	bdb0      	pop	{r4, r5, r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	08007560 	.word	0x08007560

0800085c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b089      	sub	sp, #36	; 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	000a      	movs	r2, r1
 8000866:	1cbb      	adds	r3, r7, #2
 8000868:	801a      	strh	r2, [r3, #0]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800086a:	2310      	movs	r3, #16
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	4a27      	ldr	r2, [pc, #156]	; (800090c <HCI_TL_SPI_Send+0xb0>)
 8000870:	6811      	ldr	r1, [r2, #0]
 8000872:	6019      	str	r1, [r3, #0]
 8000874:	7912      	ldrb	r2, [r2, #4]
 8000876:	711a      	strb	r2, [r3, #4]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000878:	f001 fbfe 	bl	8002078 <HAL_GetTick>
 800087c:	0003      	movs	r3, r0
 800087e:	61bb      	str	r3, [r7, #24]

  do
  {
    result = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000884:	23a0      	movs	r3, #160	; 0xa0
 8000886:	05db      	lsls	r3, r3, #23
 8000888:	2200      	movs	r2, #0
 800088a:	2102      	movs	r1, #2
 800088c:	0018      	movs	r0, r3
 800088e:	f002 f9e0 	bl	8002c52 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000892:	2408      	movs	r4, #8
 8000894:	1939      	adds	r1, r7, r4
 8000896:	2310      	movs	r3, #16
 8000898:	18fb      	adds	r3, r7, r3
 800089a:	2205      	movs	r2, #5
 800089c:	0018      	movs	r0, r3
 800089e:	f001 f8e3 	bl	8001a68 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 80008a2:	0022      	movs	r2, r4
 80008a4:	18bb      	adds	r3, r7, r2
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d112      	bne.n	80008d2 <HCI_TL_SPI_Send+0x76>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80008ac:	18bb      	adds	r3, r7, r2
 80008ae:	785b      	ldrb	r3, [r3, #1]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	1cba      	adds	r2, r7, #2
 80008b4:	8812      	ldrh	r2, [r2, #0]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d807      	bhi.n	80008ca <HCI_TL_SPI_Send+0x6e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80008ba:	1cbb      	adds	r3, r7, #2
 80008bc:	881a      	ldrh	r2, [r3, #0]
 80008be:	4914      	ldr	r1, [pc, #80]	; (8000910 <HCI_TL_SPI_Send+0xb4>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	0018      	movs	r0, r3
 80008c4:	f001 f8d0 	bl	8001a68 <BSP_SPI1_SendRecv>
 80008c8:	e006      	b.n	80008d8 <HCI_TL_SPI_Send+0x7c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	425b      	negs	r3, r3
 80008ce:	61fb      	str	r3, [r7, #28]
 80008d0:	e002      	b.n	80008d8 <HCI_TL_SPI_Send+0x7c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	425b      	negs	r3, r3
 80008d6:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80008d8:	23a0      	movs	r3, #160	; 0xa0
 80008da:	05db      	lsls	r3, r3, #23
 80008dc:	2201      	movs	r2, #1
 80008de:	2102      	movs	r1, #2
 80008e0:	0018      	movs	r0, r3
 80008e2:	f002 f9b6 	bl	8002c52 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80008e6:	f001 fbc7 	bl	8002078 <HAL_GetTick>
 80008ea:	0002      	movs	r2, r0
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d903      	bls.n	80008fc <HCI_TL_SPI_Send+0xa0>
    {
      result = -3;
 80008f4:	2303      	movs	r3, #3
 80008f6:	425b      	negs	r3, r3
 80008f8:	61fb      	str	r3, [r7, #28]
      break;
 80008fa:	e002      	b.n	8000902 <HCI_TL_SPI_Send+0xa6>
    }
  } while(result < 0);
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	dbbe      	blt.n	8000880 <HCI_TL_SPI_Send+0x24>

  return result;
 8000902:	69fb      	ldr	r3, [r7, #28]
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	b009      	add	sp, #36	; 0x24
 800090a:	bd90      	pop	{r4, r7, pc}
 800090c:	08007568 	.word	0x08007568
 8000910:	20000180 	.word	0x20000180

08000914 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000918:	23a0      	movs	r3, #160	; 0xa0
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	2101      	movs	r1, #1
 800091e:	0018      	movs	r0, r3
 8000920:	f002 f97a 	bl	8002c18 <HAL_GPIO_ReadPin>
 8000924:	0003      	movs	r3, r0
 8000926:	3b01      	subs	r3, #1
 8000928:	425a      	negs	r2, r3
 800092a:	4153      	adcs	r3, r2
 800092c:	b2db      	uxtb	r3, r3
}
 800092e:	0018      	movs	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4a16      	ldr	r2, [pc, #88]	; (8000998 <hci_tl_lowlevel_init+0x64>)
 800093e:	601a      	str	r2, [r3, #0]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	4a16      	ldr	r2, [pc, #88]	; (800099c <hci_tl_lowlevel_init+0x68>)
 8000944:	605a      	str	r2, [r3, #4]
  fops.Send    = HCI_TL_SPI_Send;
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <hci_tl_lowlevel_init+0x6c>)
 800094a:	611a      	str	r2, [r3, #16]
  fops.Receive = HCI_TL_SPI_Receive;
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <hci_tl_lowlevel_init+0x70>)
 8000950:	60da      	str	r2, [r3, #12]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <hci_tl_lowlevel_init+0x74>)
 8000956:	609a      	str	r2, [r3, #8]
  fops.GetTick = BSP_GetTick;
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4a14      	ldr	r2, [pc, #80]	; (80009ac <hci_tl_lowlevel_init+0x78>)
 800095c:	619a      	str	r2, [r3, #24]

  hci_register_io_bus (&fops);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	0018      	movs	r0, r3
 8000962:	f005 fadb 	bl	8005f1c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8000966:	23c0      	movs	r3, #192	; 0xc0
 8000968:	04da      	lsls	r2, r3, #19
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <hci_tl_lowlevel_init+0x7c>)
 800096c:	0011      	movs	r1, r2
 800096e:	0018      	movs	r0, r3
 8000970:	f001 fcc0 	bl	80022f4 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000974:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <hci_tl_lowlevel_init+0x80>)
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <hci_tl_lowlevel_init+0x7c>)
 8000978:	2100      	movs	r1, #0
 800097a:	0018      	movs	r0, r3
 800097c:	f001 fc88 	bl	8002290 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2005      	movs	r0, #5
 8000986:	f001 fc51 	bl	800222c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800098a:	2005      	movs	r0, #5
 800098c:	f001 fc63 	bl	8002256 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b008      	add	sp, #32
 8000996:	bd80      	pop	{r7, pc}
 8000998:	08000645 	.word	0x08000645
 800099c:	080006f1 	.word	0x080006f1
 80009a0:	0800085d 	.word	0x0800085d
 80009a4:	0800076d 	.word	0x0800076d
 80009a8:	08000725 	.word	0x08000725
 80009ac:	08001aa9 	.word	0x08001aa9
 80009b0:	20000174 	.word	0x20000174
 80009b4:	080009b9 	.word	0x080009b9

080009b8 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80009bc:	e004      	b.n	80009c8 <hci_tl_lowlevel_isr+0x10>
  {
    if (hci_notify_asynch_evt(NULL))
 80009be:	2000      	movs	r0, #0
 80009c0:	f005 fc2a 	bl	8006218 <hci_notify_asynch_evt>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d104      	bne.n	80009d2 <hci_tl_lowlevel_isr+0x1a>
  while(IsDataAvailable())
 80009c8:	f7ff ffa4 	bl	8000914 <IsDataAvailable>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d1f6      	bne.n	80009be <hci_tl_lowlevel_isr+0x6>
 80009d0:	e000      	b.n	80009d4 <hci_tl_lowlevel_isr+0x1c>
    {
      return;
 80009d2:	46c0      	nop			; (mov r8, r8)
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <BlueNRG_Init>:
extern uint8_t notification_enabled;

/*
 * Initialization task
 */
void BlueNRG_Init(void){
 80009d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	af02      	add	r7, sp, #8
	tBleStatus ret;
	uint8_t bdaddr[BDADDR_SIZE];
	const char *name = "MyBLE";
 80009de:	4b47      	ldr	r3, [pc, #284]	; (8000afc <BlueNRG_Init+0x124>)
 80009e0:	617b      	str	r3, [r7, #20]

	uint16_t service_handle, dev_name_char_handle, appearance_char_handle; // handlers of GAP service

	BLUENRG_memcpy(bdaddr, SERVER_BDADDRR, sizeof(SERVER_BDADDRR));
 80009e2:	250c      	movs	r5, #12
 80009e4:	197b      	adds	r3, r7, r5
 80009e6:	4a46      	ldr	r2, [pc, #280]	; (8000b00 <BlueNRG_Init+0x128>)
 80009e8:	6811      	ldr	r1, [r2, #0]
 80009ea:	6019      	str	r1, [r3, #0]
 80009ec:	8892      	ldrh	r2, [r2, #4]
 80009ee:	809a      	strh	r2, [r3, #4]


	/* Init HCI */
	hci_init(HCI_Event_CB,  NULL);
 80009f0:	4b44      	ldr	r3, [pc, #272]	; (8000b04 <BlueNRG_Init+0x12c>)
 80009f2:	2100      	movs	r1, #0
 80009f4:	0018      	movs	r0, r3
 80009f6:	f005 fa45 	bl	8005e84 <hci_init>

	/* Reset HCI */
	hci_reset();
 80009fa:	f005 f923 	bl	8005c44 <hci_reset>
	HAL_Delay(100);
 80009fe:	2064      	movs	r0, #100	; 0x64
 8000a00:	f001 fb44 	bl	800208c <HAL_Delay>

	printf("Start initialization... \n\r");
 8000a04:	4b40      	ldr	r3, [pc, #256]	; (8000b08 <BlueNRG_Init+0x130>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f006 f870 	bl	8006aec <iprintf>
	fflush(stdout);
 8000a0c:	4b3f      	ldr	r3, [pc, #252]	; (8000b0c <BlueNRG_Init+0x134>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	0018      	movs	r0, r3
 8000a14:	f005 fe38 	bl	8006688 <fflush>

	/* Configure device address */
	 ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8000a18:	2613      	movs	r6, #19
 8000a1a:	19bc      	adds	r4, r7, r6
 8000a1c:	197b      	adds	r3, r7, r5
 8000a1e:	001a      	movs	r2, r3
 8000a20:	2106      	movs	r1, #6
 8000a22:	2000      	movs	r0, #0
 8000a24:	f005 f8a5 	bl	8005b72 <aci_hal_write_config_data>
 8000a28:	0003      	movs	r3, r0
 8000a2a:	7023      	strb	r3, [r4, #0]

	if(ret != BLE_STATUS_SUCCESS){
 8000a2c:	19bb      	adds	r3, r7, r6
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d003      	beq.n	8000a3c <BlueNRG_Init+0x64>
		printf("Failed to set Public Address \n\r");
 8000a34:	4b36      	ldr	r3, [pc, #216]	; (8000b10 <BlueNRG_Init+0x138>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f006 f858 	bl	8006aec <iprintf>
	}

	/* Initialize GATT server */
	aci_gatt_init();
 8000a3c:	f004 fe16 	bl	800566c <aci_gatt_init>
	if(ret != BLE_STATUS_SUCCESS){
 8000a40:	2313      	movs	r3, #19
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <BlueNRG_Init+0x7a>
		printf("Failed to GATT Initialization \n\r");
 8000a4a:	4b32      	ldr	r3, [pc, #200]	; (8000b14 <BlueNRG_Init+0x13c>)
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f006 f84d 	bl	8006aec <iprintf>
	}

	/* Initialize GAP service */
	ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle); //2nd arg -> privacy (0: no, 1: yes)
 8000a52:	2513      	movs	r5, #19
 8000a54:	197c      	adds	r4, r7, r5
 8000a56:	230a      	movs	r3, #10
 8000a58:	18fa      	adds	r2, r7, r3
 8000a5a:	1dbb      	adds	r3, r7, #6
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	2308      	movs	r3, #8
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	0013      	movs	r3, r2
 8000a66:	2207      	movs	r2, #7
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f004 fc78 	bl	8005360 <aci_gap_init_IDB05A1>
 8000a70:	0003      	movs	r3, r0
 8000a72:	7023      	strb	r3, [r4, #0]
	//ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle,  &appearance_char_handle);

	if(ret != BLE_STATUS_SUCCESS){
 8000a74:	197b      	adds	r3, r7, r5
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d003      	beq.n	8000a84 <BlueNRG_Init+0xac>
		printf("Failed to Initialize GAP Service\n\r");
 8000a7c:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <BlueNRG_Init+0x140>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f006 f834 	bl	8006aec <iprintf>
	}


	/* Update characteristics */
	ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8000a84:	230a      	movs	r3, #10
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	881d      	ldrh	r5, [r3, #0]
 8000a8a:	2308      	movs	r3, #8
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	881e      	ldrh	r6, [r3, #0]
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	0018      	movs	r0, r3
 8000a94:	f7ff fb38 	bl	8000108 <strlen>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	2313      	movs	r3, #19
 8000a9e:	18fc      	adds	r4, r7, r3
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	0013      	movs	r3, r2
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	0031      	movs	r1, r6
 8000aaa:	0028      	movs	r0, r5
 8000aac:	f004 ff86 	bl	80059bc <aci_gatt_update_char_value>
 8000ab0:	0003      	movs	r3, r0
 8000ab2:	7023      	strb	r3, [r4, #0]
	if(ret != BLE_STATUS_SUCCESS){
 8000ab4:	2213      	movs	r2, #19
 8000ab6:	18bb      	adds	r3, r7, r2
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d006      	beq.n	8000acc <BlueNRG_Init+0xf4>
		printf("Failed to Update Characteristics %d\n\r", ret);
 8000abe:	18bb      	adds	r3, r7, r2
 8000ac0:	781a      	ldrb	r2, [r3, #0]
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <BlueNRG_Init+0x144>)
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f006 f810 	bl	8006aec <iprintf>
	}

	/* Add custom service */
	ret = add_service();
 8000acc:	2513      	movs	r5, #19
 8000ace:	197c      	adds	r4, r7, r5
 8000ad0:	f000 f9a4 	bl	8000e1c <add_service>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	7023      	strb	r3, [r4, #0]
	if(ret != BLE_STATUS_SUCCESS){
 8000ad8:	197b      	adds	r3, r7, r5
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <BlueNRG_Init+0x110>
		printf("Failed to Add Service\n\r");
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <BlueNRG_Init+0x148>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f006 f802 	bl	8006aec <iprintf>
	}

	fflush(stdout);
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <BlueNRG_Init+0x134>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	0018      	movs	r0, r3
 8000af0:	f005 fdca 	bl	8006688 <fflush>
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b007      	add	sp, #28
 8000afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000afc:	08007570 	.word	0x08007570
 8000b00:	20000000 	.word	0x20000000
 8000b04:	0800183d 	.word	0x0800183d
 8000b08:	08007578 	.word	0x08007578
 8000b0c:	2000006c 	.word	0x2000006c
 8000b10:	08007594 	.word	0x08007594
 8000b14:	080075b4 	.word	0x080075b4
 8000b18:	080075d8 	.word	0x080075d8
 8000b1c:	080075fc 	.word	0x080075fc
 8000b20:	08007624 	.word	0x08007624

08000b24 <BlueNRG_Process>:


/*
 * Background task
 */
void BlueNRG_Process(void){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	userChat();
 8000b28:	f000 f806 	bl	8000b38 <userChat>

	/* Process user event */
	hci_user_evt_proc();
 8000b2c:	f005 fb46 	bl	80061bc <hci_user_evt_proc>

}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <userChat>:

uint8_t btn_state;
static void userChat(void){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
	if(set_connectable){
 8000b3e:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <userChat+0x60>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d004      	beq.n	8000b50 <userChat+0x18>
		Enable_Advertising();
 8000b46:	f000 f833 	bl	8000bb0 <Enable_Advertising>
		set_connectable = FALSE;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <userChat+0x60>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
	}

	//printf("%lu, %d\n\r", connected, notification_enabled);
	btn_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	019b      	lsls	r3, r3, #6
 8000b54:	4a11      	ldr	r2, [pc, #68]	; (8000b9c <userChat+0x64>)
 8000b56:	0019      	movs	r1, r3
 8000b58:	0010      	movs	r0, r2
 8000b5a:	f002 f85d 	bl	8002c18 <HAL_GPIO_ReadPin>
 8000b5e:	0003      	movs	r3, r0
 8000b60:	001a      	movs	r2, r3
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <userChat+0x68>)
 8000b64:	701a      	strb	r2, [r3, #0]
	if( connected && notification_enabled && btn_state == GPIO_PIN_RESET){
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <userChat+0x6c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d00f      	beq.n	8000b8e <userChat+0x56>
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <userChat+0x70>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d00b      	beq.n	8000b8e <userChat+0x56>
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <userChat+0x68>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d107      	bne.n	8000b8e <userChat+0x56>
		uint8_t data[2] = {'a','a'};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <userChat+0x74>)
 8000b82:	801a      	strh	r2, [r3, #0]
		send_data(data, sizeof(data));
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2102      	movs	r1, #2
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 fd49 	bl	8001620 <send_data>
	}


}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	20000058 	.word	0x20000058
 8000b9c:	50000800 	.word	0x50000800
 8000ba0:	2000027f 	.word	0x2000027f
 8000ba4:	2000028c 	.word	0x2000028c
 8000ba8:	20000292 	.word	0x20000292
 8000bac:	00006161 	.word	0x00006161

08000bb0 <Enable_Advertising>:

static void Enable_Advertising(void){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af08      	add	r7, sp, #32
	char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'B', 'L', 'E', '-', 'G', '-', 'U', 'P'};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <Enable_Advertising+0x4c>)
 8000bba:	ca03      	ldmia	r2!, {r0, r1}
 8000bbc:	c303      	stmia	r3!, {r0, r1}
 8000bbe:	7812      	ldrb	r2, [r2, #0]
 8000bc0:	701a      	strb	r2, [r3, #0]

	hci_le_set_scan_resp_data(0, NULL);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f005 f863 	bl	8005c90 <hci_le_set_scan_resp_data>

	/* Set device in General Discoverable mode */
	aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 8000bca:	2300      	movs	r3, #0
 8000bcc:	9306      	str	r3, [sp, #24]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9305      	str	r3, [sp, #20]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	9304      	str	r3, [sp, #16]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	9303      	str	r3, [sp, #12]
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	9302      	str	r3, [sp, #8]
 8000bde:	2309      	movs	r3, #9
 8000be0:	9301      	str	r3, [sp, #4]
 8000be2:	2300      	movs	r3, #0
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2300      	movs	r3, #0
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f004 fc22 	bl	8005436 <aci_gap_set_discoverable>
}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b004      	add	sp, #16
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	0800763c 	.word	0x0800763c

08000c00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b08b      	sub	sp, #44	; 0x2c
 8000c04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	2414      	movs	r4, #20
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	2314      	movs	r3, #20
 8000c0e:	001a      	movs	r2, r3
 8000c10:	2100      	movs	r1, #0
 8000c12:	f005 fe81 	bl	8006918 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	4b3d      	ldr	r3, [pc, #244]	; (8000d0c <MX_GPIO_Init+0x10c>)
 8000c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c1a:	4b3c      	ldr	r3, [pc, #240]	; (8000d0c <MX_GPIO_Init+0x10c>)
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
 8000c22:	4b3a      	ldr	r3, [pc, #232]	; (8000d0c <MX_GPIO_Init+0x10c>)
 8000c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c26:	2204      	movs	r2, #4
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2e:	4b37      	ldr	r3, [pc, #220]	; (8000d0c <MX_GPIO_Init+0x10c>)
 8000c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c32:	4b36      	ldr	r3, [pc, #216]	; (8000d0c <MX_GPIO_Init+0x10c>)
 8000c34:	2120      	movs	r1, #32
 8000c36:	430a      	orrs	r2, r1
 8000c38:	635a      	str	r2, [r3, #52]	; 0x34
 8000c3a:	4b34      	ldr	r3, [pc, #208]	; (8000d0c <MX_GPIO_Init+0x10c>)
 8000c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3e:	2220      	movs	r2, #32
 8000c40:	4013      	ands	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <MX_GPIO_Init+0x10c>)
 8000c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c4a:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <MX_GPIO_Init+0x10c>)
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	635a      	str	r2, [r3, #52]	; 0x34
 8000c52:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <MX_GPIO_Init+0x10c>)
 8000c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c56:	2201      	movs	r2, #1
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <MX_GPIO_Init+0x10c>)
 8000c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <MX_GPIO_Init+0x10c>)
 8000c64:	2102      	movs	r1, #2
 8000c66:	430a      	orrs	r2, r1
 8000c68:	635a      	str	r2, [r3, #52]	; 0x34
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <MX_GPIO_Init+0x10c>)
 8000c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c6e:	2202      	movs	r2, #2
 8000c70:	4013      	ands	r3, r2
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8000c76:	2381      	movs	r3, #129	; 0x81
 8000c78:	0059      	lsls	r1, r3, #1
 8000c7a:	23a0      	movs	r3, #160	; 0xa0
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	2200      	movs	r2, #0
 8000c80:	0018      	movs	r0, r3
 8000c82:	f001 ffe6 	bl	8002c52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	0192      	lsls	r2, r2, #6
 8000c8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	2201      	movs	r2, #1
 8000c98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	4a1c      	ldr	r2, [pc, #112]	; (8000d10 <MX_GPIO_Init+0x110>)
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	0010      	movs	r0, r2
 8000ca2:	f001 fd75 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	2201      	movs	r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	2288      	movs	r2, #136	; 0x88
 8000cb0:	0352      	lsls	r2, r2, #13
 8000cb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	193a      	adds	r2, r7, r4
 8000cbc:	23a0      	movs	r3, #160	; 0xa0
 8000cbe:	05db      	lsls	r3, r3, #23
 8000cc0:	0011      	movs	r1, r2
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f001 fd64 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_1|GPIO_PIN_8;
 8000cc8:	0021      	movs	r1, r4
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2291      	movs	r2, #145	; 0x91
 8000cce:	0052      	lsls	r2, r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	187a      	adds	r2, r7, r1
 8000ce6:	23a0      	movs	r3, #160	; 0xa0
 8000ce8:	05db      	lsls	r3, r3, #23
 8000cea:	0011      	movs	r1, r2
 8000cec:	0018      	movs	r0, r3
 8000cee:	f001 fd4f 	bl	8002790 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2005      	movs	r0, #5
 8000cf8:	f001 fa98 	bl	800222c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000cfc:	2005      	movs	r0, #5
 8000cfe:	f001 faaa 	bl	8002256 <HAL_NVIC_EnableIRQ>

}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b00b      	add	sp, #44	; 0x2c
 8000d08:	bd90      	pop	{r4, r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	50000800 	.word	0x50000800

08000d14 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	425b      	negs	r3, r3
 8000d20:	1d39      	adds	r1, r7, #4
 8000d22:	4804      	ldr	r0, [pc, #16]	; (8000d34 <__io_putchar+0x20>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	f003 fc45 	bl	80045b4 <HAL_UART_Transmit>

	return ch;
 8000d2a:	687b      	ldr	r3, [r7, #4]
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000808 	.word	0x20000808

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3c:	f001 f8f4 	bl	8001f28 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d40:	f000 f81e 	bl	8000d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d44:	f7ff ff5c 	bl	8000c00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d48:	f001 f816 	bl	8001d78 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  BlueNRG_Init();
 8000d4c:	f7ff fe44 	bl	80009d8 <BlueNRG_Init>
  printf("Initialization Succesfull! \n\r");
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <main+0x3c>)
 8000d52:	0018      	movs	r0, r3
 8000d54:	f005 feca 	bl	8006aec <iprintf>
  fflush(stdout);
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <main+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f005 fc92 	bl	8006688 <fflush>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  printf("Device is now discoverable! \n\r");
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <main+0x44>)
 8000d66:	0018      	movs	r0, r3
 8000d68:	f005 fec0 	bl	8006aec <iprintf>

  while (1)
  {
	  BlueNRG_Process();
 8000d6c:	f7ff feda 	bl	8000b24 <BlueNRG_Process>
 8000d70:	e7fc      	b.n	8000d6c <main+0x34>
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	08007648 	.word	0x08007648
 8000d78:	2000006c 	.word	0x2000006c
 8000d7c:	08007668 	.word	0x08007668

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b095      	sub	sp, #84	; 0x54
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	2414      	movs	r4, #20
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	233c      	movs	r3, #60	; 0x3c
 8000d8e:	001a      	movs	r2, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	f005 fdc1 	bl	8006918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	0018      	movs	r0, r3
 8000d9a:	2310      	movs	r3, #16
 8000d9c:	001a      	movs	r2, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	f005 fdba 	bl	8006918 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f001 ff8b 	bl	8002cc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	2202      	movs	r2, #2
 8000db2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db4:	193b      	adds	r3, r7, r4
 8000db6:	2280      	movs	r2, #128	; 0x80
 8000db8:	0052      	lsls	r2, r2, #1
 8000dba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	2240      	movs	r2, #64	; 0x40
 8000dc6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dc8:	193b      	adds	r3, r7, r4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f002 f83f 	bl	8002e54 <HAL_RCC_OscConfig>
 8000dd6:	1e03      	subs	r3, r0, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000dda:	f000 f819 	bl	8000e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2200      	movs	r2, #0
 8000de8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2100      	movs	r1, #0
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f002 fb8a 	bl	8003514 <HAL_RCC_ClockConfig>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000e04:	f000 f804 	bl	8000e10 <Error_Handler>
  }
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b015      	add	sp, #84	; 0x54
 8000e0e:	bd90      	pop	{r4, r7, pc}

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <Error_Handler+0x8>
	...

08000e1c <add_service>:
ConnectionStatus connection_status = IDLE;

uint64_t data_to_flash[160];
uint8_t consd = -1;

tBleStatus add_service(void){
 8000e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1e:	b09d      	sub	sp, #116	; 0x74
 8000e20:	af06      	add	r7, sp, #24
	tBleStatus ret;
	Service_UUID_t first_service_uuid, chat_service_uuid;
	Char_UUID_t ff_char_uuid, rx_char_uuid, tx_char_uuid;

	BLUENRG_memcpy(&first_service_uuid.Service_UUID_128, FIRST_SERVICE_UUID, 16);
 8000e22:	2144      	movs	r1, #68	; 0x44
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	4a41      	ldr	r2, [pc, #260]	; (8000f2c <add_service+0x110>)
 8000e28:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e2a:	c331      	stmia	r3!, {r0, r4, r5}
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	601a      	str	r2, [r3, #0]
	BLUENRG_memcpy(&chat_service_uuid.Service_UUID_128, CHAT_SERVICE_UUID, 16);
 8000e30:	2634      	movs	r6, #52	; 0x34
 8000e32:	19bb      	adds	r3, r7, r6
 8000e34:	4a3e      	ldr	r2, [pc, #248]	; (8000f30 <add_service+0x114>)
 8000e36:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e38:	c331      	stmia	r3!, {r0, r4, r5}
 8000e3a:	6812      	ldr	r2, [r2, #0]
 8000e3c:	601a      	str	r2, [r3, #0]

	BLUENRG_memcpy(ff_char_uuid.Char_UUID_128, FF_CHAR_UUID, 16);
 8000e3e:	2324      	movs	r3, #36	; 0x24
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	4a3c      	ldr	r2, [pc, #240]	; (8000f34 <add_service+0x118>)
 8000e44:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e46:	c331      	stmia	r3!, {r0, r4, r5}
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	601a      	str	r2, [r3, #0]
	BLUENRG_memcpy(rx_char_uuid.Char_UUID_128, RX_CHAR_UUID, 16);
 8000e4c:	2214      	movs	r2, #20
 8000e4e:	18bb      	adds	r3, r7, r2
 8000e50:	4a39      	ldr	r2, [pc, #228]	; (8000f38 <add_service+0x11c>)
 8000e52:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e54:	c331      	stmia	r3!, {r0, r4, r5}
 8000e56:	6812      	ldr	r2, [r2, #0]
 8000e58:	601a      	str	r2, [r3, #0]
	BLUENRG_memcpy(tx_char_uuid.Char_UUID_128, TX_CHAR_UUID, 16);
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	4a37      	ldr	r2, [pc, #220]	; (8000f3c <add_service+0x120>)
 8000e5e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e60:	c331      	stmia	r3!, {r0, r4, r5}
 8000e62:	6812      	ldr	r2, [r2, #0]
 8000e64:	601a      	str	r2, [r3, #0]


	/* ---- Add First Service ---- */
	ret = aci_gatt_add_serv(UUID_TYPE_128, first_service_uuid.Service_UUID_128, PRIMARY_SERVICE, 7, &first_service_handle);
 8000e66:	2557      	movs	r5, #87	; 0x57
 8000e68:	197c      	adds	r4, r7, r5
 8000e6a:	1879      	adds	r1, r7, r1
 8000e6c:	4b34      	ldr	r3, [pc, #208]	; (8000f40 <add_service+0x124>)
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2307      	movs	r3, #7
 8000e72:	2201      	movs	r2, #1
 8000e74:	2002      	movs	r0, #2
 8000e76:	f004 fc20 	bl	80056ba <aci_gatt_add_serv>
 8000e7a:	0003      	movs	r3, r0
 8000e7c:	7023      	strb	r3, [r4, #0]

	/* Add Characteristic */
	ret = aci_gatt_add_char(first_service_handle, UUID_TYPE_128, ff_char_uuid.Char_UUID_128, DATA_LEN, CHAR_PROP_READ, ATTR_PERMISSION_NONE, GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP, 16, 0, &ff_char_handle);
 8000e7e:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <add_service+0x124>)
 8000e80:	8818      	ldrh	r0, [r3, #0]
 8000e82:	197c      	adds	r4, r7, r5
 8000e84:	2324      	movs	r3, #36	; 0x24
 8000e86:	18fa      	adds	r2, r7, r3
 8000e88:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <add_service+0x128>)
 8000e8a:	9305      	str	r3, [sp, #20]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	9304      	str	r3, [sp, #16]
 8000e90:	2310      	movs	r3, #16
 8000e92:	9303      	str	r3, [sp, #12]
 8000e94:	2304      	movs	r3, #4
 8000e96:	9302      	str	r3, [sp, #8]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	f004 fca4 	bl	80057f0 <aci_gatt_add_char>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	7023      	strb	r3, [r4, #0]


	/* ---- Add Second Service ---- */
	ret = aci_gatt_add_serv(UUID_TYPE_128, chat_service_uuid.Service_UUID_128, PRIMARY_SERVICE, 7, &chat_service_handle);
 8000eac:	197c      	adds	r4, r7, r5
 8000eae:	19b9      	adds	r1, r7, r6
 8000eb0:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <add_service+0x12c>)
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f004 fbfe 	bl	80056ba <aci_gatt_add_serv>
 8000ebe:	0003      	movs	r3, r0
 8000ec0:	7023      	strb	r3, [r4, #0]

	/* Add Characteristics */
	ret = aci_gatt_add_char(chat_service_handle, UUID_TYPE_128, rx_char_uuid.Char_UUID_128, CHAT_DATA_LEN, CHAR_PROP_WRITE_WITHOUT_RESP | CHAR_PROP_WRITE, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,16, 1, &rx_char_handle);
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <add_service+0x12c>)
 8000ec4:	8818      	ldrh	r0, [r3, #0]
 8000ec6:	197c      	adds	r4, r7, r5
 8000ec8:	2214      	movs	r2, #20
 8000eca:	18ba      	adds	r2, r7, r2
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <add_service+0x130>)
 8000ece:	9305      	str	r3, [sp, #20]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	9304      	str	r3, [sp, #16]
 8000ed4:	2310      	movs	r3, #16
 8000ed6:	9303      	str	r3, [sp, #12]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	9302      	str	r3, [sp, #8]
 8000edc:	2300      	movs	r3, #0
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	230c      	movs	r3, #12
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2314      	movs	r3, #20
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	f004 fc82 	bl	80057f0 <aci_gatt_add_char>
 8000eec:	0003      	movs	r3, r0
 8000eee:	7023      	strb	r3, [r4, #0]

	ret = aci_gatt_add_char(chat_service_handle, UUID_TYPE_128, tx_char_uuid.Char_UUID_128, CHAT_DATA_LEN, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0, 16, 1, &tx_char_handle);
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <add_service+0x12c>)
 8000ef2:	8818      	ldrh	r0, [r3, #0]
 8000ef4:	197c      	adds	r4, r7, r5
 8000ef6:	1d3a      	adds	r2, r7, #4
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <add_service+0x134>)
 8000efa:	9305      	str	r3, [sp, #20]
 8000efc:	2301      	movs	r3, #1
 8000efe:	9304      	str	r3, [sp, #16]
 8000f00:	2310      	movs	r3, #16
 8000f02:	9303      	str	r3, [sp, #12]
 8000f04:	2300      	movs	r3, #0
 8000f06:	9302      	str	r3, [sp, #8]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2314      	movs	r3, #20
 8000f12:	2102      	movs	r1, #2
 8000f14:	f004 fc6c 	bl	80057f0 <aci_gatt_add_char>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	7023      	strb	r3, [r4, #0]

	Erase_Application_Memory();
 8000f1c:	f000 fb20 	bl	8001560 <Erase_Application_Memory>

	return ret;
 8000f20:	197b      	adds	r3, r7, r5
 8000f22:	781b      	ldrb	r3, [r3, #0]
}
 8000f24:	0018      	movs	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b017      	add	sp, #92	; 0x5c
 8000f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000028 	.word	0x20000028
 8000f34:	20000018 	.word	0x20000018
 8000f38:	20000038 	.word	0x20000038
 8000f3c:	20000048 	.word	0x20000048
 8000f40:	20000280 	.word	0x20000280
 8000f44:	20000282 	.word	0x20000282
 8000f48:	20000284 	.word	0x20000284
 8000f4c:	20000286 	.word	0x20000286
 8000f50:	20000288 	.word	0x20000288

08000f54 <update_ff_data>:


void update_ff_data(int16_t new_data){
 8000f54:	b5b0      	push	{r4, r5, r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	0002      	movs	r2, r0
 8000f5c:	1dbb      	adds	r3, r7, #6
 8000f5e:	801a      	strh	r2, [r3, #0]
	tBleStatus ret;

	ret = aci_gatt_update_char_value(first_service_handle, ff_char_handle, 0, DATA_LEN, (uint8_t *) &new_data);
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <update_ff_data+0x40>)
 8000f62:	8818      	ldrh	r0, [r3, #0]
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <update_ff_data+0x44>)
 8000f66:	8819      	ldrh	r1, [r3, #0]
 8000f68:	250f      	movs	r5, #15
 8000f6a:	197c      	adds	r4, r7, r5
 8000f6c:	1dbb      	adds	r3, r7, #6
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2302      	movs	r3, #2
 8000f72:	2200      	movs	r2, #0
 8000f74:	f004 fd22 	bl	80059bc <aci_gatt_update_char_value>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	7023      	strb	r3, [r4, #0]

	if(ret != BLE_STATUS_SUCCESS){
 8000f7c:	197b      	adds	r3, r7, r5
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <update_ff_data+0x38>
		printf("Error while updating ff_char value \n\r");
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <update_ff_data+0x48>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f005 fdb0 	bl	8006aec <iprintf>
	}

}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b004      	add	sp, #16
 8000f92:	bdb0      	pop	{r4, r5, r7, pc}
 8000f94:	20000280 	.word	0x20000280
 8000f98:	20000282 	.word	0x20000282
 8000f9c:	08007688 	.word	0x08007688

08000fa0 <receive_data>:


uint16_t total_pck = 0;
uint16_t count_pck = 0;
bool next_ack = true;
void receive_data(uint8_t *data_buffer, uint8_t num_bytes){
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	b08d      	sub	sp, #52	; 0x34
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	61f8      	str	r0, [r7, #28]
 8000fa8:	000a      	movs	r2, r1
 8000faa:	231b      	movs	r3, #27
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000fb0:	23a0      	movs	r3, #160	; 0xa0
 8000fb2:	05db      	lsls	r3, r3, #23
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f001 fe68 	bl	8002c8c <HAL_GPIO_TogglePin>

	int i;
	for(i=0 ; i<num_bytes && num_bytes<=CHAT_DATA_LEN ; i++){
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fc0:	e00c      	b.n	8000fdc <receive_data+0x3c>
		printf("%02x", data_buffer[i]);
 8000fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	18d3      	adds	r3, r2, r3
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	001a      	movs	r2, r3
 8000fcc:	4ba4      	ldr	r3, [pc, #656]	; (8001260 <receive_data+0x2c0>)
 8000fce:	0011      	movs	r1, r2
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f005 fd8b 	bl	8006aec <iprintf>
	for(i=0 ; i<num_bytes && num_bytes<=CHAT_DATA_LEN ; i++){
 8000fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd8:	3301      	adds	r3, #1
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fdc:	211b      	movs	r1, #27
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	da03      	bge.n	8000ff0 <receive_data+0x50>
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b14      	cmp	r3, #20
 8000fee:	d9e8      	bls.n	8000fc2 <receive_data+0x22>
	}
	printf("\n\r");
 8000ff0:	4b9c      	ldr	r3, [pc, #624]	; (8001264 <receive_data+0x2c4>)
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f005 fd7a 	bl	8006aec <iprintf>

	switch(connection_status){
 8000ff8:	4b9b      	ldr	r3, [pc, #620]	; (8001268 <receive_data+0x2c8>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d002      	beq.n	8001006 <receive_data+0x66>
 8001000:	2b02      	cmp	r3, #2
 8001002:	d036      	beq.n	8001072 <receive_data+0xd2>
 8001004:	e11b      	b.n	800123e <receive_data+0x29e>
		case CONNECTED:   // receive START FLASH MODE pck
			if(verify_data(data_buffer, num_bytes, START_FLASH_MODE) == true){
 8001006:	231b      	movs	r3, #27
 8001008:	18fb      	adds	r3, r7, r3
 800100a:	7819      	ldrb	r1, [r3, #0]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	2200      	movs	r2, #0
 8001010:	0018      	movs	r0, r3
 8001012:	f000 fa15 	bl	8001440 <verify_data>
 8001016:	0003      	movs	r3, r0
 8001018:	2b01      	cmp	r3, #1
 800101a:	d121      	bne.n	8001060 <receive_data+0xc0>
				total_pck = (data_buffer[1] << 8) + data_buffer[2];
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	3301      	adds	r3, #1
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b29a      	uxth	r2, r3
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	3302      	adds	r3, #2
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b29b      	uxth	r3, r3
 8001030:	18d3      	adds	r3, r2, r3
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b8d      	ldr	r3, [pc, #564]	; (800126c <receive_data+0x2cc>)
 8001036:	801a      	strh	r2, [r3, #0]
				printf("I expect %d packets \n\r", total_pck);
 8001038:	4b8c      	ldr	r3, [pc, #560]	; (800126c <receive_data+0x2cc>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	001a      	movs	r2, r3
 800103e:	4b8c      	ldr	r3, [pc, #560]	; (8001270 <receive_data+0x2d0>)
 8001040:	0011      	movs	r1, r2
 8001042:	0018      	movs	r0, r3
 8001044:	f005 fd52 	bl	8006aec <iprintf>


				send_ack(true, WRITE_FLASH_PACKET_RESPONSE);
 8001048:	2102      	movs	r1, #2
 800104a:	2001      	movs	r0, #1
 800104c:	f000 f9a2 	bl	8001394 <send_ack>
				connection_status = RECEVEING_FW;
 8001050:	4b85      	ldr	r3, [pc, #532]	; (8001268 <receive_data+0x2c8>)
 8001052:	2202      	movs	r2, #2
 8001054:	701a      	strb	r2, [r3, #0]
				printf("READY TO RECEIVE FW\n\r");
 8001056:	4b87      	ldr	r3, [pc, #540]	; (8001274 <receive_data+0x2d4>)
 8001058:	0018      	movs	r0, r3
 800105a:	f005 fd47 	bl	8006aec <iprintf>
				send_ack(false, WRITE_FLASH_PACKET_RESPONSE);

				printf("Received an init pck that I can't handle or wrong\n\r");
			}

			break;
 800105e:	e0f4      	b.n	800124a <receive_data+0x2aa>
				send_ack(false, WRITE_FLASH_PACKET_RESPONSE);
 8001060:	2102      	movs	r1, #2
 8001062:	2000      	movs	r0, #0
 8001064:	f000 f996 	bl	8001394 <send_ack>
				printf("Received an init pck that I can't handle or wrong\n\r");
 8001068:	4b83      	ldr	r3, [pc, #524]	; (8001278 <receive_data+0x2d8>)
 800106a:	0018      	movs	r0, r3
 800106c:	f005 fd3e 	bl	8006aec <iprintf>
			break;
 8001070:	e0eb      	b.n	800124a <receive_data+0x2aa>
		case RECEVEING_FW:
			if(verify_data(data_buffer, num_bytes, WRITE_FLASH_PACKET)){
 8001072:	231b      	movs	r3, #27
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	7819      	ldrb	r1, [r3, #0]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	2201      	movs	r2, #1
 800107c:	0018      	movs	r0, r3
 800107e:	f000 f9df 	bl	8001440 <verify_data>
 8001082:	1e03      	subs	r3, r0, #0
 8001084:	d100      	bne.n	8001088 <receive_data+0xe8>
 8001086:	e0d2      	b.n	800122e <receive_data+0x28e>
				uint16_t pck_num = (data_buffer[1] << 8) + data_buffer[2];
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	3301      	adds	r3, #1
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	b29b      	uxth	r3, r3
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	b299      	uxth	r1, r3
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	3302      	adds	r3, #2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b29a      	uxth	r2, r3
 800109c:	200e      	movs	r0, #14
 800109e:	2618      	movs	r6, #24
 80010a0:	1983      	adds	r3, r0, r6
 80010a2:	19db      	adds	r3, r3, r7
 80010a4:	188a      	adds	r2, r1, r2
 80010a6:	801a      	strh	r2, [r3, #0]

				if(pck_num == count_pck){
 80010a8:	4b74      	ldr	r3, [pc, #464]	; (800127c <receive_data+0x2dc>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	1982      	adds	r2, r0, r6
 80010ae:	19d2      	adds	r2, r2, r7
 80010b0:	8812      	ldrh	r2, [r2, #0]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d000      	beq.n	80010b8 <receive_data+0x118>
 80010b6:	e08c      	b.n	80011d2 <receive_data+0x232>
					// save msg
					for(int i=3 ; i<num_bytes-1 ; i++){
 80010b8:	2303      	movs	r3, #3
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80010bc:	e07a      	b.n	80011b4 <receive_data+0x214>
						if((i-3)%8 != 0){
 80010be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c0:	3b03      	subs	r3, #3
 80010c2:	001a      	movs	r2, r3
 80010c4:	2307      	movs	r3, #7
 80010c6:	4013      	ands	r3, r2
 80010c8:	d039      	beq.n	800113e <receive_data+0x19e>
							data_to_flash[consd] += ((uint64_t)data_buffer[i] << ((i-3)%8)*8 );
 80010ca:	4b6d      	ldr	r3, [pc, #436]	; (8001280 <receive_data+0x2e0>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4a6d      	ldr	r2, [pc, #436]	; (8001284 <receive_data+0x2e4>)
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	18d3      	adds	r3, r2, r3
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	6859      	ldr	r1, [r3, #4]
 80010d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	18d3      	adds	r3, r2, r3
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e8:	3b03      	subs	r3, #3
 80010ea:	4a67      	ldr	r2, [pc, #412]	; (8001288 <receive_data+0x2e8>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	d504      	bpl.n	80010fa <receive_data+0x15a>
 80010f0:	3b01      	subs	r3, #1
 80010f2:	2208      	movs	r2, #8
 80010f4:	4252      	negs	r2, r2
 80010f6:	4313      	orrs	r3, r2
 80010f8:	3301      	adds	r3, #1
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	001a      	movs	r2, r3
 80010fe:	3a20      	subs	r2, #32
 8001100:	2a00      	cmp	r2, #0
 8001102:	db03      	blt.n	800110c <receive_data+0x16c>
 8001104:	693e      	ldr	r6, [r7, #16]
 8001106:	4096      	lsls	r6, r2
 8001108:	0035      	movs	r5, r6
 800110a:	e008      	b.n	800111e <receive_data+0x17e>
 800110c:	2220      	movs	r2, #32
 800110e:	1ad2      	subs	r2, r2, r3
 8001110:	693e      	ldr	r6, [r7, #16]
 8001112:	40d6      	lsrs	r6, r2
 8001114:	0032      	movs	r2, r6
 8001116:	697e      	ldr	r6, [r7, #20]
 8001118:	409e      	lsls	r6, r3
 800111a:	0035      	movs	r5, r6
 800111c:	4315      	orrs	r5, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	409a      	lsls	r2, r3
 8001122:	0014      	movs	r4, r2
 8001124:	4b56      	ldr	r3, [pc, #344]	; (8001280 <receive_data+0x2e0>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	001e      	movs	r6, r3
 800112a:	0002      	movs	r2, r0
 800112c:	000b      	movs	r3, r1
 800112e:	1912      	adds	r2, r2, r4
 8001130:	416b      	adcs	r3, r5
 8001132:	4854      	ldr	r0, [pc, #336]	; (8001284 <receive_data+0x2e4>)
 8001134:	00f1      	lsls	r1, r6, #3
 8001136:	1841      	adds	r1, r0, r1
 8001138:	600a      	str	r2, [r1, #0]
 800113a:	604b      	str	r3, [r1, #4]
 800113c:	e037      	b.n	80011ae <receive_data+0x20e>
						}else{
							consd++;
 800113e:	4b50      	ldr	r3, [pc, #320]	; (8001280 <receive_data+0x2e0>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b4e      	ldr	r3, [pc, #312]	; (8001280 <receive_data+0x2e0>)
 8001148:	701a      	strb	r2, [r3, #0]
							data_to_flash[consd] = ((uint64_t)data_buffer[i] << ((i-3)%8)*8 );
 800114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	18d3      	adds	r3, r2, r3
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115a:	3b03      	subs	r3, #3
 800115c:	4a4a      	ldr	r2, [pc, #296]	; (8001288 <receive_data+0x2e8>)
 800115e:	4013      	ands	r3, r2
 8001160:	d504      	bpl.n	800116c <receive_data+0x1cc>
 8001162:	3b01      	subs	r3, #1
 8001164:	2208      	movs	r2, #8
 8001166:	4252      	negs	r2, r2
 8001168:	4313      	orrs	r3, r2
 800116a:	3301      	adds	r3, #1
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	4a44      	ldr	r2, [pc, #272]	; (8001280 <receive_data+0x2e0>)
 8001170:	7812      	ldrb	r2, [r2, #0]
 8001172:	0011      	movs	r1, r2
 8001174:	001a      	movs	r2, r3
 8001176:	3a20      	subs	r2, #32
 8001178:	2a00      	cmp	r2, #0
 800117a:	db03      	blt.n	8001184 <receive_data+0x1e4>
 800117c:	68b8      	ldr	r0, [r7, #8]
 800117e:	4090      	lsls	r0, r2
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	e00a      	b.n	800119a <receive_data+0x1fa>
 8001184:	2220      	movs	r2, #32
 8001186:	1ad2      	subs	r2, r2, r3
 8001188:	68b8      	ldr	r0, [r7, #8]
 800118a:	40d0      	lsrs	r0, r2
 800118c:	0002      	movs	r2, r0
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	4098      	lsls	r0, r3
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	4310      	orrs	r0, r2
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	409a      	lsls	r2, r3
 800119e:	603a      	str	r2, [r7, #0]
 80011a0:	4a38      	ldr	r2, [pc, #224]	; (8001284 <receive_data+0x2e4>)
 80011a2:	00cb      	lsls	r3, r1, #3
 80011a4:	18d3      	adds	r3, r2, r3
 80011a6:	6839      	ldr	r1, [r7, #0]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	6019      	str	r1, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
					for(int i=3 ; i<num_bytes-1 ; i++){
 80011ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b0:	3301      	adds	r3, #1
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80011b4:	231b      	movs	r3, #27
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011be:	429a      	cmp	r2, r3
 80011c0:	da00      	bge.n	80011c4 <receive_data+0x224>
 80011c2:	e77c      	b.n	80010be <receive_data+0x11e>
						}
						//data_to_flash[consd] = ((uint64_t)data_buffer[i] ) + ((uint64_t)data_buffer[i+1] << 8) + ((uint64_t)data_buffer[i+2] << 16) + ((uint64_t)data_buffer[i+3] << 24) + ((uint64_t)data_buffer[i+4] << 32) + ((uint64_t)data_buffer[i+5] << 40) + ((uint64_t)data_buffer[i+6] << 48) + ((uint64_t)data_buffer[i+7] << 56);
						//consd++;
					}
					count_pck++;
 80011c4:	4b2d      	ldr	r3, [pc, #180]	; (800127c <receive_data+0x2dc>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b2b      	ldr	r3, [pc, #172]	; (800127c <receive_data+0x2dc>)
 80011ce:	801a      	strh	r2, [r3, #0]
 80011d0:	e00e      	b.n	80011f0 <receive_data+0x250>
				}else{
					printf("Wrong pck_num %d, %d \n\r", pck_num, count_pck);
 80011d2:	230e      	movs	r3, #14
 80011d4:	2218      	movs	r2, #24
 80011d6:	189b      	adds	r3, r3, r2
 80011d8:	19db      	adds	r3, r3, r7
 80011da:	8819      	ldrh	r1, [r3, #0]
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <receive_data+0x2dc>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	001a      	movs	r2, r3
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <receive_data+0x2ec>)
 80011e4:	0018      	movs	r0, r3
 80011e6:	f005 fc81 	bl	8006aec <iprintf>
					next_ack = false;
 80011ea:	4b29      	ldr	r3, [pc, #164]	; (8001290 <receive_data+0x2f0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
				}

				if(count_pck%10 == 0 || count_pck == total_pck){
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <receive_data+0x2dc>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	210a      	movs	r1, #10
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7ff f81e 	bl	8000238 <__aeabi_uidivmod>
 80011fc:	000b      	movs	r3, r1
 80011fe:	b29b      	uxth	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <receive_data+0x270>
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <receive_data+0x2dc>)
 8001206:	881a      	ldrh	r2, [r3, #0]
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <receive_data+0x2cc>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	d11b      	bne.n	8001248 <receive_data+0x2a8>

					Write_FW_to_flash();
 8001210:	f000 f86e 	bl	80012f0 <Write_FW_to_flash>
					consd = -1;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <receive_data+0x2e0>)
 8001216:	22ff      	movs	r2, #255	; 0xff
 8001218:	701a      	strb	r2, [r3, #0]

					send_ack(next_ack, WRITE_FLASH_PACKET_RESPONSE);
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <receive_data+0x2f0>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2102      	movs	r1, #2
 8001220:	0018      	movs	r0, r3
 8001222:	f000 f8b7 	bl	8001394 <send_ack>
					if(next_ack == false){
						// reset the buffer properly
					}else{
						// you can save properly
					}
					next_ack = true;
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <receive_data+0x2f0>)
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
			}else{
				printf("Ricevuto pckt sbagliato \n\r");
				next_ack = false;
			}

			break;
 800122c:	e00c      	b.n	8001248 <receive_data+0x2a8>
				printf("Ricevuto pckt sbagliato \n\r");
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <receive_data+0x2f4>)
 8001230:	0018      	movs	r0, r3
 8001232:	f005 fc5b 	bl	8006aec <iprintf>
				next_ack = false;
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <receive_data+0x2f0>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
			break;
 800123c:	e004      	b.n	8001248 <receive_data+0x2a8>

		default:
			printf("Receive handle not found\n\r");
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <receive_data+0x2f8>)
 8001240:	0018      	movs	r0, r3
 8001242:	f005 fc53 	bl	8006aec <iprintf>

			break;
 8001246:	e000      	b.n	800124a <receive_data+0x2aa>
			break;
 8001248:	46c0      	nop			; (mov r8, r8)
	}
	fflush(stdout);
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <receive_data+0x2fc>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	0018      	movs	r0, r3
 8001252:	f005 fa19 	bl	8006688 <fflush>

}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b00d      	add	sp, #52	; 0x34
 800125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	080076b0 	.word	0x080076b0
 8001264:	080076b8 	.word	0x080076b8
 8001268:	20000293 	.word	0x20000293
 800126c:	20000798 	.word	0x20000798
 8001270:	080076bc 	.word	0x080076bc
 8001274:	080076d4 	.word	0x080076d4
 8001278:	080076ec 	.word	0x080076ec
 800127c:	2000079a 	.word	0x2000079a
 8001280:	20000059 	.word	0x20000059
 8001284:	20000298 	.word	0x20000298
 8001288:	80000007 	.word	0x80000007
 800128c:	08007720 	.word	0x08007720
 8001290:	2000005a 	.word	0x2000005a
 8001294:	08007738 	.word	0x08007738
 8001298:	08007754 	.word	0x08007754
 800129c:	2000006c 	.word	0x2000006c

080012a0 <go2App>:

void go2App(void){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
	uint32_t JumpAddress;
	pFunction Jump_TO_Application;

	//if(((*(uint32_t *) FLASH_APP_ADDR) & 0x2FFD8000) == 0x20000000){
		JumpAddress =  *(__IO uint32_t *) (FLASH_APP_ADDR + 4);
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <go2App+0x44>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	60fb      	str	r3, [r7, #12]
		Jump_TO_Application = (pFunction) JumpAddress;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	60bb      	str	r3, [r7, #8]


		HAL_RCC_DeInit();
 80012b0:	f001 fd54 	bl	8002d5c <HAL_RCC_DeInit>
		HAL_DeInit();
 80012b4:	f000 fe58 	bl	8001f68 <HAL_DeInit>

		SysTick->CTRL = 0;
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <go2App+0x48>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <go2App+0x48>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0;
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <go2App+0x48>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]

		__set_MSP(*(uint32_t *)FLASH_APP_ADDR);
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <go2App+0x4c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f383 8808 	msr	MSP, r3
}
 80012d6:	46c0      	nop			; (mov r8, r8)
		Jump_TO_Application();
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	4798      	blx	r3

}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b004      	add	sp, #16
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	08040004 	.word	0x08040004
 80012e8:	e000e010 	.word	0xe000e010
 80012ec:	08040000 	.word	0x08040000

080012f0 <Write_FW_to_flash>:

uint32_t StartPageAddress = 0x08040000;
void Write_FW_to_flash(void){
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;

	ret = HAL_FLASH_Unlock();
 80012f6:	1dbc      	adds	r4, r7, #6
 80012f8:	f001 f8a6 	bl	8002448 <HAL_FLASH_Unlock>
 80012fc:	0003      	movs	r3, r0
 80012fe:	7023      	strb	r3, [r4, #0]
	if(ret != HAL_OK){
 8001300:	1dbb      	adds	r3, r7, #6
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <Write_FW_to_flash+0x20>
		printf("ERROR Unlock!");
 8001308:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <Write_FW_to_flash+0x90>)
 800130a:	0018      	movs	r0, r3
 800130c:	f005 fbee 	bl	8006aec <iprintf>
	}
	HAL_FLASH_OB_Unlock();
 8001310:	f001 f8da 	bl	80024c8 <HAL_FLASH_OB_Unlock>

	uint8_t sofar = 0;
 8001314:	1dfb      	adds	r3, r7, #7
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
	uint8_t num_dwords = consd +1;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <Write_FW_to_flash+0x94>)
 800131c:	781a      	ldrb	r2, [r3, #0]
 800131e:	1d7b      	adds	r3, r7, #5
 8001320:	3201      	adds	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
	while(sofar < num_dwords){
 8001324:	e01e      	b.n	8001364 <Write_FW_to_flash+0x74>
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, StartPageAddress, data_to_flash[sofar]) == HAL_OK){
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <Write_FW_to_flash+0x98>)
 8001328:	6819      	ldr	r1, [r3, #0]
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	4a17      	ldr	r2, [pc, #92]	; (800138c <Write_FW_to_flash+0x9c>)
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	18d3      	adds	r3, r2, r3
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2001      	movs	r0, #1
 800133a:	f001 f837 	bl	80023ac <HAL_FLASH_Program>
 800133e:	1e03      	subs	r3, r0, #0
 8001340:	d10b      	bne.n	800135a <Write_FW_to_flash+0x6a>
			StartPageAddress += 8; // doubleword
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <Write_FW_to_flash+0x98>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	3308      	adds	r3, #8
 8001348:	001a      	movs	r2, r3
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <Write_FW_to_flash+0x98>)
 800134c:	601a      	str	r2, [r3, #0]
			sofar++;
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781a      	ldrb	r2, [r3, #0]
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	3201      	adds	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]
 8001358:	e004      	b.n	8001364 <Write_FW_to_flash+0x74>
		}else{
			printf("EROR!\n\r");
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <Write_FW_to_flash+0xa0>)
 800135c:	0018      	movs	r0, r3
 800135e:	f005 fbc5 	bl	8006aec <iprintf>
			return;
 8001362:	e009      	b.n	8001378 <Write_FW_to_flash+0x88>
	while(sofar < num_dwords){
 8001364:	1dfa      	adds	r2, r7, #7
 8001366:	1d7b      	adds	r3, r7, #5
 8001368:	7812      	ldrb	r2, [r2, #0]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d3da      	bcc.n	8001326 <Write_FW_to_flash+0x36>
		}
	}

	HAL_FLASH_OB_Lock();
 8001370:	f001 f8d2 	bl	8002518 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8001374:	f001 f88c 	bl	8002490 <HAL_FLASH_Lock>
}
 8001378:	46bd      	mov	sp, r7
 800137a:	b003      	add	sp, #12
 800137c:	bd90      	pop	{r4, r7, pc}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	08007770 	.word	0x08007770
 8001384:	20000059 	.word	0x20000059
 8001388:	2000005c 	.word	0x2000005c
 800138c:	20000298 	.word	0x20000298
 8001390:	08007780 	.word	0x08007780

08001394 <send_ack>:


void send_ack(bool ack, PckType reply_type){
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	0002      	movs	r2, r0
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	701a      	strb	r2, [r3, #0]
 80013a0:	1dbb      	adds	r3, r7, #6
 80013a2:	1c0a      	adds	r2, r1, #0
 80013a4:	701a      	strb	r2, [r3, #0]
	uint8_t ack_msg;

	if(ack == true){
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d104      	bne.n	80013b8 <send_ack+0x24>
		ack_msg = 0x00;
 80013ae:	230f      	movs	r3, #15
 80013b0:	18fb      	adds	r3, r7, r3
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
 80013b6:	e003      	b.n	80013c0 <send_ack+0x2c>
	}else{
		ack_msg = 0x01;
 80013b8:	230f      	movs	r3, #15
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	2201      	movs	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
	}

	uint8_t msg_len = 0;
 80013c0:	250e      	movs	r5, #14
 80013c2:	197b      	adds	r3, r7, r5
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
	switch(reply_type){
 80013c8:	1dbb      	adds	r3, r7, #6
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d12b      	bne.n	8001428 <send_ack+0x94>
		case WRITE_FLASH_PACKET_RESPONSE:
			msg_len = WRITE_FLASH_PACKET_RESPONSE_LEN;
 80013d0:	197b      	adds	r3, r7, r5
 80013d2:	2205      	movs	r2, #5
 80013d4:	701a      	strb	r2, [r3, #0]
			uint8_t msg[WRITE_FLASH_PACKET_RESPONSE_LEN];

			msg[0] = ack_msg;
 80013d6:	2108      	movs	r1, #8
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	220f      	movs	r2, #15
 80013dc:	18ba      	adds	r2, r7, r2
 80013de:	7812      	ldrb	r2, [r2, #0]
 80013e0:	701a      	strb	r2, [r3, #0]
			msg[1] = 0x00; // CMD ?!
 80013e2:	187b      	adds	r3, r7, r1
 80013e4:	2200      	movs	r2, #0
 80013e6:	705a      	strb	r2, [r3, #1]
			msg[2] = (count_pck >> 8) & 0xff;
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <send_ack+0xa4>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	709a      	strb	r2, [r3, #2]
			msg[3] = (count_pck & 0xff);
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <send_ack+0xa4>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	70da      	strb	r2, [r3, #3]
			msg[4] = sum_payload(msg, 2, 3);
 8001400:	000c      	movs	r4, r1
 8001402:	187b      	adds	r3, r7, r1
 8001404:	2203      	movs	r2, #3
 8001406:	2102      	movs	r1, #2
 8001408:	0018      	movs	r0, r3
 800140a:	f000 f877 	bl	80014fc <sum_payload>
 800140e:	0003      	movs	r3, r0
 8001410:	001a      	movs	r2, r3
 8001412:	0021      	movs	r1, r4
 8001414:	187b      	adds	r3, r7, r1
 8001416:	711a      	strb	r2, [r3, #4]

			//printf("%02x", msg);

			send_data(msg, msg_len);
 8001418:	197b      	adds	r3, r7, r5
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	187b      	adds	r3, r7, r1
 800141e:	0011      	movs	r1, r2
 8001420:	0018      	movs	r0, r3
 8001422:	f000 f8fd 	bl	8001620 <send_data>
 8001426:	e003      	b.n	8001430 <send_ack+0x9c>
			break;

		default:
			printf("Can't handle the reply_type\n\r");
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <send_ack+0xa8>)
 800142a:	0018      	movs	r0, r3
 800142c:	f005 fb5e 	bl	8006aec <iprintf>
			return;
			break;
	}

}
 8001430:	46bd      	mov	sp, r7
 8001432:	b004      	add	sp, #16
 8001434:	bdb0      	pop	{r4, r5, r7, pc}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	2000079a 	.word	0x2000079a
 800143c:	08007788 	.word	0x08007788

08001440 <verify_data>:



bool verify_data(uint8_t *data_buffer, uint8_t num_bytes, PckType expected_pck){
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	0008      	movs	r0, r1
 800144a:	0011      	movs	r1, r2
 800144c:	1cfb      	adds	r3, r7, #3
 800144e:	1c02      	adds	r2, r0, #0
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	1cbb      	adds	r3, r7, #2
 8001454:	1c0a      	adds	r2, r1, #0
 8001456:	701a      	strb	r2, [r3, #0]
	uint8_t rcv_crc = data_buffer[num_bytes-1];;
 8001458:	1cfb      	adds	r3, r7, #3
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	3b01      	subs	r3, #1
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	18d2      	adds	r2, r2, r3
 8001462:	230e      	movs	r3, #14
 8001464:	18fb      	adds	r3, r7, r3
 8001466:	7812      	ldrb	r2, [r2, #0]
 8001468:	701a      	strb	r2, [r3, #0]

	uint8_t checksum = 0;
 800146a:	230f      	movs	r3, #15
 800146c:	18fb      	adds	r3, r7, r3
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]

	switch(expected_pck){
 8001472:	1cbb      	adds	r3, r7, #2
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d002      	beq.n	8001480 <verify_data+0x40>
 800147a:	2b01      	cmp	r3, #1
 800147c:	d018      	beq.n	80014b0 <verify_data+0x70>
 800147e:	e025      	b.n	80014cc <verify_data+0x8c>
		case START_FLASH_MODE:

			/* check cmd and lenght of the msg */
			if(data_buffer[0] != START_FLASH_MODE_CMD || num_bytes != START_FLASH_MODE_LEN)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2bbb      	cmp	r3, #187	; 0xbb
 8001486:	d103      	bne.n	8001490 <verify_data+0x50>
 8001488:	1cfb      	adds	r3, r7, #3
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b04      	cmp	r3, #4
 800148e:	d001      	beq.n	8001494 <verify_data+0x54>
				return false;
 8001490:	2300      	movs	r3, #0
 8001492:	e02c      	b.n	80014ee <verify_data+0xae>

			checksum = sum_payload(data_buffer, 1, num_bytes-2); // -2 because sum_payload include end index
 8001494:	1cfb      	adds	r3, r7, #3
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	3b02      	subs	r3, #2
 800149a:	b2da      	uxtb	r2, r3
 800149c:	230f      	movs	r3, #15
 800149e:	18fc      	adds	r4, r7, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2101      	movs	r1, #1
 80014a4:	0018      	movs	r0, r3
 80014a6:	f000 f829 	bl	80014fc <sum_payload>
 80014aa:	0003      	movs	r3, r0
 80014ac:	7023      	strb	r3, [r4, #0]
			/*
			for(int i=0; i<16 && i+1<num_bytes-1 ; i++){
				checksum += data_buffer[i+1];
			}*/
			break;
 80014ae:	e013      	b.n	80014d8 <verify_data+0x98>

		case WRITE_FLASH_PACKET:
			// add controls
			checksum = sum_payload(data_buffer, 3, num_bytes-2);
 80014b0:	1cfb      	adds	r3, r7, #3
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	3b02      	subs	r3, #2
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	230f      	movs	r3, #15
 80014ba:	18fc      	adds	r4, r7, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2103      	movs	r1, #3
 80014c0:	0018      	movs	r0, r3
 80014c2:	f000 f81b 	bl	80014fc <sum_payload>
 80014c6:	0003      	movs	r3, r0
 80014c8:	7023      	strb	r3, [r4, #0]
			/*
			for(int i=0; i<16 && i+3<num_bytes-1 ; i++){
				checksum += data_buffer[i+3];
			}*/
			break;
 80014ca:	e005      	b.n	80014d8 <verify_data+0x98>

		default:
			printf("Can't verify this data\n\r");
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <verify_data+0xb8>)
 80014ce:	0018      	movs	r0, r3
 80014d0:	f005 fb0c 	bl	8006aec <iprintf>

			return false;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e00a      	b.n	80014ee <verify_data+0xae>
	}

	//printf("ck rcv: %d, clc: %d", rcv_crc, checksum);

	if(checksum == rcv_crc){
 80014d8:	230f      	movs	r3, #15
 80014da:	18fa      	adds	r2, r7, r3
 80014dc:	230e      	movs	r3, #14
 80014de:	18fb      	adds	r3, r7, r3
 80014e0:	7812      	ldrb	r2, [r2, #0]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d101      	bne.n	80014ec <verify_data+0xac>
		return true;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <verify_data+0xae>
	}else{
		return false;
 80014ec:	2300      	movs	r3, #0
	}
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b005      	add	sp, #20
 80014f4:	bd90      	pop	{r4, r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	080077a8 	.word	0x080077a8

080014fc <sum_payload>:


uint8_t sum_payload(uint8_t *payload, uint8_t start, uint8_t end){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	0008      	movs	r0, r1
 8001506:	0011      	movs	r1, r2
 8001508:	1cfb      	adds	r3, r7, #3
 800150a:	1c02      	adds	r2, r0, #0
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	1cbb      	adds	r3, r7, #2
 8001510:	1c0a      	adds	r2, r1, #0
 8001512:	701a      	strb	r2, [r3, #0]
	uint8_t sum = 0;
 8001514:	230f      	movs	r3, #15
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]

	for(int i=start; i<=end ;i++){
 800151c:	1cfb      	adds	r3, r7, #3
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	e00c      	b.n	800153e <sum_payload+0x42>
		sum += payload[i];
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	18d3      	adds	r3, r2, r3
 800152a:	7819      	ldrb	r1, [r3, #0]
 800152c:	220f      	movs	r2, #15
 800152e:	18bb      	adds	r3, r7, r2
 8001530:	18ba      	adds	r2, r7, r2
 8001532:	7812      	ldrb	r2, [r2, #0]
 8001534:	188a      	adds	r2, r1, r2
 8001536:	701a      	strb	r2, [r3, #0]
	for(int i=start; i<=end ;i++){
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	3301      	adds	r3, #1
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	1cbb      	adds	r3, r7, #2
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	429a      	cmp	r2, r3
 8001546:	dded      	ble.n	8001524 <sum_payload+0x28>
	}
	sum = sum & 0xff;
 8001548:	210f      	movs	r1, #15
 800154a:	187b      	adds	r3, r7, r1
 800154c:	187a      	adds	r2, r7, r1
 800154e:	7812      	ldrb	r2, [r2, #0]
 8001550:	701a      	strb	r2, [r3, #0]

	return sum;
 8001552:	187b      	adds	r3, r7, r1
 8001554:	781b      	ldrb	r3, [r3, #0]
}
 8001556:	0018      	movs	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	b004      	add	sp, #16
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <Erase_Application_Memory>:

void Erase_Application_Memory(void){
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint32_t PageError;

	printf("before : %x \n\r", *(volatile uint16_t*)0x08040000);
 8001566:	4b28      	ldr	r3, [pc, #160]	; (8001608 <Erase_Application_Memory+0xa8>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	001a      	movs	r2, r3
 800156e:	4b27      	ldr	r3, [pc, #156]	; (800160c <Erase_Application_Memory+0xac>)
 8001570:	0011      	movs	r1, r2
 8001572:	0018      	movs	r0, r3
 8001574:	f005 faba 	bl	8006aec <iprintf>

	ret = HAL_FLASH_Unlock();
 8001578:	2517      	movs	r5, #23
 800157a:	197c      	adds	r4, r7, r5
 800157c:	f000 ff64 	bl	8002448 <HAL_FLASH_Unlock>
 8001580:	0003      	movs	r3, r0
 8001582:	7023      	strb	r3, [r4, #0]
	if(ret != HAL_OK){
 8001584:	197b      	adds	r3, r7, r5
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <Erase_Application_Memory+0x34>
		printf("ERROR Unlock!");
 800158c:	4b20      	ldr	r3, [pc, #128]	; (8001610 <Erase_Application_Memory+0xb0>)
 800158e:	0018      	movs	r0, r3
 8001590:	f005 faac 	bl	8006aec <iprintf>
	}
	HAL_FLASH_OB_Unlock();
 8001594:	f000 ff98 	bl	80024c8 <HAL_FLASH_OB_Unlock>

	ret               = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
	*/

	/* Clear BANK_2 */
    pEraseInit.Banks     = FLASH_BANK_2;
 8001598:	003b      	movs	r3, r7
 800159a:	2280      	movs	r2, #128	; 0x80
 800159c:	0212      	lsls	r2, r2, #8
 800159e:	605a      	str	r2, [r3, #4]
    pEraseInit.NbPages   = 128;
 80015a0:	003b      	movs	r3, r7
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	60da      	str	r2, [r3, #12]
    pEraseInit.Page      = 0;
 80015a6:	003b      	movs	r3, r7
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
    pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80015ac:	003b      	movs	r3, r7
 80015ae:	2202      	movs	r2, #2
 80015b0:	601a      	str	r2, [r3, #0]
    ret = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80015b2:	2517      	movs	r5, #23
 80015b4:	197c      	adds	r4, r7, r5
 80015b6:	2310      	movs	r3, #16
 80015b8:	18fa      	adds	r2, r7, r3
 80015ba:	003b      	movs	r3, r7
 80015bc:	0011      	movs	r1, r2
 80015be:	0018      	movs	r0, r3
 80015c0:	f001 f836 	bl	8002630 <HAL_FLASHEx_Erase>
 80015c4:	0003      	movs	r3, r0
 80015c6:	7023      	strb	r3, [r4, #0]

	if(ret != HAL_OK)
 80015c8:	197b      	adds	r3, r7, r5
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <Erase_Application_Memory+0x78>
		printf("NO\n\r");
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <Erase_Application_Memory+0xb4>)
 80015d2:	0018      	movs	r0, r3
 80015d4:	f005 fa8a 	bl	8006aec <iprintf>

	fflush(stdout);
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <Erase_Application_Memory+0xb8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	0018      	movs	r0, r3
 80015e0:	f005 f852 	bl	8006688 <fflush>

	HAL_FLASH_OB_Lock();
 80015e4:	f000 ff98 	bl	8002518 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 80015e8:	f000 ff52 	bl	8002490 <HAL_FLASH_Lock>

	printf("after: %x \n\r", *(volatile uint16_t*)0x08040000);
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <Erase_Application_Memory+0xa8>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	001a      	movs	r2, r3
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <Erase_Application_Memory+0xbc>)
 80015f6:	0011      	movs	r1, r2
 80015f8:	0018      	movs	r0, r3
 80015fa:	f005 fa77 	bl	8006aec <iprintf>

}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b006      	add	sp, #24
 8001604:	bdb0      	pop	{r4, r5, r7, pc}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	08040000 	.word	0x08040000
 800160c:	080077c4 	.word	0x080077c4
 8001610:	08007770 	.word	0x08007770
 8001614:	080077d4 	.word	0x080077d4
 8001618:	2000006c 	.word	0x2000006c
 800161c:	080077dc 	.word	0x080077dc

08001620 <send_data>:

void send_data(uint8_t *data_buffer, uint8_t num_bytes){
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af02      	add	r7, sp, #8
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	000a      	movs	r2, r1
 800162a:	1cfb      	adds	r3, r7, #3
 800162c:	701a      	strb	r2, [r3, #0]
	tBleStatus ret;

	for(int i=0; i<num_bytes ; i++){
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	e00c      	b.n	800164e <send_data+0x2e>
		printf("%02x ", data_buffer[i]);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	18d3      	adds	r3, r2, r3
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	001a      	movs	r2, r3
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <send_data+0x78>)
 8001640:	0011      	movs	r1, r2
 8001642:	0018      	movs	r0, r3
 8001644:	f005 fa52 	bl	8006aec <iprintf>
	for(int i=0; i<num_bytes ; i++){
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3301      	adds	r3, #1
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	1cfb      	adds	r3, r7, #3
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	dbed      	blt.n	8001634 <send_data+0x14>
	}
	printf("\n\r");
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <send_data+0x7c>)
 800165a:	0018      	movs	r0, r3
 800165c:	f005 fa46 	bl	8006aec <iprintf>

	ret = aci_gatt_update_char_value(chat_service_handle, tx_char_handle, 0, num_bytes, data_buffer);
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <send_data+0x80>)
 8001662:	8818      	ldrh	r0, [r3, #0]
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <send_data+0x84>)
 8001666:	8819      	ldrh	r1, [r3, #0]
 8001668:	250b      	movs	r5, #11
 800166a:	197c      	adds	r4, r7, r5
 800166c:	1cfb      	adds	r3, r7, #3
 800166e:	781a      	ldrb	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	0013      	movs	r3, r2
 8001676:	2200      	movs	r2, #0
 8001678:	f004 f9a0 	bl	80059bc <aci_gatt_update_char_value>
 800167c:	0003      	movs	r3, r0
 800167e:	7023      	strb	r3, [r4, #0]

	if(ret != BLE_STATUS_SUCCESS){
 8001680:	197b      	adds	r3, r7, r5
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <send_data+0x70>
		printf("Error while updating tx_char value \n\r");
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <send_data+0x88>)
 800168a:	0018      	movs	r0, r3
 800168c:	f005 fa2e 	bl	8006aec <iprintf>
	}

}
 8001690:	46c0      	nop			; (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	b004      	add	sp, #16
 8001696:	bdb0      	pop	{r4, r5, r7, pc}
 8001698:	080077ec 	.word	0x080077ec
 800169c:	080076b8 	.word	0x080076b8
 80016a0:	20000284 	.word	0x20000284
 80016a4:	20000288 	.word	0x20000288
 80016a8:	080077f4 	.word	0x080077f4

080016ac <GAP_ConnectionComplete_CB>:

void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	000a      	movs	r2, r1
 80016b6:	1cbb      	adds	r3, r7, #2
 80016b8:	801a      	strh	r2, [r3, #0]
	connected = TRUE;
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <GAP_ConnectionComplete_CB+0x68>)
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]
	connection_handle = handle;
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <GAP_ConnectionComplete_CB+0x6c>)
 80016c2:	1cba      	adds	r2, r7, #2
 80016c4:	8812      	ldrh	r2, [r2, #0]
 80016c6:	801a      	strh	r2, [r3, #0]
	connection_status = CONNECTED;
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <GAP_ConnectionComplete_CB+0x70>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]

	printf("Connection Complete...\n\r");
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <GAP_ConnectionComplete_CB+0x74>)
 80016d0:	0018      	movs	r0, r3
 80016d2:	f005 fa0b 	bl	8006aec <iprintf>

	for(int i=5; i>=0 ; i--){
 80016d6:	2305      	movs	r3, #5
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	e00c      	b.n	80016f6 <GAP_ConnectionComplete_CB+0x4a>
		printf("%02X -", addr[i]);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	18d3      	adds	r3, r2, r3
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	001a      	movs	r2, r3
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <GAP_ConnectionComplete_CB+0x78>)
 80016e8:	0011      	movs	r1, r2
 80016ea:	0018      	movs	r0, r3
 80016ec:	f005 f9fe 	bl	8006aec <iprintf>
	for(int i=5; i>=0 ; i--){
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	daef      	bge.n	80016dc <GAP_ConnectionComplete_CB+0x30>
	}
	printf("%02X\n\r",addr[0]);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	001a      	movs	r2, r3
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <GAP_ConnectionComplete_CB+0x7c>)
 8001704:	0011      	movs	r1, r2
 8001706:	0018      	movs	r0, r3
 8001708:	f005 f9f0 	bl	8006aec <iprintf>
}
 800170c:	46c0      	nop			; (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b004      	add	sp, #16
 8001712:	bd80      	pop	{r7, pc}
 8001714:	2000028c 	.word	0x2000028c
 8001718:	20000290 	.word	0x20000290
 800171c:	20000293 	.word	0x20000293
 8001720:	0800781c 	.word	0x0800781c
 8001724:	08007838 	.word	0x08007838
 8001728:	08007840 	.word	0x08007840

0800172c <GAP_DisconnectionComplete_CB>:

void GAP_DisconnectionComplete_CB(void){
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	connected = FALSE;
 8001730:	4b10      	ldr	r3, [pc, #64]	; (8001774 <GAP_DisconnectionComplete_CB+0x48>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
	connection_status = IDLE;
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <GAP_DisconnectionComplete_CB+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
	printf("Disconnection Complete...\n\r");
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <GAP_DisconnectionComplete_CB+0x50>)
 800173e:	0018      	movs	r0, r3
 8001740:	f005 f9d4 	bl	8006aec <iprintf>
	set_connectable = TRUE;
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <GAP_DisconnectionComplete_CB+0x54>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
	notification_enabled = FALSE;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <GAP_DisconnectionComplete_CB+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]

	if(count_pck == total_pck){
 8001750:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <GAP_DisconnectionComplete_CB+0x5c>)
 8001752:	881a      	ldrh	r2, [r3, #0]
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <GAP_DisconnectionComplete_CB+0x60>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d102      	bne.n	8001762 <GAP_DisconnectionComplete_CB+0x36>
		go2App();
 800175c:	f7ff fda0 	bl	80012a0 <go2App>
	}else{
		count_pck = 0;
		consd = -1;
	}
}
 8001760:	e005      	b.n	800176e <GAP_DisconnectionComplete_CB+0x42>
		count_pck = 0;
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <GAP_DisconnectionComplete_CB+0x5c>)
 8001764:	2200      	movs	r2, #0
 8001766:	801a      	strh	r2, [r3, #0]
		consd = -1;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <GAP_DisconnectionComplete_CB+0x64>)
 800176a:	22ff      	movs	r2, #255	; 0xff
 800176c:	701a      	strb	r2, [r3, #0]
}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000028c 	.word	0x2000028c
 8001778:	20000293 	.word	0x20000293
 800177c:	08007848 	.word	0x08007848
 8001780:	20000058 	.word	0x20000058
 8001784:	20000292 	.word	0x20000292
 8001788:	2000079a 	.word	0x2000079a
 800178c:	20000798 	.word	0x20000798
 8001790:	20000059 	.word	0x20000059

08001794 <Read_Request_CB>:

void Read_Request_CB(uint16_t handle){
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	0002      	movs	r2, r0
 800179c:	1dbb      	adds	r3, r7, #6
 800179e:	801a      	strh	r2, [r3, #0]

	if(handle == ff_char_handle+1){
 80017a0:	1dbb      	adds	r3, r7, #6
 80017a2:	881a      	ldrh	r2, [r3, #0]
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <Read_Request_CB+0x3c>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d102      	bne.n	80017b4 <Read_Request_CB+0x20>
		update_ff_data(2);
 80017ae:	2002      	movs	r0, #2
 80017b0:	f7ff fbd0 	bl	8000f54 <update_ff_data>
	}

	if(connection_handle){
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <Read_Request_CB+0x40>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d004      	beq.n	80017c6 <Read_Request_CB+0x32>
		aci_gatt_allow_read(connection_handle);
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <Read_Request_CB+0x40>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f004 f99f 	bl	8005b04 <aci_gatt_allow_read>
	}
}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b002      	add	sp, #8
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	20000282 	.word	0x20000282
 80017d4:	20000290 	.word	0x20000290

080017d8 <Attribute_Modified_CB>:

void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	603a      	str	r2, [r7, #0]
 80017e0:	1dbb      	adds	r3, r7, #6
 80017e2:	1c02      	adds	r2, r0, #0
 80017e4:	801a      	strh	r2, [r3, #0]
 80017e6:	1d7b      	adds	r3, r7, #5
 80017e8:	1c0a      	adds	r2, r1, #0
 80017ea:	701a      	strb	r2, [r3, #0]
	//printf("Attribute Modified Called! %d\n\r", handle);
	//printf("RX: %d  - TX: %d\n\r", rx_char_handle, tx_char_handle);


	if(handle == rx_char_handle+1){
 80017ec:	1dbb      	adds	r3, r7, #6
 80017ee:	881a      	ldrh	r2, [r3, #0]
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <Attribute_Modified_CB+0x58>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d107      	bne.n	800180a <Attribute_Modified_CB+0x32>
		receive_data(att_data, data_length);
 80017fa:	1d7b      	adds	r3, r7, #5
 80017fc:	781a      	ldrb	r2, [r3, #0]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	0011      	movs	r1, r2
 8001802:	0018      	movs	r0, r3
 8001804:	f7ff fbcc 	bl	8000fa0 <receive_data>
		if(att_data[0] == 0x01){
			notification_enabled = TRUE;
		}

	}
}
 8001808:	e00d      	b.n	8001826 <Attribute_Modified_CB+0x4e>
	}else if(handle == tx_char_handle+2){
 800180a:	1dbb      	adds	r3, r7, #6
 800180c:	881a      	ldrh	r2, [r3, #0]
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <Attribute_Modified_CB+0x5c>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	3302      	adds	r3, #2
 8001814:	429a      	cmp	r2, r3
 8001816:	d106      	bne.n	8001826 <Attribute_Modified_CB+0x4e>
		if(att_data[0] == 0x01){
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d102      	bne.n	8001826 <Attribute_Modified_CB+0x4e>
			notification_enabled = TRUE;
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <Attribute_Modified_CB+0x60>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	46bd      	mov	sp, r7
 800182a:	b002      	add	sp, #8
 800182c:	bd80      	pop	{r7, pc}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	20000286 	.word	0x20000286
 8001834:	20000288 	.word	0x20000288
 8001838:	20000292 	.word	0x20000292

0800183c <HCI_Event_CB>:
 * @note   Inside this function each event must be identified and correctly
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void HCI_Event_CB(void *pData){
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	hci_uart_pckt *hci_pckt = (hci_uart_pckt *)pData;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	627b      	str	r3, [r7, #36]	; 0x24

	/* Process event packet */
	if(hci_pckt->type == HCI_EVENT_PKT){
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b04      	cmp	r3, #4
 800184e:	d000      	beq.n	8001852 <HCI_Event_CB+0x16>
 8001850:	e076      	b.n	8001940 <HCI_Event_CB+0x104>
		/* Get data from packet */
		hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	3301      	adds	r3, #1
 8001856:	623b      	str	r3, [r7, #32]

		switch(event_pckt->evt){
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2bff      	cmp	r3, #255	; 0xff
 800185e:	d01f      	beq.n	80018a0 <HCI_Event_CB+0x64>
 8001860:	dc65      	bgt.n	800192e <HCI_Event_CB+0xf2>
 8001862:	2b05      	cmp	r3, #5
 8001864:	d002      	beq.n	800186c <HCI_Event_CB+0x30>
 8001866:	2b3e      	cmp	r3, #62	; 0x3e
 8001868:	d003      	beq.n	8001872 <HCI_Event_CB+0x36>
 800186a:	e060      	b.n	800192e <HCI_Event_CB+0xf2>
			case EVT_DISCONN_COMPLETE:
				GAP_DisconnectionComplete_CB();
 800186c:	f7ff ff5e 	bl	800172c <GAP_DisconnectionComplete_CB>

				break;
 8001870:	e072      	b.n	8001958 <HCI_Event_CB+0x11c>

			case EVT_LE_META_EVENT:
				{
					evt_le_meta_event *evt = (evt_le_meta_event*)event_pckt->data;
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	3302      	adds	r3, #2
 8001876:	60fb      	str	r3, [r7, #12]

					switch(evt->subevent){
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d168      	bne.n	8001952 <HCI_Event_CB+0x116>


						case EVT_LE_CONN_COMPLETE:
						{
							evt_le_connection_complete *cc = (evt_le_connection_complete *)evt->data;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3301      	adds	r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
							GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	1d58      	adds	r0, r3, #5
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	785a      	ldrb	r2, [r3, #1]
 800188e:	789b      	ldrb	r3, [r3, #2]
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	4313      	orrs	r3, r2
 8001894:	b29b      	uxth	r3, r3
 8001896:	0019      	movs	r1, r3
 8001898:	f7ff ff08 	bl	80016ac <GAP_ConnectionComplete_CB>
						}
							break;
 800189c:	46c0      	nop			; (mov r8, r8)
					}
				}

				break;
 800189e:	e058      	b.n	8001952 <HCI_Event_CB+0x116>

			case EVT_VENDOR:
			{
				evt_blue_aci *blue_evt = (evt_blue_aci*)event_pckt->data;
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	3302      	adds	r3, #2
 80018a4:	61fb      	str	r3, [r7, #28]

				switch(blue_evt->ecode){
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	781a      	ldrb	r2, [r3, #0]
 80018aa:	785b      	ldrb	r3, [r3, #1]
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	4313      	orrs	r3, r2
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	4a2b      	ldr	r2, [pc, #172]	; (8001960 <HCI_Event_CB+0x124>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d009      	beq.n	80018cc <HCI_Event_CB+0x90>
 80018b8:	4a29      	ldr	r2, [pc, #164]	; (8001960 <HCI_Event_CB+0x124>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	dc4b      	bgt.n	8001956 <HCI_Event_CB+0x11a>
 80018be:	4a29      	ldr	r2, [pc, #164]	; (8001964 <HCI_Event_CB+0x128>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d010      	beq.n	80018e6 <HCI_Event_CB+0xaa>
 80018c4:	4a28      	ldr	r2, [pc, #160]	; (8001968 <HCI_Event_CB+0x12c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d01e      	beq.n	8001908 <HCI_Event_CB+0xcc>
						break;
*/
				}
			}

				break;
 80018ca:	e044      	b.n	8001956 <HCI_Event_CB+0x11a>
						evt_gatt_read_permit_req *pr = (evt_gatt_read_permit_req*)blue_evt->data;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	3302      	adds	r3, #2
 80018d0:	61bb      	str	r3, [r7, #24]
						Read_Request_CB(pr->attr_handle);
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	789a      	ldrb	r2, [r3, #2]
 80018d6:	78db      	ldrb	r3, [r3, #3]
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	4313      	orrs	r3, r2
 80018dc:	b29b      	uxth	r3, r3
 80018de:	0018      	movs	r0, r3
 80018e0:	f7ff ff58 	bl	8001794 <Read_Request_CB>
						break;
 80018e4:	e022      	b.n	800192c <HCI_Event_CB+0xf0>
						evt_gatt_attr_modified_IDB05A1 *evt =
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3302      	adds	r3, #2
 80018ea:	613b      	str	r3, [r7, #16]
						Attribute_Modified_CB(evt->attr_handle, evt->data_length,
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	789a      	ldrb	r2, [r3, #2]
 80018f0:	78db      	ldrb	r3, [r3, #3]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b298      	uxth	r0, r3
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	7919      	ldrb	r1, [r3, #4]
								evt->att_data);
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	3307      	adds	r3, #7
						Attribute_Modified_CB(evt->attr_handle, evt->data_length,
 8001900:	001a      	movs	r2, r3
 8001902:	f7ff ff69 	bl	80017d8 <Attribute_Modified_CB>
						break;
 8001906:	e011      	b.n	800192c <HCI_Event_CB+0xf0>
						printf("NON DOVREBBE ENTRARE\n\r");
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <HCI_Event_CB+0x130>)
 800190a:	0018      	movs	r0, r3
 800190c:	f005 f8ee 	bl	8006aec <iprintf>
						evt_gatt_attr_notification *evt =
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	3302      	adds	r3, #2
 8001914:	617b      	str	r3, [r7, #20]
						receive_data(evt->attr_value, evt->event_data_length - 2);
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	1d5a      	adds	r2, r3, #5
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	789b      	ldrb	r3, [r3, #2]
 800191e:	3b02      	subs	r3, #2
 8001920:	b2db      	uxtb	r3, r3
 8001922:	0019      	movs	r1, r3
 8001924:	0010      	movs	r0, r2
 8001926:	f7ff fb3b 	bl	8000fa0 <receive_data>
						break;
 800192a:	46c0      	nop			; (mov r8, r8)
				break;
 800192c:	e013      	b.n	8001956 <HCI_Event_CB+0x11a>


			default:
				printf("%d\n\r",event_pckt->evt);
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	001a      	movs	r2, r3
 8001934:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HCI_Event_CB+0x134>)
 8001936:	0011      	movs	r1, r2
 8001938:	0018      	movs	r0, r3
 800193a:	f005 f8d7 	bl	8006aec <iprintf>
				break;
 800193e:	e00b      	b.n	8001958 <HCI_Event_CB+0x11c>
		}

	}else{
		printf("pckt_type: %d", hci_pckt->type);
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	001a      	movs	r2, r3
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HCI_Event_CB+0x138>)
 8001948:	0011      	movs	r1, r2
 800194a:	0018      	movs	r0, r3
 800194c:	f005 f8ce 	bl	8006aec <iprintf>
	}
}
 8001950:	e002      	b.n	8001958 <HCI_Event_CB+0x11c>
				break;
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	e000      	b.n	8001958 <HCI_Event_CB+0x11c>
				break;
 8001956:	46c0      	nop			; (mov r8, r8)
}
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	b00a      	add	sp, #40	; 0x28
 800195e:	bd80      	pop	{r7, pc}
 8001960:	00000c14 	.word	0x00000c14
 8001964:	00000c01 	.word	0x00000c01
 8001968:	00000c0f 	.word	0x00000c0f
 800196c:	08007864 	.word	0x08007864
 8001970:	0800787c 	.word	0x0800787c
 8001974:	08007884 	.word	0x08007884

08001978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <HAL_MspInit+0x44>)
 8001980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_MspInit+0x44>)
 8001984:	2101      	movs	r1, #1
 8001986:	430a      	orrs	r2, r1
 8001988:	641a      	str	r2, [r3, #64]	; 0x40
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <HAL_MspInit+0x44>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	2201      	movs	r2, #1
 8001990:	4013      	ands	r3, r2
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_MspInit+0x44>)
 8001998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_MspInit+0x44>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	0549      	lsls	r1, r1, #21
 80019a0:	430a      	orrs	r2, r1
 80019a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_MspInit+0x44>)
 80019a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	055b      	lsls	r3, r3, #21
 80019ac:	4013      	ands	r3, r2
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b002      	add	sp, #8
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	40021000 	.word	0x40021000

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <NMI_Handler+0x4>

080019c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <HardFault_Handler+0x4>

080019cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80019d0:	46c0      	nop			; (mov r8, r8)
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e4:	f000 fb36 	bl	8002054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e8:	46c0      	nop			; (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <EXTI0_1_IRQHandler+0x14>)
 80019f6:	0018      	movs	r0, r3
 80019f8:	f000 fc8e 	bl	8002318 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	20000174 	.word	0x20000174

08001a08 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <BSP_SPI1_Init+0x54>)
 8001a14:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <BSP_SPI1_Init+0x58>)
 8001a16:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <BSP_SPI1_Init+0x5c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	1c59      	adds	r1, r3, #1
 8001a1e:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <BSP_SPI1_Init+0x5c>)
 8001a20:	6011      	str	r1, [r2, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d115      	bne.n	8001a52 <BSP_SPI1_Init+0x4a>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <BSP_SPI1_Init+0x54>)
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f002 fbeb 	bl	8004204 <HAL_SPI_GetState>
 8001a2e:	1e03      	subs	r3, r0, #0
 8001a30:	d10f      	bne.n	8001a52 <BSP_SPI1_Init+0x4a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <BSP_SPI1_Init+0x54>)
 8001a34:	0018      	movs	r0, r3
 8001a36:	f000 f887 	bl	8001b48 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d108      	bne.n	8001a52 <BSP_SPI1_Init+0x4a>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <BSP_SPI1_Init+0x54>)
 8001a42:	0018      	movs	r0, r3
 8001a44:	f000 f838 	bl	8001ab8 <MX_SPI1_Init>
 8001a48:	1e03      	subs	r3, r0, #0
 8001a4a:	d002      	beq.n	8001a52 <BSP_SPI1_Init+0x4a>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	425b      	negs	r3, r3
 8001a50:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8001a52:	687b      	ldr	r3, [r7, #4]
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b002      	add	sp, #8
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000079c 	.word	0x2000079c
 8001a60:	40013000 	.word	0x40013000
 8001a64:	20000800 	.word	0x20000800

08001a68 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	1dbb      	adds	r3, r7, #6
 8001a74:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001a7a:	1dbb      	adds	r3, r7, #6
 8001a7c:	881c      	ldrh	r4, [r3, #0]
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	68f9      	ldr	r1, [r7, #12]
 8001a82:	4808      	ldr	r0, [pc, #32]	; (8001aa4 <BSP_SPI1_SendRecv+0x3c>)
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	015b      	lsls	r3, r3, #5
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	0023      	movs	r3, r4
 8001a8c:	f002 f9e8 	bl	8003e60 <HAL_SPI_TransmitReceive>
 8001a90:	1e03      	subs	r3, r0, #0
 8001a92:	d002      	beq.n	8001a9a <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001a94:	2306      	movs	r3, #6
 8001a96:	425b      	negs	r3, r3
 8001a98:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001a9a:	697b      	ldr	r3, [r7, #20]
}
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b007      	add	sp, #28
 8001aa2:	bd90      	pop	{r4, r7, pc}
 8001aa4:	2000079c 	.word	0x2000079c

08001aa8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001aac:	f000 fae4 	bl	8002078 <HAL_GetTick>
 8001ab0:	0003      	movs	r3, r0
}
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001ac0:	240f      	movs	r4, #15
 8001ac2:	193b      	adds	r3, r7, r4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]

  hspi->Instance = SPI1;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a1e      	ldr	r2, [pc, #120]	; (8001b44 <MX_SPI1_Init+0x8c>)
 8001acc:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2282      	movs	r2, #130	; 0x82
 8001ad2:	0052      	lsls	r2, r2, #1
 8001ad4:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	22e0      	movs	r2, #224	; 0xe0
 8001ae0:	00d2      	lsls	r2, r2, #3
 8001ae2:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2280      	movs	r2, #128	; 0x80
 8001af4:	0092      	lsls	r2, r2, #2
 8001af6:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2218      	movs	r2, #24
 8001afc:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2207      	movs	r2, #7
 8001b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2208      	movs	r2, #8
 8001b20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f002 f8db 	bl	8003ce0 <HAL_SPI_Init>
 8001b2a:	1e03      	subs	r3, r0, #0
 8001b2c:	d002      	beq.n	8001b34 <MX_SPI1_Init+0x7c>
  {
    ret = HAL_ERROR;
 8001b2e:	193b      	adds	r3, r7, r4
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8001b34:	230f      	movs	r3, #15
 8001b36:	18fb      	adds	r3, r7, r3
 8001b38:	781b      	ldrb	r3, [r3, #0]
}
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b005      	add	sp, #20
 8001b40:	bd90      	pop	{r4, r7, pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	40013000 	.word	0x40013000

08001b48 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b08b      	sub	sp, #44	; 0x2c
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b50:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <SPI1_MspInit+0xe4>)
 8001b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b54:	4b35      	ldr	r3, [pc, #212]	; (8001c2c <SPI1_MspInit+0xe4>)
 8001b56:	2180      	movs	r1, #128	; 0x80
 8001b58:	0149      	lsls	r1, r1, #5
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b5e:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <SPI1_MspInit+0xe4>)
 8001b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	015b      	lsls	r3, r3, #5
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6c:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <SPI1_MspInit+0xe4>)
 8001b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b70:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <SPI1_MspInit+0xe4>)
 8001b72:	2101      	movs	r1, #1
 8001b74:	430a      	orrs	r2, r1
 8001b76:	635a      	str	r2, [r3, #52]	; 0x34
 8001b78:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <SPI1_MspInit+0xe4>)
 8001b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b84:	4b29      	ldr	r3, [pc, #164]	; (8001c2c <SPI1_MspInit+0xe4>)
 8001b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b88:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <SPI1_MspInit+0xe4>)
 8001b8a:	2102      	movs	r1, #2
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	635a      	str	r2, [r3, #52]	; 0x34
 8001b90:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <SPI1_MspInit+0xe4>)
 8001b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b94:	2202      	movs	r2, #2
 8001b96:	4013      	ands	r3, r2
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001b9c:	2414      	movs	r4, #20
 8001b9e:	193b      	adds	r3, r7, r4
 8001ba0:	2240      	movs	r2, #64	; 0x40
 8001ba2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	193b      	adds	r3, r7, r4
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	193b      	adds	r3, r7, r4
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	193b      	adds	r3, r7, r4
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001bb6:	193b      	adds	r3, r7, r4
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001bbc:	193a      	adds	r2, r7, r4
 8001bbe:	23a0      	movs	r3, #160	; 0xa0
 8001bc0:	05db      	lsls	r3, r3, #23
 8001bc2:	0011      	movs	r1, r2
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f000 fde3 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001bca:	193b      	adds	r3, r7, r4
 8001bcc:	2280      	movs	r2, #128	; 0x80
 8001bce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	193b      	adds	r3, r7, r4
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	193b      	adds	r3, r7, r4
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	193b      	adds	r3, r7, r4
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001be2:	193b      	adds	r3, r7, r4
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001be8:	193a      	adds	r2, r7, r4
 8001bea:	23a0      	movs	r3, #160	; 0xa0
 8001bec:	05db      	lsls	r3, r3, #23
 8001bee:	0011      	movs	r1, r2
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f000 fdcd 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001bf6:	0021      	movs	r1, r4
 8001bf8:	187b      	adds	r3, r7, r1
 8001bfa:	2208      	movs	r2, #8
 8001bfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	187b      	adds	r3, r7, r1
 8001c00:	2202      	movs	r2, #2
 8001c02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	187b      	adds	r3, r7, r1
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001c16:	187b      	adds	r3, r7, r1
 8001c18:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <SPI1_MspInit+0xe8>)
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	0010      	movs	r0, r2
 8001c1e:	f000 fdb7 	bl	8002790 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b00b      	add	sp, #44	; 0x2c
 8001c28:	bd90      	pop	{r4, r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	50000400 	.word	0x50000400

08001c34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	e00a      	b.n	8001c5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c46:	e000      	b.n	8001c4a <_read+0x16>
 8001c48:	bf00      	nop
 8001c4a:	0001      	movs	r1, r0
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	60ba      	str	r2, [r7, #8]
 8001c52:	b2ca      	uxtb	r2, r1
 8001c54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dbf0      	blt.n	8001c46 <_read+0x12>
	}

return len;
 8001c64:	687b      	ldr	r3, [r7, #4]
}
 8001c66:	0018      	movs	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b006      	add	sp, #24
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	e009      	b.n	8001c94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	60ba      	str	r2, [r7, #8]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7ff f843 	bl	8000d14 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	dbf1      	blt.n	8001c80 <_write+0x12>
	}
	return len;
 8001c9c:	687b      	ldr	r3, [r7, #4]
}
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b006      	add	sp, #24
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_close>:

int _close(int file)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
	return -1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	425b      	negs	r3, r3
}
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b002      	add	sp, #8
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	0192      	lsls	r2, r2, #6
 8001cca:	605a      	str	r2, [r3, #4]
	return 0;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	0018      	movs	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b002      	add	sp, #8
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <_isatty>:

int _isatty(int file)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
	return 1;
 8001cde:	2301      	movs	r3, #1
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b002      	add	sp, #8
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
	return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b004      	add	sp, #16
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <_sbrk+0x5c>)
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <_sbrk+0x60>)
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <_sbrk+0x64>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <_sbrk+0x68>)
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	18d3      	adds	r3, r2, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d207      	bcs.n	8001d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d30:	f004 fbd8 	bl	80064e4 <__errno>
 8001d34:	0003      	movs	r3, r0
 8001d36:	220c      	movs	r2, #12
 8001d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	e009      	b.n	8001d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	18d2      	adds	r2, r2, r3
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <_sbrk+0x64>)
 8001d50:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	0018      	movs	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b006      	add	sp, #24
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20024000 	.word	0x20024000
 8001d60:	00000400 	.word	0x00000400
 8001d64:	20000804 	.word	0x20000804
 8001d68:	20000bb8 	.word	0x20000bb8

08001d6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d70:	46c0      	nop			; (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d7c:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001d7e:	4a24      	ldr	r2, [pc, #144]	; (8001e10 <MX_USART2_UART_Init+0x98>)
 8001d80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001d84:	22e1      	movs	r2, #225	; 0xe1
 8001d86:	0252      	lsls	r2, r2, #9
 8001d88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d90:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001d9e:	220c      	movs	r2, #12
 8001da0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da8:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001db4:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dba:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f002 fba0 	bl	8004508 <HAL_UART_Init>
 8001dc8:	1e03      	subs	r3, r0, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001dcc:	f7ff f820 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f003 f9e3 	bl	80051a0 <HAL_UARTEx_SetTxFifoThreshold>
 8001dda:	1e03      	subs	r3, r0, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001dde:	f7ff f817 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001de2:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001de4:	2100      	movs	r1, #0
 8001de6:	0018      	movs	r0, r3
 8001de8:	f003 fa1a 	bl	8005220 <HAL_UARTEx_SetRxFifoThreshold>
 8001dec:	1e03      	subs	r3, r0, #0
 8001dee:	d001      	beq.n	8001df4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001df0:	f7ff f80e 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001df6:	0018      	movs	r0, r3
 8001df8:	f003 f998 	bl	800512c <HAL_UARTEx_DisableFifoMode>
 8001dfc:	1e03      	subs	r3, r0, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001e00:	f7ff f806 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e04:	46c0      	nop			; (mov r8, r8)
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	20000808 	.word	0x20000808
 8001e10:	40004400 	.word	0x40004400

08001e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b09d      	sub	sp, #116	; 0x74
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	235c      	movs	r3, #92	; 0x5c
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	0018      	movs	r0, r3
 8001e22:	2314      	movs	r3, #20
 8001e24:	001a      	movs	r2, r3
 8001e26:	2100      	movs	r1, #0
 8001e28:	f004 fd76 	bl	8006918 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e2c:	2410      	movs	r4, #16
 8001e2e:	193b      	adds	r3, r7, r4
 8001e30:	0018      	movs	r0, r3
 8001e32:	234c      	movs	r3, #76	; 0x4c
 8001e34:	001a      	movs	r2, r3
 8001e36:	2100      	movs	r1, #0
 8001e38:	f004 fd6e 	bl	8006918 <memset>
  if(uartHandle->Instance==USART2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <HAL_UART_MspInit+0xb8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d13e      	bne.n	8001ec4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e46:	193b      	adds	r3, r7, r4
 8001e48:	2202      	movs	r2, #2
 8001e4a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e4c:	193b      	adds	r3, r7, r4
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e52:	193b      	adds	r3, r7, r4
 8001e54:	0018      	movs	r0, r3
 8001e56:	f001 fd07 	bl	8003868 <HAL_RCCEx_PeriphCLKConfig>
 8001e5a:	1e03      	subs	r3, r0, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e5e:	f7fe ffd7 	bl	8000e10 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e62:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_UART_MspInit+0xbc>)
 8001e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e66:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <HAL_UART_MspInit+0xbc>)
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	0289      	lsls	r1, r1, #10
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e70:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_UART_MspInit+0xbc>)
 8001e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	029b      	lsls	r3, r3, #10
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_UART_MspInit+0xbc>)
 8001e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_UART_MspInit+0xbc>)
 8001e84:	2101      	movs	r1, #1
 8001e86:	430a      	orrs	r2, r1
 8001e88:	635a      	str	r2, [r3, #52]	; 0x34
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <HAL_UART_MspInit+0xbc>)
 8001e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001e96:	215c      	movs	r1, #92	; 0x5c
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	187b      	adds	r3, r7, r1
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	187b      	adds	r3, r7, r1
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	2200      	movs	r2, #0
 8001eae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001eb0:	187b      	adds	r3, r7, r1
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	187a      	adds	r2, r7, r1
 8001eb8:	23a0      	movs	r3, #160	; 0xa0
 8001eba:	05db      	lsls	r3, r3, #23
 8001ebc:	0011      	movs	r1, r2
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f000 fc66 	bl	8002790 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ec4:	46c0      	nop			; (mov r8, r8)
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b01d      	add	sp, #116	; 0x74
 8001eca:	bd90      	pop	{r4, r7, pc}
 8001ecc:	40004400 	.word	0x40004400
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ed4:	480d      	ldr	r0, [pc, #52]	; (8001f0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ed6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ed8:	f7ff ff48 	bl	8001d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001edc:	480c      	ldr	r0, [pc, #48]	; (8001f10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ede:	490d      	ldr	r1, [pc, #52]	; (8001f14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <LoopForever+0xe>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ef4:	4c0a      	ldr	r4, [pc, #40]	; (8001f20 <LoopForever+0x16>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f02:	f004 fcd9 	bl	80068b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001f06:	f7fe ff17 	bl	8000d38 <main>

08001f0a <LoopForever>:

LoopForever:
  b LoopForever
 8001f0a:	e7fe      	b.n	8001f0a <LoopForever>
  ldr   r0, =_estack
 8001f0c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f14:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001f18:	080079c4 	.word	0x080079c4
  ldr r2, =_sbss
 8001f1c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001f20:	20000bb8 	.word	0x20000bb8

08001f24 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f24:	e7fe      	b.n	8001f24 <ADC1_COMP_IRQHandler>
	...

08001f28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_Init+0x3c>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_Init+0x3c>)
 8001f3a:	2180      	movs	r1, #128	; 0x80
 8001f3c:	0049      	lsls	r1, r1, #1
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f42:	2000      	movs	r0, #0
 8001f44:	f000 f83c 	bl	8001fc0 <HAL_InitTick>
 8001f48:	1e03      	subs	r3, r0, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001f4c:	1dfb      	adds	r3, r7, #7
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
 8001f52:	e001      	b.n	8001f58 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001f54:	f7ff fd10 	bl	8001978 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f58:	1dfb      	adds	r3, r7, #7
 8001f5a:	781b      	ldrb	r3, [r3, #0]
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b002      	add	sp, #8
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40022000 	.word	0x40022000

08001f68 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001f6c:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <HAL_DeInit+0x48>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4252      	negs	r2, r2
 8001f72:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_APB1_RELEASE_RESET();
 8001f74:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <HAL_DeInit+0x48>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_APB2_FORCE_RESET();
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_DeInit+0x48>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	4252      	negs	r2, r2
 8001f80:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_APB2_RELEASE_RESET();
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_DeInit+0x48>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30

  __HAL_RCC_AHB_FORCE_RESET();
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_DeInit+0x48>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4252      	negs	r2, r2
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <HAL_DeInit+0x48>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_IOP_FORCE_RESET();
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_DeInit+0x48>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	4252      	negs	r2, r2
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_IOP_RELEASE_RESET();
 8001f9e:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <HAL_DeInit+0x48>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	625a      	str	r2, [r3, #36]	; 0x24

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001fa4:	f000 f806 	bl	8001fb4 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	0018      	movs	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fc8:	230f      	movs	r3, #15
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_InitTick+0x88>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d02b      	beq.n	8002030 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	; (800204c <HAL_InitTick+0x8c>)
 8001fda:	681c      	ldr	r4, [r3, #0]
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <HAL_InitTick+0x88>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	23fa      	movs	r3, #250	; 0xfa
 8001fe4:	0098      	lsls	r0, r3, #2
 8001fe6:	f7fe f8a1 	bl	800012c <__udivsi3>
 8001fea:	0003      	movs	r3, r0
 8001fec:	0019      	movs	r1, r3
 8001fee:	0020      	movs	r0, r4
 8001ff0:	f7fe f89c 	bl	800012c <__udivsi3>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f000 f93d 	bl	8002276 <HAL_SYSTICK_Config>
 8001ffc:	1e03      	subs	r3, r0, #0
 8001ffe:	d112      	bne.n	8002026 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d80a      	bhi.n	800201c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	2301      	movs	r3, #1
 800200a:	425b      	negs	r3, r3
 800200c:	2200      	movs	r2, #0
 800200e:	0018      	movs	r0, r3
 8002010:	f000 f90c 	bl	800222c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <HAL_InitTick+0x90>)
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	e00d      	b.n	8002038 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800201c:	230f      	movs	r3, #15
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	2201      	movs	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]
 8002024:	e008      	b.n	8002038 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002026:	230f      	movs	r3, #15
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
 800202e:	e003      	b.n	8002038 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002030:	230f      	movs	r3, #15
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002038:	230f      	movs	r3, #15
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	781b      	ldrb	r3, [r3, #0]
}
 800203e:	0018      	movs	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	b005      	add	sp, #20
 8002044:	bd90      	pop	{r4, r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	20000068 	.word	0x20000068
 800204c:	20000060 	.word	0x20000060
 8002050:	20000064 	.word	0x20000064

08002054 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_IncTick+0x1c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	001a      	movs	r2, r3
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_IncTick+0x20>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	18d2      	adds	r2, r2, r3
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_IncTick+0x20>)
 8002066:	601a      	str	r2, [r3, #0]
}
 8002068:	46c0      	nop			; (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	20000068 	.word	0x20000068
 8002074:	2000089c 	.word	0x2000089c

08002078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  return uwTick;
 800207c:	4b02      	ldr	r3, [pc, #8]	; (8002088 <HAL_GetTick+0x10>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	2000089c 	.word	0x2000089c

0800208c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff fff0 	bl	8002078 <HAL_GetTick>
 8002098:	0003      	movs	r3, r0
 800209a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3301      	adds	r3, #1
 80020a4:	d005      	beq.n	80020b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_Delay+0x44>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	001a      	movs	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	189b      	adds	r3, r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	f7ff ffe0 	bl	8002078 <HAL_GetTick>
 80020b8:	0002      	movs	r2, r0
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d8f7      	bhi.n	80020b4 <HAL_Delay+0x28>
  {
  }
}
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b004      	add	sp, #16
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	20000068 	.word	0x20000068

080020d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	0002      	movs	r2, r0
 80020dc:	1dfb      	adds	r3, r7, #7
 80020de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020e0:	1dfb      	adds	r3, r7, #7
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b7f      	cmp	r3, #127	; 0x7f
 80020e6:	d809      	bhi.n	80020fc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e8:	1dfb      	adds	r3, r7, #7
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	001a      	movs	r2, r3
 80020ee:	231f      	movs	r3, #31
 80020f0:	401a      	ands	r2, r3
 80020f2:	4b04      	ldr	r3, [pc, #16]	; (8002104 <__NVIC_EnableIRQ+0x30>)
 80020f4:	2101      	movs	r1, #1
 80020f6:	4091      	lsls	r1, r2
 80020f8:	000a      	movs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80020fc:	46c0      	nop			; (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	b002      	add	sp, #8
 8002102:	bd80      	pop	{r7, pc}
 8002104:	e000e100 	.word	0xe000e100

08002108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	0002      	movs	r2, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	1dfb      	adds	r3, r7, #7
 8002114:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002116:	1dfb      	adds	r3, r7, #7
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b7f      	cmp	r3, #127	; 0x7f
 800211c:	d828      	bhi.n	8002170 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800211e:	4a2f      	ldr	r2, [pc, #188]	; (80021dc <__NVIC_SetPriority+0xd4>)
 8002120:	1dfb      	adds	r3, r7, #7
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	b25b      	sxtb	r3, r3
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	33c0      	adds	r3, #192	; 0xc0
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	589b      	ldr	r3, [r3, r2]
 800212e:	1dfa      	adds	r2, r7, #7
 8002130:	7812      	ldrb	r2, [r2, #0]
 8002132:	0011      	movs	r1, r2
 8002134:	2203      	movs	r2, #3
 8002136:	400a      	ands	r2, r1
 8002138:	00d2      	lsls	r2, r2, #3
 800213a:	21ff      	movs	r1, #255	; 0xff
 800213c:	4091      	lsls	r1, r2
 800213e:	000a      	movs	r2, r1
 8002140:	43d2      	mvns	r2, r2
 8002142:	401a      	ands	r2, r3
 8002144:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	019b      	lsls	r3, r3, #6
 800214a:	22ff      	movs	r2, #255	; 0xff
 800214c:	401a      	ands	r2, r3
 800214e:	1dfb      	adds	r3, r7, #7
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	0018      	movs	r0, r3
 8002154:	2303      	movs	r3, #3
 8002156:	4003      	ands	r3, r0
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800215c:	481f      	ldr	r0, [pc, #124]	; (80021dc <__NVIC_SetPriority+0xd4>)
 800215e:	1dfb      	adds	r3, r7, #7
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	b25b      	sxtb	r3, r3
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	430a      	orrs	r2, r1
 8002168:	33c0      	adds	r3, #192	; 0xc0
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800216e:	e031      	b.n	80021d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002170:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <__NVIC_SetPriority+0xd8>)
 8002172:	1dfb      	adds	r3, r7, #7
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	0019      	movs	r1, r3
 8002178:	230f      	movs	r3, #15
 800217a:	400b      	ands	r3, r1
 800217c:	3b08      	subs	r3, #8
 800217e:	089b      	lsrs	r3, r3, #2
 8002180:	3306      	adds	r3, #6
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	18d3      	adds	r3, r2, r3
 8002186:	3304      	adds	r3, #4
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	1dfa      	adds	r2, r7, #7
 800218c:	7812      	ldrb	r2, [r2, #0]
 800218e:	0011      	movs	r1, r2
 8002190:	2203      	movs	r2, #3
 8002192:	400a      	ands	r2, r1
 8002194:	00d2      	lsls	r2, r2, #3
 8002196:	21ff      	movs	r1, #255	; 0xff
 8002198:	4091      	lsls	r1, r2
 800219a:	000a      	movs	r2, r1
 800219c:	43d2      	mvns	r2, r2
 800219e:	401a      	ands	r2, r3
 80021a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	019b      	lsls	r3, r3, #6
 80021a6:	22ff      	movs	r2, #255	; 0xff
 80021a8:	401a      	ands	r2, r3
 80021aa:	1dfb      	adds	r3, r7, #7
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	0018      	movs	r0, r3
 80021b0:	2303      	movs	r3, #3
 80021b2:	4003      	ands	r3, r0
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021b8:	4809      	ldr	r0, [pc, #36]	; (80021e0 <__NVIC_SetPriority+0xd8>)
 80021ba:	1dfb      	adds	r3, r7, #7
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	001c      	movs	r4, r3
 80021c0:	230f      	movs	r3, #15
 80021c2:	4023      	ands	r3, r4
 80021c4:	3b08      	subs	r3, #8
 80021c6:	089b      	lsrs	r3, r3, #2
 80021c8:	430a      	orrs	r2, r1
 80021ca:	3306      	adds	r3, #6
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	18c3      	adds	r3, r0, r3
 80021d0:	3304      	adds	r3, #4
 80021d2:	601a      	str	r2, [r3, #0]
}
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b003      	add	sp, #12
 80021da:	bd90      	pop	{r4, r7, pc}
 80021dc:	e000e100 	.word	0xe000e100
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	1e5a      	subs	r2, r3, #1
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	045b      	lsls	r3, r3, #17
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d301      	bcc.n	80021fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f8:	2301      	movs	r3, #1
 80021fa:	e010      	b.n	800221e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <SysTick_Config+0x44>)
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	3a01      	subs	r2, #1
 8002202:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002204:	2301      	movs	r3, #1
 8002206:	425b      	negs	r3, r3
 8002208:	2103      	movs	r1, #3
 800220a:	0018      	movs	r0, r3
 800220c:	f7ff ff7c 	bl	8002108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <SysTick_Config+0x44>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <SysTick_Config+0x44>)
 8002218:	2207      	movs	r2, #7
 800221a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800221c:	2300      	movs	r3, #0
}
 800221e:	0018      	movs	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	b002      	add	sp, #8
 8002224:	bd80      	pop	{r7, pc}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	e000e010 	.word	0xe000e010

0800222c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	210f      	movs	r1, #15
 8002238:	187b      	adds	r3, r7, r1
 800223a:	1c02      	adds	r2, r0, #0
 800223c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	187b      	adds	r3, r7, r1
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b25b      	sxtb	r3, r3
 8002246:	0011      	movs	r1, r2
 8002248:	0018      	movs	r0, r3
 800224a:	f7ff ff5d 	bl	8002108 <__NVIC_SetPriority>
}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	46bd      	mov	sp, r7
 8002252:	b004      	add	sp, #16
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	0002      	movs	r2, r0
 800225e:	1dfb      	adds	r3, r7, #7
 8002260:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002262:	1dfb      	adds	r3, r7, #7
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	b25b      	sxtb	r3, r3
 8002268:	0018      	movs	r0, r3
 800226a:	f7ff ff33 	bl	80020d4 <__NVIC_EnableIRQ>
}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	46bd      	mov	sp, r7
 8002272:	b002      	add	sp, #8
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	0018      	movs	r0, r3
 8002282:	f7ff ffaf 	bl	80021e4 <SysTick_Config>
 8002286:	0003      	movs	r3, r0
}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	b002      	add	sp, #8
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	200b      	movs	r0, #11
 800229c:	183b      	adds	r3, r7, r0
 800229e:	1c0a      	adds	r2, r1, #0
 80022a0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022a2:	2317      	movs	r3, #23
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 80022aa:	183b      	adds	r3, r7, r0
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d010      	beq.n	80022d4 <HAL_EXTI_RegisterCallback+0x44>
 80022b2:	dc13      	bgt.n	80022dc <HAL_EXTI_RegisterCallback+0x4c>
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <HAL_EXTI_RegisterCallback+0x2e>
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d007      	beq.n	80022cc <HAL_EXTI_RegisterCallback+0x3c>
 80022bc:	e00e      	b.n	80022dc <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	609a      	str	r2, [r3, #8]
      break;
 80022ca:	e00c      	b.n	80022e6 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	605a      	str	r2, [r3, #4]
      break;
 80022d2:	e008      	b.n	80022e6 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	609a      	str	r2, [r3, #8]
      break;
 80022da:	e004      	b.n	80022e6 <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 80022dc:	2317      	movs	r3, #23
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
      break;
 80022e4:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 80022e6:	2317      	movs	r3, #23
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	781b      	ldrb	r3, [r3, #0]
}
 80022ec:	0018      	movs	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b006      	add	sp, #24
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e003      	b.n	8002310 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800230e:	2300      	movs	r3, #0
  }
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b002      	add	sp, #8
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	0c1b      	lsrs	r3, r3, #16
 8002326:	2201      	movs	r2, #1
 8002328:	4013      	ands	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	221f      	movs	r2, #31
 8002332:	4013      	ands	r3, r2
 8002334:	2201      	movs	r2, #1
 8002336:	409a      	lsls	r2, r3
 8002338:	0013      	movs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	015b      	lsls	r3, r3, #5
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_EXTI_IRQHandler+0x8c>)
 8002342:	4694      	mov	ip, r2
 8002344:	4463      	add	r3, ip
 8002346:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d009      	beq.n	800236c <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	015b      	lsls	r3, r3, #5
 8002370:	4a0d      	ldr	r2, [pc, #52]	; (80023a8 <HAL_EXTI_IRQHandler+0x90>)
 8002372:	4694      	mov	ip, r2
 8002374:	4463      	add	r3, ip
 8002376:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d009      	beq.n	800239c <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	4798      	blx	r3
    }
  }
}
 800239c:	46c0      	nop			; (mov r8, r8)
 800239e:	46bd      	mov	sp, r7
 80023a0:	b006      	add	sp, #24
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	4002180c 	.word	0x4002180c
 80023a8:	40021810 	.word	0x40021810

080023ac <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80023ac:	b5b0      	push	{r4, r5, r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	603a      	str	r2, [r7, #0]
 80023b8:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80023ba:	4b21      	ldr	r3, [pc, #132]	; (8002440 <HAL_FLASH_Program+0x94>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_FLASH_Program+0x1a>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e038      	b.n	8002438 <HAL_FLASH_Program+0x8c>
 80023c6:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <HAL_FLASH_Program+0x94>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023cc:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <HAL_FLASH_Program+0x94>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023d2:	2517      	movs	r5, #23
 80023d4:	197c      	adds	r4, r7, r5
 80023d6:	23fa      	movs	r3, #250	; 0xfa
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	0018      	movs	r0, r3
 80023dc:	f000 f8ba 	bl	8002554 <FLASH_WaitForLastOperation>
 80023e0:	0003      	movs	r3, r0
 80023e2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80023e4:	197b      	adds	r3, r7, r5
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d11f      	bne.n	800242c <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d106      	bne.n	8002400 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68b9      	ldr	r1, [r7, #8]
 80023f8:	0008      	movs	r0, r1
 80023fa:	f000 f8f9 	bl	80025f0 <FLASH_Program_DoubleWord>
 80023fe:	e005      	b.n	800240c <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	0011      	movs	r1, r2
 8002406:	0018      	movs	r0, r3
 8002408:	f005 f8a2 	bl	8007550 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800240c:	2317      	movs	r3, #23
 800240e:	18fc      	adds	r4, r7, r3
 8002410:	23fa      	movs	r3, #250	; 0xfa
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	0018      	movs	r0, r3
 8002416:	f000 f89d 	bl	8002554 <FLASH_WaitForLastOperation>
 800241a:	0003      	movs	r3, r0
 800241c:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_FLASH_Program+0x98>)
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	43d9      	mvns	r1, r3
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <HAL_FLASH_Program+0x98>)
 8002428:	400a      	ands	r2, r1
 800242a:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <HAL_FLASH_Program+0x94>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002432:	2317      	movs	r3, #23
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	781b      	ldrb	r3, [r3, #0]
}
 8002438:	0018      	movs	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	b006      	add	sp, #24
 800243e:	bdb0      	pop	{r4, r5, r7, pc}
 8002440:	200008a0 	.word	0x200008a0
 8002444:	40022000 	.word	0x40022000

08002448 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800244e:	1dfb      	adds	r3, r7, #7
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_FLASH_Unlock+0x3c>)
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	2b00      	cmp	r3, #0
 800245a:	da0c      	bge.n	8002476 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_FLASH_Unlock+0x3c>)
 800245e:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <HAL_FLASH_Unlock+0x40>)
 8002460:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002462:	4b08      	ldr	r3, [pc, #32]	; (8002484 <HAL_FLASH_Unlock+0x3c>)
 8002464:	4a09      	ldr	r2, [pc, #36]	; (800248c <HAL_FLASH_Unlock+0x44>)
 8002466:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_FLASH_Unlock+0x3c>)
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	2b00      	cmp	r3, #0
 800246e:	da02      	bge.n	8002476 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8002470:	1dfb      	adds	r3, r7, #7
 8002472:	2201      	movs	r2, #1
 8002474:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002476:	1dfb      	adds	r3, r7, #7
 8002478:	781b      	ldrb	r3, [r3, #0]
}
 800247a:	0018      	movs	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	b002      	add	sp, #8
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	40022000 	.word	0x40022000
 8002488:	45670123 	.word	0x45670123
 800248c:	cdef89ab 	.word	0xcdef89ab

08002490 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8002496:	1dfb      	adds	r3, r7, #7
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_FLASH_Lock+0x34>)
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <HAL_FLASH_Lock+0x34>)
 80024a2:	2180      	movs	r1, #128	; 0x80
 80024a4:	0609      	lsls	r1, r1, #24
 80024a6:	430a      	orrs	r2, r1
 80024a8:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_FLASH_Lock+0x34>)
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	da02      	bge.n	80024b8 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 80024b2:	1dfb      	adds	r3, r7, #7
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80024b8:	1dfb      	adds	r3, r7, #7
 80024ba:	781b      	ldrb	r3, [r3, #0]
}
 80024bc:	0018      	movs	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	b002      	add	sp, #8
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40022000 	.word	0x40022000

080024c8 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80024ce:	1dfb      	adds	r3, r7, #7
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 80024d4:	4b0d      	ldr	r3, [pc, #52]	; (800250c <HAL_FLASH_OB_Unlock+0x44>)
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	05db      	lsls	r3, r3, #23
 80024dc:	4013      	ands	r3, r2
 80024de:	d00e      	beq.n	80024fe <HAL_FLASH_OB_Unlock+0x36>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <HAL_FLASH_OB_Unlock+0x44>)
 80024e2:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <HAL_FLASH_OB_Unlock+0x48>)
 80024e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_FLASH_OB_Unlock+0x44>)
 80024e8:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <HAL_FLASH_OB_Unlock+0x4c>)
 80024ea:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 80024ec:	4b07      	ldr	r3, [pc, #28]	; (800250c <HAL_FLASH_OB_Unlock+0x44>)
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	05db      	lsls	r3, r3, #23
 80024f4:	4013      	ands	r3, r2
 80024f6:	d102      	bne.n	80024fe <HAL_FLASH_OB_Unlock+0x36>
    {
      status = HAL_OK;
 80024f8:	1dfb      	adds	r3, r7, #7
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80024fe:	1dfb      	adds	r3, r7, #7
 8002500:	781b      	ldrb	r3, [r3, #0]
}
 8002502:	0018      	movs	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	b002      	add	sp, #8
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	40022000 	.word	0x40022000
 8002510:	08192a3b 	.word	0x08192a3b
 8002514:	4c5d6e7f 	.word	0x4c5d6e7f

08002518 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800251e:	1dfb      	adds	r3, r7, #7
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8002524:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_FLASH_OB_Lock+0x38>)
 8002526:	695a      	ldr	r2, [r3, #20]
 8002528:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_FLASH_OB_Lock+0x38>)
 800252a:	2180      	movs	r1, #128	; 0x80
 800252c:	05c9      	lsls	r1, r1, #23
 800252e:	430a      	orrs	r2, r1
 8002530:	615a      	str	r2, [r3, #20]

  /* verify option bytes are locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <HAL_FLASH_OB_Lock+0x38>)
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	05db      	lsls	r3, r3, #23
 800253a:	4013      	ands	r3, r2
 800253c:	d002      	beq.n	8002544 <HAL_FLASH_OB_Lock+0x2c>
  {
    status = HAL_OK;
 800253e:	1dfb      	adds	r3, r7, #7
 8002540:	2200      	movs	r2, #0
 8002542:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002544:	1dfb      	adds	r3, r7, #7
 8002546:	781b      	ldrb	r3, [r3, #0]
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b002      	add	sp, #8
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40022000 	.word	0x40022000

08002554 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 800255c:	f7ff fd8c 	bl	8002078 <HAL_GetTick>
 8002560:	0002      	movs	r2, r0
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	189b      	adds	r3, r3, r2
 8002566:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 8002568:	23c0      	movs	r3, #192	; 0xc0
 800256a:	029b      	lsls	r3, r3, #10
 800256c:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800256e:	e007      	b.n	8002580 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8002570:	f7ff fd82 	bl	8002078 <HAL_GetTick>
 8002574:	0002      	movs	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4293      	cmp	r3, r2
 800257a:	d801      	bhi.n	8002580 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e02a      	b.n	80025d6 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <FLASH_WaitForLastOperation+0x8c>)
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	4013      	ands	r3, r2
 8002588:	d1f2      	bne.n	8002570 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <FLASH_WaitForLastOperation+0x8c>)
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	4a15      	ldr	r2, [pc, #84]	; (80025e4 <FLASH_WaitForLastOperation+0x90>)
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <FLASH_WaitForLastOperation+0x8c>)
 8002596:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <FLASH_WaitForLastOperation+0x94>)
 8002598:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d004      	beq.n	80025aa <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <FLASH_WaitForLastOperation+0x98>)
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e015      	b.n	80025d6 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 80025aa:	f7ff fd65 	bl	8002078 <HAL_GetTick>
 80025ae:	0002      	movs	r2, r0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	189b      	adds	r3, r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80025b6:	e007      	b.n	80025c8 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 80025b8:	f7ff fd5e 	bl	8002078 <HAL_GetTick>
 80025bc:	0002      	movs	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d801      	bhi.n	80025c8 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e006      	b.n	80025d6 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <FLASH_WaitForLastOperation+0x8c>)
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	02db      	lsls	r3, r3, #11
 80025d0:	4013      	ands	r3, r2
 80025d2:	d1f1      	bne.n	80025b8 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	0018      	movs	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	b004      	add	sp, #16
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	40022000 	.word	0x40022000
 80025e4:	0000c3fa 	.word	0x0000c3fa
 80025e8:	0008c3fb 	.word	0x0008c3fb
 80025ec:	200008a0 	.word	0x200008a0

080025f0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	603a      	str	r2, [r7, #0]
 80025fa:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <FLASH_Program_DoubleWord+0x3c>)
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	4b0a      	ldr	r3, [pc, #40]	; (800262c <FLASH_Program_DoubleWord+0x3c>)
 8002602:	2101      	movs	r1, #1
 8002604:	430a      	orrs	r2, r1
 8002606:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800260e:	f3bf 8f6f 	isb	sy
}
 8002612:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	001c      	movs	r4, r3
 8002618:	2300      	movs	r3, #0
 800261a:	001d      	movs	r5, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3304      	adds	r3, #4
 8002620:	0022      	movs	r2, r4
 8002622:	601a      	str	r2, [r3, #0]
}
 8002624:	46c0      	nop			; (mov r8, r8)
 8002626:	46bd      	mov	sp, r7
 8002628:	b004      	add	sp, #16
 800262a:	bdb0      	pop	{r4, r5, r7, pc}
 800262c:	40022000 	.word	0x40022000

08002630 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002630:	b5b0      	push	{r4, r5, r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800263a:	4b33      	ldr	r3, [pc, #204]	; (8002708 <HAL_FLASHEx_Erase+0xd8>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_FLASHEx_Erase+0x16>
 8002642:	2302      	movs	r3, #2
 8002644:	e05c      	b.n	8002700 <HAL_FLASHEx_Erase+0xd0>
 8002646:	4b30      	ldr	r3, [pc, #192]	; (8002708 <HAL_FLASHEx_Erase+0xd8>)
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800264c:	4b2e      	ldr	r3, [pc, #184]	; (8002708 <HAL_FLASHEx_Erase+0xd8>)
 800264e:	2200      	movs	r2, #0
 8002650:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002652:	250f      	movs	r5, #15
 8002654:	197c      	adds	r4, r7, r5
 8002656:	23fa      	movs	r3, #250	; 0xfa
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	0018      	movs	r0, r3
 800265c:	f7ff ff7a 	bl	8002554 <FLASH_WaitForLastOperation>
 8002660:	0003      	movs	r3, r0
 8002662:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002664:	002c      	movs	r4, r5
 8002666:	193b      	adds	r3, r7, r4
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d142      	bne.n	80026f4 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b04      	cmp	r3, #4
 8002674:	d10d      	bne.n	8002692 <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	0018      	movs	r0, r3
 800267c:	f000 f848 	bl	8002710 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002680:	193c      	adds	r4, r7, r4
 8002682:	23fa      	movs	r3, #250	; 0xfa
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	0018      	movs	r0, r3
 8002688:	f7ff ff64 	bl	8002554 <FLASH_WaitForLastOperation>
 800268c:	0003      	movs	r3, r0
 800268e:	7023      	strb	r3, [r4, #0]
 8002690:	e030      	b.n	80026f4 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2201      	movs	r2, #1
 8002696:	4252      	negs	r2, r2
 8002698:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	e01a      	b.n	80026d8 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	0011      	movs	r1, r2
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 f844 	bl	8002738 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80026b0:	250f      	movs	r5, #15
 80026b2:	197c      	adds	r4, r7, r5
 80026b4:	23fa      	movs	r3, #250	; 0xfa
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	0018      	movs	r0, r3
 80026ba:	f7ff ff4b 	bl	8002554 <FLASH_WaitForLastOperation>
 80026be:	0003      	movs	r3, r0
 80026c0:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 80026c2:	197b      	adds	r3, r7, r5
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	601a      	str	r2, [r3, #0]
          break;
 80026d0:	e00a      	b.n	80026e8 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	3301      	adds	r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	18d3      	adds	r3, r2, r3
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d3dc      	bcc.n	80026a2 <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <HAL_FLASHEx_Erase+0xdc>)
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	4b07      	ldr	r3, [pc, #28]	; (800270c <HAL_FLASHEx_Erase+0xdc>)
 80026ee:	2102      	movs	r1, #2
 80026f0:	438a      	bics	r2, r1
 80026f2:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <HAL_FLASHEx_Erase+0xd8>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80026fa:	230f      	movs	r3, #15
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	781b      	ldrb	r3, [r3, #0]
}
 8002700:	0018      	movs	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	b004      	add	sp, #16
 8002706:	bdb0      	pop	{r4, r5, r7, pc}
 8002708:	200008a0 	.word	0x200008a0
 800270c:	40022000 	.word	0x40022000

08002710 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <FLASH_MassErase+0x24>)
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	431a      	orrs	r2, r3
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <FLASH_MassErase+0x24>)
 8002722:	2180      	movs	r1, #128	; 0x80
 8002724:	0249      	lsls	r1, r1, #9
 8002726:	430a      	orrs	r2, r1
 8002728:	615a      	str	r2, [r3, #20]
}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	46bd      	mov	sp, r7
 800272e:	b002      	add	sp, #8
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	40022000 	.word	0x40022000

08002738 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8002742:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <FLASH_PageErase+0x48>)
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	4a0f      	ldr	r2, [pc, #60]	; (8002784 <FLASH_PageErase+0x4c>)
 8002748:	4013      	ands	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b04      	cmp	r3, #4
 8002750:	d005      	beq.n	800275e <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2280      	movs	r2, #128	; 0x80
 8002756:	0192      	lsls	r2, r2, #6
 8002758:	4313      	orrs	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	e003      	b.n	8002766 <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4a09      	ldr	r2, [pc, #36]	; (8002788 <FLASH_PageErase+0x50>)
 8002762:	4013      	ands	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	00da      	lsls	r2, r3, #3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	431a      	orrs	r2, r3
 800276e:	4b04      	ldr	r3, [pc, #16]	; (8002780 <FLASH_PageErase+0x48>)
 8002770:	4906      	ldr	r1, [pc, #24]	; (800278c <FLASH_PageErase+0x54>)
 8002772:	430a      	orrs	r2, r1
 8002774:	615a      	str	r2, [r3, #20]
}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	b004      	add	sp, #16
 800277c:	bd80      	pop	{r7, pc}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	40022000 	.word	0x40022000
 8002784:	ffffe007 	.word	0xffffe007
 8002788:	ffffdfff 	.word	0xffffdfff
 800278c:	00010002 	.word	0x00010002

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279e:	e14d      	b.n	8002a3c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2101      	movs	r1, #1
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4091      	lsls	r1, r2
 80027aa:	000a      	movs	r2, r1
 80027ac:	4013      	ands	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d100      	bne.n	80027b8 <HAL_GPIO_Init+0x28>
 80027b6:	e13e      	b.n	8002a36 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2203      	movs	r2, #3
 80027be:	4013      	ands	r3, r2
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d005      	beq.n	80027d0 <HAL_GPIO_Init+0x40>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2203      	movs	r2, #3
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d130      	bne.n	8002832 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	2203      	movs	r2, #3
 80027dc:	409a      	lsls	r2, r3
 80027de:	0013      	movs	r3, r2
 80027e0:	43da      	mvns	r2, r3
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	409a      	lsls	r2, r3
 80027f2:	0013      	movs	r3, r2
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002806:	2201      	movs	r2, #1
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	409a      	lsls	r2, r3
 800280c:	0013      	movs	r3, r2
 800280e:	43da      	mvns	r2, r3
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	2201      	movs	r2, #1
 800281e:	401a      	ands	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	409a      	lsls	r2, r3
 8002824:	0013      	movs	r3, r2
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2203      	movs	r2, #3
 8002838:	4013      	ands	r3, r2
 800283a:	2b03      	cmp	r3, #3
 800283c:	d017      	beq.n	800286e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2203      	movs	r2, #3
 800284a:	409a      	lsls	r2, r3
 800284c:	0013      	movs	r3, r2
 800284e:	43da      	mvns	r2, r3
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	409a      	lsls	r2, r3
 8002860:	0013      	movs	r3, r2
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2203      	movs	r2, #3
 8002874:	4013      	ands	r3, r2
 8002876:	2b02      	cmp	r3, #2
 8002878:	d123      	bne.n	80028c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	08da      	lsrs	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3208      	adds	r2, #8
 8002882:	0092      	lsls	r2, r2, #2
 8002884:	58d3      	ldr	r3, [r2, r3]
 8002886:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2207      	movs	r2, #7
 800288c:	4013      	ands	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	220f      	movs	r2, #15
 8002892:	409a      	lsls	r2, r3
 8002894:	0013      	movs	r3, r2
 8002896:	43da      	mvns	r2, r3
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2107      	movs	r1, #7
 80028a6:	400b      	ands	r3, r1
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	409a      	lsls	r2, r3
 80028ac:	0013      	movs	r3, r2
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	08da      	lsrs	r2, r3, #3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3208      	adds	r2, #8
 80028bc:	0092      	lsls	r2, r2, #2
 80028be:	6939      	ldr	r1, [r7, #16]
 80028c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	2203      	movs	r2, #3
 80028ce:	409a      	lsls	r2, r3
 80028d0:	0013      	movs	r3, r2
 80028d2:	43da      	mvns	r2, r3
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2203      	movs	r2, #3
 80028e0:	401a      	ands	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	409a      	lsls	r2, r3
 80028e8:	0013      	movs	r3, r2
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	23c0      	movs	r3, #192	; 0xc0
 80028fc:	029b      	lsls	r3, r3, #10
 80028fe:	4013      	ands	r3, r2
 8002900:	d100      	bne.n	8002904 <HAL_GPIO_Init+0x174>
 8002902:	e098      	b.n	8002a36 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002904:	4a53      	ldr	r2, [pc, #332]	; (8002a54 <HAL_GPIO_Init+0x2c4>)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	3318      	adds	r3, #24
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	589b      	ldr	r3, [r3, r2]
 8002910:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2203      	movs	r2, #3
 8002916:	4013      	ands	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	220f      	movs	r2, #15
 800291c:	409a      	lsls	r2, r3
 800291e:	0013      	movs	r3, r2
 8002920:	43da      	mvns	r2, r3
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	23a0      	movs	r3, #160	; 0xa0
 800292c:	05db      	lsls	r3, r3, #23
 800292e:	429a      	cmp	r2, r3
 8002930:	d019      	beq.n	8002966 <HAL_GPIO_Init+0x1d6>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a48      	ldr	r2, [pc, #288]	; (8002a58 <HAL_GPIO_Init+0x2c8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_GPIO_Init+0x1d2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a47      	ldr	r2, [pc, #284]	; (8002a5c <HAL_GPIO_Init+0x2cc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00d      	beq.n	800295e <HAL_GPIO_Init+0x1ce>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a46      	ldr	r2, [pc, #280]	; (8002a60 <HAL_GPIO_Init+0x2d0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <HAL_GPIO_Init+0x1ca>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a45      	ldr	r2, [pc, #276]	; (8002a64 <HAL_GPIO_Init+0x2d4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d101      	bne.n	8002956 <HAL_GPIO_Init+0x1c6>
 8002952:	2304      	movs	r3, #4
 8002954:	e008      	b.n	8002968 <HAL_GPIO_Init+0x1d8>
 8002956:	2305      	movs	r3, #5
 8002958:	e006      	b.n	8002968 <HAL_GPIO_Init+0x1d8>
 800295a:	2303      	movs	r3, #3
 800295c:	e004      	b.n	8002968 <HAL_GPIO_Init+0x1d8>
 800295e:	2302      	movs	r3, #2
 8002960:	e002      	b.n	8002968 <HAL_GPIO_Init+0x1d8>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_GPIO_Init+0x1d8>
 8002966:	2300      	movs	r3, #0
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	2103      	movs	r1, #3
 800296c:	400a      	ands	r2, r1
 800296e:	00d2      	lsls	r2, r2, #3
 8002970:	4093      	lsls	r3, r2
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002978:	4936      	ldr	r1, [pc, #216]	; (8002a54 <HAL_GPIO_Init+0x2c4>)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	3318      	adds	r3, #24
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002986:	4b33      	ldr	r3, [pc, #204]	; (8002a54 <HAL_GPIO_Init+0x2c4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	43da      	mvns	r2, r3
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	035b      	lsls	r3, r3, #13
 800299e:	4013      	ands	r3, r2
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029aa:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <HAL_GPIO_Init+0x2c4>)
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80029b0:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <HAL_GPIO_Init+0x2c4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	43da      	mvns	r2, r3
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	039b      	lsls	r3, r3, #14
 80029c8:	4013      	ands	r3, r2
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029d4:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <HAL_GPIO_Init+0x2c4>)
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029da:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <HAL_GPIO_Init+0x2c4>)
 80029dc:	2384      	movs	r3, #132	; 0x84
 80029de:	58d3      	ldr	r3, [r2, r3]
 80029e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	43da      	mvns	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	2380      	movs	r3, #128	; 0x80
 80029f2:	029b      	lsls	r3, r3, #10
 80029f4:	4013      	ands	r3, r2
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a00:	4914      	ldr	r1, [pc, #80]	; (8002a54 <HAL_GPIO_Init+0x2c4>)
 8002a02:	2284      	movs	r2, #132	; 0x84
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002a08:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <HAL_GPIO_Init+0x2c4>)
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	58d3      	ldr	r3, [r2, r3]
 8002a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	43da      	mvns	r2, r3
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	025b      	lsls	r3, r3, #9
 8002a22:	4013      	ands	r3, r2
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a2e:	4909      	ldr	r1, [pc, #36]	; (8002a54 <HAL_GPIO_Init+0x2c4>)
 8002a30:	2280      	movs	r2, #128	; 0x80
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	40da      	lsrs	r2, r3
 8002a44:	1e13      	subs	r3, r2, #0
 8002a46:	d000      	beq.n	8002a4a <HAL_GPIO_Init+0x2ba>
 8002a48:	e6aa      	b.n	80027a0 <HAL_GPIO_Init+0x10>
  }
}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b006      	add	sp, #24
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021800 	.word	0x40021800
 8002a58:	50000400 	.word	0x50000400
 8002a5c:	50000800 	.word	0x50000800
 8002a60:	50000c00 	.word	0x50000c00
 8002a64:	50001000 	.word	0x50001000

08002a68 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002a76:	e0ba      	b.n	8002bee <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002a78:	2201      	movs	r2, #1
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d100      	bne.n	8002a8c <HAL_GPIO_DeInit+0x24>
 8002a8a:	e0ad      	b.n	8002be8 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8002a8c:	4a5d      	ldr	r2, [pc, #372]	; (8002c04 <HAL_GPIO_DeInit+0x19c>)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	089b      	lsrs	r3, r3, #2
 8002a92:	3318      	adds	r3, #24
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	589b      	ldr	r3, [r3, r2]
 8002a98:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	220f      	movs	r2, #15
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	23a0      	movs	r3, #160	; 0xa0
 8002ab0:	05db      	lsls	r3, r3, #23
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d019      	beq.n	8002aea <HAL_GPIO_DeInit+0x82>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a53      	ldr	r2, [pc, #332]	; (8002c08 <HAL_GPIO_DeInit+0x1a0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <HAL_GPIO_DeInit+0x7e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a52      	ldr	r2, [pc, #328]	; (8002c0c <HAL_GPIO_DeInit+0x1a4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00d      	beq.n	8002ae2 <HAL_GPIO_DeInit+0x7a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a51      	ldr	r2, [pc, #324]	; (8002c10 <HAL_GPIO_DeInit+0x1a8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d007      	beq.n	8002ade <HAL_GPIO_DeInit+0x76>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a50      	ldr	r2, [pc, #320]	; (8002c14 <HAL_GPIO_DeInit+0x1ac>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d101      	bne.n	8002ada <HAL_GPIO_DeInit+0x72>
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	e008      	b.n	8002aec <HAL_GPIO_DeInit+0x84>
 8002ada:	2305      	movs	r3, #5
 8002adc:	e006      	b.n	8002aec <HAL_GPIO_DeInit+0x84>
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e004      	b.n	8002aec <HAL_GPIO_DeInit+0x84>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e002      	b.n	8002aec <HAL_GPIO_DeInit+0x84>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <HAL_GPIO_DeInit+0x84>
 8002aea:	2300      	movs	r3, #0
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	2103      	movs	r1, #3
 8002af0:	400a      	ands	r2, r1
 8002af2:	00d2      	lsls	r2, r2, #3
 8002af4:	4093      	lsls	r3, r2
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d136      	bne.n	8002b6a <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002afc:	4a41      	ldr	r2, [pc, #260]	; (8002c04 <HAL_GPIO_DeInit+0x19c>)
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	58d3      	ldr	r3, [r2, r3]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	43d2      	mvns	r2, r2
 8002b06:	493f      	ldr	r1, [pc, #252]	; (8002c04 <HAL_GPIO_DeInit+0x19c>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2280      	movs	r2, #128	; 0x80
 8002b0c:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8002b0e:	4a3d      	ldr	r2, [pc, #244]	; (8002c04 <HAL_GPIO_DeInit+0x19c>)
 8002b10:	2384      	movs	r3, #132	; 0x84
 8002b12:	58d3      	ldr	r3, [r2, r3]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	43d2      	mvns	r2, r2
 8002b18:	493a      	ldr	r1, [pc, #232]	; (8002c04 <HAL_GPIO_DeInit+0x19c>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2284      	movs	r2, #132	; 0x84
 8002b1e:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002b20:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <HAL_GPIO_DeInit+0x19c>)
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	43d9      	mvns	r1, r3
 8002b28:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <HAL_GPIO_DeInit+0x19c>)
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002b2e:	4b35      	ldr	r3, [pc, #212]	; (8002c04 <HAL_GPIO_DeInit+0x19c>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	43d9      	mvns	r1, r3
 8002b36:	4b33      	ldr	r3, [pc, #204]	; (8002c04 <HAL_GPIO_DeInit+0x19c>)
 8002b38:	400a      	ands	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2203      	movs	r2, #3
 8002b40:	4013      	ands	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	220f      	movs	r2, #15
 8002b46:	409a      	lsls	r2, r3
 8002b48:	0013      	movs	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8002b4c:	4a2d      	ldr	r2, [pc, #180]	; (8002c04 <HAL_GPIO_DeInit+0x19c>)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	089b      	lsrs	r3, r3, #2
 8002b52:	3318      	adds	r3, #24
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	589a      	ldr	r2, [r3, r2]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	43d9      	mvns	r1, r3
 8002b5c:	4829      	ldr	r0, [pc, #164]	; (8002c04 <HAL_GPIO_DeInit+0x19c>)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	089b      	lsrs	r3, r3, #2
 8002b62:	400a      	ands	r2, r1
 8002b64:	3318      	adds	r3, #24
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	2103      	movs	r1, #3
 8002b74:	4099      	lsls	r1, r3
 8002b76:	000b      	movs	r3, r1
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	08da      	lsrs	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3208      	adds	r2, #8
 8002b86:	0092      	lsls	r2, r2, #2
 8002b88:	58d3      	ldr	r3, [r2, r3]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	2107      	movs	r1, #7
 8002b8e:	400a      	ands	r2, r1
 8002b90:	0092      	lsls	r2, r2, #2
 8002b92:	210f      	movs	r1, #15
 8002b94:	4091      	lsls	r1, r2
 8002b96:	000a      	movs	r2, r1
 8002b98:	43d1      	mvns	r1, r2
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	08d2      	lsrs	r2, r2, #3
 8002b9e:	4019      	ands	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3208      	adds	r2, #8
 8002ba4:	0092      	lsls	r2, r2, #2
 8002ba6:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	0052      	lsls	r2, r2, #1
 8002bb0:	2103      	movs	r1, #3
 8002bb2:	4091      	lsls	r1, r2
 8002bb4:	000a      	movs	r2, r1
 8002bb6:	43d2      	mvns	r2, r2
 8002bb8:	401a      	ands	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4091      	lsls	r1, r2
 8002bc8:	000a      	movs	r2, r1
 8002bca:	43d2      	mvns	r2, r2
 8002bcc:	401a      	ands	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	0052      	lsls	r2, r2, #1
 8002bda:	2103      	movs	r1, #3
 8002bdc:	4091      	lsls	r1, r2
 8002bde:	000a      	movs	r2, r1
 8002be0:	43d2      	mvns	r2, r2
 8002be2:	401a      	ands	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	3301      	adds	r3, #1
 8002bec:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	40da      	lsrs	r2, r3
 8002bf4:	1e13      	subs	r3, r2, #0
 8002bf6:	d000      	beq.n	8002bfa <HAL_GPIO_DeInit+0x192>
 8002bf8:	e73e      	b.n	8002a78 <HAL_GPIO_DeInit+0x10>
  }
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b006      	add	sp, #24
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40021800 	.word	0x40021800
 8002c08:	50000400 	.word	0x50000400
 8002c0c:	50000800 	.word	0x50000800
 8002c10:	50000c00 	.word	0x50000c00
 8002c14:	50001000 	.word	0x50001000

08002c18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	000a      	movs	r2, r1
 8002c22:	1cbb      	adds	r3, r7, #2
 8002c24:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	1cba      	adds	r2, r7, #2
 8002c2c:	8812      	ldrh	r2, [r2, #0]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d004      	beq.n	8002c3c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002c32:	230f      	movs	r3, #15
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	e003      	b.n	8002c44 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c3c:	230f      	movs	r3, #15
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002c44:	230f      	movs	r3, #15
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	781b      	ldrb	r3, [r3, #0]
}
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b004      	add	sp, #16
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	0008      	movs	r0, r1
 8002c5c:	0011      	movs	r1, r2
 8002c5e:	1cbb      	adds	r3, r7, #2
 8002c60:	1c02      	adds	r2, r0, #0
 8002c62:	801a      	strh	r2, [r3, #0]
 8002c64:	1c7b      	adds	r3, r7, #1
 8002c66:	1c0a      	adds	r2, r1, #0
 8002c68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c6a:	1c7b      	adds	r3, r7, #1
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d004      	beq.n	8002c7c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c72:	1cbb      	adds	r3, r7, #2
 8002c74:	881a      	ldrh	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c7a:	e003      	b.n	8002c84 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c7c:	1cbb      	adds	r3, r7, #2
 8002c7e:	881a      	ldrh	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b002      	add	sp, #8
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	000a      	movs	r2, r1
 8002c96:	1cbb      	adds	r3, r7, #2
 8002c98:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ca0:	1cbb      	adds	r3, r7, #2
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	041a      	lsls	r2, r3, #16
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	1cb9      	adds	r1, r7, #2
 8002cb0:	8809      	ldrh	r1, [r1, #0]
 8002cb2:	400b      	ands	r3, r1
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	619a      	str	r2, [r3, #24]
}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b004      	add	sp, #16
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002ccc:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d11f      	bne.n	8002d28 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	0013      	movs	r3, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	189b      	adds	r3, r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4912      	ldr	r1, [pc, #72]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f7fd fa18 	bl	800012c <__udivsi3>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	3301      	adds	r3, #1
 8002d00:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d02:	e008      	b.n	8002d16 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	e001      	b.n	8002d16 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e009      	b.n	8002d2a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d16:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	401a      	ands	r2, r3
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d0ed      	beq.n	8002d04 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b004      	add	sp, #16
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	40007000 	.word	0x40007000
 8002d38:	fffff9ff 	.word	0xfffff9ff
 8002d3c:	20000060 	.word	0x20000060
 8002d40:	000f4240 	.word	0x000f4240

08002d44 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	23e0      	movs	r3, #224	; 0xe0
 8002d4e:	01db      	lsls	r3, r3, #7
 8002d50:	4013      	ands	r3, r2
}
 8002d52:	0018      	movs	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40021000 	.word	0x40021000

08002d5c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d62:	f7ff f989 	bl	8002078 <HAL_GetTick>
 8002d66:	0003      	movs	r3, r0
 8002d68:	607b      	str	r3, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002d6a:	4b35      	ldr	r3, [pc, #212]	; (8002e40 <HAL_RCC_DeInit+0xe4>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <HAL_RCC_DeInit+0xe4>)
 8002d70:	2180      	movs	r1, #128	; 0x80
 8002d72:	0049      	lsls	r1, r1, #1
 8002d74:	430a      	orrs	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_DeInit+0x30>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7a:	f7ff f97d 	bl	8002078 <HAL_GetTick>
 8002d7e:	0002      	movs	r2, r0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e054      	b.n	8002e36 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d8c:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <HAL_RCC_DeInit+0xe4>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4013      	ands	r3, r2
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  RCC->ICSCR = RCC_ICSCR_HSITRIM_6;
 8002d98:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <HAL_RCC_DeInit+0xe4>)
 8002d9a:	2280      	movs	r2, #128	; 0x80
 8002d9c:	01d2      	lsls	r2, r2, #7
 8002d9e:	605a      	str	r2, [r3, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002da0:	f7ff f96a 	bl	8002078 <HAL_GetTick>
 8002da4:	0003      	movs	r3, r0
 8002da6:	607b      	str	r3, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000000u;
 8002da8:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <HAL_RCC_DeInit+0xe4>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002dae:	e009      	b.n	8002dc4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db0:	f7ff f962 	bl	8002078 <HAL_GetTick>
 8002db4:	0002      	movs	r2, r0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <HAL_RCC_DeInit+0xe8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e038      	b.n	8002e36 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002dc4:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <HAL_RCC_DeInit+0xe4>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2238      	movs	r2, #56	; 0x38
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_DeInit+0x54>
    }
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8002dce:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <HAL_RCC_DeInit+0xe4>)
 8002dd0:	2280      	movs	r2, #128	; 0x80
 8002dd2:	0052      	lsls	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8002dd6:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <HAL_RCC_DeInit+0xe4>)
 8002dd8:	2280      	movs	r2, #128	; 0x80
 8002dda:	0052      	lsls	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002dde:	f7ff f94b 	bl	8002078 <HAL_GetTick>
 8002de2:	0003      	movs	r3, r0
 8002de4:	607b      	str	r3, [r7, #4]

  /* Wait till PLL is ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_DeInit+0x9e>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de8:	f7ff f946 	bl	8002078 <HAL_GetTick>
 8002dec:	0002      	movs	r2, r0
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_DeInit+0x9e>
    {
      return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e01d      	b.n	8002e36 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dfa:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <HAL_RCC_DeInit+0xe4>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	049b      	lsls	r3, r3, #18
 8002e02:	4013      	ands	r3, r2
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_DeInit+0x8c>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8002e06:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <HAL_RCC_DeInit+0xe4>)
 8002e08:	2280      	movs	r2, #128	; 0x80
 8002e0a:	0152      	lsls	r2, r2, #5
 8002e0c:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000u;
 8002e0e:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <HAL_RCC_DeInit+0xe4>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	619a      	str	r2, [r3, #24]

  /* Clear all flags */
  RCC->CICR = 0xFFFFFFFFu;
 8002e14:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <HAL_RCC_DeInit+0xe4>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	4252      	negs	r2, r2
 8002e1a:	621a      	str	r2, [r3, #32]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_RCC_DeInit+0xec>)
 8002e1e:	4a0b      	ldr	r2, [pc, #44]	; (8002e4c <HAL_RCC_DeInit+0xf0>)
 8002e20:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_RCC_DeInit+0xf4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	0018      	movs	r0, r3
 8002e28:	f7ff f8ca 	bl	8001fc0 <HAL_InitTick>
 8002e2c:	1e03      	subs	r3, r0, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_DeInit+0xd8>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_RCC_DeInit+0xda>
  }
  else
  {
    return HAL_OK;
 8002e34:	2300      	movs	r3, #0
  }
}
 8002e36:	0018      	movs	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b002      	add	sp, #8
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	40021000 	.word	0x40021000
 8002e44:	00001388 	.word	0x00001388
 8002e48:	20000060 	.word	0x20000060
 8002e4c:	00f42400 	.word	0x00f42400
 8002e50:	20000064 	.word	0x20000064

08002e54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d102      	bne.n	8002e68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f000 fb50 	bl	8003508 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d100      	bne.n	8002e74 <HAL_RCC_OscConfig+0x20>
 8002e72:	e07c      	b.n	8002f6e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e74:	4bc3      	ldr	r3, [pc, #780]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2238      	movs	r2, #56	; 0x38
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e7e:	4bc1      	ldr	r3, [pc, #772]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2203      	movs	r2, #3
 8002e84:	4013      	ands	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b10      	cmp	r3, #16
 8002e8c:	d102      	bne.n	8002e94 <HAL_RCC_OscConfig+0x40>
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d002      	beq.n	8002e9a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d10b      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9a:	4bba      	ldr	r3, [pc, #744]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	029b      	lsls	r3, r3, #10
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d062      	beq.n	8002f6c <HAL_RCC_OscConfig+0x118>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d15e      	bne.n	8002f6c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e32a      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	2380      	movs	r3, #128	; 0x80
 8002eb8:	025b      	lsls	r3, r3, #9
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d107      	bne.n	8002ece <HAL_RCC_OscConfig+0x7a>
 8002ebe:	4bb1      	ldr	r3, [pc, #708]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4bb0      	ldr	r3, [pc, #704]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002ec4:	2180      	movs	r1, #128	; 0x80
 8002ec6:	0249      	lsls	r1, r1, #9
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	e020      	b.n	8002f10 <HAL_RCC_OscConfig+0xbc>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	23a0      	movs	r3, #160	; 0xa0
 8002ed4:	02db      	lsls	r3, r3, #11
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_RCC_OscConfig+0xa4>
 8002eda:	4baa      	ldr	r3, [pc, #680]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	4ba9      	ldr	r3, [pc, #676]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	02c9      	lsls	r1, r1, #11
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	4ba6      	ldr	r3, [pc, #664]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4ba5      	ldr	r3, [pc, #660]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002eee:	2180      	movs	r1, #128	; 0x80
 8002ef0:	0249      	lsls	r1, r1, #9
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCC_OscConfig+0xbc>
 8002ef8:	4ba2      	ldr	r3, [pc, #648]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4ba1      	ldr	r3, [pc, #644]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002efe:	49a2      	ldr	r1, [pc, #648]	; (8003188 <HAL_RCC_OscConfig+0x334>)
 8002f00:	400a      	ands	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	4b9f      	ldr	r3, [pc, #636]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b9e      	ldr	r3, [pc, #632]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002f0a:	49a0      	ldr	r1, [pc, #640]	; (800318c <HAL_RCC_OscConfig+0x338>)
 8002f0c:	400a      	ands	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d014      	beq.n	8002f42 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7ff f8ae 	bl	8002078 <HAL_GetTick>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f22:	f7ff f8a9 	bl	8002078 <HAL_GetTick>
 8002f26:	0002      	movs	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b64      	cmp	r3, #100	; 0x64
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e2e9      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f34:	4b93      	ldr	r3, [pc, #588]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	2380      	movs	r3, #128	; 0x80
 8002f3a:	029b      	lsls	r3, r3, #10
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0xce>
 8002f40:	e015      	b.n	8002f6e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f42:	f7ff f899 	bl	8002078 <HAL_GetTick>
 8002f46:	0003      	movs	r3, r0
 8002f48:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7ff f894 	bl	8002078 <HAL_GetTick>
 8002f50:	0002      	movs	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e2d4      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f5e:	4b89      	ldr	r3, [pc, #548]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	029b      	lsls	r3, r3, #10
 8002f66:	4013      	ands	r3, r2
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0xf8>
 8002f6a:	e000      	b.n	8002f6e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2202      	movs	r2, #2
 8002f74:	4013      	ands	r3, r2
 8002f76:	d100      	bne.n	8002f7a <HAL_RCC_OscConfig+0x126>
 8002f78:	e099      	b.n	80030ae <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7a:	4b82      	ldr	r3, [pc, #520]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2238      	movs	r2, #56	; 0x38
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f84:	4b7f      	ldr	r3, [pc, #508]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2203      	movs	r2, #3
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d102      	bne.n	8002f9a <HAL_RCC_OscConfig+0x146>
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d002      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d135      	bne.n	800300c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa0:	4b78      	ldr	r3, [pc, #480]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x164>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e2a7      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb8:	4b72      	ldr	r3, [pc, #456]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a74      	ldr	r2, [pc, #464]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	0019      	movs	r1, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	021a      	lsls	r2, r3, #8
 8002fc8:	4b6e      	ldr	r3, [pc, #440]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d112      	bne.n	8002ffa <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002fd4:	4b6b      	ldr	r3, [pc, #428]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a6e      	ldr	r2, [pc, #440]	; (8003194 <HAL_RCC_OscConfig+0x340>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	0019      	movs	r1, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	4b68      	ldr	r3, [pc, #416]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002fe8:	4b66      	ldr	r3, [pc, #408]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	0adb      	lsrs	r3, r3, #11
 8002fee:	2207      	movs	r2, #7
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	4a69      	ldr	r2, [pc, #420]	; (8003198 <HAL_RCC_OscConfig+0x344>)
 8002ff4:	40da      	lsrs	r2, r3
 8002ff6:	4b69      	ldr	r3, [pc, #420]	; (800319c <HAL_RCC_OscConfig+0x348>)
 8002ff8:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ffa:	4b69      	ldr	r3, [pc, #420]	; (80031a0 <HAL_RCC_OscConfig+0x34c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7fe ffde 	bl	8001fc0 <HAL_InitTick>
 8003004:	1e03      	subs	r3, r0, #0
 8003006:	d051      	beq.n	80030ac <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e27d      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d030      	beq.n	8003076 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003014:	4b5b      	ldr	r3, [pc, #364]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a5e      	ldr	r2, [pc, #376]	; (8003194 <HAL_RCC_OscConfig+0x340>)
 800301a:	4013      	ands	r3, r2
 800301c:	0019      	movs	r1, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	4b58      	ldr	r3, [pc, #352]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8003024:	430a      	orrs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003028:	4b56      	ldr	r3, [pc, #344]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b55      	ldr	r3, [pc, #340]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 800302e:	2180      	movs	r1, #128	; 0x80
 8003030:	0049      	lsls	r1, r1, #1
 8003032:	430a      	orrs	r2, r1
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7ff f81f 	bl	8002078 <HAL_GetTick>
 800303a:	0003      	movs	r3, r0
 800303c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003040:	f7ff f81a 	bl	8002078 <HAL_GetTick>
 8003044:	0002      	movs	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e25a      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003052:	4b4c      	ldr	r3, [pc, #304]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4013      	ands	r3, r2
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305e:	4b49      	ldr	r3, [pc, #292]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4a4b      	ldr	r2, [pc, #300]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8003064:	4013      	ands	r3, r2
 8003066:	0019      	movs	r1, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	021a      	lsls	r2, r3, #8
 800306e:	4b45      	ldr	r3, [pc, #276]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8003070:	430a      	orrs	r2, r1
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	e01b      	b.n	80030ae <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003076:	4b43      	ldr	r3, [pc, #268]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4b42      	ldr	r3, [pc, #264]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 800307c:	4949      	ldr	r1, [pc, #292]	; (80031a4 <HAL_RCC_OscConfig+0x350>)
 800307e:	400a      	ands	r2, r1
 8003080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003082:	f7fe fff9 	bl	8002078 <HAL_GetTick>
 8003086:	0003      	movs	r3, r0
 8003088:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308c:	f7fe fff4 	bl	8002078 <HAL_GetTick>
 8003090:	0002      	movs	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e234      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800309e:	4b39      	ldr	r3, [pc, #228]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4013      	ands	r3, r2
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x238>
 80030aa:	e000      	b.n	80030ae <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2208      	movs	r2, #8
 80030b4:	4013      	ands	r3, r2
 80030b6:	d047      	beq.n	8003148 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80030b8:	4b32      	ldr	r3, [pc, #200]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2238      	movs	r2, #56	; 0x38
 80030be:	4013      	ands	r3, r2
 80030c0:	2b18      	cmp	r3, #24
 80030c2:	d10a      	bne.n	80030da <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80030c4:	4b2f      	ldr	r3, [pc, #188]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 80030c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c8:	2202      	movs	r2, #2
 80030ca:	4013      	ands	r3, r2
 80030cc:	d03c      	beq.n	8003148 <HAL_RCC_OscConfig+0x2f4>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d138      	bne.n	8003148 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e216      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d019      	beq.n	8003116 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80030e2:	4b28      	ldr	r3, [pc, #160]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 80030e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030e6:	4b27      	ldr	r3, [pc, #156]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 80030e8:	2101      	movs	r1, #1
 80030ea:	430a      	orrs	r2, r1
 80030ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ee:	f7fe ffc3 	bl	8002078 <HAL_GetTick>
 80030f2:	0003      	movs	r3, r0
 80030f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f8:	f7fe ffbe 	bl	8002078 <HAL_GetTick>
 80030fc:	0002      	movs	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e1fe      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800310a:	4b1e      	ldr	r3, [pc, #120]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 800310c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310e:	2202      	movs	r2, #2
 8003110:	4013      	ands	r3, r2
 8003112:	d0f1      	beq.n	80030f8 <HAL_RCC_OscConfig+0x2a4>
 8003114:	e018      	b.n	8003148 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003116:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8003118:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800311a:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 800311c:	2101      	movs	r1, #1
 800311e:	438a      	bics	r2, r1
 8003120:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003122:	f7fe ffa9 	bl	8002078 <HAL_GetTick>
 8003126:	0003      	movs	r3, r0
 8003128:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312c:	f7fe ffa4 	bl	8002078 <HAL_GetTick>
 8003130:	0002      	movs	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e1e4      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 8003140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003142:	2202      	movs	r2, #2
 8003144:	4013      	ands	r3, r2
 8003146:	d1f1      	bne.n	800312c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2204      	movs	r2, #4
 800314e:	4013      	ands	r3, r2
 8003150:	d100      	bne.n	8003154 <HAL_RCC_OscConfig+0x300>
 8003152:	e0c7      	b.n	80032e4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003154:	231f      	movs	r3, #31
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800315c:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2238      	movs	r2, #56	; 0x38
 8003162:	4013      	ands	r3, r2
 8003164:	2b20      	cmp	r3, #32
 8003166:	d11f      	bne.n	80031a8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_RCC_OscConfig+0x330>)
 800316a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316c:	2202      	movs	r2, #2
 800316e:	4013      	ands	r3, r2
 8003170:	d100      	bne.n	8003174 <HAL_RCC_OscConfig+0x320>
 8003172:	e0b7      	b.n	80032e4 <HAL_RCC_OscConfig+0x490>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d000      	beq.n	800317e <HAL_RCC_OscConfig+0x32a>
 800317c:	e0b2      	b.n	80032e4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e1c2      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	40021000 	.word	0x40021000
 8003188:	fffeffff 	.word	0xfffeffff
 800318c:	fffbffff 	.word	0xfffbffff
 8003190:	ffff80ff 	.word	0xffff80ff
 8003194:	ffffc7ff 	.word	0xffffc7ff
 8003198:	00f42400 	.word	0x00f42400
 800319c:	20000060 	.word	0x20000060
 80031a0:	20000064 	.word	0x20000064
 80031a4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031a8:	4bb5      	ldr	r3, [pc, #724]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 80031aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	055b      	lsls	r3, r3, #21
 80031b0:	4013      	ands	r3, r2
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_OscConfig+0x364>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x366>
 80031b8:	2300      	movs	r3, #0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d011      	beq.n	80031e2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80031be:	4bb0      	ldr	r3, [pc, #704]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 80031c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031c2:	4baf      	ldr	r3, [pc, #700]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 80031c4:	2180      	movs	r1, #128	; 0x80
 80031c6:	0549      	lsls	r1, r1, #21
 80031c8:	430a      	orrs	r2, r1
 80031ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80031cc:	4bac      	ldr	r3, [pc, #688]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 80031ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	055b      	lsls	r3, r3, #21
 80031d4:	4013      	ands	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80031da:	231f      	movs	r3, #31
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e2:	4ba8      	ldr	r3, [pc, #672]	; (8003484 <HAL_RCC_OscConfig+0x630>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4013      	ands	r3, r2
 80031ec:	d11a      	bne.n	8003224 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031ee:	4ba5      	ldr	r3, [pc, #660]	; (8003484 <HAL_RCC_OscConfig+0x630>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4ba4      	ldr	r3, [pc, #656]	; (8003484 <HAL_RCC_OscConfig+0x630>)
 80031f4:	2180      	movs	r1, #128	; 0x80
 80031f6:	0049      	lsls	r1, r1, #1
 80031f8:	430a      	orrs	r2, r1
 80031fa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80031fc:	f7fe ff3c 	bl	8002078 <HAL_GetTick>
 8003200:	0003      	movs	r3, r0
 8003202:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003206:	f7fe ff37 	bl	8002078 <HAL_GetTick>
 800320a:	0002      	movs	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e177      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003218:	4b9a      	ldr	r3, [pc, #616]	; (8003484 <HAL_RCC_OscConfig+0x630>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	4013      	ands	r3, r2
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d106      	bne.n	800323a <HAL_RCC_OscConfig+0x3e6>
 800322c:	4b94      	ldr	r3, [pc, #592]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 800322e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003230:	4b93      	ldr	r3, [pc, #588]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 8003232:	2101      	movs	r1, #1
 8003234:	430a      	orrs	r2, r1
 8003236:	65da      	str	r2, [r3, #92]	; 0x5c
 8003238:	e01c      	b.n	8003274 <HAL_RCC_OscConfig+0x420>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b05      	cmp	r3, #5
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0x408>
 8003242:	4b8f      	ldr	r3, [pc, #572]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 8003244:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003246:	4b8e      	ldr	r3, [pc, #568]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 8003248:	2104      	movs	r1, #4
 800324a:	430a      	orrs	r2, r1
 800324c:	65da      	str	r2, [r3, #92]	; 0x5c
 800324e:	4b8c      	ldr	r3, [pc, #560]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 8003250:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003252:	4b8b      	ldr	r3, [pc, #556]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 8003254:	2101      	movs	r1, #1
 8003256:	430a      	orrs	r2, r1
 8003258:	65da      	str	r2, [r3, #92]	; 0x5c
 800325a:	e00b      	b.n	8003274 <HAL_RCC_OscConfig+0x420>
 800325c:	4b88      	ldr	r3, [pc, #544]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 800325e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003260:	4b87      	ldr	r3, [pc, #540]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 8003262:	2101      	movs	r1, #1
 8003264:	438a      	bics	r2, r1
 8003266:	65da      	str	r2, [r3, #92]	; 0x5c
 8003268:	4b85      	ldr	r3, [pc, #532]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 800326a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800326c:	4b84      	ldr	r3, [pc, #528]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 800326e:	2104      	movs	r1, #4
 8003270:	438a      	bics	r2, r1
 8003272:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d014      	beq.n	80032a6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fe fefc 	bl	8002078 <HAL_GetTick>
 8003280:	0003      	movs	r3, r0
 8003282:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003284:	e009      	b.n	800329a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003286:	f7fe fef7 	bl	8002078 <HAL_GetTick>
 800328a:	0002      	movs	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	4a7d      	ldr	r2, [pc, #500]	; (8003488 <HAL_RCC_OscConfig+0x634>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e136      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800329a:	4b79      	ldr	r3, [pc, #484]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 800329c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329e:	2202      	movs	r2, #2
 80032a0:	4013      	ands	r3, r2
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x432>
 80032a4:	e013      	b.n	80032ce <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fe fee7 	bl	8002078 <HAL_GetTick>
 80032aa:	0003      	movs	r3, r0
 80032ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032ae:	e009      	b.n	80032c4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b0:	f7fe fee2 	bl	8002078 <HAL_GetTick>
 80032b4:	0002      	movs	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	4a73      	ldr	r2, [pc, #460]	; (8003488 <HAL_RCC_OscConfig+0x634>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e121      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032c4:	4b6e      	ldr	r3, [pc, #440]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	2202      	movs	r2, #2
 80032ca:	4013      	ands	r3, r2
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80032ce:	231f      	movs	r3, #31
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d105      	bne.n	80032e4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80032d8:	4b69      	ldr	r3, [pc, #420]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 80032da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032dc:	4b68      	ldr	r3, [pc, #416]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 80032de:	496b      	ldr	r1, [pc, #428]	; (800348c <HAL_RCC_OscConfig+0x638>)
 80032e0:	400a      	ands	r2, r1
 80032e2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2220      	movs	r2, #32
 80032ea:	4013      	ands	r3, r2
 80032ec:	d039      	beq.n	8003362 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d01b      	beq.n	800332e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032f6:	4b62      	ldr	r3, [pc, #392]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4b61      	ldr	r3, [pc, #388]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 80032fc:	2180      	movs	r1, #128	; 0x80
 80032fe:	03c9      	lsls	r1, r1, #15
 8003300:	430a      	orrs	r2, r1
 8003302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003304:	f7fe feb8 	bl	8002078 <HAL_GetTick>
 8003308:	0003      	movs	r3, r0
 800330a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800330e:	f7fe feb3 	bl	8002078 <HAL_GetTick>
 8003312:	0002      	movs	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e0f3      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003320:	4b57      	ldr	r3, [pc, #348]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	2380      	movs	r3, #128	; 0x80
 8003326:	041b      	lsls	r3, r3, #16
 8003328:	4013      	ands	r3, r2
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x4ba>
 800332c:	e019      	b.n	8003362 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800332e:	4b54      	ldr	r3, [pc, #336]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	4b53      	ldr	r3, [pc, #332]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 8003334:	4956      	ldr	r1, [pc, #344]	; (8003490 <HAL_RCC_OscConfig+0x63c>)
 8003336:	400a      	ands	r2, r1
 8003338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333a:	f7fe fe9d 	bl	8002078 <HAL_GetTick>
 800333e:	0003      	movs	r3, r0
 8003340:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003344:	f7fe fe98 	bl	8002078 <HAL_GetTick>
 8003348:	0002      	movs	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e0d8      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003356:	4b4a      	ldr	r3, [pc, #296]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	041b      	lsls	r3, r3, #16
 800335e:	4013      	ands	r3, r2
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d100      	bne.n	800336c <HAL_RCC_OscConfig+0x518>
 800336a:	e0cc      	b.n	8003506 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800336c:	4b44      	ldr	r3, [pc, #272]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2238      	movs	r2, #56	; 0x38
 8003372:	4013      	ands	r3, r2
 8003374:	2b10      	cmp	r3, #16
 8003376:	d100      	bne.n	800337a <HAL_RCC_OscConfig+0x526>
 8003378:	e07b      	b.n	8003472 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d156      	bne.n	8003430 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003382:	4b3f      	ldr	r3, [pc, #252]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b3e      	ldr	r3, [pc, #248]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 8003388:	4942      	ldr	r1, [pc, #264]	; (8003494 <HAL_RCC_OscConfig+0x640>)
 800338a:	400a      	ands	r2, r1
 800338c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338e:	f7fe fe73 	bl	8002078 <HAL_GetTick>
 8003392:	0003      	movs	r3, r0
 8003394:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003398:	f7fe fe6e 	bl	8002078 <HAL_GetTick>
 800339c:	0002      	movs	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e0ae      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033aa:	4b35      	ldr	r3, [pc, #212]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	049b      	lsls	r3, r3, #18
 80033b2:	4013      	ands	r3, r2
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033b6:	4b32      	ldr	r3, [pc, #200]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	4a37      	ldr	r2, [pc, #220]	; (8003498 <HAL_RCC_OscConfig+0x644>)
 80033bc:	4013      	ands	r3, r2
 80033be:	0019      	movs	r1, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	431a      	orrs	r2, r3
 80033e4:	4b26      	ldr	r3, [pc, #152]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 80033e6:	430a      	orrs	r2, r1
 80033e8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ea:	4b25      	ldr	r3, [pc, #148]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	4b24      	ldr	r3, [pc, #144]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 80033f0:	2180      	movs	r1, #128	; 0x80
 80033f2:	0449      	lsls	r1, r1, #17
 80033f4:	430a      	orrs	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80033f8:	4b21      	ldr	r3, [pc, #132]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	4b20      	ldr	r3, [pc, #128]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 80033fe:	2180      	movs	r1, #128	; 0x80
 8003400:	0549      	lsls	r1, r1, #21
 8003402:	430a      	orrs	r2, r1
 8003404:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7fe fe37 	bl	8002078 <HAL_GetTick>
 800340a:	0003      	movs	r3, r0
 800340c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe fe32 	bl	8002078 <HAL_GetTick>
 8003414:	0002      	movs	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e072      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003422:	4b17      	ldr	r3, [pc, #92]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	2380      	movs	r3, #128	; 0x80
 8003428:	049b      	lsls	r3, r3, #18
 800342a:	4013      	ands	r3, r2
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x5bc>
 800342e:	e06a      	b.n	8003506 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003430:	4b13      	ldr	r3, [pc, #76]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 8003436:	4917      	ldr	r1, [pc, #92]	; (8003494 <HAL_RCC_OscConfig+0x640>)
 8003438:	400a      	ands	r2, r1
 800343a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fe fe1c 	bl	8002078 <HAL_GetTick>
 8003440:	0003      	movs	r3, r0
 8003442:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003446:	f7fe fe17 	bl	8002078 <HAL_GetTick>
 800344a:	0002      	movs	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e057      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003458:	4b09      	ldr	r3, [pc, #36]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	2380      	movs	r3, #128	; 0x80
 800345e:	049b      	lsls	r3, r3, #18
 8003460:	4013      	ands	r3, r2
 8003462:	d1f0      	bne.n	8003446 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003464:	4b06      	ldr	r3, [pc, #24]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_OscConfig+0x62c>)
 800346a:	490c      	ldr	r1, [pc, #48]	; (800349c <HAL_RCC_OscConfig+0x648>)
 800346c:	400a      	ands	r2, r1
 800346e:	60da      	str	r2, [r3, #12]
 8003470:	e049      	b.n	8003506 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d112      	bne.n	80034a0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e044      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	40021000 	.word	0x40021000
 8003484:	40007000 	.word	0x40007000
 8003488:	00001388 	.word	0x00001388
 800348c:	efffffff 	.word	0xefffffff
 8003490:	ffbfffff 	.word	0xffbfffff
 8003494:	feffffff 	.word	0xfeffffff
 8003498:	11c1808c 	.word	0x11c1808c
 800349c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_RCC_OscConfig+0x6bc>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2203      	movs	r2, #3
 80034aa:	401a      	ands	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d126      	bne.n	8003502 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2270      	movs	r2, #112	; 0x70
 80034b8:	401a      	ands	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034be:	429a      	cmp	r2, r3
 80034c0:	d11f      	bne.n	8003502 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	23fe      	movs	r3, #254	; 0xfe
 80034c6:	01db      	lsls	r3, r3, #7
 80034c8:	401a      	ands	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d116      	bne.n	8003502 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	23f8      	movs	r3, #248	; 0xf8
 80034d8:	039b      	lsls	r3, r3, #14
 80034da:	401a      	ands	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d10e      	bne.n	8003502 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	23e0      	movs	r3, #224	; 0xe0
 80034e8:	051b      	lsls	r3, r3, #20
 80034ea:	401a      	ands	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d106      	bne.n	8003502 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	0f5b      	lsrs	r3, r3, #29
 80034f8:	075a      	lsls	r2, r3, #29
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80034fe:	429a      	cmp	r2, r3
 8003500:	d001      	beq.n	8003506 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b008      	add	sp, #32
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021000 	.word	0x40021000

08003514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0e9      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003528:	4b76      	ldr	r3, [pc, #472]	; (8003704 <HAL_RCC_ClockConfig+0x1f0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2207      	movs	r2, #7
 800352e:	4013      	ands	r3, r2
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d91e      	bls.n	8003574 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b73      	ldr	r3, [pc, #460]	; (8003704 <HAL_RCC_ClockConfig+0x1f0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2207      	movs	r2, #7
 800353c:	4393      	bics	r3, r2
 800353e:	0019      	movs	r1, r3
 8003540:	4b70      	ldr	r3, [pc, #448]	; (8003704 <HAL_RCC_ClockConfig+0x1f0>)
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003548:	f7fe fd96 	bl	8002078 <HAL_GetTick>
 800354c:	0003      	movs	r3, r0
 800354e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003550:	e009      	b.n	8003566 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003552:	f7fe fd91 	bl	8002078 <HAL_GetTick>
 8003556:	0002      	movs	r2, r0
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	4a6a      	ldr	r2, [pc, #424]	; (8003708 <HAL_RCC_ClockConfig+0x1f4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e0ca      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003566:	4b67      	ldr	r3, [pc, #412]	; (8003704 <HAL_RCC_ClockConfig+0x1f0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2207      	movs	r2, #7
 800356c:	4013      	ands	r3, r2
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d1ee      	bne.n	8003552 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2202      	movs	r2, #2
 800357a:	4013      	ands	r3, r2
 800357c:	d015      	beq.n	80035aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2204      	movs	r2, #4
 8003584:	4013      	ands	r3, r2
 8003586:	d006      	beq.n	8003596 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003588:	4b60      	ldr	r3, [pc, #384]	; (800370c <HAL_RCC_ClockConfig+0x1f8>)
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	4b5f      	ldr	r3, [pc, #380]	; (800370c <HAL_RCC_ClockConfig+0x1f8>)
 800358e:	21e0      	movs	r1, #224	; 0xe0
 8003590:	01c9      	lsls	r1, r1, #7
 8003592:	430a      	orrs	r2, r1
 8003594:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003596:	4b5d      	ldr	r3, [pc, #372]	; (800370c <HAL_RCC_ClockConfig+0x1f8>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	4a5d      	ldr	r2, [pc, #372]	; (8003710 <HAL_RCC_ClockConfig+0x1fc>)
 800359c:	4013      	ands	r3, r2
 800359e:	0019      	movs	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	4b59      	ldr	r3, [pc, #356]	; (800370c <HAL_RCC_ClockConfig+0x1f8>)
 80035a6:	430a      	orrs	r2, r1
 80035a8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2201      	movs	r2, #1
 80035b0:	4013      	ands	r3, r2
 80035b2:	d057      	beq.n	8003664 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d107      	bne.n	80035cc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035bc:	4b53      	ldr	r3, [pc, #332]	; (800370c <HAL_RCC_ClockConfig+0x1f8>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	029b      	lsls	r3, r3, #10
 80035c4:	4013      	ands	r3, r2
 80035c6:	d12b      	bne.n	8003620 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e097      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d107      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d4:	4b4d      	ldr	r3, [pc, #308]	; (800370c <HAL_RCC_ClockConfig+0x1f8>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	049b      	lsls	r3, r3, #18
 80035dc:	4013      	ands	r3, r2
 80035de:	d11f      	bne.n	8003620 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e08b      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d107      	bne.n	80035fc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ec:	4b47      	ldr	r3, [pc, #284]	; (800370c <HAL_RCC_ClockConfig+0x1f8>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4013      	ands	r3, r2
 80035f6:	d113      	bne.n	8003620 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e07f      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d106      	bne.n	8003612 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003604:	4b41      	ldr	r3, [pc, #260]	; (800370c <HAL_RCC_ClockConfig+0x1f8>)
 8003606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003608:	2202      	movs	r2, #2
 800360a:	4013      	ands	r3, r2
 800360c:	d108      	bne.n	8003620 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e074      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003612:	4b3e      	ldr	r3, [pc, #248]	; (800370c <HAL_RCC_ClockConfig+0x1f8>)
 8003614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003616:	2202      	movs	r2, #2
 8003618:	4013      	ands	r3, r2
 800361a:	d101      	bne.n	8003620 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e06d      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003620:	4b3a      	ldr	r3, [pc, #232]	; (800370c <HAL_RCC_ClockConfig+0x1f8>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2207      	movs	r2, #7
 8003626:	4393      	bics	r3, r2
 8003628:	0019      	movs	r1, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	4b37      	ldr	r3, [pc, #220]	; (800370c <HAL_RCC_ClockConfig+0x1f8>)
 8003630:	430a      	orrs	r2, r1
 8003632:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003634:	f7fe fd20 	bl	8002078 <HAL_GetTick>
 8003638:	0003      	movs	r3, r0
 800363a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363c:	e009      	b.n	8003652 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363e:	f7fe fd1b 	bl	8002078 <HAL_GetTick>
 8003642:	0002      	movs	r2, r0
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	4a2f      	ldr	r2, [pc, #188]	; (8003708 <HAL_RCC_ClockConfig+0x1f4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e054      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003652:	4b2e      	ldr	r3, [pc, #184]	; (800370c <HAL_RCC_ClockConfig+0x1f8>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2238      	movs	r2, #56	; 0x38
 8003658:	401a      	ands	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	429a      	cmp	r2, r3
 8003662:	d1ec      	bne.n	800363e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003664:	4b27      	ldr	r3, [pc, #156]	; (8003704 <HAL_RCC_ClockConfig+0x1f0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2207      	movs	r2, #7
 800366a:	4013      	ands	r3, r2
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d21e      	bcs.n	80036b0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b24      	ldr	r3, [pc, #144]	; (8003704 <HAL_RCC_ClockConfig+0x1f0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2207      	movs	r2, #7
 8003678:	4393      	bics	r3, r2
 800367a:	0019      	movs	r1, r3
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_RCC_ClockConfig+0x1f0>)
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003684:	f7fe fcf8 	bl	8002078 <HAL_GetTick>
 8003688:	0003      	movs	r3, r0
 800368a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800368c:	e009      	b.n	80036a2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368e:	f7fe fcf3 	bl	8002078 <HAL_GetTick>
 8003692:	0002      	movs	r2, r0
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <HAL_RCC_ClockConfig+0x1f4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e02c      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036a2:	4b18      	ldr	r3, [pc, #96]	; (8003704 <HAL_RCC_ClockConfig+0x1f0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2207      	movs	r2, #7
 80036a8:	4013      	ands	r3, r2
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d1ee      	bne.n	800368e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2204      	movs	r2, #4
 80036b6:	4013      	ands	r3, r2
 80036b8:	d009      	beq.n	80036ce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036ba:	4b14      	ldr	r3, [pc, #80]	; (800370c <HAL_RCC_ClockConfig+0x1f8>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	4a15      	ldr	r2, [pc, #84]	; (8003714 <HAL_RCC_ClockConfig+0x200>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	0019      	movs	r1, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	4b10      	ldr	r3, [pc, #64]	; (800370c <HAL_RCC_ClockConfig+0x1f8>)
 80036ca:	430a      	orrs	r2, r1
 80036cc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80036ce:	f000 f829 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 80036d2:	0001      	movs	r1, r0
 80036d4:	4b0d      	ldr	r3, [pc, #52]	; (800370c <HAL_RCC_ClockConfig+0x1f8>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	220f      	movs	r2, #15
 80036dc:	401a      	ands	r2, r3
 80036de:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <HAL_RCC_ClockConfig+0x204>)
 80036e0:	0092      	lsls	r2, r2, #2
 80036e2:	58d3      	ldr	r3, [r2, r3]
 80036e4:	221f      	movs	r2, #31
 80036e6:	4013      	ands	r3, r2
 80036e8:	000a      	movs	r2, r1
 80036ea:	40da      	lsrs	r2, r3
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_RCC_ClockConfig+0x208>)
 80036ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_RCC_ClockConfig+0x20c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7fe fc63 	bl	8001fc0 <HAL_InitTick>
 80036fa:	0003      	movs	r3, r0
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	b004      	add	sp, #16
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40022000 	.word	0x40022000
 8003708:	00001388 	.word	0x00001388
 800370c:	40021000 	.word	0x40021000
 8003710:	fffff0ff 	.word	0xfffff0ff
 8003714:	ffff8fff 	.word	0xffff8fff
 8003718:	08007894 	.word	0x08007894
 800371c:	20000060 	.word	0x20000060
 8003720:	20000064 	.word	0x20000064

08003724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800372a:	4b3c      	ldr	r3, [pc, #240]	; (800381c <HAL_RCC_GetSysClockFreq+0xf8>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2238      	movs	r2, #56	; 0x38
 8003730:	4013      	ands	r3, r2
 8003732:	d10f      	bne.n	8003754 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003734:	4b39      	ldr	r3, [pc, #228]	; (800381c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	0adb      	lsrs	r3, r3, #11
 800373a:	2207      	movs	r2, #7
 800373c:	4013      	ands	r3, r2
 800373e:	2201      	movs	r2, #1
 8003740:	409a      	lsls	r2, r3
 8003742:	0013      	movs	r3, r2
 8003744:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003746:	6839      	ldr	r1, [r7, #0]
 8003748:	4835      	ldr	r0, [pc, #212]	; (8003820 <HAL_RCC_GetSysClockFreq+0xfc>)
 800374a:	f7fc fcef 	bl	800012c <__udivsi3>
 800374e:	0003      	movs	r3, r0
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	e05d      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003754:	4b31      	ldr	r3, [pc, #196]	; (800381c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2238      	movs	r2, #56	; 0x38
 800375a:	4013      	ands	r3, r2
 800375c:	2b08      	cmp	r3, #8
 800375e:	d102      	bne.n	8003766 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003760:	4b30      	ldr	r3, [pc, #192]	; (8003824 <HAL_RCC_GetSysClockFreq+0x100>)
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	e054      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003766:	4b2d      	ldr	r3, [pc, #180]	; (800381c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2238      	movs	r2, #56	; 0x38
 800376c:	4013      	ands	r3, r2
 800376e:	2b10      	cmp	r3, #16
 8003770:	d138      	bne.n	80037e4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003772:	4b2a      	ldr	r3, [pc, #168]	; (800381c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	2203      	movs	r2, #3
 8003778:	4013      	ands	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800377c:	4b27      	ldr	r3, [pc, #156]	; (800381c <HAL_RCC_GetSysClockFreq+0xf8>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	2207      	movs	r2, #7
 8003784:	4013      	ands	r3, r2
 8003786:	3301      	adds	r3, #1
 8003788:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d10d      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003790:	68b9      	ldr	r1, [r7, #8]
 8003792:	4824      	ldr	r0, [pc, #144]	; (8003824 <HAL_RCC_GetSysClockFreq+0x100>)
 8003794:	f7fc fcca 	bl	800012c <__udivsi3>
 8003798:	0003      	movs	r3, r0
 800379a:	0019      	movs	r1, r3
 800379c:	4b1f      	ldr	r3, [pc, #124]	; (800381c <HAL_RCC_GetSysClockFreq+0xf8>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	0a1b      	lsrs	r3, r3, #8
 80037a2:	227f      	movs	r2, #127	; 0x7f
 80037a4:	4013      	ands	r3, r2
 80037a6:	434b      	muls	r3, r1
 80037a8:	617b      	str	r3, [r7, #20]
        break;
 80037aa:	e00d      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	481c      	ldr	r0, [pc, #112]	; (8003820 <HAL_RCC_GetSysClockFreq+0xfc>)
 80037b0:	f7fc fcbc 	bl	800012c <__udivsi3>
 80037b4:	0003      	movs	r3, r0
 80037b6:	0019      	movs	r1, r3
 80037b8:	4b18      	ldr	r3, [pc, #96]	; (800381c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	227f      	movs	r2, #127	; 0x7f
 80037c0:	4013      	ands	r3, r2
 80037c2:	434b      	muls	r3, r1
 80037c4:	617b      	str	r3, [r7, #20]
        break;
 80037c6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80037c8:	4b14      	ldr	r3, [pc, #80]	; (800381c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	0f5b      	lsrs	r3, r3, #29
 80037ce:	2207      	movs	r2, #7
 80037d0:	4013      	ands	r3, r2
 80037d2:	3301      	adds	r3, #1
 80037d4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	6978      	ldr	r0, [r7, #20]
 80037da:	f7fc fca7 	bl	800012c <__udivsi3>
 80037de:	0003      	movs	r3, r0
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	e015      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80037e4:	4b0d      	ldr	r3, [pc, #52]	; (800381c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2238      	movs	r2, #56	; 0x38
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d103      	bne.n	80037f8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	e00b      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2238      	movs	r2, #56	; 0x38
 80037fe:	4013      	ands	r3, r2
 8003800:	2b18      	cmp	r3, #24
 8003802:	d103      	bne.n	800380c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003804:	23fa      	movs	r3, #250	; 0xfa
 8003806:	01db      	lsls	r3, r3, #7
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	e001      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003810:	693b      	ldr	r3, [r7, #16]
}
 8003812:	0018      	movs	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	b006      	add	sp, #24
 8003818:	bd80      	pop	{r7, pc}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	40021000 	.word	0x40021000
 8003820:	00f42400 	.word	0x00f42400
 8003824:	007a1200 	.word	0x007a1200

08003828 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800382c:	4b02      	ldr	r3, [pc, #8]	; (8003838 <HAL_RCC_GetHCLKFreq+0x10>)
 800382e:	681b      	ldr	r3, [r3, #0]
}
 8003830:	0018      	movs	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	20000060 	.word	0x20000060

0800383c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800383c:	b5b0      	push	{r4, r5, r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003840:	f7ff fff2 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 8003844:	0004      	movs	r4, r0
 8003846:	f7ff fa7d 	bl	8002d44 <LL_RCC_GetAPB1Prescaler>
 800384a:	0003      	movs	r3, r0
 800384c:	0b1a      	lsrs	r2, r3, #12
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003850:	0092      	lsls	r2, r2, #2
 8003852:	58d3      	ldr	r3, [r2, r3]
 8003854:	221f      	movs	r2, #31
 8003856:	4013      	ands	r3, r2
 8003858:	40dc      	lsrs	r4, r3
 800385a:	0023      	movs	r3, r4
}
 800385c:	0018      	movs	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	bdb0      	pop	{r4, r5, r7, pc}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	080078d4 	.word	0x080078d4

08003868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003870:	2313      	movs	r3, #19
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003878:	2312      	movs	r3, #18
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	029b      	lsls	r3, r3, #10
 8003888:	4013      	ands	r3, r2
 800388a:	d100      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800388c:	e0ad      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800388e:	2011      	movs	r0, #17
 8003890:	183b      	adds	r3, r7, r0
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003898:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	055b      	lsls	r3, r3, #21
 800389e:	4013      	ands	r3, r2
 80038a0:	d110      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	4b44      	ldr	r3, [pc, #272]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038a6:	4b43      	ldr	r3, [pc, #268]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038a8:	2180      	movs	r1, #128	; 0x80
 80038aa:	0549      	lsls	r1, r1, #21
 80038ac:	430a      	orrs	r2, r1
 80038ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80038b0:	4b40      	ldr	r3, [pc, #256]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038b4:	2380      	movs	r3, #128	; 0x80
 80038b6:	055b      	lsls	r3, r3, #21
 80038b8:	4013      	ands	r3, r2
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038be:	183b      	adds	r3, r7, r0
 80038c0:	2201      	movs	r2, #1
 80038c2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c4:	4b3c      	ldr	r3, [pc, #240]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4b3b      	ldr	r3, [pc, #236]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80038ca:	2180      	movs	r1, #128	; 0x80
 80038cc:	0049      	lsls	r1, r1, #1
 80038ce:	430a      	orrs	r2, r1
 80038d0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038d2:	f7fe fbd1 	bl	8002078 <HAL_GetTick>
 80038d6:	0003      	movs	r3, r0
 80038d8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038da:	e00b      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038dc:	f7fe fbcc 	bl	8002078 <HAL_GetTick>
 80038e0:	0002      	movs	r2, r0
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d904      	bls.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80038ea:	2313      	movs	r3, #19
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	2203      	movs	r2, #3
 80038f0:	701a      	strb	r2, [r3, #0]
        break;
 80038f2:	e005      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038f4:	4b30      	ldr	r3, [pc, #192]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	2380      	movs	r3, #128	; 0x80
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4013      	ands	r3, r2
 80038fe:	d0ed      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003900:	2313      	movs	r3, #19
 8003902:	18fb      	adds	r3, r7, r3
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d15e      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800390a:	4b2a      	ldr	r3, [pc, #168]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800390c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800390e:	23c0      	movs	r3, #192	; 0xc0
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4013      	ands	r3, r2
 8003914:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d019      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	429a      	cmp	r2, r3
 8003924:	d014      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003926:	4b23      	ldr	r3, [pc, #140]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392a:	4a24      	ldr	r2, [pc, #144]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800392c:	4013      	ands	r3, r2
 800392e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003930:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003932:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003934:	4b1f      	ldr	r3, [pc, #124]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003936:	2180      	movs	r1, #128	; 0x80
 8003938:	0249      	lsls	r1, r1, #9
 800393a:	430a      	orrs	r2, r1
 800393c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800393e:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003940:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003942:	4b1c      	ldr	r3, [pc, #112]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003944:	491e      	ldr	r1, [pc, #120]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003946:	400a      	ands	r2, r1
 8003948:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800394a:	4b1a      	ldr	r3, [pc, #104]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2201      	movs	r2, #1
 8003954:	4013      	ands	r3, r2
 8003956:	d016      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fe fb8e 	bl	8002078 <HAL_GetTick>
 800395c:	0003      	movs	r3, r0
 800395e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003960:	e00c      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003962:	f7fe fb89 	bl	8002078 <HAL_GetTick>
 8003966:	0002      	movs	r2, r0
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	4a15      	ldr	r2, [pc, #84]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d904      	bls.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003972:	2313      	movs	r3, #19
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	2203      	movs	r2, #3
 8003978:	701a      	strb	r2, [r3, #0]
            break;
 800397a:	e004      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800397c:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	2202      	movs	r2, #2
 8003982:	4013      	ands	r3, r2
 8003984:	d0ed      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003986:	2313      	movs	r3, #19
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10a      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003990:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	4a09      	ldr	r2, [pc, #36]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003996:	4013      	ands	r3, r2
 8003998:	0019      	movs	r1, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039a0:	430a      	orrs	r2, r1
 80039a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80039a4:	e016      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039a6:	2312      	movs	r3, #18
 80039a8:	18fb      	adds	r3, r7, r3
 80039aa:	2213      	movs	r2, #19
 80039ac:	18ba      	adds	r2, r7, r2
 80039ae:	7812      	ldrb	r2, [r2, #0]
 80039b0:	701a      	strb	r2, [r3, #0]
 80039b2:	e00f      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40007000 	.word	0x40007000
 80039bc:	fffffcff 	.word	0xfffffcff
 80039c0:	fffeffff 	.word	0xfffeffff
 80039c4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c8:	2312      	movs	r3, #18
 80039ca:	18fb      	adds	r3, r7, r3
 80039cc:	2213      	movs	r2, #19
 80039ce:	18ba      	adds	r2, r7, r2
 80039d0:	7812      	ldrb	r2, [r2, #0]
 80039d2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039d4:	2311      	movs	r3, #17
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d105      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039de:	4bb6      	ldr	r3, [pc, #728]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039e2:	4bb5      	ldr	r3, [pc, #724]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039e4:	49b5      	ldr	r1, [pc, #724]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80039e6:	400a      	ands	r2, r1
 80039e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2201      	movs	r2, #1
 80039f0:	4013      	ands	r3, r2
 80039f2:	d009      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039f4:	4bb0      	ldr	r3, [pc, #704]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f8:	2203      	movs	r2, #3
 80039fa:	4393      	bics	r3, r2
 80039fc:	0019      	movs	r1, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	4bad      	ldr	r3, [pc, #692]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a04:	430a      	orrs	r2, r1
 8003a06:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d009      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a12:	4ba9      	ldr	r3, [pc, #676]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a16:	220c      	movs	r2, #12
 8003a18:	4393      	bics	r3, r2
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	4ba5      	ldr	r3, [pc, #660]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a22:	430a      	orrs	r2, r1
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d009      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a30:	4ba1      	ldr	r3, [pc, #644]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a34:	2230      	movs	r2, #48	; 0x30
 8003a36:	4393      	bics	r3, r2
 8003a38:	0019      	movs	r1, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	4b9e      	ldr	r3, [pc, #632]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a40:	430a      	orrs	r2, r1
 8003a42:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2210      	movs	r2, #16
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d009      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a4e:	4b9a      	ldr	r3, [pc, #616]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	4a9b      	ldr	r2, [pc, #620]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	0019      	movs	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	4b96      	ldr	r3, [pc, #600]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	015b      	lsls	r3, r3, #5
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d009      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003a6e:	4b92      	ldr	r3, [pc, #584]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	4a94      	ldr	r2, [pc, #592]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	0019      	movs	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	4b8e      	ldr	r3, [pc, #568]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	2380      	movs	r3, #128	; 0x80
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d009      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a8e:	4b8a      	ldr	r3, [pc, #552]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a92:	4a8d      	ldr	r2, [pc, #564]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	0019      	movs	r1, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a9c:	4b86      	ldr	r3, [pc, #536]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d009      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003aae:	4b82      	ldr	r3, [pc, #520]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	4a86      	ldr	r2, [pc, #536]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	0019      	movs	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abc:	4b7e      	ldr	r3, [pc, #504]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d009      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003acc:	4b7a      	ldr	r3, [pc, #488]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad0:	4a7f      	ldr	r2, [pc, #508]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	4b77      	ldr	r3, [pc, #476]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003adc:	430a      	orrs	r2, r1
 8003ade:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2240      	movs	r2, #64	; 0x40
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aea:	4b73      	ldr	r3, [pc, #460]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aee:	4a79      	ldr	r2, [pc, #484]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	0019      	movs	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	4b6f      	ldr	r3, [pc, #444]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003afa:	430a      	orrs	r2, r1
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	01db      	lsls	r3, r3, #7
 8003b06:	4013      	ands	r3, r2
 8003b08:	d015      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b0a:	4b6b      	ldr	r3, [pc, #428]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	0899      	lsrs	r1, r3, #2
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b16:	4b68      	ldr	r3, [pc, #416]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	05db      	lsls	r3, r3, #23
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d106      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b28:	4b63      	ldr	r3, [pc, #396]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	4b62      	ldr	r3, [pc, #392]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b2e:	2180      	movs	r1, #128	; 0x80
 8003b30:	0249      	lsls	r1, r1, #9
 8003b32:	430a      	orrs	r2, r1
 8003b34:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	031b      	lsls	r3, r3, #12
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d009      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b42:	4b5d      	ldr	r3, [pc, #372]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	2240      	movs	r2, #64	; 0x40
 8003b48:	4393      	bics	r3, r2
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b50:	4b59      	ldr	r3, [pc, #356]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b52:	430a      	orrs	r2, r1
 8003b54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	2380      	movs	r3, #128	; 0x80
 8003b5c:	039b      	lsls	r3, r3, #14
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d016      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b62:	4b55      	ldr	r3, [pc, #340]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	4a5c      	ldr	r2, [pc, #368]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b70:	4b51      	ldr	r3, [pc, #324]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b72:	430a      	orrs	r2, r1
 8003b74:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7a:	2380      	movs	r3, #128	; 0x80
 8003b7c:	03db      	lsls	r3, r3, #15
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d106      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003b82:	4b4d      	ldr	r3, [pc, #308]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	4b4c      	ldr	r3, [pc, #304]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b88:	2180      	movs	r1, #128	; 0x80
 8003b8a:	0449      	lsls	r1, r1, #17
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	03db      	lsls	r3, r3, #15
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d016      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b9c:	4b46      	ldr	r3, [pc, #280]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba0:	4a4e      	ldr	r2, [pc, #312]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	0019      	movs	r1, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003baa:	4b43      	ldr	r3, [pc, #268]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bac:	430a      	orrs	r2, r1
 8003bae:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	045b      	lsls	r3, r3, #17
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d106      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003bbc:	4b3e      	ldr	r3, [pc, #248]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	4b3d      	ldr	r3, [pc, #244]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bc2:	2180      	movs	r1, #128	; 0x80
 8003bc4:	0449      	lsls	r1, r1, #17
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d014      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003bd6:	4b38      	ldr	r3, [pc, #224]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	2203      	movs	r2, #3
 8003bdc:	4393      	bics	r3, r2
 8003bde:	0019      	movs	r1, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1a      	ldr	r2, [r3, #32]
 8003be4:	4b34      	ldr	r3, [pc, #208]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003be6:	430a      	orrs	r2, r1
 8003be8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d106      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003bf2:	4b31      	ldr	r3, [pc, #196]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	4b30      	ldr	r3, [pc, #192]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	0249      	lsls	r1, r1, #9
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	019b      	lsls	r3, r3, #6
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d014      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003c0c:	4b2a      	ldr	r3, [pc, #168]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c10:	220c      	movs	r2, #12
 8003c12:	4393      	bics	r3, r2
 8003c14:	0019      	movs	r1, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c1a:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d106      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c28:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	4b22      	ldr	r3, [pc, #136]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c2e:	2180      	movs	r1, #128	; 0x80
 8003c30:	0249      	lsls	r1, r1, #9
 8003c32:	430a      	orrs	r2, r1
 8003c34:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	2380      	movs	r3, #128	; 0x80
 8003c3c:	045b      	lsls	r3, r3, #17
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d016      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c42:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c46:	4a22      	ldr	r2, [pc, #136]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c50:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c52:	430a      	orrs	r2, r1
 8003c54:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	019b      	lsls	r3, r3, #6
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d106      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c62:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c68:	2180      	movs	r1, #128	; 0x80
 8003c6a:	0449      	lsls	r1, r1, #17
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	049b      	lsls	r3, r3, #18
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d016      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c7c:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	4a10      	ldr	r2, [pc, #64]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	0019      	movs	r1, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c94:	2380      	movs	r3, #128	; 0x80
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d106      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ca2:	2180      	movs	r1, #128	; 0x80
 8003ca4:	0449      	lsls	r1, r1, #17
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003caa:	2312      	movs	r3, #18
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	781b      	ldrb	r3, [r3, #0]
}
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b006      	add	sp, #24
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	efffffff 	.word	0xefffffff
 8003cc0:	fffff3ff 	.word	0xfffff3ff
 8003cc4:	fffffcff 	.word	0xfffffcff
 8003cc8:	fff3ffff 	.word	0xfff3ffff
 8003ccc:	ffcfffff 	.word	0xffcfffff
 8003cd0:	ffffcfff 	.word	0xffffcfff
 8003cd4:	ffff3fff 	.word	0xffff3fff
 8003cd8:	ffbfffff 	.word	0xffbfffff
 8003cdc:	feffffff 	.word	0xfeffffff

08003ce0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e0a8      	b.n	8003e44 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	2382      	movs	r3, #130	; 0x82
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d009      	beq.n	8003d1a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	61da      	str	r2, [r3, #28]
 8003d0c:	e005      	b.n	8003d1a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	225d      	movs	r2, #93	; 0x5d
 8003d24:	5c9b      	ldrb	r3, [r3, r2]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d107      	bne.n	8003d3c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	225c      	movs	r2, #92	; 0x5c
 8003d30:	2100      	movs	r1, #0
 8003d32:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	0018      	movs	r0, r3
 8003d38:	f000 f88a 	bl	8003e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	225d      	movs	r2, #93	; 0x5d
 8003d40:	2102      	movs	r1, #2
 8003d42:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2140      	movs	r1, #64	; 0x40
 8003d50:	438a      	bics	r2, r1
 8003d52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	23e0      	movs	r3, #224	; 0xe0
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d902      	bls.n	8003d66 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	e002      	b.n	8003d6c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	015b      	lsls	r3, r3, #5
 8003d6a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	23f0      	movs	r3, #240	; 0xf0
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d008      	beq.n	8003d8a <HAL_SPI_Init+0xaa>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	23e0      	movs	r3, #224	; 0xe0
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d002      	beq.n	8003d8a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	2382      	movs	r3, #130	; 0x82
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	401a      	ands	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6899      	ldr	r1, [r3, #8]
 8003d98:	2384      	movs	r3, #132	; 0x84
 8003d9a:	021b      	lsls	r3, r3, #8
 8003d9c:	400b      	ands	r3, r1
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2102      	movs	r1, #2
 8003da6:	400b      	ands	r3, r1
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	2101      	movs	r1, #1
 8003db0:	400b      	ands	r3, r1
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6999      	ldr	r1, [r3, #24]
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	400b      	ands	r3, r1
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	2138      	movs	r1, #56	; 0x38
 8003dc6:	400b      	ands	r3, r1
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	2180      	movs	r1, #128	; 0x80
 8003dd0:	400b      	ands	r3, r1
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	0011      	movs	r1, r2
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dda:	2380      	movs	r3, #128	; 0x80
 8003ddc:	019b      	lsls	r3, r3, #6
 8003dde:	401a      	ands	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	0c1b      	lsrs	r3, r3, #16
 8003dee:	2204      	movs	r2, #4
 8003df0:	401a      	ands	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	2110      	movs	r1, #16
 8003df8:	400b      	ands	r3, r1
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e00:	2108      	movs	r1, #8
 8003e02:	400b      	ands	r3, r1
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68d9      	ldr	r1, [r3, #12]
 8003e0a:	23f0      	movs	r3, #240	; 0xf0
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	400b      	ands	r3, r1
 8003e10:	431a      	orrs	r2, r3
 8003e12:	0011      	movs	r1, r2
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	2380      	movs	r3, #128	; 0x80
 8003e18:	015b      	lsls	r3, r3, #5
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69da      	ldr	r2, [r3, #28]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4907      	ldr	r1, [pc, #28]	; (8003e4c <HAL_SPI_Init+0x16c>)
 8003e30:	400a      	ands	r2, r1
 8003e32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	225d      	movs	r2, #93	; 0x5d
 8003e3e:	2101      	movs	r1, #1
 8003e40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	0018      	movs	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b004      	add	sp, #16
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	fffff7ff 	.word	0xfffff7ff

08003e50 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8003e58:	46c0      	nop			; (mov r8, r8)
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b002      	add	sp, #8
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	; 0x28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	001a      	movs	r2, r3
 8003e6e:	1cbb      	adds	r3, r7, #2
 8003e70:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e72:	2301      	movs	r3, #1
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e76:	2323      	movs	r3, #35	; 0x23
 8003e78:	18fb      	adds	r3, r7, r3
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	225c      	movs	r2, #92	; 0x5c
 8003e82:	5c9b      	ldrb	r3, [r3, r2]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_SPI_TransmitReceive+0x2c>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e1b5      	b.n	80041f8 <HAL_SPI_TransmitReceive+0x398>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	225c      	movs	r2, #92	; 0x5c
 8003e90:	2101      	movs	r1, #1
 8003e92:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e94:	f7fe f8f0 	bl	8002078 <HAL_GetTick>
 8003e98:	0003      	movs	r3, r0
 8003e9a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e9c:	201b      	movs	r0, #27
 8003e9e:	183b      	adds	r3, r7, r0
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	215d      	movs	r1, #93	; 0x5d
 8003ea4:	5c52      	ldrb	r2, [r2, r1]
 8003ea6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003eae:	2312      	movs	r3, #18
 8003eb0:	18fb      	adds	r3, r7, r3
 8003eb2:	1cba      	adds	r2, r7, #2
 8003eb4:	8812      	ldrh	r2, [r2, #0]
 8003eb6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003eb8:	183b      	adds	r3, r7, r0
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d011      	beq.n	8003ee4 <HAL_SPI_TransmitReceive+0x84>
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	2382      	movs	r3, #130	; 0x82
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d107      	bne.n	8003eda <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d103      	bne.n	8003eda <HAL_SPI_TransmitReceive+0x7a>
 8003ed2:	183b      	adds	r3, r7, r0
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d004      	beq.n	8003ee4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003eda:	2323      	movs	r3, #35	; 0x23
 8003edc:	18fb      	adds	r3, r7, r3
 8003ede:	2202      	movs	r2, #2
 8003ee0:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ee2:	e17e      	b.n	80041e2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d006      	beq.n	8003ef8 <HAL_SPI_TransmitReceive+0x98>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_SPI_TransmitReceive+0x98>
 8003ef0:	1cbb      	adds	r3, r7, #2
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d104      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003ef8:	2323      	movs	r3, #35	; 0x23
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	2201      	movs	r2, #1
 8003efe:	701a      	strb	r2, [r3, #0]
    goto error;
 8003f00:	e16f      	b.n	80041e2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	225d      	movs	r2, #93	; 0x5d
 8003f06:	5c9b      	ldrb	r3, [r3, r2]
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d003      	beq.n	8003f16 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	225d      	movs	r2, #93	; 0x5d
 8003f12:	2105      	movs	r1, #5
 8003f14:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1cba      	adds	r2, r7, #2
 8003f26:	2146      	movs	r1, #70	; 0x46
 8003f28:	8812      	ldrh	r2, [r2, #0]
 8003f2a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	1cba      	adds	r2, r7, #2
 8003f30:	2144      	movs	r1, #68	; 0x44
 8003f32:	8812      	ldrh	r2, [r2, #0]
 8003f34:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1cba      	adds	r2, r7, #2
 8003f40:	8812      	ldrh	r2, [r2, #0]
 8003f42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1cba      	adds	r2, r7, #2
 8003f48:	8812      	ldrh	r2, [r2, #0]
 8003f4a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	23e0      	movs	r3, #224	; 0xe0
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d908      	bls.n	8003f76 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	49a4      	ldr	r1, [pc, #656]	; (8004200 <HAL_SPI_TransmitReceive+0x3a0>)
 8003f70:	400a      	ands	r2, r1
 8003f72:	605a      	str	r2, [r3, #4]
 8003f74:	e008      	b.n	8003f88 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2180      	movs	r1, #128	; 0x80
 8003f82:	0149      	lsls	r1, r1, #5
 8003f84:	430a      	orrs	r2, r1
 8003f86:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2240      	movs	r2, #64	; 0x40
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b40      	cmp	r3, #64	; 0x40
 8003f94:	d007      	beq.n	8003fa6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2140      	movs	r1, #64	; 0x40
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	23e0      	movs	r3, #224	; 0xe0
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d800      	bhi.n	8003fb4 <HAL_SPI_TransmitReceive+0x154>
 8003fb2:	e07f      	b.n	80040b4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_SPI_TransmitReceive+0x168>
 8003fbc:	2312      	movs	r3, #18
 8003fbe:	18fb      	adds	r3, r7, r3
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d000      	beq.n	8003fc8 <HAL_SPI_TransmitReceive+0x168>
 8003fc6:	e069      	b.n	800409c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	881a      	ldrh	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	1c9a      	adds	r2, r3, #2
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fec:	e056      	b.n	800409c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d11b      	bne.n	8004034 <HAL_SPI_TransmitReceive+0x1d4>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d016      	beq.n	8004034 <HAL_SPI_TransmitReceive+0x1d4>
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	2b01      	cmp	r3, #1
 800400a:	d113      	bne.n	8004034 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004010:	881a      	ldrh	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	1c9a      	adds	r2, r3, #2
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2201      	movs	r2, #1
 800403c:	4013      	ands	r3, r2
 800403e:	2b01      	cmp	r3, #1
 8004040:	d11c      	bne.n	800407c <HAL_SPI_TransmitReceive+0x21c>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2246      	movs	r2, #70	; 0x46
 8004046:	5a9b      	ldrh	r3, [r3, r2]
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d016      	beq.n	800407c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	b292      	uxth	r2, r2
 800405a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	1c9a      	adds	r2, r3, #2
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2246      	movs	r2, #70	; 0x46
 800406a:	5a9b      	ldrh	r3, [r3, r2]
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b299      	uxth	r1, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2246      	movs	r2, #70	; 0x46
 8004076:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004078:	2301      	movs	r3, #1
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800407c:	f7fd fffc 	bl	8002078 <HAL_GetTick>
 8004080:	0002      	movs	r2, r0
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004088:	429a      	cmp	r2, r3
 800408a:	d807      	bhi.n	800409c <HAL_SPI_TransmitReceive+0x23c>
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	3301      	adds	r3, #1
 8004090:	d004      	beq.n	800409c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8004092:	2323      	movs	r3, #35	; 0x23
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	2203      	movs	r2, #3
 8004098:	701a      	strb	r2, [r3, #0]
        goto error;
 800409a:	e0a2      	b.n	80041e2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1a3      	bne.n	8003fee <HAL_SPI_TransmitReceive+0x18e>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2246      	movs	r2, #70	; 0x46
 80040aa:	5a9b      	ldrh	r3, [r3, r2]
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d19d      	bne.n	8003fee <HAL_SPI_TransmitReceive+0x18e>
 80040b2:	e085      	b.n	80041c0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_SPI_TransmitReceive+0x268>
 80040bc:	2312      	movs	r3, #18
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d000      	beq.n	80040c8 <HAL_SPI_TransmitReceive+0x268>
 80040c6:	e070      	b.n	80041aa <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	330c      	adds	r3, #12
 80040d2:	7812      	ldrb	r2, [r2, #0]
 80040d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ee:	e05c      	b.n	80041aa <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2202      	movs	r2, #2
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d11c      	bne.n	8004138 <HAL_SPI_TransmitReceive+0x2d8>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004102:	b29b      	uxth	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d017      	beq.n	8004138 <HAL_SPI_TransmitReceive+0x2d8>
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	2b01      	cmp	r3, #1
 800410c:	d114      	bne.n	8004138 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	330c      	adds	r3, #12
 8004118:	7812      	ldrb	r2, [r2, #0]
 800411a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2201      	movs	r2, #1
 8004140:	4013      	ands	r3, r2
 8004142:	2b01      	cmp	r3, #1
 8004144:	d11e      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x324>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2246      	movs	r2, #70	; 0x46
 800414a:	5a9b      	ldrh	r3, [r3, r2]
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d018      	beq.n	8004184 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	001a      	movs	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	7812      	ldrb	r2, [r2, #0]
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2246      	movs	r2, #70	; 0x46
 8004172:	5a9b      	ldrh	r3, [r3, r2]
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b299      	uxth	r1, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2246      	movs	r2, #70	; 0x46
 800417e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004180:	2301      	movs	r3, #1
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004184:	f7fd ff78 	bl	8002078 <HAL_GetTick>
 8004188:	0002      	movs	r2, r0
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004190:	429a      	cmp	r2, r3
 8004192:	d802      	bhi.n	800419a <HAL_SPI_TransmitReceive+0x33a>
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	3301      	adds	r3, #1
 8004198:	d102      	bne.n	80041a0 <HAL_SPI_TransmitReceive+0x340>
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	2b00      	cmp	r3, #0
 800419e:	d104      	bne.n	80041aa <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80041a0:	2323      	movs	r3, #35	; 0x23
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	2203      	movs	r2, #3
 80041a6:	701a      	strb	r2, [r3, #0]
        goto error;
 80041a8:	e01b      	b.n	80041e2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d19d      	bne.n	80040f0 <HAL_SPI_TransmitReceive+0x290>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2246      	movs	r2, #70	; 0x46
 80041b8:	5a9b      	ldrh	r3, [r3, r2]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d197      	bne.n	80040f0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	0018      	movs	r0, r3
 80041c8:	f000 f958 	bl	800447c <SPI_EndRxTxTransaction>
 80041cc:	1e03      	subs	r3, r0, #0
 80041ce:	d007      	beq.n	80041e0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80041d0:	2323      	movs	r3, #35	; 0x23
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	2201      	movs	r2, #1
 80041d6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2220      	movs	r2, #32
 80041dc:	661a      	str	r2, [r3, #96]	; 0x60
 80041de:	e000      	b.n	80041e2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80041e0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	225d      	movs	r2, #93	; 0x5d
 80041e6:	2101      	movs	r1, #1
 80041e8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	225c      	movs	r2, #92	; 0x5c
 80041ee:	2100      	movs	r1, #0
 80041f0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80041f2:	2323      	movs	r3, #35	; 0x23
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	781b      	ldrb	r3, [r3, #0]
}
 80041f8:	0018      	movs	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b00a      	add	sp, #40	; 0x28
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	ffffefff 	.word	0xffffefff

08004204 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	225d      	movs	r2, #93	; 0x5d
 8004210:	5c9b      	ldrb	r3, [r3, r2]
 8004212:	b2db      	uxtb	r3, r3
}
 8004214:	0018      	movs	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	b002      	add	sp, #8
 800421a:	bd80      	pop	{r7, pc}

0800421c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	1dfb      	adds	r3, r7, #7
 800422a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800422c:	f7fd ff24 	bl	8002078 <HAL_GetTick>
 8004230:	0002      	movs	r2, r0
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	18d3      	adds	r3, r2, r3
 800423a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800423c:	f7fd ff1c 	bl	8002078 <HAL_GetTick>
 8004240:	0003      	movs	r3, r0
 8004242:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004244:	4b3a      	ldr	r3, [pc, #232]	; (8004330 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	015b      	lsls	r3, r3, #5
 800424a:	0d1b      	lsrs	r3, r3, #20
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	4353      	muls	r3, r2
 8004250:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004252:	e058      	b.n	8004306 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	3301      	adds	r3, #1
 8004258:	d055      	beq.n	8004306 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800425a:	f7fd ff0d 	bl	8002078 <HAL_GetTick>
 800425e:	0002      	movs	r2, r0
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	429a      	cmp	r2, r3
 8004268:	d902      	bls.n	8004270 <SPI_WaitFlagStateUntilTimeout+0x54>
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d142      	bne.n	80042f6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	21e0      	movs	r1, #224	; 0xe0
 800427c:	438a      	bics	r2, r1
 800427e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	2382      	movs	r3, #130	; 0x82
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	429a      	cmp	r2, r3
 800428a:	d113      	bne.n	80042b4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	2380      	movs	r3, #128	; 0x80
 8004292:	021b      	lsls	r3, r3, #8
 8004294:	429a      	cmp	r2, r3
 8004296:	d005      	beq.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	2380      	movs	r3, #128	; 0x80
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d107      	bne.n	80042b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2140      	movs	r1, #64	; 0x40
 80042b0:	438a      	bics	r2, r1
 80042b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	019b      	lsls	r3, r3, #6
 80042bc:	429a      	cmp	r2, r3
 80042be:	d110      	bne.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	491a      	ldr	r1, [pc, #104]	; (8004334 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80042cc:	400a      	ands	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2180      	movs	r1, #128	; 0x80
 80042dc:	0189      	lsls	r1, r1, #6
 80042de:	430a      	orrs	r2, r1
 80042e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	225d      	movs	r2, #93	; 0x5d
 80042e6:	2101      	movs	r1, #1
 80042e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	225c      	movs	r2, #92	; 0x5c
 80042ee:	2100      	movs	r1, #0
 80042f0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e017      	b.n	8004326 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	3b01      	subs	r3, #1
 8004304:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	4013      	ands	r3, r2
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	425a      	negs	r2, r3
 8004316:	4153      	adcs	r3, r2
 8004318:	b2db      	uxtb	r3, r3
 800431a:	001a      	movs	r2, r3
 800431c:	1dfb      	adds	r3, r7, #7
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d197      	bne.n	8004254 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	0018      	movs	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	b008      	add	sp, #32
 800432c:	bd80      	pop	{r7, pc}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	20000060 	.word	0x20000060
 8004334:	ffffdfff 	.word	0xffffdfff

08004338 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08a      	sub	sp, #40	; 0x28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004346:	2317      	movs	r3, #23
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	2200      	movs	r2, #0
 800434c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800434e:	f7fd fe93 	bl	8002078 <HAL_GetTick>
 8004352:	0002      	movs	r2, r0
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	18d3      	adds	r3, r2, r3
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800435e:	f7fd fe8b 	bl	8002078 <HAL_GetTick>
 8004362:	0003      	movs	r3, r0
 8004364:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	330c      	adds	r3, #12
 800436c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800436e:	4b41      	ldr	r3, [pc, #260]	; (8004474 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	0013      	movs	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	189b      	adds	r3, r3, r2
 8004378:	00da      	lsls	r2, r3, #3
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	0d1b      	lsrs	r3, r3, #20
 800437e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004380:	4353      	muls	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004384:	e068      	b.n	8004458 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	23c0      	movs	r3, #192	; 0xc0
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	429a      	cmp	r2, r3
 800438e:	d10a      	bne.n	80043a6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d107      	bne.n	80043a6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	2117      	movs	r1, #23
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80043a2:	187b      	adds	r3, r7, r1
 80043a4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	3301      	adds	r3, #1
 80043aa:	d055      	beq.n	8004458 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043ac:	f7fd fe64 	bl	8002078 <HAL_GetTick>
 80043b0:	0002      	movs	r2, r0
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d902      	bls.n	80043c2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d142      	bne.n	8004448 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	21e0      	movs	r1, #224	; 0xe0
 80043ce:	438a      	bics	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	2382      	movs	r3, #130	; 0x82
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	429a      	cmp	r2, r3
 80043dc:	d113      	bne.n	8004406 <SPI_WaitFifoStateUntilTimeout+0xce>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	2380      	movs	r3, #128	; 0x80
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d005      	beq.n	80043f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	2380      	movs	r3, #128	; 0x80
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d107      	bne.n	8004406 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2140      	movs	r1, #64	; 0x40
 8004402:	438a      	bics	r2, r1
 8004404:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800440a:	2380      	movs	r3, #128	; 0x80
 800440c:	019b      	lsls	r3, r3, #6
 800440e:	429a      	cmp	r2, r3
 8004410:	d110      	bne.n	8004434 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4916      	ldr	r1, [pc, #88]	; (8004478 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800441e:	400a      	ands	r2, r1
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2180      	movs	r1, #128	; 0x80
 800442e:	0189      	lsls	r1, r1, #6
 8004430:	430a      	orrs	r2, r1
 8004432:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	225d      	movs	r2, #93	; 0x5d
 8004438:	2101      	movs	r1, #1
 800443a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	225c      	movs	r2, #92	; 0x5c
 8004440:	2100      	movs	r1, #0
 8004442:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e010      	b.n	800446a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	3b01      	subs	r3, #1
 8004456:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	4013      	ands	r3, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	429a      	cmp	r2, r3
 8004466:	d18e      	bne.n	8004386 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	0018      	movs	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	b00a      	add	sp, #40	; 0x28
 8004470:	bd80      	pop	{r7, pc}
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	20000060 	.word	0x20000060
 8004478:	ffffdfff 	.word	0xffffdfff

0800447c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	23c0      	movs	r3, #192	; 0xc0
 800448c:	0159      	lsls	r1, r3, #5
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	0013      	movs	r3, r2
 8004496:	2200      	movs	r2, #0
 8004498:	f7ff ff4e 	bl	8004338 <SPI_WaitFifoStateUntilTimeout>
 800449c:	1e03      	subs	r3, r0, #0
 800449e:	d007      	beq.n	80044b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a4:	2220      	movs	r2, #32
 80044a6:	431a      	orrs	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e027      	b.n	8004500 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	0013      	movs	r3, r2
 80044ba:	2200      	movs	r2, #0
 80044bc:	2180      	movs	r1, #128	; 0x80
 80044be:	f7ff fead 	bl	800421c <SPI_WaitFlagStateUntilTimeout>
 80044c2:	1e03      	subs	r3, r0, #0
 80044c4:	d007      	beq.n	80044d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ca:	2220      	movs	r2, #32
 80044cc:	431a      	orrs	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e014      	b.n	8004500 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	23c0      	movs	r3, #192	; 0xc0
 80044da:	00d9      	lsls	r1, r3, #3
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	0013      	movs	r3, r2
 80044e4:	2200      	movs	r2, #0
 80044e6:	f7ff ff27 	bl	8004338 <SPI_WaitFifoStateUntilTimeout>
 80044ea:	1e03      	subs	r3, r0, #0
 80044ec:	d007      	beq.n	80044fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f2:	2220      	movs	r2, #32
 80044f4:	431a      	orrs	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e000      	b.n	8004500 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	0018      	movs	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	b004      	add	sp, #16
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e046      	b.n	80045a8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2288      	movs	r2, #136	; 0x88
 800451e:	589b      	ldr	r3, [r3, r2]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d107      	bne.n	8004534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2284      	movs	r2, #132	; 0x84
 8004528:	2100      	movs	r1, #0
 800452a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	0018      	movs	r0, r3
 8004530:	f7fd fc70 	bl	8001e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2288      	movs	r2, #136	; 0x88
 8004538:	2124      	movs	r1, #36	; 0x24
 800453a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2101      	movs	r1, #1
 8004548:	438a      	bics	r2, r1
 800454a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	0018      	movs	r0, r3
 8004550:	f000 f8cc 	bl	80046ec <UART_SetConfig>
 8004554:	0003      	movs	r3, r0
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e024      	b.n	80045a8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	0018      	movs	r0, r3
 800456a:	f000 fc15 	bl	8004d98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	490d      	ldr	r1, [pc, #52]	; (80045b0 <HAL_UART_Init+0xa8>)
 800457a:	400a      	ands	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	212a      	movs	r1, #42	; 0x2a
 800458a:	438a      	bics	r2, r1
 800458c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2101      	movs	r1, #1
 800459a:	430a      	orrs	r2, r1
 800459c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	0018      	movs	r0, r3
 80045a2:	f000 fcad 	bl	8004f00 <UART_CheckIdleState>
 80045a6:	0003      	movs	r3, r0
}
 80045a8:	0018      	movs	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b002      	add	sp, #8
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	ffffb7ff 	.word	0xffffb7ff

080045b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08a      	sub	sp, #40	; 0x28
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	1dbb      	adds	r3, r7, #6
 80045c2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2288      	movs	r2, #136	; 0x88
 80045c8:	589b      	ldr	r3, [r3, r2]
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d000      	beq.n	80045d0 <HAL_UART_Transmit+0x1c>
 80045ce:	e088      	b.n	80046e2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_UART_Transmit+0x2a>
 80045d6:	1dbb      	adds	r3, r7, #6
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e080      	b.n	80046e4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	2380      	movs	r3, #128	; 0x80
 80045e8:	015b      	lsls	r3, r3, #5
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d109      	bne.n	8004602 <HAL_UART_Transmit+0x4e>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d105      	bne.n	8004602 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2201      	movs	r2, #1
 80045fa:	4013      	ands	r3, r2
 80045fc:	d001      	beq.n	8004602 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e070      	b.n	80046e4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2290      	movs	r2, #144	; 0x90
 8004606:	2100      	movs	r1, #0
 8004608:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2288      	movs	r2, #136	; 0x88
 800460e:	2121      	movs	r1, #33	; 0x21
 8004610:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004612:	f7fd fd31 	bl	8002078 <HAL_GetTick>
 8004616:	0003      	movs	r3, r0
 8004618:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1dba      	adds	r2, r7, #6
 800461e:	2154      	movs	r1, #84	; 0x54
 8004620:	8812      	ldrh	r2, [r2, #0]
 8004622:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1dba      	adds	r2, r7, #6
 8004628:	2156      	movs	r1, #86	; 0x56
 800462a:	8812      	ldrh	r2, [r2, #0]
 800462c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	015b      	lsls	r3, r3, #5
 8004636:	429a      	cmp	r2, r3
 8004638:	d108      	bne.n	800464c <HAL_UART_Transmit+0x98>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d104      	bne.n	800464c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	e003      	b.n	8004654 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004650:	2300      	movs	r3, #0
 8004652:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004654:	e02c      	b.n	80046b0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	0013      	movs	r3, r2
 8004660:	2200      	movs	r2, #0
 8004662:	2180      	movs	r1, #128	; 0x80
 8004664:	f000 fc9a 	bl	8004f9c <UART_WaitOnFlagUntilTimeout>
 8004668:	1e03      	subs	r3, r0, #0
 800466a:	d001      	beq.n	8004670 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e039      	b.n	80046e4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	001a      	movs	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	05d2      	lsls	r2, r2, #23
 8004682:	0dd2      	lsrs	r2, r2, #23
 8004684:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	3302      	adds	r3, #2
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	e007      	b.n	800469e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	3301      	adds	r3, #1
 800469c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2256      	movs	r2, #86	; 0x56
 80046a2:	5a9b      	ldrh	r3, [r3, r2]
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b299      	uxth	r1, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2256      	movs	r2, #86	; 0x56
 80046ae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2256      	movs	r2, #86	; 0x56
 80046b4:	5a9b      	ldrh	r3, [r3, r2]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1cc      	bne.n	8004656 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	0013      	movs	r3, r2
 80046c6:	2200      	movs	r2, #0
 80046c8:	2140      	movs	r1, #64	; 0x40
 80046ca:	f000 fc67 	bl	8004f9c <UART_WaitOnFlagUntilTimeout>
 80046ce:	1e03      	subs	r3, r0, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e006      	b.n	80046e4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2288      	movs	r2, #136	; 0x88
 80046da:	2120      	movs	r1, #32
 80046dc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	e000      	b.n	80046e4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80046e2:	2302      	movs	r3, #2
  }
}
 80046e4:	0018      	movs	r0, r3
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b008      	add	sp, #32
 80046ea:	bd80      	pop	{r7, pc}

080046ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046ec:	b5b0      	push	{r4, r5, r7, lr}
 80046ee:	b090      	sub	sp, #64	; 0x40
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046f4:	231a      	movs	r3, #26
 80046f6:	2220      	movs	r2, #32
 80046f8:	189b      	adds	r3, r3, r2
 80046fa:	19db      	adds	r3, r3, r7
 80046fc:	2200      	movs	r2, #0
 80046fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	431a      	orrs	r2, r3
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	431a      	orrs	r2, r3
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	4313      	orrs	r3, r2
 8004716:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4ac1      	ldr	r2, [pc, #772]	; (8004a24 <UART_SetConfig+0x338>)
 8004720:	4013      	ands	r3, r2
 8004722:	0019      	movs	r1, r3
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472a:	430b      	orrs	r3, r1
 800472c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	4abc      	ldr	r2, [pc, #752]	; (8004a28 <UART_SetConfig+0x33c>)
 8004736:	4013      	ands	r3, r2
 8004738:	0018      	movs	r0, r3
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	68d9      	ldr	r1, [r3, #12]
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	0003      	movs	r3, r0
 8004744:	430b      	orrs	r3, r1
 8004746:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4ab6      	ldr	r2, [pc, #728]	; (8004a2c <UART_SetConfig+0x340>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d009      	beq.n	800476c <UART_SetConfig+0x80>
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4ab4      	ldr	r2, [pc, #720]	; (8004a30 <UART_SetConfig+0x344>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d004      	beq.n	800476c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004768:	4313      	orrs	r3, r2
 800476a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	4ab0      	ldr	r2, [pc, #704]	; (8004a34 <UART_SetConfig+0x348>)
 8004774:	4013      	ands	r3, r2
 8004776:	0019      	movs	r1, r3
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800477e:	430b      	orrs	r3, r1
 8004780:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	220f      	movs	r2, #15
 800478a:	4393      	bics	r3, r2
 800478c:	0018      	movs	r0, r3
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	0003      	movs	r3, r0
 8004798:	430b      	orrs	r3, r1
 800479a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4aa5      	ldr	r2, [pc, #660]	; (8004a38 <UART_SetConfig+0x34c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d131      	bne.n	800480a <UART_SetConfig+0x11e>
 80047a6:	4ba5      	ldr	r3, [pc, #660]	; (8004a3c <UART_SetConfig+0x350>)
 80047a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047aa:	2203      	movs	r2, #3
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d01d      	beq.n	80047ee <UART_SetConfig+0x102>
 80047b2:	d823      	bhi.n	80047fc <UART_SetConfig+0x110>
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d00c      	beq.n	80047d2 <UART_SetConfig+0xe6>
 80047b8:	d820      	bhi.n	80047fc <UART_SetConfig+0x110>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <UART_SetConfig+0xd8>
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d00e      	beq.n	80047e0 <UART_SetConfig+0xf4>
 80047c2:	e01b      	b.n	80047fc <UART_SetConfig+0x110>
 80047c4:	231b      	movs	r3, #27
 80047c6:	2220      	movs	r2, #32
 80047c8:	189b      	adds	r3, r3, r2
 80047ca:	19db      	adds	r3, r3, r7
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	e154      	b.n	8004a7c <UART_SetConfig+0x390>
 80047d2:	231b      	movs	r3, #27
 80047d4:	2220      	movs	r2, #32
 80047d6:	189b      	adds	r3, r3, r2
 80047d8:	19db      	adds	r3, r3, r7
 80047da:	2202      	movs	r2, #2
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	e14d      	b.n	8004a7c <UART_SetConfig+0x390>
 80047e0:	231b      	movs	r3, #27
 80047e2:	2220      	movs	r2, #32
 80047e4:	189b      	adds	r3, r3, r2
 80047e6:	19db      	adds	r3, r3, r7
 80047e8:	2204      	movs	r2, #4
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	e146      	b.n	8004a7c <UART_SetConfig+0x390>
 80047ee:	231b      	movs	r3, #27
 80047f0:	2220      	movs	r2, #32
 80047f2:	189b      	adds	r3, r3, r2
 80047f4:	19db      	adds	r3, r3, r7
 80047f6:	2208      	movs	r2, #8
 80047f8:	701a      	strb	r2, [r3, #0]
 80047fa:	e13f      	b.n	8004a7c <UART_SetConfig+0x390>
 80047fc:	231b      	movs	r3, #27
 80047fe:	2220      	movs	r2, #32
 8004800:	189b      	adds	r3, r3, r2
 8004802:	19db      	adds	r3, r3, r7
 8004804:	2210      	movs	r2, #16
 8004806:	701a      	strb	r2, [r3, #0]
 8004808:	e138      	b.n	8004a7c <UART_SetConfig+0x390>
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a8c      	ldr	r2, [pc, #560]	; (8004a40 <UART_SetConfig+0x354>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d131      	bne.n	8004878 <UART_SetConfig+0x18c>
 8004814:	4b89      	ldr	r3, [pc, #548]	; (8004a3c <UART_SetConfig+0x350>)
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004818:	220c      	movs	r2, #12
 800481a:	4013      	ands	r3, r2
 800481c:	2b0c      	cmp	r3, #12
 800481e:	d01d      	beq.n	800485c <UART_SetConfig+0x170>
 8004820:	d823      	bhi.n	800486a <UART_SetConfig+0x17e>
 8004822:	2b08      	cmp	r3, #8
 8004824:	d00c      	beq.n	8004840 <UART_SetConfig+0x154>
 8004826:	d820      	bhi.n	800486a <UART_SetConfig+0x17e>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <UART_SetConfig+0x146>
 800482c:	2b04      	cmp	r3, #4
 800482e:	d00e      	beq.n	800484e <UART_SetConfig+0x162>
 8004830:	e01b      	b.n	800486a <UART_SetConfig+0x17e>
 8004832:	231b      	movs	r3, #27
 8004834:	2220      	movs	r2, #32
 8004836:	189b      	adds	r3, r3, r2
 8004838:	19db      	adds	r3, r3, r7
 800483a:	2200      	movs	r2, #0
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	e11d      	b.n	8004a7c <UART_SetConfig+0x390>
 8004840:	231b      	movs	r3, #27
 8004842:	2220      	movs	r2, #32
 8004844:	189b      	adds	r3, r3, r2
 8004846:	19db      	adds	r3, r3, r7
 8004848:	2202      	movs	r2, #2
 800484a:	701a      	strb	r2, [r3, #0]
 800484c:	e116      	b.n	8004a7c <UART_SetConfig+0x390>
 800484e:	231b      	movs	r3, #27
 8004850:	2220      	movs	r2, #32
 8004852:	189b      	adds	r3, r3, r2
 8004854:	19db      	adds	r3, r3, r7
 8004856:	2204      	movs	r2, #4
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	e10f      	b.n	8004a7c <UART_SetConfig+0x390>
 800485c:	231b      	movs	r3, #27
 800485e:	2220      	movs	r2, #32
 8004860:	189b      	adds	r3, r3, r2
 8004862:	19db      	adds	r3, r3, r7
 8004864:	2208      	movs	r2, #8
 8004866:	701a      	strb	r2, [r3, #0]
 8004868:	e108      	b.n	8004a7c <UART_SetConfig+0x390>
 800486a:	231b      	movs	r3, #27
 800486c:	2220      	movs	r2, #32
 800486e:	189b      	adds	r3, r3, r2
 8004870:	19db      	adds	r3, r3, r7
 8004872:	2210      	movs	r2, #16
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	e101      	b.n	8004a7c <UART_SetConfig+0x390>
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a71      	ldr	r2, [pc, #452]	; (8004a44 <UART_SetConfig+0x358>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d131      	bne.n	80048e6 <UART_SetConfig+0x1fa>
 8004882:	4b6e      	ldr	r3, [pc, #440]	; (8004a3c <UART_SetConfig+0x350>)
 8004884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004886:	2230      	movs	r2, #48	; 0x30
 8004888:	4013      	ands	r3, r2
 800488a:	2b30      	cmp	r3, #48	; 0x30
 800488c:	d01d      	beq.n	80048ca <UART_SetConfig+0x1de>
 800488e:	d823      	bhi.n	80048d8 <UART_SetConfig+0x1ec>
 8004890:	2b20      	cmp	r3, #32
 8004892:	d00c      	beq.n	80048ae <UART_SetConfig+0x1c2>
 8004894:	d820      	bhi.n	80048d8 <UART_SetConfig+0x1ec>
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <UART_SetConfig+0x1b4>
 800489a:	2b10      	cmp	r3, #16
 800489c:	d00e      	beq.n	80048bc <UART_SetConfig+0x1d0>
 800489e:	e01b      	b.n	80048d8 <UART_SetConfig+0x1ec>
 80048a0:	231b      	movs	r3, #27
 80048a2:	2220      	movs	r2, #32
 80048a4:	189b      	adds	r3, r3, r2
 80048a6:	19db      	adds	r3, r3, r7
 80048a8:	2200      	movs	r2, #0
 80048aa:	701a      	strb	r2, [r3, #0]
 80048ac:	e0e6      	b.n	8004a7c <UART_SetConfig+0x390>
 80048ae:	231b      	movs	r3, #27
 80048b0:	2220      	movs	r2, #32
 80048b2:	189b      	adds	r3, r3, r2
 80048b4:	19db      	adds	r3, r3, r7
 80048b6:	2202      	movs	r2, #2
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	e0df      	b.n	8004a7c <UART_SetConfig+0x390>
 80048bc:	231b      	movs	r3, #27
 80048be:	2220      	movs	r2, #32
 80048c0:	189b      	adds	r3, r3, r2
 80048c2:	19db      	adds	r3, r3, r7
 80048c4:	2204      	movs	r2, #4
 80048c6:	701a      	strb	r2, [r3, #0]
 80048c8:	e0d8      	b.n	8004a7c <UART_SetConfig+0x390>
 80048ca:	231b      	movs	r3, #27
 80048cc:	2220      	movs	r2, #32
 80048ce:	189b      	adds	r3, r3, r2
 80048d0:	19db      	adds	r3, r3, r7
 80048d2:	2208      	movs	r2, #8
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	e0d1      	b.n	8004a7c <UART_SetConfig+0x390>
 80048d8:	231b      	movs	r3, #27
 80048da:	2220      	movs	r2, #32
 80048dc:	189b      	adds	r3, r3, r2
 80048de:	19db      	adds	r3, r3, r7
 80048e0:	2210      	movs	r2, #16
 80048e2:	701a      	strb	r2, [r3, #0]
 80048e4:	e0ca      	b.n	8004a7c <UART_SetConfig+0x390>
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a57      	ldr	r2, [pc, #348]	; (8004a48 <UART_SetConfig+0x35c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d106      	bne.n	80048fe <UART_SetConfig+0x212>
 80048f0:	231b      	movs	r3, #27
 80048f2:	2220      	movs	r2, #32
 80048f4:	189b      	adds	r3, r3, r2
 80048f6:	19db      	adds	r3, r3, r7
 80048f8:	2200      	movs	r2, #0
 80048fa:	701a      	strb	r2, [r3, #0]
 80048fc:	e0be      	b.n	8004a7c <UART_SetConfig+0x390>
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a52      	ldr	r2, [pc, #328]	; (8004a4c <UART_SetConfig+0x360>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d106      	bne.n	8004916 <UART_SetConfig+0x22a>
 8004908:	231b      	movs	r3, #27
 800490a:	2220      	movs	r2, #32
 800490c:	189b      	adds	r3, r3, r2
 800490e:	19db      	adds	r3, r3, r7
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]
 8004914:	e0b2      	b.n	8004a7c <UART_SetConfig+0x390>
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a4d      	ldr	r2, [pc, #308]	; (8004a50 <UART_SetConfig+0x364>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d106      	bne.n	800492e <UART_SetConfig+0x242>
 8004920:	231b      	movs	r3, #27
 8004922:	2220      	movs	r2, #32
 8004924:	189b      	adds	r3, r3, r2
 8004926:	19db      	adds	r3, r3, r7
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]
 800492c:	e0a6      	b.n	8004a7c <UART_SetConfig+0x390>
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a3e      	ldr	r2, [pc, #248]	; (8004a2c <UART_SetConfig+0x340>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d13e      	bne.n	80049b6 <UART_SetConfig+0x2ca>
 8004938:	4b40      	ldr	r3, [pc, #256]	; (8004a3c <UART_SetConfig+0x350>)
 800493a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800493c:	23c0      	movs	r3, #192	; 0xc0
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	4013      	ands	r3, r2
 8004942:	22c0      	movs	r2, #192	; 0xc0
 8004944:	0112      	lsls	r2, r2, #4
 8004946:	4293      	cmp	r3, r2
 8004948:	d027      	beq.n	800499a <UART_SetConfig+0x2ae>
 800494a:	22c0      	movs	r2, #192	; 0xc0
 800494c:	0112      	lsls	r2, r2, #4
 800494e:	4293      	cmp	r3, r2
 8004950:	d82a      	bhi.n	80049a8 <UART_SetConfig+0x2bc>
 8004952:	2280      	movs	r2, #128	; 0x80
 8004954:	0112      	lsls	r2, r2, #4
 8004956:	4293      	cmp	r3, r2
 8004958:	d011      	beq.n	800497e <UART_SetConfig+0x292>
 800495a:	2280      	movs	r2, #128	; 0x80
 800495c:	0112      	lsls	r2, r2, #4
 800495e:	4293      	cmp	r3, r2
 8004960:	d822      	bhi.n	80049a8 <UART_SetConfig+0x2bc>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d004      	beq.n	8004970 <UART_SetConfig+0x284>
 8004966:	2280      	movs	r2, #128	; 0x80
 8004968:	00d2      	lsls	r2, r2, #3
 800496a:	4293      	cmp	r3, r2
 800496c:	d00e      	beq.n	800498c <UART_SetConfig+0x2a0>
 800496e:	e01b      	b.n	80049a8 <UART_SetConfig+0x2bc>
 8004970:	231b      	movs	r3, #27
 8004972:	2220      	movs	r2, #32
 8004974:	189b      	adds	r3, r3, r2
 8004976:	19db      	adds	r3, r3, r7
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
 800497c:	e07e      	b.n	8004a7c <UART_SetConfig+0x390>
 800497e:	231b      	movs	r3, #27
 8004980:	2220      	movs	r2, #32
 8004982:	189b      	adds	r3, r3, r2
 8004984:	19db      	adds	r3, r3, r7
 8004986:	2202      	movs	r2, #2
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	e077      	b.n	8004a7c <UART_SetConfig+0x390>
 800498c:	231b      	movs	r3, #27
 800498e:	2220      	movs	r2, #32
 8004990:	189b      	adds	r3, r3, r2
 8004992:	19db      	adds	r3, r3, r7
 8004994:	2204      	movs	r2, #4
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	e070      	b.n	8004a7c <UART_SetConfig+0x390>
 800499a:	231b      	movs	r3, #27
 800499c:	2220      	movs	r2, #32
 800499e:	189b      	adds	r3, r3, r2
 80049a0:	19db      	adds	r3, r3, r7
 80049a2:	2208      	movs	r2, #8
 80049a4:	701a      	strb	r2, [r3, #0]
 80049a6:	e069      	b.n	8004a7c <UART_SetConfig+0x390>
 80049a8:	231b      	movs	r3, #27
 80049aa:	2220      	movs	r2, #32
 80049ac:	189b      	adds	r3, r3, r2
 80049ae:	19db      	adds	r3, r3, r7
 80049b0:	2210      	movs	r2, #16
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	e062      	b.n	8004a7c <UART_SetConfig+0x390>
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1d      	ldr	r2, [pc, #116]	; (8004a30 <UART_SetConfig+0x344>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d157      	bne.n	8004a70 <UART_SetConfig+0x384>
 80049c0:	4b1e      	ldr	r3, [pc, #120]	; (8004a3c <UART_SetConfig+0x350>)
 80049c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049c4:	23c0      	movs	r3, #192	; 0xc0
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4013      	ands	r3, r2
 80049ca:	22c0      	movs	r2, #192	; 0xc0
 80049cc:	0092      	lsls	r2, r2, #2
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d040      	beq.n	8004a54 <UART_SetConfig+0x368>
 80049d2:	22c0      	movs	r2, #192	; 0xc0
 80049d4:	0092      	lsls	r2, r2, #2
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d843      	bhi.n	8004a62 <UART_SetConfig+0x376>
 80049da:	2280      	movs	r2, #128	; 0x80
 80049dc:	0092      	lsls	r2, r2, #2
 80049de:	4293      	cmp	r3, r2
 80049e0:	d011      	beq.n	8004a06 <UART_SetConfig+0x31a>
 80049e2:	2280      	movs	r2, #128	; 0x80
 80049e4:	0092      	lsls	r2, r2, #2
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d83b      	bhi.n	8004a62 <UART_SetConfig+0x376>
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d004      	beq.n	80049f8 <UART_SetConfig+0x30c>
 80049ee:	2280      	movs	r2, #128	; 0x80
 80049f0:	0052      	lsls	r2, r2, #1
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00e      	beq.n	8004a14 <UART_SetConfig+0x328>
 80049f6:	e034      	b.n	8004a62 <UART_SetConfig+0x376>
 80049f8:	231b      	movs	r3, #27
 80049fa:	2220      	movs	r2, #32
 80049fc:	189b      	adds	r3, r3, r2
 80049fe:	19db      	adds	r3, r3, r7
 8004a00:	2200      	movs	r2, #0
 8004a02:	701a      	strb	r2, [r3, #0]
 8004a04:	e03a      	b.n	8004a7c <UART_SetConfig+0x390>
 8004a06:	231b      	movs	r3, #27
 8004a08:	2220      	movs	r2, #32
 8004a0a:	189b      	adds	r3, r3, r2
 8004a0c:	19db      	adds	r3, r3, r7
 8004a0e:	2202      	movs	r2, #2
 8004a10:	701a      	strb	r2, [r3, #0]
 8004a12:	e033      	b.n	8004a7c <UART_SetConfig+0x390>
 8004a14:	231b      	movs	r3, #27
 8004a16:	2220      	movs	r2, #32
 8004a18:	189b      	adds	r3, r3, r2
 8004a1a:	19db      	adds	r3, r3, r7
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	701a      	strb	r2, [r3, #0]
 8004a20:	e02c      	b.n	8004a7c <UART_SetConfig+0x390>
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	cfff69f3 	.word	0xcfff69f3
 8004a28:	ffffcfff 	.word	0xffffcfff
 8004a2c:	40008000 	.word	0x40008000
 8004a30:	40008400 	.word	0x40008400
 8004a34:	11fff4ff 	.word	0x11fff4ff
 8004a38:	40013800 	.word	0x40013800
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	40004400 	.word	0x40004400
 8004a44:	40004800 	.word	0x40004800
 8004a48:	40004c00 	.word	0x40004c00
 8004a4c:	40005000 	.word	0x40005000
 8004a50:	40013c00 	.word	0x40013c00
 8004a54:	231b      	movs	r3, #27
 8004a56:	2220      	movs	r2, #32
 8004a58:	189b      	adds	r3, r3, r2
 8004a5a:	19db      	adds	r3, r3, r7
 8004a5c:	2208      	movs	r2, #8
 8004a5e:	701a      	strb	r2, [r3, #0]
 8004a60:	e00c      	b.n	8004a7c <UART_SetConfig+0x390>
 8004a62:	231b      	movs	r3, #27
 8004a64:	2220      	movs	r2, #32
 8004a66:	189b      	adds	r3, r3, r2
 8004a68:	19db      	adds	r3, r3, r7
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	e005      	b.n	8004a7c <UART_SetConfig+0x390>
 8004a70:	231b      	movs	r3, #27
 8004a72:	2220      	movs	r2, #32
 8004a74:	189b      	adds	r3, r3, r2
 8004a76:	19db      	adds	r3, r3, r7
 8004a78:	2210      	movs	r2, #16
 8004a7a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4ac1      	ldr	r2, [pc, #772]	; (8004d88 <UART_SetConfig+0x69c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d005      	beq.n	8004a92 <UART_SetConfig+0x3a6>
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4ac0      	ldr	r2, [pc, #768]	; (8004d8c <UART_SetConfig+0x6a0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d000      	beq.n	8004a92 <UART_SetConfig+0x3a6>
 8004a90:	e093      	b.n	8004bba <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a92:	231b      	movs	r3, #27
 8004a94:	2220      	movs	r2, #32
 8004a96:	189b      	adds	r3, r3, r2
 8004a98:	19db      	adds	r3, r3, r7
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d015      	beq.n	8004acc <UART_SetConfig+0x3e0>
 8004aa0:	dc18      	bgt.n	8004ad4 <UART_SetConfig+0x3e8>
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d00d      	beq.n	8004ac2 <UART_SetConfig+0x3d6>
 8004aa6:	dc15      	bgt.n	8004ad4 <UART_SetConfig+0x3e8>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <UART_SetConfig+0x3c6>
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d005      	beq.n	8004abc <UART_SetConfig+0x3d0>
 8004ab0:	e010      	b.n	8004ad4 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab2:	f7fe fec3 	bl	800383c <HAL_RCC_GetPCLK1Freq>
 8004ab6:	0003      	movs	r3, r0
 8004ab8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004aba:	e014      	b.n	8004ae6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004abc:	4bb4      	ldr	r3, [pc, #720]	; (8004d90 <UART_SetConfig+0x6a4>)
 8004abe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ac0:	e011      	b.n	8004ae6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ac2:	f7fe fe2f 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004aca:	e00c      	b.n	8004ae6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004acc:	2380      	movs	r3, #128	; 0x80
 8004ace:	021b      	lsls	r3, r3, #8
 8004ad0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ad2:	e008      	b.n	8004ae6 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004ad8:	231a      	movs	r3, #26
 8004ada:	2220      	movs	r2, #32
 8004adc:	189b      	adds	r3, r3, r2
 8004ade:	19db      	adds	r3, r3, r7
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	701a      	strb	r2, [r3, #0]
        break;
 8004ae4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d100      	bne.n	8004aee <UART_SetConfig+0x402>
 8004aec:	e135      	b.n	8004d5a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004af2:	4ba8      	ldr	r3, [pc, #672]	; (8004d94 <UART_SetConfig+0x6a8>)
 8004af4:	0052      	lsls	r2, r2, #1
 8004af6:	5ad3      	ldrh	r3, [r2, r3]
 8004af8:	0019      	movs	r1, r3
 8004afa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004afc:	f7fb fb16 	bl	800012c <__udivsi3>
 8004b00:	0003      	movs	r3, r0
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	0013      	movs	r3, r2
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	189b      	adds	r3, r3, r2
 8004b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d305      	bcc.n	8004b20 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d906      	bls.n	8004b2e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8004b20:	231a      	movs	r3, #26
 8004b22:	2220      	movs	r2, #32
 8004b24:	189b      	adds	r3, r3, r2
 8004b26:	19db      	adds	r3, r3, r7
 8004b28:	2201      	movs	r2, #1
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	e044      	b.n	8004bb8 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	2300      	movs	r3, #0
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b3a:	4b96      	ldr	r3, [pc, #600]	; (8004d94 <UART_SetConfig+0x6a8>)
 8004b3c:	0052      	lsls	r2, r2, #1
 8004b3e:	5ad3      	ldrh	r3, [r2, r3]
 8004b40:	613b      	str	r3, [r7, #16]
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	69b8      	ldr	r0, [r7, #24]
 8004b4c:	69f9      	ldr	r1, [r7, #28]
 8004b4e:	f7fb fc63 	bl	8000418 <__aeabi_uldivmod>
 8004b52:	0002      	movs	r2, r0
 8004b54:	000b      	movs	r3, r1
 8004b56:	0e11      	lsrs	r1, r2, #24
 8004b58:	021d      	lsls	r5, r3, #8
 8004b5a:	430d      	orrs	r5, r1
 8004b5c:	0214      	lsls	r4, r2, #8
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	085b      	lsrs	r3, r3, #1
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	68b8      	ldr	r0, [r7, #8]
 8004b6c:	68f9      	ldr	r1, [r7, #12]
 8004b6e:	1900      	adds	r0, r0, r4
 8004b70:	4169      	adcs	r1, r5
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	2300      	movs	r3, #0
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f7fb fc4a 	bl	8000418 <__aeabi_uldivmod>
 8004b84:	0002      	movs	r2, r0
 8004b86:	000b      	movs	r3, r1
 8004b88:	0013      	movs	r3, r2
 8004b8a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b8e:	23c0      	movs	r3, #192	; 0xc0
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d309      	bcc.n	8004baa <UART_SetConfig+0x4be>
 8004b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b98:	2380      	movs	r3, #128	; 0x80
 8004b9a:	035b      	lsls	r3, r3, #13
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d204      	bcs.n	8004baa <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba6:	60da      	str	r2, [r3, #12]
 8004ba8:	e006      	b.n	8004bb8 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004baa:	231a      	movs	r3, #26
 8004bac:	2220      	movs	r2, #32
 8004bae:	189b      	adds	r3, r3, r2
 8004bb0:	19db      	adds	r3, r3, r7
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004bb6:	e0d0      	b.n	8004d5a <UART_SetConfig+0x66e>
 8004bb8:	e0cf      	b.n	8004d5a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	69da      	ldr	r2, [r3, #28]
 8004bbe:	2380      	movs	r3, #128	; 0x80
 8004bc0:	021b      	lsls	r3, r3, #8
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d000      	beq.n	8004bc8 <UART_SetConfig+0x4dc>
 8004bc6:	e070      	b.n	8004caa <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8004bc8:	231b      	movs	r3, #27
 8004bca:	2220      	movs	r2, #32
 8004bcc:	189b      	adds	r3, r3, r2
 8004bce:	19db      	adds	r3, r3, r7
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d015      	beq.n	8004c02 <UART_SetConfig+0x516>
 8004bd6:	dc18      	bgt.n	8004c0a <UART_SetConfig+0x51e>
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d00d      	beq.n	8004bf8 <UART_SetConfig+0x50c>
 8004bdc:	dc15      	bgt.n	8004c0a <UART_SetConfig+0x51e>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <UART_SetConfig+0x4fc>
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d005      	beq.n	8004bf2 <UART_SetConfig+0x506>
 8004be6:	e010      	b.n	8004c0a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be8:	f7fe fe28 	bl	800383c <HAL_RCC_GetPCLK1Freq>
 8004bec:	0003      	movs	r3, r0
 8004bee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bf0:	e014      	b.n	8004c1c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf2:	4b67      	ldr	r3, [pc, #412]	; (8004d90 <UART_SetConfig+0x6a4>)
 8004bf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bf6:	e011      	b.n	8004c1c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bf8:	f7fe fd94 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 8004bfc:	0003      	movs	r3, r0
 8004bfe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c00:	e00c      	b.n	8004c1c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c02:	2380      	movs	r3, #128	; 0x80
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c08:	e008      	b.n	8004c1c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004c0e:	231a      	movs	r3, #26
 8004c10:	2220      	movs	r2, #32
 8004c12:	189b      	adds	r3, r3, r2
 8004c14:	19db      	adds	r3, r3, r7
 8004c16:	2201      	movs	r2, #1
 8004c18:	701a      	strb	r2, [r3, #0]
        break;
 8004c1a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d100      	bne.n	8004c24 <UART_SetConfig+0x538>
 8004c22:	e09a      	b.n	8004d5a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c28:	4b5a      	ldr	r3, [pc, #360]	; (8004d94 <UART_SetConfig+0x6a8>)
 8004c2a:	0052      	lsls	r2, r2, #1
 8004c2c:	5ad3      	ldrh	r3, [r2, r3]
 8004c2e:	0019      	movs	r1, r3
 8004c30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c32:	f7fb fa7b 	bl	800012c <__udivsi3>
 8004c36:	0003      	movs	r3, r0
 8004c38:	005a      	lsls	r2, r3, #1
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	085b      	lsrs	r3, r3, #1
 8004c40:	18d2      	adds	r2, r2, r3
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	0019      	movs	r1, r3
 8004c48:	0010      	movs	r0, r2
 8004c4a:	f7fb fa6f 	bl	800012c <__udivsi3>
 8004c4e:	0003      	movs	r3, r0
 8004c50:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	2b0f      	cmp	r3, #15
 8004c56:	d921      	bls.n	8004c9c <UART_SetConfig+0x5b0>
 8004c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c5a:	2380      	movs	r3, #128	; 0x80
 8004c5c:	025b      	lsls	r3, r3, #9
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d21c      	bcs.n	8004c9c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	200e      	movs	r0, #14
 8004c68:	2420      	movs	r4, #32
 8004c6a:	1903      	adds	r3, r0, r4
 8004c6c:	19db      	adds	r3, r3, r7
 8004c6e:	210f      	movs	r1, #15
 8004c70:	438a      	bics	r2, r1
 8004c72:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	085b      	lsrs	r3, r3, #1
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2207      	movs	r2, #7
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	b299      	uxth	r1, r3
 8004c80:	1903      	adds	r3, r0, r4
 8004c82:	19db      	adds	r3, r3, r7
 8004c84:	1902      	adds	r2, r0, r4
 8004c86:	19d2      	adds	r2, r2, r7
 8004c88:	8812      	ldrh	r2, [r2, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	1902      	adds	r2, r0, r4
 8004c94:	19d2      	adds	r2, r2, r7
 8004c96:	8812      	ldrh	r2, [r2, #0]
 8004c98:	60da      	str	r2, [r3, #12]
 8004c9a:	e05e      	b.n	8004d5a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004c9c:	231a      	movs	r3, #26
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	189b      	adds	r3, r3, r2
 8004ca2:	19db      	adds	r3, r3, r7
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	e057      	b.n	8004d5a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004caa:	231b      	movs	r3, #27
 8004cac:	2220      	movs	r2, #32
 8004cae:	189b      	adds	r3, r3, r2
 8004cb0:	19db      	adds	r3, r3, r7
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d015      	beq.n	8004ce4 <UART_SetConfig+0x5f8>
 8004cb8:	dc18      	bgt.n	8004cec <UART_SetConfig+0x600>
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d00d      	beq.n	8004cda <UART_SetConfig+0x5ee>
 8004cbe:	dc15      	bgt.n	8004cec <UART_SetConfig+0x600>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <UART_SetConfig+0x5de>
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d005      	beq.n	8004cd4 <UART_SetConfig+0x5e8>
 8004cc8:	e010      	b.n	8004cec <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cca:	f7fe fdb7 	bl	800383c <HAL_RCC_GetPCLK1Freq>
 8004cce:	0003      	movs	r3, r0
 8004cd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cd2:	e014      	b.n	8004cfe <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cd4:	4b2e      	ldr	r3, [pc, #184]	; (8004d90 <UART_SetConfig+0x6a4>)
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cd8:	e011      	b.n	8004cfe <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cda:	f7fe fd23 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 8004cde:	0003      	movs	r3, r0
 8004ce0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ce2:	e00c      	b.n	8004cfe <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ce4:	2380      	movs	r3, #128	; 0x80
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cea:	e008      	b.n	8004cfe <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004cf0:	231a      	movs	r3, #26
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	189b      	adds	r3, r3, r2
 8004cf6:	19db      	adds	r3, r3, r7
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	701a      	strb	r2, [r3, #0]
        break;
 8004cfc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d02a      	beq.n	8004d5a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d08:	4b22      	ldr	r3, [pc, #136]	; (8004d94 <UART_SetConfig+0x6a8>)
 8004d0a:	0052      	lsls	r2, r2, #1
 8004d0c:	5ad3      	ldrh	r3, [r2, r3]
 8004d0e:	0019      	movs	r1, r3
 8004d10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d12:	f7fb fa0b 	bl	800012c <__udivsi3>
 8004d16:	0003      	movs	r3, r0
 8004d18:	001a      	movs	r2, r3
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	085b      	lsrs	r3, r3, #1
 8004d20:	18d2      	adds	r2, r2, r3
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	0019      	movs	r1, r3
 8004d28:	0010      	movs	r0, r2
 8004d2a:	f7fb f9ff 	bl	800012c <__udivsi3>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	2b0f      	cmp	r3, #15
 8004d36:	d90a      	bls.n	8004d4e <UART_SetConfig+0x662>
 8004d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d3a:	2380      	movs	r3, #128	; 0x80
 8004d3c:	025b      	lsls	r3, r3, #9
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d205      	bcs.n	8004d4e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60da      	str	r2, [r3, #12]
 8004d4c:	e005      	b.n	8004d5a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004d4e:	231a      	movs	r3, #26
 8004d50:	2220      	movs	r2, #32
 8004d52:	189b      	adds	r3, r3, r2
 8004d54:	19db      	adds	r3, r3, r7
 8004d56:	2201      	movs	r2, #1
 8004d58:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	226a      	movs	r2, #106	; 0x6a
 8004d5e:	2101      	movs	r1, #1
 8004d60:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	2268      	movs	r2, #104	; 0x68
 8004d66:	2101      	movs	r1, #1
 8004d68:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	2200      	movs	r2, #0
 8004d74:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004d76:	231a      	movs	r3, #26
 8004d78:	2220      	movs	r2, #32
 8004d7a:	189b      	adds	r3, r3, r2
 8004d7c:	19db      	adds	r3, r3, r7
 8004d7e:	781b      	ldrb	r3, [r3, #0]
}
 8004d80:	0018      	movs	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b010      	add	sp, #64	; 0x40
 8004d86:	bdb0      	pop	{r4, r5, r7, pc}
 8004d88:	40008000 	.word	0x40008000
 8004d8c:	40008400 	.word	0x40008400
 8004d90:	00f42400 	.word	0x00f42400
 8004d94:	080078f4 	.word	0x080078f4

08004d98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	2201      	movs	r2, #1
 8004da6:	4013      	ands	r3, r2
 8004da8:	d00b      	beq.n	8004dc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4a4a      	ldr	r2, [pc, #296]	; (8004edc <UART_AdvFeatureConfig+0x144>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	0019      	movs	r1, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d00b      	beq.n	8004de4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	4a43      	ldr	r2, [pc, #268]	; (8004ee0 <UART_AdvFeatureConfig+0x148>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	0019      	movs	r1, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de8:	2204      	movs	r2, #4
 8004dea:	4013      	ands	r3, r2
 8004dec:	d00b      	beq.n	8004e06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	4a3b      	ldr	r2, [pc, #236]	; (8004ee4 <UART_AdvFeatureConfig+0x14c>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	0019      	movs	r1, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0a:	2208      	movs	r2, #8
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d00b      	beq.n	8004e28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	4a34      	ldr	r2, [pc, #208]	; (8004ee8 <UART_AdvFeatureConfig+0x150>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	0019      	movs	r1, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2c:	2210      	movs	r2, #16
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d00b      	beq.n	8004e4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	4a2c      	ldr	r2, [pc, #176]	; (8004eec <UART_AdvFeatureConfig+0x154>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	0019      	movs	r1, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4e:	2220      	movs	r2, #32
 8004e50:	4013      	ands	r3, r2
 8004e52:	d00b      	beq.n	8004e6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	4a25      	ldr	r2, [pc, #148]	; (8004ef0 <UART_AdvFeatureConfig+0x158>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	0019      	movs	r1, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e70:	2240      	movs	r2, #64	; 0x40
 8004e72:	4013      	ands	r3, r2
 8004e74:	d01d      	beq.n	8004eb2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <UART_AdvFeatureConfig+0x15c>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	0019      	movs	r1, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e92:	2380      	movs	r3, #128	; 0x80
 8004e94:	035b      	lsls	r3, r3, #13
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d10b      	bne.n	8004eb2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	4a15      	ldr	r2, [pc, #84]	; (8004ef8 <UART_AdvFeatureConfig+0x160>)
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	0019      	movs	r1, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	2280      	movs	r2, #128	; 0x80
 8004eb8:	4013      	ands	r3, r2
 8004eba:	d00b      	beq.n	8004ed4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	4a0e      	ldr	r2, [pc, #56]	; (8004efc <UART_AdvFeatureConfig+0x164>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	0019      	movs	r1, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	605a      	str	r2, [r3, #4]
  }
}
 8004ed4:	46c0      	nop			; (mov r8, r8)
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	b002      	add	sp, #8
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	fffdffff 	.word	0xfffdffff
 8004ee0:	fffeffff 	.word	0xfffeffff
 8004ee4:	fffbffff 	.word	0xfffbffff
 8004ee8:	ffff7fff 	.word	0xffff7fff
 8004eec:	ffffefff 	.word	0xffffefff
 8004ef0:	ffffdfff 	.word	0xffffdfff
 8004ef4:	ffefffff 	.word	0xffefffff
 8004ef8:	ff9fffff 	.word	0xff9fffff
 8004efc:	fff7ffff 	.word	0xfff7ffff

08004f00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2290      	movs	r2, #144	; 0x90
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f10:	f7fd f8b2 	bl	8002078 <HAL_GetTick>
 8004f14:	0003      	movs	r3, r0
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2208      	movs	r2, #8
 8004f20:	4013      	ands	r3, r2
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d10c      	bne.n	8004f40 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2280      	movs	r2, #128	; 0x80
 8004f2a:	0391      	lsls	r1, r2, #14
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	4a1a      	ldr	r2, [pc, #104]	; (8004f98 <UART_CheckIdleState+0x98>)
 8004f30:	9200      	str	r2, [sp, #0]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f000 f832 	bl	8004f9c <UART_WaitOnFlagUntilTimeout>
 8004f38:	1e03      	subs	r3, r0, #0
 8004f3a:	d001      	beq.n	8004f40 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e026      	b.n	8004f8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2204      	movs	r2, #4
 8004f48:	4013      	ands	r3, r2
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d10c      	bne.n	8004f68 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2280      	movs	r2, #128	; 0x80
 8004f52:	03d1      	lsls	r1, r2, #15
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4a10      	ldr	r2, [pc, #64]	; (8004f98 <UART_CheckIdleState+0x98>)
 8004f58:	9200      	str	r2, [sp, #0]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f000 f81e 	bl	8004f9c <UART_WaitOnFlagUntilTimeout>
 8004f60:	1e03      	subs	r3, r0, #0
 8004f62:	d001      	beq.n	8004f68 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e012      	b.n	8004f8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2288      	movs	r2, #136	; 0x88
 8004f6c:	2120      	movs	r1, #32
 8004f6e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	228c      	movs	r2, #140	; 0x8c
 8004f74:	2120      	movs	r1, #32
 8004f76:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2284      	movs	r2, #132	; 0x84
 8004f88:	2100      	movs	r1, #0
 8004f8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	0018      	movs	r0, r3
 8004f90:	46bd      	mov	sp, r7
 8004f92:	b004      	add	sp, #16
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	01ffffff 	.word	0x01ffffff

08004f9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b094      	sub	sp, #80	; 0x50
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	1dfb      	adds	r3, r7, #7
 8004faa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fac:	e0a7      	b.n	80050fe <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	d100      	bne.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004fb4:	e0a3      	b.n	80050fe <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb6:	f7fd f85f 	bl	8002078 <HAL_GetTick>
 8004fba:	0002      	movs	r2, r0
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d302      	bcc.n	8004fcc <UART_WaitOnFlagUntilTimeout+0x30>
 8004fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d13f      	bne.n	800504c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	f383 8810 	msr	PRIMASK, r3
}
 8004fe0:	46c0      	nop			; (mov r8, r8)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	494e      	ldr	r1, [pc, #312]	; (8005128 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004fee:	400a      	ands	r2, r1
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff8:	f383 8810 	msr	PRIMASK, r3
}
 8004ffc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8005002:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005006:	643b      	str	r3, [r7, #64]	; 0x40
 8005008:	2301      	movs	r3, #1
 800500a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800500c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500e:	f383 8810 	msr	PRIMASK, r3
}
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2101      	movs	r1, #1
 8005020:	438a      	bics	r2, r1
 8005022:	609a      	str	r2, [r3, #8]
 8005024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005026:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800502a:	f383 8810 	msr	PRIMASK, r3
}
 800502e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2288      	movs	r2, #136	; 0x88
 8005034:	2120      	movs	r1, #32
 8005036:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	228c      	movs	r2, #140	; 0x8c
 800503c:	2120      	movs	r1, #32
 800503e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2284      	movs	r2, #132	; 0x84
 8005044:	2100      	movs	r1, #0
 8005046:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e069      	b.n	8005120 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2204      	movs	r2, #4
 8005054:	4013      	ands	r3, r2
 8005056:	d052      	beq.n	80050fe <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69da      	ldr	r2, [r3, #28]
 800505e:	2380      	movs	r3, #128	; 0x80
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	401a      	ands	r2, r3
 8005064:	2380      	movs	r3, #128	; 0x80
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	429a      	cmp	r2, r3
 800506a:	d148      	bne.n	80050fe <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2280      	movs	r2, #128	; 0x80
 8005072:	0112      	lsls	r2, r2, #4
 8005074:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005076:	f3ef 8310 	mrs	r3, PRIMASK
 800507a:	613b      	str	r3, [r7, #16]
  return(result);
 800507c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800507e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005080:	2301      	movs	r3, #1
 8005082:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f383 8810 	msr	PRIMASK, r3
}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4924      	ldr	r1, [pc, #144]	; (8005128 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005098:	400a      	ands	r2, r1
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800509e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	f383 8810 	msr	PRIMASK, r3
}
 80050a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a8:	f3ef 8310 	mrs	r3, PRIMASK
 80050ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80050ae:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80050b2:	2301      	movs	r3, #1
 80050b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	f383 8810 	msr	PRIMASK, r3
}
 80050bc:	46c0      	nop			; (mov r8, r8)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2101      	movs	r1, #1
 80050ca:	438a      	bics	r2, r1
 80050cc:	609a      	str	r2, [r3, #8]
 80050ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	f383 8810 	msr	PRIMASK, r3
}
 80050d8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2288      	movs	r2, #136	; 0x88
 80050de:	2120      	movs	r1, #32
 80050e0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	228c      	movs	r2, #140	; 0x8c
 80050e6:	2120      	movs	r1, #32
 80050e8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2290      	movs	r2, #144	; 0x90
 80050ee:	2120      	movs	r1, #32
 80050f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2284      	movs	r2, #132	; 0x84
 80050f6:	2100      	movs	r1, #0
 80050f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e010      	b.n	8005120 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	4013      	ands	r3, r2
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	425a      	negs	r2, r3
 800510e:	4153      	adcs	r3, r2
 8005110:	b2db      	uxtb	r3, r3
 8005112:	001a      	movs	r2, r3
 8005114:	1dfb      	adds	r3, r7, #7
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d100      	bne.n	800511e <UART_WaitOnFlagUntilTimeout+0x182>
 800511c:	e747      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	0018      	movs	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	b014      	add	sp, #80	; 0x50
 8005126:	bd80      	pop	{r7, pc}
 8005128:	fffffe5f 	.word	0xfffffe5f

0800512c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2284      	movs	r2, #132	; 0x84
 8005138:	5c9b      	ldrb	r3, [r3, r2]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_UARTEx_DisableFifoMode+0x16>
 800513e:	2302      	movs	r3, #2
 8005140:	e027      	b.n	8005192 <HAL_UARTEx_DisableFifoMode+0x66>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2284      	movs	r2, #132	; 0x84
 8005146:	2101      	movs	r1, #1
 8005148:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2288      	movs	r2, #136	; 0x88
 800514e:	2124      	movs	r1, #36	; 0x24
 8005150:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2101      	movs	r1, #1
 8005166:	438a      	bics	r2, r1
 8005168:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4a0b      	ldr	r2, [pc, #44]	; (800519c <HAL_UARTEx_DisableFifoMode+0x70>)
 800516e:	4013      	ands	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2288      	movs	r2, #136	; 0x88
 8005184:	2120      	movs	r1, #32
 8005186:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2284      	movs	r2, #132	; 0x84
 800518c:	2100      	movs	r1, #0
 800518e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	0018      	movs	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	b004      	add	sp, #16
 8005198:	bd80      	pop	{r7, pc}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	dfffffff 	.word	0xdfffffff

080051a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2284      	movs	r2, #132	; 0x84
 80051ae:	5c9b      	ldrb	r3, [r3, r2]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e02e      	b.n	8005216 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2284      	movs	r2, #132	; 0x84
 80051bc:	2101      	movs	r1, #1
 80051be:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2288      	movs	r2, #136	; 0x88
 80051c4:	2124      	movs	r1, #36	; 0x24
 80051c6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2101      	movs	r1, #1
 80051dc:	438a      	bics	r2, r1
 80051de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	08d9      	lsrs	r1, r3, #3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	0018      	movs	r0, r3
 80051f8:	f000 f854 	bl	80052a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2288      	movs	r2, #136	; 0x88
 8005208:	2120      	movs	r1, #32
 800520a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2284      	movs	r2, #132	; 0x84
 8005210:	2100      	movs	r1, #0
 8005212:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	0018      	movs	r0, r3
 8005218:	46bd      	mov	sp, r7
 800521a:	b004      	add	sp, #16
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2284      	movs	r2, #132	; 0x84
 800522e:	5c9b      	ldrb	r3, [r3, r2]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005234:	2302      	movs	r3, #2
 8005236:	e02f      	b.n	8005298 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2284      	movs	r2, #132	; 0x84
 800523c:	2101      	movs	r1, #1
 800523e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2288      	movs	r2, #136	; 0x88
 8005244:	2124      	movs	r1, #36	; 0x24
 8005246:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2101      	movs	r1, #1
 800525c:	438a      	bics	r2, r1
 800525e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	4a0e      	ldr	r2, [pc, #56]	; (80052a0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005268:	4013      	ands	r3, r2
 800526a:	0019      	movs	r1, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	0018      	movs	r0, r3
 800527a:	f000 f813 	bl	80052a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2288      	movs	r2, #136	; 0x88
 800528a:	2120      	movs	r1, #32
 800528c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2284      	movs	r2, #132	; 0x84
 8005292:	2100      	movs	r1, #0
 8005294:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	0018      	movs	r0, r3
 800529a:	46bd      	mov	sp, r7
 800529c:	b004      	add	sp, #16
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	f1ffffff 	.word	0xf1ffffff

080052a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d108      	bne.n	80052c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	226a      	movs	r2, #106	; 0x6a
 80052b8:	2101      	movs	r1, #1
 80052ba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2268      	movs	r2, #104	; 0x68
 80052c0:	2101      	movs	r1, #1
 80052c2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052c4:	e043      	b.n	800534e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052c6:	260f      	movs	r6, #15
 80052c8:	19bb      	adds	r3, r7, r6
 80052ca:	2208      	movs	r2, #8
 80052cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052ce:	200e      	movs	r0, #14
 80052d0:	183b      	adds	r3, r7, r0
 80052d2:	2208      	movs	r2, #8
 80052d4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	0e5b      	lsrs	r3, r3, #25
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	240d      	movs	r4, #13
 80052e2:	193b      	adds	r3, r7, r4
 80052e4:	2107      	movs	r1, #7
 80052e6:	400a      	ands	r2, r1
 80052e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	0f5b      	lsrs	r3, r3, #29
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	250c      	movs	r5, #12
 80052f6:	197b      	adds	r3, r7, r5
 80052f8:	2107      	movs	r1, #7
 80052fa:	400a      	ands	r2, r1
 80052fc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052fe:	183b      	adds	r3, r7, r0
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	197a      	adds	r2, r7, r5
 8005304:	7812      	ldrb	r2, [r2, #0]
 8005306:	4914      	ldr	r1, [pc, #80]	; (8005358 <UARTEx_SetNbDataToProcess+0xb4>)
 8005308:	5c8a      	ldrb	r2, [r1, r2]
 800530a:	435a      	muls	r2, r3
 800530c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800530e:	197b      	adds	r3, r7, r5
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	4a12      	ldr	r2, [pc, #72]	; (800535c <UARTEx_SetNbDataToProcess+0xb8>)
 8005314:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005316:	0019      	movs	r1, r3
 8005318:	f7fa ff92 	bl	8000240 <__divsi3>
 800531c:	0003      	movs	r3, r0
 800531e:	b299      	uxth	r1, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	226a      	movs	r2, #106	; 0x6a
 8005324:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005326:	19bb      	adds	r3, r7, r6
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	193a      	adds	r2, r7, r4
 800532c:	7812      	ldrb	r2, [r2, #0]
 800532e:	490a      	ldr	r1, [pc, #40]	; (8005358 <UARTEx_SetNbDataToProcess+0xb4>)
 8005330:	5c8a      	ldrb	r2, [r1, r2]
 8005332:	435a      	muls	r2, r3
 8005334:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005336:	193b      	adds	r3, r7, r4
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	4a08      	ldr	r2, [pc, #32]	; (800535c <UARTEx_SetNbDataToProcess+0xb8>)
 800533c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800533e:	0019      	movs	r1, r3
 8005340:	f7fa ff7e 	bl	8000240 <__divsi3>
 8005344:	0003      	movs	r3, r0
 8005346:	b299      	uxth	r1, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2268      	movs	r2, #104	; 0x68
 800534c:	5299      	strh	r1, [r3, r2]
}
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	46bd      	mov	sp, r7
 8005352:	b005      	add	sp, #20
 8005354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	0800790c 	.word	0x0800790c
 800535c:	08007914 	.word	0x08007914

08005360 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8005360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005362:	b08d      	sub	sp, #52	; 0x34
 8005364:	af00      	add	r7, sp, #0
 8005366:	0004      	movs	r4, r0
 8005368:	0008      	movs	r0, r1
 800536a:	0011      	movs	r1, r2
 800536c:	603b      	str	r3, [r7, #0]
 800536e:	1dfb      	adds	r3, r7, #7
 8005370:	1c22      	adds	r2, r4, #0
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	1dbb      	adds	r3, r7, #6
 8005376:	1c02      	adds	r2, r0, #0
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	1d7b      	adds	r3, r7, #5
 800537c:	1c0a      	adds	r2, r1, #0
 800537e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8005380:	2514      	movs	r5, #20
 8005382:	197b      	adds	r3, r7, r5
 8005384:	1dfa      	adds	r2, r7, #7
 8005386:	7812      	ldrb	r2, [r2, #0]
 8005388:	701a      	strb	r2, [r3, #0]
  cp.privacy_enabled = privacy_enabled;
 800538a:	197b      	adds	r3, r7, r5
 800538c:	1dba      	adds	r2, r7, #6
 800538e:	7812      	ldrb	r2, [r2, #0]
 8005390:	705a      	strb	r2, [r3, #1]
  cp.device_name_char_len = device_name_char_len;
 8005392:	197b      	adds	r3, r7, r5
 8005394:	1d7a      	adds	r2, r7, #5
 8005396:	7812      	ldrb	r2, [r2, #0]
 8005398:	709a      	strb	r2, [r3, #2]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800539a:	260c      	movs	r6, #12
 800539c:	19bb      	adds	r3, r7, r6
 800539e:	2207      	movs	r2, #7
 80053a0:	2100      	movs	r1, #0
 80053a2:	0018      	movs	r0, r3
 80053a4:	f001 fab8 	bl	8006918 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80053a8:	2418      	movs	r4, #24
 80053aa:	193b      	adds	r3, r7, r4
 80053ac:	2218      	movs	r2, #24
 80053ae:	2100      	movs	r1, #0
 80053b0:	0018      	movs	r0, r3
 80053b2:	f001 fab1 	bl	8006918 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80053b6:	0021      	movs	r1, r4
 80053b8:	187b      	adds	r3, r7, r1
 80053ba:	223f      	movs	r2, #63	; 0x3f
 80053bc:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GAP_INIT;
 80053be:	187b      	adds	r3, r7, r1
 80053c0:	228a      	movs	r2, #138	; 0x8a
 80053c2:	805a      	strh	r2, [r3, #2]
  rq.cparam = &cp;
 80053c4:	187b      	adds	r3, r7, r1
 80053c6:	197a      	adds	r2, r7, r5
 80053c8:	609a      	str	r2, [r3, #8]
  rq.clen = sizeof(cp);
 80053ca:	187b      	adds	r3, r7, r1
 80053cc:	2203      	movs	r2, #3
 80053ce:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 80053d0:	187b      	adds	r3, r7, r1
 80053d2:	19ba      	adds	r2, r7, r6
 80053d4:	611a      	str	r2, [r3, #16]
  rq.rlen = GAP_INIT_RP_SIZE;
 80053d6:	187b      	adds	r3, r7, r1
 80053d8:	2207      	movs	r2, #7
 80053da:	615a      	str	r2, [r3, #20]
  
  if (hci_send_req(&rq, FALSE) < 0)
 80053dc:	187b      	adds	r3, r7, r1
 80053de:	2100      	movs	r1, #0
 80053e0:	0018      	movs	r0, r3
 80053e2:	f000 fdb9 	bl	8005f58 <hci_send_req>
 80053e6:	1e03      	subs	r3, r0, #0
 80053e8:	da01      	bge.n	80053ee <aci_gap_init_IDB05A1+0x8e>
    return BLE_STATUS_TIMEOUT;
 80053ea:	23ff      	movs	r3, #255	; 0xff
 80053ec:	e01f      	b.n	800542e <aci_gap_init_IDB05A1+0xce>
  
  if (resp.status) {
 80053ee:	220c      	movs	r2, #12
 80053f0:	18bb      	adds	r3, r7, r2
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <aci_gap_init_IDB05A1+0x9e>
    return resp.status;
 80053f8:	18bb      	adds	r3, r7, r2
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	e017      	b.n	800542e <aci_gap_init_IDB05A1+0xce>
  }
  
  *service_handle = btohs(resp.service_handle);
 80053fe:	210c      	movs	r1, #12
 8005400:	187b      	adds	r3, r7, r1
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	021b      	lsls	r3, r3, #8
 8005406:	0c1b      	lsrs	r3, r3, #16
 8005408:	b29a      	uxth	r2, r3
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800540e:	187b      	adds	r3, r7, r1
 8005410:	78da      	ldrb	r2, [r3, #3]
 8005412:	791b      	ldrb	r3, [r3, #4]
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	4313      	orrs	r3, r2
 8005418:	b29a      	uxth	r2, r3
 800541a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800541c:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800541e:	187b      	adds	r3, r7, r1
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	0c1b      	lsrs	r3, r3, #16
 8005426:	b29a      	uxth	r2, r3
 8005428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800542a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800542c:	2300      	movs	r3, #0
}
 800542e:	0018      	movs	r0, r3
 8005430:	46bd      	mov	sp, r7
 8005432:	b00d      	add	sp, #52	; 0x34
 8005434:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005436 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8005436:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005438:	b095      	sub	sp, #84	; 0x54
 800543a:	af00      	add	r7, sp, #0
 800543c:	0005      	movs	r5, r0
 800543e:	000c      	movs	r4, r1
 8005440:	0010      	movs	r0, r2
 8005442:	0019      	movs	r1, r3
 8005444:	1dfb      	adds	r3, r7, #7
 8005446:	1c2a      	adds	r2, r5, #0
 8005448:	701a      	strb	r2, [r3, #0]
 800544a:	1d3b      	adds	r3, r7, #4
 800544c:	1c22      	adds	r2, r4, #0
 800544e:	801a      	strh	r2, [r3, #0]
 8005450:	1cbb      	adds	r3, r7, #2
 8005452:	1c02      	adds	r2, r0, #0
 8005454:	801a      	strh	r2, [r3, #0]
 8005456:	1dbb      	adds	r3, r7, #6
 8005458:	1c0a      	adds	r2, r1, #0
 800545a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800545c:	234f      	movs	r3, #79	; 0x4f
 800545e:	18fb      	adds	r3, r7, r3
 8005460:	2200      	movs	r2, #0
 8005462:	701a      	strb	r2, [r3, #0]
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8005464:	2364      	movs	r3, #100	; 0x64
 8005466:	2108      	movs	r1, #8
 8005468:	185b      	adds	r3, r3, r1
 800546a:	19db      	adds	r3, r3, r7
 800546c:	781a      	ldrb	r2, [r3, #0]
 800546e:	236c      	movs	r3, #108	; 0x6c
 8005470:	185b      	adds	r3, r3, r1
 8005472:	19db      	adds	r3, r3, r7
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	18d3      	adds	r3, r2, r3
 8005478:	330e      	adds	r3, #14
 800547a:	2b28      	cmp	r3, #40	; 0x28
 800547c:	d901      	bls.n	8005482 <aci_gap_set_discoverable+0x4c>
    return BLE_STATUS_INVALID_PARAMS;
 800547e:	2342      	movs	r3, #66	; 0x42
 8005480:	e0f0      	b.n	8005664 <aci_gap_set_discoverable+0x22e>

  buffer[indx] = AdvType;
 8005482:	204f      	movs	r0, #79	; 0x4f
 8005484:	183b      	adds	r3, r7, r0
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2508      	movs	r5, #8
 800548a:	197a      	adds	r2, r7, r5
 800548c:	1df9      	adds	r1, r7, #7
 800548e:	7809      	ldrb	r1, [r1, #0]
 8005490:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005492:	0001      	movs	r1, r0
 8005494:	187b      	adds	r3, r7, r1
 8005496:	781a      	ldrb	r2, [r3, #0]
 8005498:	187b      	adds	r3, r7, r1
 800549a:	3201      	adds	r2, #1
 800549c:	701a      	strb	r2, [r3, #0]
  
  AdvIntervMin = htobs(AdvIntervMin);
 800549e:	1d3b      	adds	r3, r7, #4
 80054a0:	881a      	ldrh	r2, [r3, #0]
 80054a2:	1d3b      	adds	r3, r7, #4
 80054a4:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 80054a6:	000c      	movs	r4, r1
 80054a8:	187b      	adds	r3, r7, r1
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	197a      	adds	r2, r7, r5
 80054ae:	18d3      	adds	r3, r2, r3
 80054b0:	1d39      	adds	r1, r7, #4
 80054b2:	2202      	movs	r2, #2
 80054b4:	0018      	movs	r0, r3
 80054b6:	f001 fa26 	bl	8006906 <memcpy>
  indx +=  2;
 80054ba:	0021      	movs	r1, r4
 80054bc:	187b      	adds	r3, r7, r1
 80054be:	187a      	adds	r2, r7, r1
 80054c0:	7812      	ldrb	r2, [r2, #0]
 80054c2:	3202      	adds	r2, #2
 80054c4:	701a      	strb	r2, [r3, #0]
    
  AdvIntervMax = htobs(AdvIntervMax);
 80054c6:	1cbb      	adds	r3, r7, #2
 80054c8:	881a      	ldrh	r2, [r3, #0]
 80054ca:	1cbb      	adds	r3, r7, #2
 80054cc:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80054ce:	000c      	movs	r4, r1
 80054d0:	187b      	adds	r3, r7, r1
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	197a      	adds	r2, r7, r5
 80054d6:	18d3      	adds	r3, r2, r3
 80054d8:	1cb9      	adds	r1, r7, #2
 80054da:	2202      	movs	r2, #2
 80054dc:	0018      	movs	r0, r3
 80054de:	f001 fa12 	bl	8006906 <memcpy>
  indx +=  2;
 80054e2:	193b      	adds	r3, r7, r4
 80054e4:	193a      	adds	r2, r7, r4
 80054e6:	7812      	ldrb	r2, [r2, #0]
 80054e8:	3202      	adds	r2, #2
 80054ea:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = OwnAddrType;
 80054ec:	193b      	adds	r3, r7, r4
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	197a      	adds	r2, r7, r5
 80054f2:	1db9      	adds	r1, r7, #6
 80054f4:	7809      	ldrb	r1, [r1, #0]
 80054f6:	54d1      	strb	r1, [r2, r3]
  indx++;
 80054f8:	193b      	adds	r3, r7, r4
 80054fa:	781a      	ldrb	r2, [r3, #0]
 80054fc:	193b      	adds	r3, r7, r4
 80054fe:	3201      	adds	r2, #1
 8005500:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = AdvFilterPolicy;
 8005502:	193b      	adds	r3, r7, r4
 8005504:	781a      	ldrb	r2, [r3, #0]
 8005506:	1979      	adds	r1, r7, r5
 8005508:	2360      	movs	r3, #96	; 0x60
 800550a:	2008      	movs	r0, #8
 800550c:	181b      	adds	r3, r3, r0
 800550e:	19db      	adds	r3, r3, r7
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	548b      	strb	r3, [r1, r2]
  indx++;
 8005514:	193b      	adds	r3, r7, r4
 8005516:	781a      	ldrb	r2, [r3, #0]
 8005518:	193b      	adds	r3, r7, r4
 800551a:	3201      	adds	r2, #1
 800551c:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = LocalNameLen;
 800551e:	193b      	adds	r3, r7, r4
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	197a      	adds	r2, r7, r5
 8005524:	2664      	movs	r6, #100	; 0x64
 8005526:	1831      	adds	r1, r6, r0
 8005528:	19c9      	adds	r1, r1, r7
 800552a:	7809      	ldrb	r1, [r1, #0]
 800552c:	54d1      	strb	r1, [r2, r3]
  indx++;
 800552e:	193b      	adds	r3, r7, r4
 8005530:	781a      	ldrb	r2, [r3, #0]
 8005532:	193b      	adds	r3, r7, r4
 8005534:	3201      	adds	r2, #1
 8005536:	701a      	strb	r2, [r3, #0]
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8005538:	193b      	adds	r3, r7, r4
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	197a      	adds	r2, r7, r5
 800553e:	18d0      	adds	r0, r2, r3
 8005540:	2308      	movs	r3, #8
 8005542:	18f2      	adds	r2, r6, r3
 8005544:	19d3      	adds	r3, r2, r7
 8005546:	781a      	ldrb	r2, [r3, #0]
 8005548:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800554a:	0019      	movs	r1, r3
 800554c:	f001 f9db 	bl	8006906 <memcpy>
  indx +=  LocalNameLen;
 8005550:	193b      	adds	r3, r7, r4
 8005552:	1939      	adds	r1, r7, r4
 8005554:	2008      	movs	r0, #8
 8005556:	1832      	adds	r2, r6, r0
 8005558:	19d2      	adds	r2, r2, r7
 800555a:	7809      	ldrb	r1, [r1, #0]
 800555c:	7812      	ldrb	r2, [r2, #0]
 800555e:	188a      	adds	r2, r1, r2
 8005560:	701a      	strb	r2, [r3, #0]
  
  buffer[indx] = ServiceUUIDLen;
 8005562:	193b      	adds	r3, r7, r4
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	197a      	adds	r2, r7, r5
 8005568:	266c      	movs	r6, #108	; 0x6c
 800556a:	1831      	adds	r1, r6, r0
 800556c:	19c9      	adds	r1, r1, r7
 800556e:	7809      	ldrb	r1, [r1, #0]
 8005570:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005572:	193b      	adds	r3, r7, r4
 8005574:	781a      	ldrb	r2, [r3, #0]
 8005576:	193b      	adds	r3, r7, r4
 8005578:	3201      	adds	r2, #1
 800557a:	701a      	strb	r2, [r3, #0]

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800557c:	193b      	adds	r3, r7, r4
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	197a      	adds	r2, r7, r5
 8005582:	18d0      	adds	r0, r2, r3
 8005584:	2308      	movs	r3, #8
 8005586:	18f2      	adds	r2, r6, r3
 8005588:	19d3      	adds	r3, r2, r7
 800558a:	781a      	ldrb	r2, [r3, #0]
 800558c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800558e:	0019      	movs	r1, r3
 8005590:	f001 f9b9 	bl	8006906 <memcpy>
  indx +=  ServiceUUIDLen;  
 8005594:	0020      	movs	r0, r4
 8005596:	183b      	adds	r3, r7, r0
 8005598:	1839      	adds	r1, r7, r0
 800559a:	2408      	movs	r4, #8
 800559c:	1932      	adds	r2, r6, r4
 800559e:	19d2      	adds	r2, r2, r7
 80055a0:	7809      	ldrb	r1, [r1, #0]
 80055a2:	7812      	ldrb	r2, [r2, #0]
 80055a4:	188a      	adds	r2, r1, r2
 80055a6:	701a      	strb	r2, [r3, #0]

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 80055a8:	2174      	movs	r1, #116	; 0x74
 80055aa:	0026      	movs	r6, r4
 80055ac:	198b      	adds	r3, r1, r6
 80055ae:	19db      	adds	r3, r3, r7
 80055b0:	881a      	ldrh	r2, [r3, #0]
 80055b2:	198b      	adds	r3, r1, r6
 80055b4:	19db      	adds	r3, r3, r7
 80055b6:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80055b8:	0004      	movs	r4, r0
 80055ba:	183b      	adds	r3, r7, r0
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	197a      	adds	r2, r7, r5
 80055c0:	18d3      	adds	r3, r2, r3
 80055c2:	198a      	adds	r2, r1, r6
 80055c4:	19d1      	adds	r1, r2, r7
 80055c6:	2202      	movs	r2, #2
 80055c8:	0018      	movs	r0, r3
 80055ca:	f001 f99c 	bl	8006906 <memcpy>
  indx +=  2;
 80055ce:	0020      	movs	r0, r4
 80055d0:	183b      	adds	r3, r7, r0
 80055d2:	183a      	adds	r2, r7, r0
 80055d4:	7812      	ldrb	r2, [r2, #0]
 80055d6:	3202      	adds	r2, #2
 80055d8:	701a      	strb	r2, [r3, #0]
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 80055da:	2178      	movs	r1, #120	; 0x78
 80055dc:	198b      	adds	r3, r1, r6
 80055de:	19db      	adds	r3, r3, r7
 80055e0:	881a      	ldrh	r2, [r3, #0]
 80055e2:	198b      	adds	r3, r1, r6
 80055e4:	19db      	adds	r3, r3, r7
 80055e6:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80055e8:	0004      	movs	r4, r0
 80055ea:	193b      	adds	r3, r7, r4
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	197a      	adds	r2, r7, r5
 80055f0:	18d3      	adds	r3, r2, r3
 80055f2:	198a      	adds	r2, r1, r6
 80055f4:	19d1      	adds	r1, r2, r7
 80055f6:	2202      	movs	r2, #2
 80055f8:	0018      	movs	r0, r3
 80055fa:	f001 f984 	bl	8006906 <memcpy>
  indx +=  2;    
 80055fe:	193b      	adds	r3, r7, r4
 8005600:	193a      	adds	r2, r7, r4
 8005602:	7812      	ldrb	r2, [r2, #0]
 8005604:	3202      	adds	r2, #2
 8005606:	701a      	strb	r2, [r3, #0]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005608:	2634      	movs	r6, #52	; 0x34
 800560a:	19bb      	adds	r3, r7, r6
 800560c:	2218      	movs	r2, #24
 800560e:	2100      	movs	r1, #0
 8005610:	0018      	movs	r0, r3
 8005612:	f001 f981 	bl	8006918 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005616:	0031      	movs	r1, r6
 8005618:	187b      	adds	r3, r7, r1
 800561a:	223f      	movs	r2, #63	; 0x3f
 800561c:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800561e:	187b      	adds	r3, r7, r1
 8005620:	2283      	movs	r2, #131	; 0x83
 8005622:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 8005624:	187b      	adds	r3, r7, r1
 8005626:	197a      	adds	r2, r7, r5
 8005628:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 800562a:	193b      	adds	r3, r7, r4
 800562c:	781a      	ldrb	r2, [r3, #0]
 800562e:	187b      	adds	r3, r7, r1
 8005630:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8005632:	187b      	adds	r3, r7, r1
 8005634:	2233      	movs	r2, #51	; 0x33
 8005636:	18ba      	adds	r2, r7, r2
 8005638:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800563a:	187b      	adds	r3, r7, r1
 800563c:	2201      	movs	r2, #1
 800563e:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8005640:	187b      	adds	r3, r7, r1
 8005642:	2100      	movs	r1, #0
 8005644:	0018      	movs	r0, r3
 8005646:	f000 fc87 	bl	8005f58 <hci_send_req>
 800564a:	1e03      	subs	r3, r0, #0
 800564c:	da01      	bge.n	8005652 <aci_gap_set_discoverable+0x21c>
    return BLE_STATUS_TIMEOUT;
 800564e:	23ff      	movs	r3, #255	; 0xff
 8005650:	e008      	b.n	8005664 <aci_gap_set_discoverable+0x22e>

  if (status) {
 8005652:	2233      	movs	r2, #51	; 0x33
 8005654:	18bb      	adds	r3, r7, r2
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <aci_gap_set_discoverable+0x22c>
    return status;
 800565c:	18bb      	adds	r3, r7, r2
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	e000      	b.n	8005664 <aci_gap_set_discoverable+0x22e>
  }

  return 0;
 8005662:	2300      	movs	r3, #0
}
 8005664:	0018      	movs	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	b015      	add	sp, #84	; 0x54
 800566a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800566c <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800566c:	b590      	push	{r4, r7, lr}
 800566e:	b089      	sub	sp, #36	; 0x24
 8005670:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005672:	2408      	movs	r4, #8
 8005674:	193b      	adds	r3, r7, r4
 8005676:	2218      	movs	r2, #24
 8005678:	2100      	movs	r1, #0
 800567a:	0018      	movs	r0, r3
 800567c:	f001 f94c 	bl	8006918 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005680:	0021      	movs	r1, r4
 8005682:	187b      	adds	r3, r7, r1
 8005684:	223f      	movs	r2, #63	; 0x3f
 8005686:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_INIT;
 8005688:	187b      	adds	r3, r7, r1
 800568a:	2202      	movs	r2, #2
 800568c:	32ff      	adds	r2, #255	; 0xff
 800568e:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 8005690:	187b      	adds	r3, r7, r1
 8005692:	1dfa      	adds	r2, r7, #7
 8005694:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8005696:	187b      	adds	r3, r7, r1
 8005698:	2201      	movs	r2, #1
 800569a:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 800569c:	187b      	adds	r3, r7, r1
 800569e:	2100      	movs	r1, #0
 80056a0:	0018      	movs	r0, r3
 80056a2:	f000 fc59 	bl	8005f58 <hci_send_req>
 80056a6:	1e03      	subs	r3, r0, #0
 80056a8:	da01      	bge.n	80056ae <aci_gatt_init+0x42>
    return BLE_STATUS_TIMEOUT;
 80056aa:	23ff      	movs	r3, #255	; 0xff
 80056ac:	e001      	b.n	80056b2 <aci_gatt_init+0x46>

  return status;
 80056ae:	1dfb      	adds	r3, r7, #7
 80056b0:	781b      	ldrb	r3, [r3, #0]
}
 80056b2:	0018      	movs	r0, r3
 80056b4:	46bd      	mov	sp, r7
 80056b6:	b009      	add	sp, #36	; 0x24
 80056b8:	bd90      	pop	{r4, r7, pc}

080056ba <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80056ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056bc:	b091      	sub	sp, #68	; 0x44
 80056be:	af00      	add	r7, sp, #0
 80056c0:	0004      	movs	r4, r0
 80056c2:	6039      	str	r1, [r7, #0]
 80056c4:	0010      	movs	r0, r2
 80056c6:	0019      	movs	r1, r3
 80056c8:	1dfb      	adds	r3, r7, #7
 80056ca:	1c22      	adds	r2, r4, #0
 80056cc:	701a      	strb	r2, [r3, #0]
 80056ce:	1dbb      	adds	r3, r7, #6
 80056d0:	1c02      	adds	r2, r0, #0
 80056d2:	701a      	strb	r2, [r3, #0]
 80056d4:	1d7b      	adds	r3, r7, #5
 80056d6:	1c0a      	adds	r2, r1, #0
 80056d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80056da:	203e      	movs	r0, #62	; 0x3e
 80056dc:	183b      	adds	r3, r7, r0
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = service_uuid_type;
 80056e2:	183b      	adds	r3, r7, r0
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	220c      	movs	r2, #12
 80056e8:	18ba      	adds	r2, r7, r2
 80056ea:	1df9      	adds	r1, r7, #7
 80056ec:	7809      	ldrb	r1, [r1, #0]
 80056ee:	54d1      	strb	r1, [r2, r3]
  indx++;
 80056f0:	183b      	adds	r3, r7, r0
 80056f2:	781a      	ldrb	r2, [r3, #0]
 80056f4:	183b      	adds	r3, r7, r0
 80056f6:	3201      	adds	r2, #1
 80056f8:	701a      	strb	r2, [r3, #0]
    
  if(service_uuid_type == UUID_TYPE_16){
 80056fa:	1dfb      	adds	r3, r7, #7
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d104      	bne.n	800570c <aci_gatt_add_serv+0x52>
    uuid_len = 2;
 8005702:	233f      	movs	r3, #63	; 0x3f
 8005704:	18fb      	adds	r3, r7, r3
 8005706:	2202      	movs	r2, #2
 8005708:	701a      	strb	r2, [r3, #0]
 800570a:	e003      	b.n	8005714 <aci_gatt_add_serv+0x5a>
  }
  else {
    uuid_len = 16;
 800570c:	233f      	movs	r3, #63	; 0x3f
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	2210      	movs	r2, #16
 8005712:	701a      	strb	r2, [r3, #0]
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8005714:	243e      	movs	r4, #62	; 0x3e
 8005716:	193b      	adds	r3, r7, r4
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	260c      	movs	r6, #12
 800571c:	19ba      	adds	r2, r7, r6
 800571e:	18d0      	adds	r0, r2, r3
 8005720:	253f      	movs	r5, #63	; 0x3f
 8005722:	197b      	adds	r3, r7, r5
 8005724:	781a      	ldrb	r2, [r3, #0]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	0019      	movs	r1, r3
 800572a:	f001 f8ec 	bl	8006906 <memcpy>
  indx +=  uuid_len;
 800572e:	0020      	movs	r0, r4
 8005730:	183b      	adds	r3, r7, r0
 8005732:	1839      	adds	r1, r7, r0
 8005734:	197a      	adds	r2, r7, r5
 8005736:	7809      	ldrb	r1, [r1, #0]
 8005738:	7812      	ldrb	r2, [r2, #0]
 800573a:	188a      	adds	r2, r1, r2
 800573c:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = service_type;
 800573e:	183b      	adds	r3, r7, r0
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	19ba      	adds	r2, r7, r6
 8005744:	1db9      	adds	r1, r7, #6
 8005746:	7809      	ldrb	r1, [r1, #0]
 8005748:	54d1      	strb	r1, [r2, r3]
  indx++;
 800574a:	183b      	adds	r3, r7, r0
 800574c:	781a      	ldrb	r2, [r3, #0]
 800574e:	0004      	movs	r4, r0
 8005750:	183b      	adds	r3, r7, r0
 8005752:	3201      	adds	r2, #1
 8005754:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = max_attr_records;
 8005756:	193b      	adds	r3, r7, r4
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	19ba      	adds	r2, r7, r6
 800575c:	1d79      	adds	r1, r7, #5
 800575e:	7809      	ldrb	r1, [r1, #0]
 8005760:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005762:	193b      	adds	r3, r7, r4
 8005764:	781a      	ldrb	r2, [r3, #0]
 8005766:	193b      	adds	r3, r7, r4
 8005768:	3201      	adds	r2, #1
 800576a:	701a      	strb	r2, [r3, #0]
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800576c:	2320      	movs	r3, #32
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	2203      	movs	r2, #3
 8005772:	2100      	movs	r1, #0
 8005774:	0018      	movs	r0, r3
 8005776:	f001 f8cf 	bl	8006918 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800577a:	2524      	movs	r5, #36	; 0x24
 800577c:	197b      	adds	r3, r7, r5
 800577e:	2218      	movs	r2, #24
 8005780:	2100      	movs	r1, #0
 8005782:	0018      	movs	r0, r3
 8005784:	f001 f8c8 	bl	8006918 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005788:	0029      	movs	r1, r5
 800578a:	187b      	adds	r3, r7, r1
 800578c:	223f      	movs	r2, #63	; 0x3f
 800578e:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_ADD_SERV;
 8005790:	187b      	adds	r3, r7, r1
 8005792:	2281      	movs	r2, #129	; 0x81
 8005794:	0052      	lsls	r2, r2, #1
 8005796:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 8005798:	187b      	adds	r3, r7, r1
 800579a:	19ba      	adds	r2, r7, r6
 800579c:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 800579e:	193b      	adds	r3, r7, r4
 80057a0:	781a      	ldrb	r2, [r3, #0]
 80057a2:	187b      	adds	r3, r7, r1
 80057a4:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 80057a6:	187b      	adds	r3, r7, r1
 80057a8:	2220      	movs	r2, #32
 80057aa:	18ba      	adds	r2, r7, r2
 80057ac:	611a      	str	r2, [r3, #16]
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80057ae:	187b      	adds	r3, r7, r1
 80057b0:	2203      	movs	r2, #3
 80057b2:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 80057b4:	187b      	adds	r3, r7, r1
 80057b6:	2100      	movs	r1, #0
 80057b8:	0018      	movs	r0, r3
 80057ba:	f000 fbcd 	bl	8005f58 <hci_send_req>
 80057be:	1e03      	subs	r3, r0, #0
 80057c0:	da01      	bge.n	80057c6 <aci_gatt_add_serv+0x10c>
    return BLE_STATUS_TIMEOUT;
 80057c2:	23ff      	movs	r3, #255	; 0xff
 80057c4:	e010      	b.n	80057e8 <aci_gatt_add_serv+0x12e>

  if (resp.status) {
 80057c6:	2220      	movs	r2, #32
 80057c8:	18bb      	adds	r3, r7, r2
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <aci_gatt_add_serv+0x11c>
    return resp.status;
 80057d0:	18bb      	adds	r3, r7, r2
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	e008      	b.n	80057e8 <aci_gatt_add_serv+0x12e>
  }
    
  *serviceHandle = btohs(resp.handle);
 80057d6:	2320      	movs	r3, #32
 80057d8:	18fb      	adds	r3, r7, r3
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	0c1b      	lsrs	r3, r3, #16
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057e4:	801a      	strh	r2, [r3, #0]

  return 0;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	0018      	movs	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	b011      	add	sp, #68	; 0x44
 80057ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057f0 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80057f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057f2:	b093      	sub	sp, #76	; 0x4c
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	0004      	movs	r4, r0
 80057f8:	0008      	movs	r0, r1
 80057fa:	603a      	str	r2, [r7, #0]
 80057fc:	0019      	movs	r1, r3
 80057fe:	1dbb      	adds	r3, r7, #6
 8005800:	1c22      	adds	r2, r4, #0
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	1d7b      	adds	r3, r7, #5
 8005806:	1c02      	adds	r2, r0, #0
 8005808:	701a      	strb	r2, [r3, #0]
 800580a:	1d3b      	adds	r3, r7, #4
 800580c:	1c0a      	adds	r2, r1, #0
 800580e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8005810:	2146      	movs	r1, #70	; 0x46
 8005812:	187b      	adds	r3, r7, r1
 8005814:	2200      	movs	r2, #0
 8005816:	701a      	strb	r2, [r3, #0]
    
  serviceHandle = htobs(serviceHandle);
 8005818:	1dbb      	adds	r3, r7, #6
 800581a:	881a      	ldrh	r2, [r3, #0]
 800581c:	1dbb      	adds	r3, r7, #6
 800581e:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8005820:	000c      	movs	r4, r1
 8005822:	187b      	adds	r3, r7, r1
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	250c      	movs	r5, #12
 8005828:	197a      	adds	r2, r7, r5
 800582a:	18d3      	adds	r3, r2, r3
 800582c:	1db9      	adds	r1, r7, #6
 800582e:	2202      	movs	r2, #2
 8005830:	0018      	movs	r0, r3
 8005832:	f001 f868 	bl	8006906 <memcpy>
  indx += 2;
 8005836:	0020      	movs	r0, r4
 8005838:	183b      	adds	r3, r7, r0
 800583a:	183a      	adds	r2, r7, r0
 800583c:	7812      	ldrb	r2, [r2, #0]
 800583e:	3202      	adds	r2, #2
 8005840:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charUuidType;
 8005842:	183b      	adds	r3, r7, r0
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	197a      	adds	r2, r7, r5
 8005848:	1d79      	adds	r1, r7, #5
 800584a:	7809      	ldrb	r1, [r1, #0]
 800584c:	54d1      	strb	r1, [r2, r3]
  indx++;
 800584e:	183b      	adds	r3, r7, r0
 8005850:	781a      	ldrb	r2, [r3, #0]
 8005852:	183b      	adds	r3, r7, r0
 8005854:	3201      	adds	r2, #1
 8005856:	701a      	strb	r2, [r3, #0]
    
  if(charUuidType == UUID_TYPE_16){
 8005858:	1d7b      	adds	r3, r7, #5
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d104      	bne.n	800586a <aci_gatt_add_char+0x7a>
    uuid_len = 2;
 8005860:	2347      	movs	r3, #71	; 0x47
 8005862:	18fb      	adds	r3, r7, r3
 8005864:	2202      	movs	r2, #2
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	e003      	b.n	8005872 <aci_gatt_add_char+0x82>
  }
  else {
    uuid_len = 16;
 800586a:	2347      	movs	r3, #71	; 0x47
 800586c:	18fb      	adds	r3, r7, r3
 800586e:	2210      	movs	r2, #16
 8005870:	701a      	strb	r2, [r3, #0]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8005872:	2446      	movs	r4, #70	; 0x46
 8005874:	193b      	adds	r3, r7, r4
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	250c      	movs	r5, #12
 800587a:	197a      	adds	r2, r7, r5
 800587c:	18d0      	adds	r0, r2, r3
 800587e:	2647      	movs	r6, #71	; 0x47
 8005880:	19bb      	adds	r3, r7, r6
 8005882:	781a      	ldrb	r2, [r3, #0]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	0019      	movs	r1, r3
 8005888:	f001 f83d 	bl	8006906 <memcpy>
  indx +=  uuid_len;
 800588c:	0020      	movs	r0, r4
 800588e:	183b      	adds	r3, r7, r0
 8005890:	1839      	adds	r1, r7, r0
 8005892:	19ba      	adds	r2, r7, r6
 8005894:	7809      	ldrb	r1, [r1, #0]
 8005896:	7812      	ldrb	r2, [r2, #0]
 8005898:	188a      	adds	r2, r1, r2
 800589a:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charValueLen;
 800589c:	183b      	adds	r3, r7, r0
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	197a      	adds	r2, r7, r5
 80058a2:	1d39      	adds	r1, r7, #4
 80058a4:	7809      	ldrb	r1, [r1, #0]
 80058a6:	54d1      	strb	r1, [r2, r3]
  indx++;
 80058a8:	183b      	adds	r3, r7, r0
 80058aa:	781a      	ldrb	r2, [r3, #0]
 80058ac:	0004      	movs	r4, r0
 80058ae:	183b      	adds	r3, r7, r0
 80058b0:	3201      	adds	r2, #1
 80058b2:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charProperties;
 80058b4:	193b      	adds	r3, r7, r4
 80058b6:	781a      	ldrb	r2, [r3, #0]
 80058b8:	1979      	adds	r1, r7, r5
 80058ba:	2358      	movs	r3, #88	; 0x58
 80058bc:	2008      	movs	r0, #8
 80058be:	181b      	adds	r3, r3, r0
 80058c0:	19db      	adds	r3, r3, r7
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	548b      	strb	r3, [r1, r2]
  indx++;
 80058c6:	193b      	adds	r3, r7, r4
 80058c8:	781a      	ldrb	r2, [r3, #0]
 80058ca:	193b      	adds	r3, r7, r4
 80058cc:	3201      	adds	r2, #1
 80058ce:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = secPermissions;
 80058d0:	193b      	adds	r3, r7, r4
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	197a      	adds	r2, r7, r5
 80058d6:	215c      	movs	r1, #92	; 0x5c
 80058d8:	1809      	adds	r1, r1, r0
 80058da:	19c9      	adds	r1, r1, r7
 80058dc:	7809      	ldrb	r1, [r1, #0]
 80058de:	54d1      	strb	r1, [r2, r3]
  indx++;
 80058e0:	193b      	adds	r3, r7, r4
 80058e2:	781a      	ldrb	r2, [r3, #0]
 80058e4:	193b      	adds	r3, r7, r4
 80058e6:	3201      	adds	r2, #1
 80058e8:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = gattEvtMask;
 80058ea:	193b      	adds	r3, r7, r4
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	197a      	adds	r2, r7, r5
 80058f0:	2160      	movs	r1, #96	; 0x60
 80058f2:	1809      	adds	r1, r1, r0
 80058f4:	19c9      	adds	r1, r1, r7
 80058f6:	7809      	ldrb	r1, [r1, #0]
 80058f8:	54d1      	strb	r1, [r2, r3]
  indx++;
 80058fa:	193b      	adds	r3, r7, r4
 80058fc:	781a      	ldrb	r2, [r3, #0]
 80058fe:	193b      	adds	r3, r7, r4
 8005900:	3201      	adds	r2, #1
 8005902:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = encryKeySize;
 8005904:	193b      	adds	r3, r7, r4
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	197a      	adds	r2, r7, r5
 800590a:	2164      	movs	r1, #100	; 0x64
 800590c:	1809      	adds	r1, r1, r0
 800590e:	19c9      	adds	r1, r1, r7
 8005910:	7809      	ldrb	r1, [r1, #0]
 8005912:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005914:	193b      	adds	r3, r7, r4
 8005916:	781a      	ldrb	r2, [r3, #0]
 8005918:	193b      	adds	r3, r7, r4
 800591a:	3201      	adds	r2, #1
 800591c:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = isVariable;
 800591e:	193b      	adds	r3, r7, r4
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	197a      	adds	r2, r7, r5
 8005924:	2168      	movs	r1, #104	; 0x68
 8005926:	1809      	adds	r1, r1, r0
 8005928:	19c9      	adds	r1, r1, r7
 800592a:	7809      	ldrb	r1, [r1, #0]
 800592c:	54d1      	strb	r1, [r2, r3]
  indx++;
 800592e:	193b      	adds	r3, r7, r4
 8005930:	781a      	ldrb	r2, [r3, #0]
 8005932:	193b      	adds	r3, r7, r4
 8005934:	3201      	adds	r2, #1
 8005936:	701a      	strb	r2, [r3, #0]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005938:	2328      	movs	r3, #40	; 0x28
 800593a:	18fb      	adds	r3, r7, r3
 800593c:	2203      	movs	r2, #3
 800593e:	2100      	movs	r1, #0
 8005940:	0018      	movs	r0, r3
 8005942:	f000 ffe9 	bl	8006918 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005946:	262c      	movs	r6, #44	; 0x2c
 8005948:	19bb      	adds	r3, r7, r6
 800594a:	2218      	movs	r2, #24
 800594c:	2100      	movs	r1, #0
 800594e:	0018      	movs	r0, r3
 8005950:	f000 ffe2 	bl	8006918 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005954:	0031      	movs	r1, r6
 8005956:	187b      	adds	r3, r7, r1
 8005958:	223f      	movs	r2, #63	; 0x3f
 800595a:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_ADD_CHAR;
 800595c:	187b      	adds	r3, r7, r1
 800595e:	2282      	movs	r2, #130	; 0x82
 8005960:	0052      	lsls	r2, r2, #1
 8005962:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 8005964:	187b      	adds	r3, r7, r1
 8005966:	197a      	adds	r2, r7, r5
 8005968:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 800596a:	193b      	adds	r3, r7, r4
 800596c:	781a      	ldrb	r2, [r3, #0]
 800596e:	187b      	adds	r3, r7, r1
 8005970:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 8005972:	187b      	adds	r3, r7, r1
 8005974:	2228      	movs	r2, #40	; 0x28
 8005976:	18ba      	adds	r2, r7, r2
 8005978:	611a      	str	r2, [r3, #16]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800597a:	187b      	adds	r3, r7, r1
 800597c:	2203      	movs	r2, #3
 800597e:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8005980:	187b      	adds	r3, r7, r1
 8005982:	2100      	movs	r1, #0
 8005984:	0018      	movs	r0, r3
 8005986:	f000 fae7 	bl	8005f58 <hci_send_req>
 800598a:	1e03      	subs	r3, r0, #0
 800598c:	da01      	bge.n	8005992 <aci_gatt_add_char+0x1a2>
    return BLE_STATUS_TIMEOUT;
 800598e:	23ff      	movs	r3, #255	; 0xff
 8005990:	e010      	b.n	80059b4 <aci_gatt_add_char+0x1c4>

  if (resp.status) {
 8005992:	2228      	movs	r2, #40	; 0x28
 8005994:	18bb      	adds	r3, r7, r2
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <aci_gatt_add_char+0x1b2>
    return resp.status;
 800599c:	18bb      	adds	r3, r7, r2
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	e008      	b.n	80059b4 <aci_gatt_add_char+0x1c4>
  }
    
  *charHandle = btohs(resp.handle);
 80059a2:	2328      	movs	r3, #40	; 0x28
 80059a4:	18fb      	adds	r3, r7, r3
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	021b      	lsls	r3, r3, #8
 80059aa:	0c1b      	lsrs	r3, r3, #16
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059b0:	801a      	strh	r2, [r3, #0]

  return 0;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	0018      	movs	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	b013      	add	sp, #76	; 0x4c
 80059ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059bc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 80059bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059be:	b0ab      	sub	sp, #172	; 0xac
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	0005      	movs	r5, r0
 80059c4:	000c      	movs	r4, r1
 80059c6:	0010      	movs	r0, r2
 80059c8:	0019      	movs	r1, r3
 80059ca:	1dbb      	adds	r3, r7, #6
 80059cc:	1c2a      	adds	r2, r5, #0
 80059ce:	801a      	strh	r2, [r3, #0]
 80059d0:	1d3b      	adds	r3, r7, #4
 80059d2:	1c22      	adds	r2, r4, #0
 80059d4:	801a      	strh	r2, [r3, #0]
 80059d6:	1cfb      	adds	r3, r7, #3
 80059d8:	1c02      	adds	r2, r0, #0
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	1cbb      	adds	r3, r7, #2
 80059de:	1c0a      	adds	r2, r1, #0
 80059e0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80059e2:	23a7      	movs	r3, #167	; 0xa7
 80059e4:	18fb      	adds	r3, r7, r3
 80059e6:	2200      	movs	r2, #0
 80059e8:	701a      	strb	r2, [r3, #0]
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80059ea:	1cbb      	adds	r3, r7, #2
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	2b7a      	cmp	r3, #122	; 0x7a
 80059f0:	d901      	bls.n	80059f6 <aci_gatt_update_char_value+0x3a>
    return BLE_STATUS_INVALID_PARAMS;
 80059f2:	2342      	movs	r3, #66	; 0x42
 80059f4:	e082      	b.n	8005afc <aci_gatt_update_char_value+0x140>

  servHandle = htobs(servHandle);
 80059f6:	1dbb      	adds	r3, r7, #6
 80059f8:	881a      	ldrh	r2, [r3, #0]
 80059fa:	1dbb      	adds	r3, r7, #6
 80059fc:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 80059fe:	24a7      	movs	r4, #167	; 0xa7
 8005a00:	193b      	adds	r3, r7, r4
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2508      	movs	r5, #8
 8005a06:	197a      	adds	r2, r7, r5
 8005a08:	18d3      	adds	r3, r2, r3
 8005a0a:	1db9      	adds	r1, r7, #6
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	0018      	movs	r0, r3
 8005a10:	f000 ff79 	bl	8006906 <memcpy>
  indx += 2;
 8005a14:	0021      	movs	r1, r4
 8005a16:	187b      	adds	r3, r7, r1
 8005a18:	187a      	adds	r2, r7, r1
 8005a1a:	7812      	ldrb	r2, [r2, #0]
 8005a1c:	3202      	adds	r2, #2
 8005a1e:	701a      	strb	r2, [r3, #0]
    
  charHandle = htobs(charHandle);
 8005a20:	1d3b      	adds	r3, r7, #4
 8005a22:	881a      	ldrh	r2, [r3, #0]
 8005a24:	1d3b      	adds	r3, r7, #4
 8005a26:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8005a28:	000c      	movs	r4, r1
 8005a2a:	187b      	adds	r3, r7, r1
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	002e      	movs	r6, r5
 8005a30:	19ba      	adds	r2, r7, r6
 8005a32:	18d3      	adds	r3, r2, r3
 8005a34:	1d39      	adds	r1, r7, #4
 8005a36:	2202      	movs	r2, #2
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f000 ff64 	bl	8006906 <memcpy>
  indx += 2;
 8005a3e:	193b      	adds	r3, r7, r4
 8005a40:	193a      	adds	r2, r7, r4
 8005a42:	7812      	ldrb	r2, [r2, #0]
 8005a44:	3202      	adds	r2, #2
 8005a46:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charValOffset;
 8005a48:	193b      	adds	r3, r7, r4
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	19ba      	adds	r2, r7, r6
 8005a4e:	1cf9      	adds	r1, r7, #3
 8005a50:	7809      	ldrb	r1, [r1, #0]
 8005a52:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005a54:	193b      	adds	r3, r7, r4
 8005a56:	781a      	ldrb	r2, [r3, #0]
 8005a58:	193b      	adds	r3, r7, r4
 8005a5a:	3201      	adds	r2, #1
 8005a5c:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charValueLen;
 8005a5e:	193b      	adds	r3, r7, r4
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	19ba      	adds	r2, r7, r6
 8005a64:	1cb9      	adds	r1, r7, #2
 8005a66:	7809      	ldrb	r1, [r1, #0]
 8005a68:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005a6a:	193b      	adds	r3, r7, r4
 8005a6c:	781a      	ldrb	r2, [r3, #0]
 8005a6e:	193b      	adds	r3, r7, r4
 8005a70:	3201      	adds	r2, #1
 8005a72:	701a      	strb	r2, [r3, #0]
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8005a74:	193b      	adds	r3, r7, r4
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	19ba      	adds	r2, r7, r6
 8005a7a:	18d0      	adds	r0, r2, r3
 8005a7c:	1cbb      	adds	r3, r7, #2
 8005a7e:	781a      	ldrb	r2, [r3, #0]
 8005a80:	23b8      	movs	r3, #184	; 0xb8
 8005a82:	2108      	movs	r1, #8
 8005a84:	185b      	adds	r3, r3, r1
 8005a86:	19db      	adds	r3, r3, r7
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	0019      	movs	r1, r3
 8005a8c:	f000 ff3b 	bl	8006906 <memcpy>
  indx +=  charValueLen;
 8005a90:	193b      	adds	r3, r7, r4
 8005a92:	1939      	adds	r1, r7, r4
 8005a94:	1cba      	adds	r2, r7, #2
 8005a96:	7809      	ldrb	r1, [r1, #0]
 8005a98:	7812      	ldrb	r2, [r2, #0]
 8005a9a:	188a      	adds	r2, r1, r2
 8005a9c:	701a      	strb	r2, [r3, #0]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005a9e:	258c      	movs	r5, #140	; 0x8c
 8005aa0:	197b      	adds	r3, r7, r5
 8005aa2:	2218      	movs	r2, #24
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f000 ff36 	bl	8006918 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005aac:	0029      	movs	r1, r5
 8005aae:	187b      	adds	r3, r7, r1
 8005ab0:	223f      	movs	r2, #63	; 0x3f
 8005ab2:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8005ab4:	187b      	adds	r3, r7, r1
 8005ab6:	2283      	movs	r2, #131	; 0x83
 8005ab8:	0052      	lsls	r2, r2, #1
 8005aba:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 8005abc:	187b      	adds	r3, r7, r1
 8005abe:	19ba      	adds	r2, r7, r6
 8005ac0:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 8005ac2:	193b      	adds	r3, r7, r4
 8005ac4:	781a      	ldrb	r2, [r3, #0]
 8005ac6:	187b      	adds	r3, r7, r1
 8005ac8:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8005aca:	187b      	adds	r3, r7, r1
 8005acc:	228b      	movs	r2, #139	; 0x8b
 8005ace:	18ba      	adds	r2, r7, r2
 8005ad0:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8005ad2:	187b      	adds	r3, r7, r1
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8005ad8:	187b      	adds	r3, r7, r1
 8005ada:	2100      	movs	r1, #0
 8005adc:	0018      	movs	r0, r3
 8005ade:	f000 fa3b 	bl	8005f58 <hci_send_req>
 8005ae2:	1e03      	subs	r3, r0, #0
 8005ae4:	da01      	bge.n	8005aea <aci_gatt_update_char_value+0x12e>
    return BLE_STATUS_TIMEOUT;
 8005ae6:	23ff      	movs	r3, #255	; 0xff
 8005ae8:	e008      	b.n	8005afc <aci_gatt_update_char_value+0x140>

  if (status) {
 8005aea:	228b      	movs	r2, #139	; 0x8b
 8005aec:	18bb      	adds	r3, r7, r2
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <aci_gatt_update_char_value+0x13e>
    return status;
 8005af4:	18bb      	adds	r3, r7, r2
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	e000      	b.n	8005afc <aci_gatt_update_char_value+0x140>
  }

  return 0;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	0018      	movs	r0, r3
 8005afe:	46bd      	mov	sp, r7
 8005b00:	b02b      	add	sp, #172	; 0xac
 8005b02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b04 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8005b04:	b5b0      	push	{r4, r5, r7, lr}
 8005b06:	b08a      	sub	sp, #40	; 0x28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	0002      	movs	r2, r0
 8005b0c:	1dbb      	adds	r3, r7, #6
 8005b0e:	801a      	strh	r2, [r3, #0]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8005b10:	250c      	movs	r5, #12
 8005b12:	197b      	adds	r3, r7, r5
 8005b14:	1dba      	adds	r2, r7, #6
 8005b16:	8812      	ldrh	r2, [r2, #0]
 8005b18:	801a      	strh	r2, [r3, #0]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8005b1a:	2410      	movs	r4, #16
 8005b1c:	193b      	adds	r3, r7, r4
 8005b1e:	2218      	movs	r2, #24
 8005b20:	2100      	movs	r1, #0
 8005b22:	0018      	movs	r0, r3
 8005b24:	f000 fef8 	bl	8006918 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8005b28:	0021      	movs	r1, r4
 8005b2a:	187b      	adds	r3, r7, r1
 8005b2c:	223f      	movs	r2, #63	; 0x3f
 8005b2e:	801a      	strh	r2, [r3, #0]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8005b30:	187b      	adds	r3, r7, r1
 8005b32:	2228      	movs	r2, #40	; 0x28
 8005b34:	32ff      	adds	r2, #255	; 0xff
 8005b36:	805a      	strh	r2, [r3, #2]
    rq.cparam = &cp;
 8005b38:	187b      	adds	r3, r7, r1
 8005b3a:	197a      	adds	r2, r7, r5
 8005b3c:	609a      	str	r2, [r3, #8]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8005b3e:	187b      	adds	r3, r7, r1
 8005b40:	2202      	movs	r2, #2
 8005b42:	60da      	str	r2, [r3, #12]
    rq.rparam = &status;
 8005b44:	187b      	adds	r3, r7, r1
 8005b46:	220b      	movs	r2, #11
 8005b48:	18ba      	adds	r2, r7, r2
 8005b4a:	611a      	str	r2, [r3, #16]
    rq.rlen = 1;
 8005b4c:	187b      	adds	r3, r7, r1
 8005b4e:	2201      	movs	r2, #1
 8005b50:	615a      	str	r2, [r3, #20]

    if (hci_send_req(&rq, FALSE) < 0)
 8005b52:	187b      	adds	r3, r7, r1
 8005b54:	2100      	movs	r1, #0
 8005b56:	0018      	movs	r0, r3
 8005b58:	f000 f9fe 	bl	8005f58 <hci_send_req>
 8005b5c:	1e03      	subs	r3, r0, #0
 8005b5e:	da01      	bge.n	8005b64 <aci_gatt_allow_read+0x60>
      return BLE_STATUS_TIMEOUT;
 8005b60:	23ff      	movs	r3, #255	; 0xff
 8005b62:	e002      	b.n	8005b6a <aci_gatt_allow_read+0x66>

    return status;
 8005b64:	230b      	movs	r3, #11
 8005b66:	18fb      	adds	r3, r7, r3
 8005b68:	781b      	ldrb	r3, [r3, #0]
}
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b00a      	add	sp, #40	; 0x28
 8005b70:	bdb0      	pop	{r4, r5, r7, pc}

08005b72 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8005b72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b74:	b0ab      	sub	sp, #172	; 0xac
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	603a      	str	r2, [r7, #0]
 8005b7a:	1dfb      	adds	r3, r7, #7
 8005b7c:	1c02      	adds	r2, r0, #0
 8005b7e:	701a      	strb	r2, [r3, #0]
 8005b80:	1dbb      	adds	r3, r7, #6
 8005b82:	1c0a      	adds	r2, r1, #0
 8005b84:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8005b86:	23a7      	movs	r3, #167	; 0xa7
 8005b88:	18fb      	adds	r3, r7, r3
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	701a      	strb	r2, [r3, #0]
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8005b8e:	1dbb      	adds	r3, r7, #6
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b7e      	cmp	r3, #126	; 0x7e
 8005b94:	d901      	bls.n	8005b9a <aci_hal_write_config_data+0x28>
    return BLE_STATUS_INVALID_PARAMS;
 8005b96:	2342      	movs	r3, #66	; 0x42
 8005b98:	e050      	b.n	8005c3c <aci_hal_write_config_data+0xca>

  buffer[indx] = offset;
 8005b9a:	24a7      	movs	r4, #167	; 0xa7
 8005b9c:	193b      	adds	r3, r7, r4
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2608      	movs	r6, #8
 8005ba2:	19ba      	adds	r2, r7, r6
 8005ba4:	1df9      	adds	r1, r7, #7
 8005ba6:	7809      	ldrb	r1, [r1, #0]
 8005ba8:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005baa:	193b      	adds	r3, r7, r4
 8005bac:	781a      	ldrb	r2, [r3, #0]
 8005bae:	193b      	adds	r3, r7, r4
 8005bb0:	3201      	adds	r2, #1
 8005bb2:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = len;
 8005bb4:	193b      	adds	r3, r7, r4
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	19ba      	adds	r2, r7, r6
 8005bba:	1db9      	adds	r1, r7, #6
 8005bbc:	7809      	ldrb	r1, [r1, #0]
 8005bbe:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005bc0:	193b      	adds	r3, r7, r4
 8005bc2:	781a      	ldrb	r2, [r3, #0]
 8005bc4:	193b      	adds	r3, r7, r4
 8005bc6:	3201      	adds	r2, #1
 8005bc8:	701a      	strb	r2, [r3, #0]
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8005bca:	193b      	adds	r3, r7, r4
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	19ba      	adds	r2, r7, r6
 8005bd0:	18d0      	adds	r0, r2, r3
 8005bd2:	1dbb      	adds	r3, r7, #6
 8005bd4:	781a      	ldrb	r2, [r3, #0]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	0019      	movs	r1, r3
 8005bda:	f000 fe94 	bl	8006906 <memcpy>
  indx +=  len;
 8005bde:	193b      	adds	r3, r7, r4
 8005be0:	1939      	adds	r1, r7, r4
 8005be2:	1dba      	adds	r2, r7, #6
 8005be4:	7809      	ldrb	r1, [r1, #0]
 8005be6:	7812      	ldrb	r2, [r2, #0]
 8005be8:	188a      	adds	r2, r1, r2
 8005bea:	701a      	strb	r2, [r3, #0]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005bec:	258c      	movs	r5, #140	; 0x8c
 8005bee:	197b      	adds	r3, r7, r5
 8005bf0:	2218      	movs	r2, #24
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f000 fe8f 	bl	8006918 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005bfa:	0029      	movs	r1, r5
 8005bfc:	187b      	adds	r3, r7, r1
 8005bfe:	223f      	movs	r2, #63	; 0x3f
 8005c00:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8005c02:	187b      	adds	r3, r7, r1
 8005c04:	220c      	movs	r2, #12
 8005c06:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 8005c08:	187b      	adds	r3, r7, r1
 8005c0a:	19ba      	adds	r2, r7, r6
 8005c0c:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 8005c0e:	193b      	adds	r3, r7, r4
 8005c10:	781a      	ldrb	r2, [r3, #0]
 8005c12:	187b      	adds	r3, r7, r1
 8005c14:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8005c16:	187b      	adds	r3, r7, r1
 8005c18:	228b      	movs	r2, #139	; 0x8b
 8005c1a:	18ba      	adds	r2, r7, r2
 8005c1c:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8005c1e:	187b      	adds	r3, r7, r1
 8005c20:	2201      	movs	r2, #1
 8005c22:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8005c24:	187b      	adds	r3, r7, r1
 8005c26:	2100      	movs	r1, #0
 8005c28:	0018      	movs	r0, r3
 8005c2a:	f000 f995 	bl	8005f58 <hci_send_req>
 8005c2e:	1e03      	subs	r3, r0, #0
 8005c30:	da01      	bge.n	8005c36 <aci_hal_write_config_data+0xc4>
    return BLE_STATUS_TIMEOUT;
 8005c32:	23ff      	movs	r3, #255	; 0xff
 8005c34:	e002      	b.n	8005c3c <aci_hal_write_config_data+0xca>

  return status;
 8005c36:	238b      	movs	r3, #139	; 0x8b
 8005c38:	18fb      	adds	r3, r7, r3
 8005c3a:	781b      	ldrb	r3, [r3, #0]
}
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	b02b      	add	sp, #172	; 0xac
 8005c42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c44 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8005c44:	b590      	push	{r4, r7, lr}
 8005c46:	b089      	sub	sp, #36	; 0x24
 8005c48:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005c4a:	2408      	movs	r4, #8
 8005c4c:	193b      	adds	r3, r7, r4
 8005c4e:	2218      	movs	r2, #24
 8005c50:	2100      	movs	r1, #0
 8005c52:	0018      	movs	r0, r3
 8005c54:	f000 fe60 	bl	8006918 <memset>
  rq.ogf = OGF_HOST_CTL;
 8005c58:	0021      	movs	r1, r4
 8005c5a:	187b      	adds	r3, r7, r1
 8005c5c:	2203      	movs	r2, #3
 8005c5e:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_RESET;
 8005c60:	187b      	adds	r3, r7, r1
 8005c62:	2203      	movs	r2, #3
 8005c64:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 8005c66:	187b      	adds	r3, r7, r1
 8005c68:	1dfa      	adds	r2, r7, #7
 8005c6a:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8005c6c:	187b      	adds	r3, r7, r1
 8005c6e:	2201      	movs	r2, #1
 8005c70:	615a      	str	r2, [r3, #20]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005c72:	187b      	adds	r3, r7, r1
 8005c74:	2100      	movs	r1, #0
 8005c76:	0018      	movs	r0, r3
 8005c78:	f000 f96e 	bl	8005f58 <hci_send_req>
 8005c7c:	1e03      	subs	r3, r0, #0
 8005c7e:	da01      	bge.n	8005c84 <hci_reset+0x40>
    return BLE_STATUS_TIMEOUT;
 8005c80:	23ff      	movs	r3, #255	; 0xff
 8005c82:	e001      	b.n	8005c88 <hci_reset+0x44>
  
  return status;  
 8005c84:	1dfb      	adds	r3, r7, #7
 8005c86:	781b      	ldrb	r3, [r3, #0]
}
 8005c88:	0018      	movs	r0, r3
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	b009      	add	sp, #36	; 0x24
 8005c8e:	bd90      	pop	{r4, r7, pc}

08005c90 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8005c90:	b5b0      	push	{r4, r5, r7, lr}
 8005c92:	b092      	sub	sp, #72	; 0x48
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	0002      	movs	r2, r0
 8005c98:	6039      	str	r1, [r7, #0]
 8005c9a:	1dfb      	adds	r3, r7, #7
 8005c9c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8005c9e:	2410      	movs	r4, #16
 8005ca0:	193b      	adds	r3, r7, r4
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f000 fe36 	bl	8006918 <memset>
  scan_resp_cp.length = length;
 8005cac:	193b      	adds	r3, r7, r4
 8005cae:	1dfa      	adds	r2, r7, #7
 8005cb0:	7812      	ldrb	r2, [r2, #0]
 8005cb2:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8005cb4:	1dfb      	adds	r3, r7, #7
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	2a1f      	cmp	r2, #31
 8005cbc:	d900      	bls.n	8005cc0 <hci_le_set_scan_resp_data+0x30>
 8005cbe:	231f      	movs	r3, #31
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	001a      	movs	r2, r3
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	2510      	movs	r5, #16
 8005cc8:	197b      	adds	r3, r7, r5
 8005cca:	3301      	adds	r3, #1
 8005ccc:	0018      	movs	r0, r3
 8005cce:	f000 fe1a 	bl	8006906 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005cd2:	2430      	movs	r4, #48	; 0x30
 8005cd4:	193b      	adds	r3, r7, r4
 8005cd6:	2218      	movs	r2, #24
 8005cd8:	2100      	movs	r1, #0
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f000 fe1c 	bl	8006918 <memset>
  rq.ogf = OGF_LE_CTL;
 8005ce0:	0021      	movs	r1, r4
 8005ce2:	187b      	adds	r3, r7, r1
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8005ce8:	187b      	adds	r3, r7, r1
 8005cea:	2209      	movs	r2, #9
 8005cec:	805a      	strh	r2, [r3, #2]
  rq.cparam = &scan_resp_cp;
 8005cee:	187b      	adds	r3, r7, r1
 8005cf0:	197a      	adds	r2, r7, r5
 8005cf2:	609a      	str	r2, [r3, #8]
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8005cf4:	187b      	adds	r3, r7, r1
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8005cfa:	187b      	adds	r3, r7, r1
 8005cfc:	220f      	movs	r2, #15
 8005cfe:	18ba      	adds	r2, r7, r2
 8005d00:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8005d02:	187b      	adds	r3, r7, r1
 8005d04:	2201      	movs	r2, #1
 8005d06:	615a      	str	r2, [r3, #20]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005d08:	187b      	adds	r3, r7, r1
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	f000 f923 	bl	8005f58 <hci_send_req>
 8005d12:	1e03      	subs	r3, r0, #0
 8005d14:	da01      	bge.n	8005d1a <hci_le_set_scan_resp_data+0x8a>
    return BLE_STATUS_TIMEOUT;
 8005d16:	23ff      	movs	r3, #255	; 0xff
 8005d18:	e002      	b.n	8005d20 <hci_le_set_scan_resp_data+0x90>
  
  return status;
 8005d1a:	230f      	movs	r3, #15
 8005d1c:	18fb      	adds	r3, r7, r3
 8005d1e:	781b      	ldrb	r3, [r3, #0]
}
 8005d20:	0018      	movs	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	b012      	add	sp, #72	; 0x48
 8005d26:	bdb0      	pop	{r4, r5, r7, pc}

08005d28 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3308      	adds	r3, #8
 8005d34:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d001      	beq.n	8005d42 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e00c      	b.n	8005d5c <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3302      	adds	r3, #2
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	0019      	movs	r1, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2288      	movs	r2, #136	; 0x88
 8005d4e:	5c9b      	ldrb	r3, [r3, r2]
 8005d50:	3b03      	subs	r3, #3
 8005d52:	4299      	cmp	r1, r3
 8005d54:	d001      	beq.n	8005d5a <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8005d56:	2302      	movs	r3, #2
 8005d58:	e000      	b.n	8005d5c <verify_packet+0x34>
  
  return 0;      
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	b004      	add	sp, #16
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8005d64:	b5b0      	push	{r4, r5, r7, lr}
 8005d66:	b0a6      	sub	sp, #152	; 0x98
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	0004      	movs	r4, r0
 8005d6c:	0008      	movs	r0, r1
 8005d6e:	0011      	movs	r1, r2
 8005d70:	607b      	str	r3, [r7, #4]
 8005d72:	250e      	movs	r5, #14
 8005d74:	197b      	adds	r3, r7, r5
 8005d76:	1c22      	adds	r2, r4, #0
 8005d78:	801a      	strh	r2, [r3, #0]
 8005d7a:	240c      	movs	r4, #12
 8005d7c:	193b      	adds	r3, r7, r4
 8005d7e:	1c02      	adds	r2, r0, #0
 8005d80:	801a      	strh	r2, [r3, #0]
 8005d82:	200b      	movs	r0, #11
 8005d84:	183b      	adds	r3, r7, r0
 8005d86:	1c0a      	adds	r2, r1, #0
 8005d88:	701a      	strb	r2, [r3, #0]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8005d8a:	193b      	adds	r3, r7, r4
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	5e9b      	ldrsh	r3, [r3, r2]
 8005d90:	059b      	lsls	r3, r3, #22
 8005d92:	0d9b      	lsrs	r3, r3, #22
 8005d94:	b21a      	sxth	r2, r3
 8005d96:	197b      	adds	r3, r7, r5
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	029b      	lsls	r3, r3, #10
 8005d9c:	b21b      	sxth	r3, r3
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	b21b      	sxth	r3, r3
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	2114      	movs	r1, #20
 8005da6:	187b      	adds	r3, r7, r1
 8005da8:	801a      	strh	r2, [r3, #0]
  hc.plen = plen;
 8005daa:	187b      	adds	r3, r7, r1
 8005dac:	0004      	movs	r4, r0
 8005dae:	183a      	adds	r2, r7, r0
 8005db0:	7812      	ldrb	r2, [r2, #0]
 8005db2:	709a      	strb	r2, [r3, #2]

  payload[0] = HCI_COMMAND_PKT;
 8005db4:	2518      	movs	r5, #24
 8005db6:	197b      	adds	r3, r7, r5
 8005db8:	2201      	movs	r2, #1
 8005dba:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8005dbc:	197b      	adds	r3, r7, r5
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	187a      	adds	r2, r7, r1
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	0011      	movs	r1, r2
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	001a      	movs	r2, r3
 8005dca:	f000 fd9c 	bl	8006906 <memcpy>
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8005dce:	197b      	adds	r3, r7, r5
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	193a      	adds	r2, r7, r4
 8005dd4:	7812      	ldrb	r2, [r2, #0]
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f000 fd94 	bl	8006906 <memcpy>
  
  if (hciContext.io.Send)
 8005dde:	4b09      	ldr	r3, [pc, #36]	; (8005e04 <send_cmd+0xa0>)
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d009      	beq.n	8005dfa <send_cmd+0x96>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8005de6:	4b07      	ldr	r3, [pc, #28]	; (8005e04 <send_cmd+0xa0>)
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	193a      	adds	r2, r7, r4
 8005dec:	7812      	ldrb	r2, [r2, #0]
 8005dee:	b292      	uxth	r2, r2
 8005df0:	3204      	adds	r2, #4
 8005df2:	b291      	uxth	r1, r2
 8005df4:	197a      	adds	r2, r7, r5
 8005df6:	0010      	movs	r0, r2
 8005df8:	4798      	blx	r3
  }
}
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	b026      	add	sp, #152	; 0x98
 8005e00:	bdb0      	pop	{r4, r5, r7, pc}
 8005e02:	46c0      	nop			; (mov r8, r8)
 8005e04:	20000b88 	.word	0x20000b88

08005e08 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8005e12:	e00c      	b.n	8005e2e <move_list+0x26>
  {
    list_remove_tail(src_list, &tmp_node);
 8005e14:	230c      	movs	r3, #12
 8005e16:	18fa      	adds	r2, r7, r3
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	0011      	movs	r1, r2
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f000 fb13 	bl	8006448 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	0011      	movs	r1, r2
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f000 fa7f 	bl	800632c <list_insert_head>
  while (!list_is_empty(src_list))
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	0018      	movs	r0, r3
 8005e32:	f000 fa55 	bl	80062e0 <list_is_empty>
 8005e36:	1e03      	subs	r3, r0, #0
 8005e38:	d0ec      	beq.n	8005e14 <move_list+0xc>
  }
}
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	46c0      	nop			; (mov r8, r8)
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	b004      	add	sp, #16
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005e4a:	e00b      	b.n	8005e64 <free_event_list+0x20>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8005e4c:	1d3a      	adds	r2, r7, #4
 8005e4e:	4b0b      	ldr	r3, [pc, #44]	; (8005e7c <free_event_list+0x38>)
 8005e50:	0011      	movs	r1, r2
 8005e52:	0018      	movs	r0, r3
 8005e54:	f000 fad1 	bl	80063fa <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	4b09      	ldr	r3, [pc, #36]	; (8005e80 <free_event_list+0x3c>)
 8005e5c:	0011      	movs	r1, r2
 8005e5e:	0018      	movs	r0, r3
 8005e60:	f000 fa88 	bl	8006374 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005e64:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <free_event_list+0x3c>)
 8005e66:	0018      	movs	r0, r3
 8005e68:	f000 fb15 	bl	8006496 <list_get_size>
 8005e6c:	0003      	movs	r3, r0
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	ddec      	ble.n	8005e4c <free_event_list+0x8>
  }
}
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	46c0      	nop			; (mov r8, r8)
 8005e76:	46bd      	mov	sp, r7
 8005e78:	b002      	add	sp, #8
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	200008c4 	.word	0x200008c4
 8005e80:	200008bc 	.word	0x200008bc

08005e84 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005e84:	b590      	push	{r4, r7, lr}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8005e94:	4b1d      	ldr	r3, [pc, #116]	; (8005f0c <hci_init+0x88>)
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	61da      	str	r2, [r3, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8005e9a:	4b1d      	ldr	r3, [pc, #116]	; (8005f10 <hci_init+0x8c>)
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f000 fa11 	bl	80062c4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8005ea2:	4b1c      	ldr	r3, [pc, #112]	; (8005f14 <hci_init+0x90>)
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	f000 fa0d 	bl	80062c4 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8005eaa:	f7fa fd43 	bl	8000934 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005eae:	230f      	movs	r3, #15
 8005eb0:	18fb      	adds	r3, r7, r3
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	e010      	b.n	8005eda <hci_init+0x56>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8005eb8:	240f      	movs	r4, #15
 8005eba:	193b      	adds	r3, r7, r4
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	228c      	movs	r2, #140	; 0x8c
 8005ec0:	435a      	muls	r2, r3
 8005ec2:	4b15      	ldr	r3, [pc, #84]	; (8005f18 <hci_init+0x94>)
 8005ec4:	18d2      	adds	r2, r2, r3
 8005ec6:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <hci_init+0x8c>)
 8005ec8:	0011      	movs	r1, r2
 8005eca:	0018      	movs	r0, r3
 8005ecc:	f000 fa52 	bl	8006374 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005ed0:	193b      	adds	r3, r7, r4
 8005ed2:	781a      	ldrb	r2, [r3, #0]
 8005ed4:	193b      	adds	r3, r7, r4
 8005ed6:	3201      	adds	r2, #1
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	230f      	movs	r3, #15
 8005edc:	18fb      	adds	r3, r7, r3
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d9e9      	bls.n	8005eb8 <hci_init+0x34>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8005ee4:	4b09      	ldr	r3, [pc, #36]	; (8005f0c <hci_init+0x88>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <hci_init+0x70>
 8005eec:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <hci_init+0x88>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8005ef4:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <hci_init+0x88>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <hci_init+0x7e>
 8005efc:	4b03      	ldr	r3, [pc, #12]	; (8005f0c <hci_init+0x88>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	4798      	blx	r3
}
 8005f02:	46c0      	nop			; (mov r8, r8)
 8005f04:	46bd      	mov	sp, r7
 8005f06:	b005      	add	sp, #20
 8005f08:	bd90      	pop	{r4, r7, pc}
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	20000b88 	.word	0x20000b88
 8005f10:	200008bc 	.word	0x200008bc
 8005f14:	200008c4 	.word	0x200008c4
 8005f18:	200008cc 	.word	0x200008cc

08005f1c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <hci_register_io_bus+0x38>)
 8005f2a:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	4b08      	ldr	r3, [pc, #32]	; (8005f54 <hci_register_io_bus+0x38>)
 8005f32:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691a      	ldr	r2, [r3, #16]
 8005f38:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <hci_register_io_bus+0x38>)
 8005f3a:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	699a      	ldr	r2, [r3, #24]
 8005f40:	4b04      	ldr	r3, [pc, #16]	; (8005f54 <hci_register_io_bus+0x38>)
 8005f42:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	4b02      	ldr	r3, [pc, #8]	; (8005f54 <hci_register_io_bus+0x38>)
 8005f4a:	609a      	str	r2, [r3, #8]
}
 8005f4c:	46c0      	nop			; (mov r8, r8)
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	b002      	add	sp, #8
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20000b88 	.word	0x20000b88

08005f58 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08e      	sub	sp, #56	; 0x38
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	000a      	movs	r2, r1
 8005f62:	1cfb      	adds	r3, r7, #3
 8005f64:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	885b      	ldrh	r3, [r3, #2]
 8005f6a:	b21b      	sxth	r3, r3
 8005f6c:	059b      	lsls	r3, r3, #22
 8005f6e:	0d9b      	lsrs	r3, r3, #22
 8005f70:	b21a      	sxth	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	029b      	lsls	r3, r3, #10
 8005f78:	b21b      	sxth	r3, r3
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	b21a      	sxth	r2, r3
 8005f7e:	2336      	movs	r3, #54	; 0x36
 8005f80:	18fb      	adds	r3, r7, r3
 8005f82:	801a      	strh	r2, [r3, #0]
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8005f88:	2308      	movs	r3, #8
 8005f8a:	18fb      	adds	r3, r7, r3
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	f000 f999 	bl	80062c4 <list_init_head>

  free_event_list();
 8005f92:	f7ff ff57 	bl	8005e44 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	8818      	ldrh	r0, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	8859      	ldrh	r1, [r3, #2]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f7ff fedc 	bl	8005d64 <send_cmd>
  
  if (async)
 8005fac:	1cfb      	adds	r3, r7, #3
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <hci_send_req+0x60>
  {
    return 0;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e0f8      	b.n	80061aa <hci_send_req+0x252>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8005fb8:	f7fc f85e 	bl	8002078 <HAL_GetTick>
 8005fbc:	0003      	movs	r3, r0
 8005fbe:	633b      	str	r3, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8005fc0:	f7fc f85a 	bl	8002078 <HAL_GetTick>
 8005fc4:	0002      	movs	r2, r0
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	1ad2      	subs	r2, r2, r3
 8005fca:	23fa      	movs	r3, #250	; 0xfa
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d900      	bls.n	8005fd4 <hci_send_req+0x7c>
 8005fd2:	e0c2      	b.n	800615a <hci_send_req+0x202>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8005fd4:	4b77      	ldr	r3, [pc, #476]	; (80061b4 <hci_send_req+0x25c>)
 8005fd6:	0018      	movs	r0, r3
 8005fd8:	f000 f982 	bl	80062e0 <list_is_empty>
 8005fdc:	1e03      	subs	r3, r0, #0
 8005fde:	d000      	beq.n	8005fe2 <hci_send_req+0x8a>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8005fe0:	e7ee      	b.n	8005fc0 <hci_send_req+0x68>
      {
        break;
 8005fe2:	46c0      	nop			; (mov r8, r8)
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	18fa      	adds	r2, r7, r3
 8005fe8:	4b72      	ldr	r3, [pc, #456]	; (80061b4 <hci_send_req+0x25c>)
 8005fea:	0011      	movs	r1, r2
 8005fec:	0018      	movs	r0, r3
 8005fee:	f000 fa04 	bl	80063fa <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8005ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d000      	beq.n	8006002 <hci_send_req+0xaa>
 8006000:	e085      	b.n	800610e <hci_send_req+0x1b6>
    {
      event_pckt = (void *)(hci_hdr->data);
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	3301      	adds	r3, #1
 8006006:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	3308      	adds	r3, #8
 800600c:	3303      	adds	r3, #3
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2288      	movs	r2, #136	; 0x88
 8006014:	5c9b      	ldrb	r3, [r3, r2]
 8006016:	3b03      	subs	r3, #3
 8006018:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b3e      	cmp	r3, #62	; 0x3e
 8006020:	d057      	beq.n	80060d2 <hci_send_req+0x17a>
 8006022:	dd00      	ble.n	8006026 <hci_send_req+0xce>
 8006024:	e075      	b.n	8006112 <hci_send_req+0x1ba>
 8006026:	2b10      	cmp	r3, #16
 8006028:	d100      	bne.n	800602c <hci_send_req+0xd4>
 800602a:	e098      	b.n	800615e <hci_send_req+0x206>
 800602c:	dd00      	ble.n	8006030 <hci_send_req+0xd8>
 800602e:	e070      	b.n	8006112 <hci_send_req+0x1ba>
 8006030:	2b0e      	cmp	r3, #14
 8006032:	d02a      	beq.n	800608a <hci_send_req+0x132>
 8006034:	2b0f      	cmp	r3, #15
 8006036:	d000      	beq.n	800603a <hci_send_req+0xe2>
 8006038:	e06b      	b.n	8006112 <hci_send_req+0x1ba>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	789a      	ldrb	r2, [r3, #2]
 8006042:	78db      	ldrb	r3, [r3, #3]
 8006044:	021b      	lsls	r3, r3, #8
 8006046:	4313      	orrs	r3, r2
 8006048:	b29b      	uxth	r3, r3
 800604a:	2236      	movs	r2, #54	; 0x36
 800604c:	18ba      	adds	r2, r7, r2
 800604e:	8812      	ldrh	r2, [r2, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d000      	beq.n	8006056 <hci_send_req+0xfe>
 8006054:	e085      	b.n	8006162 <hci_send_req+0x20a>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2b0f      	cmp	r3, #15
 800605c:	d004      	beq.n	8006068 <hci_send_req+0x110>
          if (cs->status) {
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d057      	beq.n	8006116 <hci_send_req+0x1be>
            goto failed;
 8006066:	e07f      	b.n	8006168 <hci_send_req+0x210>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	695a      	ldr	r2, [r3, #20]
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	4293      	cmp	r3, r2
 8006070:	d900      	bls.n	8006074 <hci_send_req+0x11c>
 8006072:	0013      	movs	r3, r2
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6918      	ldr	r0, [r3, #16]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	695a      	ldr	r2, [r3, #20]
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	0019      	movs	r1, r3
 8006084:	f000 fc3f 	bl	8006906 <memcpy>
        goto done;
 8006088:	e081      	b.n	800618e <hci_send_req+0x236>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	785a      	ldrb	r2, [r3, #1]
 8006092:	789b      	ldrb	r3, [r3, #2]
 8006094:	021b      	lsls	r3, r3, #8
 8006096:	4313      	orrs	r3, r2
 8006098:	b29b      	uxth	r3, r3
 800609a:	2236      	movs	r2, #54	; 0x36
 800609c:	18ba      	adds	r2, r7, r2
 800609e:	8812      	ldrh	r2, [r2, #0]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d160      	bne.n	8006166 <hci_send_req+0x20e>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	3303      	adds	r3, #3
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	3b03      	subs	r3, #3
 80060ae:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	695a      	ldr	r2, [r3, #20]
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d900      	bls.n	80060bc <hci_send_req+0x164>
 80060ba:	0013      	movs	r3, r2
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6918      	ldr	r0, [r3, #16]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	695a      	ldr	r2, [r3, #20]
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	0019      	movs	r1, r3
 80060cc:	f000 fc1b 	bl	8006906 <memcpy>
        goto done;
 80060d0:	e05d      	b.n	800618e <hci_send_req+0x236>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	001a      	movs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d11a      	bne.n	800611a <hci_send_req+0x1c2>
          break;
      
        len -= 1;
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	695a      	ldr	r2, [r3, #20]
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d900      	bls.n	80060f6 <hci_send_req+0x19e>
 80060f4:	0013      	movs	r3, r2
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6918      	ldr	r0, [r3, #16]
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	1c59      	adds	r1, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	001a      	movs	r2, r3
 8006108:	f000 fbfd 	bl	8006906 <memcpy>
        goto done;
 800610c:	e03f      	b.n	800618e <hci_send_req+0x236>
        goto failed;
      
      default:      
        break;
      }
    }
 800610e:	46c0      	nop			; (mov r8, r8)
 8006110:	e004      	b.n	800611c <hci_send_req+0x1c4>
        break;
 8006112:	46c0      	nop			; (mov r8, r8)
 8006114:	e002      	b.n	800611c <hci_send_req+0x1c4>
          break;
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	e000      	b.n	800611c <hci_send_req+0x1c4>
          break;
 800611a:	46c0      	nop			; (mov r8, r8)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800611c:	4b26      	ldr	r3, [pc, #152]	; (80061b8 <hci_send_req+0x260>)
 800611e:	0018      	movs	r0, r3
 8006120:	f000 f8de 	bl	80062e0 <list_is_empty>
 8006124:	1e03      	subs	r3, r0, #0
 8006126:	d00e      	beq.n	8006146 <hci_send_req+0x1ee>
 8006128:	4b22      	ldr	r3, [pc, #136]	; (80061b4 <hci_send_req+0x25c>)
 800612a:	0018      	movs	r0, r3
 800612c:	f000 f8d8 	bl	80062e0 <list_is_empty>
 8006130:	1e03      	subs	r3, r0, #0
 8006132:	d008      	beq.n	8006146 <hci_send_req+0x1ee>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4b20      	ldr	r3, [pc, #128]	; (80061b8 <hci_send_req+0x260>)
 8006138:	0011      	movs	r1, r2
 800613a:	0018      	movs	r0, r3
 800613c:	f000 f91a 	bl	8006374 <list_insert_tail>
      hciReadPacket=NULL;
 8006140:	2300      	movs	r3, #0
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	e008      	b.n	8006158 <hci_send_req+0x200>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	2308      	movs	r3, #8
 800614a:	18fb      	adds	r3, r7, r3
 800614c:	0011      	movs	r1, r2
 800614e:	0018      	movs	r0, r3
 8006150:	f000 f910 	bl	8006374 <list_insert_tail>
      hciReadPacket=NULL;
 8006154:	2300      	movs	r3, #0
 8006156:	613b      	str	r3, [r7, #16]
  {
 8006158:	e72e      	b.n	8005fb8 <hci_send_req+0x60>
        goto failed;
 800615a:	46c0      	nop			; (mov r8, r8)
 800615c:	e004      	b.n	8006168 <hci_send_req+0x210>
        goto failed;
 800615e:	46c0      	nop			; (mov r8, r8)
 8006160:	e002      	b.n	8006168 <hci_send_req+0x210>
          goto failed;
 8006162:	46c0      	nop			; (mov r8, r8)
 8006164:	e000      	b.n	8006168 <hci_send_req+0x210>
          goto failed;
 8006166:	46c0      	nop			; (mov r8, r8)
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d005      	beq.n	800617a <hci_send_req+0x222>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4b11      	ldr	r3, [pc, #68]	; (80061b8 <hci_send_req+0x260>)
 8006172:	0011      	movs	r1, r2
 8006174:	0018      	movs	r0, r3
 8006176:	f000 f8d9 	bl	800632c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800617a:	2308      	movs	r3, #8
 800617c:	18fa      	adds	r2, r7, r3
 800617e:	4b0d      	ldr	r3, [pc, #52]	; (80061b4 <hci_send_req+0x25c>)
 8006180:	0011      	movs	r1, r2
 8006182:	0018      	movs	r0, r3
 8006184:	f7ff fe40 	bl	8005e08 <move_list>

  return -1;
 8006188:	2301      	movs	r3, #1
 800618a:	425b      	negs	r3, r3
 800618c:	e00d      	b.n	80061aa <hci_send_req+0x252>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <hci_send_req+0x260>)
 8006192:	0011      	movs	r1, r2
 8006194:	0018      	movs	r0, r3
 8006196:	f000 f8c9 	bl	800632c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800619a:	2308      	movs	r3, #8
 800619c:	18fa      	adds	r2, r7, r3
 800619e:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <hci_send_req+0x25c>)
 80061a0:	0011      	movs	r1, r2
 80061a2:	0018      	movs	r0, r3
 80061a4:	f7ff fe30 	bl	8005e08 <move_list>

  return 0;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	0018      	movs	r0, r3
 80061ac:	46bd      	mov	sp, r7
 80061ae:	b00e      	add	sp, #56	; 0x38
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	46c0      	nop			; (mov r8, r8)
 80061b4:	200008c4 	.word	0x200008c4
 80061b8:	200008bc 	.word	0x200008bc

080061bc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80061c6:	e015      	b.n	80061f4 <hci_user_evt_proc+0x38>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80061c8:	1d3a      	adds	r2, r7, #4
 80061ca:	4b10      	ldr	r3, [pc, #64]	; (800620c <hci_user_evt_proc+0x50>)
 80061cc:	0011      	movs	r1, r2
 80061ce:	0018      	movs	r0, r3
 80061d0:	f000 f913 	bl	80063fa <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80061d4:	4b0e      	ldr	r3, [pc, #56]	; (8006210 <hci_user_evt_proc+0x54>)
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <hci_user_evt_proc+0x2c>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80061dc:	4b0c      	ldr	r3, [pc, #48]	; (8006210 <hci_user_evt_proc+0x54>)
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	3208      	adds	r2, #8
 80061e4:	0010      	movs	r0, r2
 80061e6:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	4b0a      	ldr	r3, [pc, #40]	; (8006214 <hci_user_evt_proc+0x58>)
 80061ec:	0011      	movs	r1, r2
 80061ee:	0018      	movs	r0, r3
 80061f0:	f000 f8c0 	bl	8006374 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80061f4:	4b05      	ldr	r3, [pc, #20]	; (800620c <hci_user_evt_proc+0x50>)
 80061f6:	0018      	movs	r0, r3
 80061f8:	f000 f872 	bl	80062e0 <list_is_empty>
 80061fc:	1e03      	subs	r3, r0, #0
 80061fe:	d0e3      	beq.n	80061c8 <hci_user_evt_proc+0xc>
  }
}
 8006200:	46c0      	nop			; (mov r8, r8)
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	46bd      	mov	sp, r7
 8006206:	b002      	add	sp, #8
 8006208:	bd80      	pop	{r7, pc}
 800620a:	46c0      	nop			; (mov r8, r8)
 800620c:	200008c4 	.word	0x200008c4
 8006210:	20000b88 	.word	0x20000b88
 8006214:	200008bc 	.word	0x200008bc

08006218 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8006224:	2300      	movs	r3, #0
 8006226:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8006228:	4b23      	ldr	r3, [pc, #140]	; (80062b8 <hci_notify_asynch_evt+0xa0>)
 800622a:	0018      	movs	r0, r3
 800622c:	f000 f858 	bl	80062e0 <list_is_empty>
 8006230:	1e03      	subs	r3, r0, #0
 8006232:	d13a      	bne.n	80062aa <hci_notify_asynch_evt+0x92>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8006234:	230c      	movs	r3, #12
 8006236:	18fa      	adds	r2, r7, r3
 8006238:	4b1f      	ldr	r3, [pc, #124]	; (80062b8 <hci_notify_asynch_evt+0xa0>)
 800623a:	0011      	movs	r1, r2
 800623c:	0018      	movs	r0, r3
 800623e:	f000 f8dc 	bl	80063fa <list_remove_head>
    
    if (hciContext.io.Receive)
 8006242:	4b1e      	ldr	r3, [pc, #120]	; (80062bc <hci_notify_asynch_evt+0xa4>)
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d031      	beq.n	80062ae <hci_notify_asynch_evt+0x96>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800624a:	4b1c      	ldr	r3, [pc, #112]	; (80062bc <hci_notify_asynch_evt+0xa4>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	3208      	adds	r2, #8
 8006252:	2180      	movs	r1, #128	; 0x80
 8006254:	0010      	movs	r0, r2
 8006256:	4798      	blx	r3
 8006258:	0002      	movs	r2, r0
 800625a:	2113      	movs	r1, #19
 800625c:	187b      	adds	r3, r7, r1
 800625e:	701a      	strb	r2, [r3, #0]
      if (data_len > 0)
 8006260:	000a      	movs	r2, r1
 8006262:	18bb      	adds	r3, r7, r2
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d018      	beq.n	800629c <hci_notify_asynch_evt+0x84>
      {                    
        hciReadPacket->data_len = data_len;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	18ba      	adds	r2, r7, r2
 800626e:	2188      	movs	r1, #136	; 0x88
 8006270:	7812      	ldrb	r2, [r2, #0]
 8006272:	545a      	strb	r2, [r3, r1]
        if (verify_packet(hciReadPacket) == 0)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	0018      	movs	r0, r3
 8006278:	f7ff fd56 	bl	8005d28 <verify_packet>
 800627c:	1e03      	subs	r3, r0, #0
 800627e:	d106      	bne.n	800628e <hci_notify_asynch_evt+0x76>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4b0f      	ldr	r3, [pc, #60]	; (80062c0 <hci_notify_asynch_evt+0xa8>)
 8006284:	0011      	movs	r1, r2
 8006286:	0018      	movs	r0, r3
 8006288:	f000 f874 	bl	8006374 <list_insert_tail>
 800628c:	e00f      	b.n	80062ae <hci_notify_asynch_evt+0x96>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4b09      	ldr	r3, [pc, #36]	; (80062b8 <hci_notify_asynch_evt+0xa0>)
 8006292:	0011      	movs	r1, r2
 8006294:	0018      	movs	r0, r3
 8006296:	f000 f849 	bl	800632c <list_insert_head>
 800629a:	e008      	b.n	80062ae <hci_notify_asynch_evt+0x96>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <hci_notify_asynch_evt+0xa0>)
 80062a0:	0011      	movs	r1, r2
 80062a2:	0018      	movs	r0, r3
 80062a4:	f000 f842 	bl	800632c <list_insert_head>
 80062a8:	e001      	b.n	80062ae <hci_notify_asynch_evt+0x96>
      }
    }
  }
  else 
  {
    ret = 1;
 80062aa:	2301      	movs	r3, #1
 80062ac:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80062ae:	697b      	ldr	r3, [r7, #20]

}
 80062b0:	0018      	movs	r0, r3
 80062b2:	46bd      	mov	sp, r7
 80062b4:	b006      	add	sp, #24
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	200008bc 	.word	0x200008bc
 80062bc:	20000b88 	.word	0x20000b88
 80062c0:	200008c4 	.word	0x200008c4

080062c4 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	605a      	str	r2, [r3, #4]
}
 80062d8:	46c0      	nop			; (mov r8, r8)
 80062da:	46bd      	mov	sp, r7
 80062dc:	b002      	add	sp, #8
 80062de:	bd80      	pop	{r7, pc}

080062e0 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062e8:	f3ef 8310 	mrs	r3, PRIMASK
 80062ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80062ee:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80062f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80062f2:	b672      	cpsid	i
}
 80062f4:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d104      	bne.n	800630a <list_is_empty+0x2a>
  {
    return_value = 1;
 8006300:	2317      	movs	r3, #23
 8006302:	18fb      	adds	r3, r7, r3
 8006304:	2201      	movs	r2, #1
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	e003      	b.n	8006312 <list_is_empty+0x32>
  }
  else
  {
    return_value = 0;
 800630a:	2317      	movs	r3, #23
 800630c:	18fb      	adds	r3, r7, r3
 800630e:	2200      	movs	r2, #0
 8006310:	701a      	strb	r2, [r3, #0]
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f383 8810 	msr	PRIMASK, r3
}
 800631c:	46c0      	nop			; (mov r8, r8)
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800631e:	2317      	movs	r3, #23
 8006320:	18fb      	adds	r3, r7, r3
 8006322:	781b      	ldrb	r3, [r3, #0]
}
 8006324:	0018      	movs	r0, r3
 8006326:	46bd      	mov	sp, r7
 8006328:	b006      	add	sp, #24
 800632a:	bd80      	pop	{r7, pc}

0800632c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006336:	f3ef 8310 	mrs	r3, PRIMASK
 800633a:	60fb      	str	r3, [r7, #12]
  return(result);
 800633c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800633e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006340:	b672      	cpsid	i
}
 8006342:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	605a      	str	r2, [r3, #4]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f383 8810 	msr	PRIMASK, r3
}
 800636a:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800636c:	46c0      	nop			; (mov r8, r8)
 800636e:	46bd      	mov	sp, r7
 8006370:	b006      	add	sp, #24
 8006372:	bd80      	pop	{r7, pc}

08006374 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800637e:	f3ef 8310 	mrs	r3, PRIMASK
 8006382:	60fb      	str	r3, [r7, #12]
  return(result);
 8006384:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006386:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006388:	b672      	cpsid	i
}
 800638a:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f383 8810 	msr	PRIMASK, r3
}
 80063b2:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80063b4:	46c0      	nop			; (mov r8, r8)
 80063b6:	46bd      	mov	sp, r7
 80063b8:	b006      	add	sp, #24
 80063ba:	bd80      	pop	{r7, pc}

080063bc <list_remove_node>:

void list_remove_node (tListNode * node)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063c4:	f3ef 8310 	mrs	r3, PRIMASK
 80063c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80063ca:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80063cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80063ce:	b672      	cpsid	i
}
 80063d0:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6812      	ldr	r2, [r2, #0]
 80063da:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	6852      	ldr	r2, [r2, #4]
 80063e4:	605a      	str	r2, [r3, #4]
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f383 8810 	msr	PRIMASK, r3
}
 80063f0:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80063f2:	46c0      	nop			; (mov r8, r8)
 80063f4:	46bd      	mov	sp, r7
 80063f6:	b006      	add	sp, #24
 80063f8:	bd80      	pop	{r7, pc}

080063fa <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b086      	sub	sp, #24
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006404:	f3ef 8310 	mrs	r3, PRIMASK
 8006408:	60fb      	str	r3, [r7, #12]
  return(result);
 800640a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800640c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800640e:	b672      	cpsid	i
}
 8006410:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	0018      	movs	r0, r3
 8006420:	f7ff ffcc 	bl	80063bc <list_remove_node>
  (*node)->next = NULL;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2200      	movs	r2, #0
 8006432:	605a      	str	r2, [r3, #4]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f383 8810 	msr	PRIMASK, r3
}
 800643e:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006440:	46c0      	nop			; (mov r8, r8)
 8006442:	46bd      	mov	sp, r7
 8006444:	b006      	add	sp, #24
 8006446:	bd80      	pop	{r7, pc}

08006448 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006452:	f3ef 8310 	mrs	r3, PRIMASK
 8006456:	60fb      	str	r3, [r7, #12]
  return(result);
 8006458:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800645a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800645c:	b672      	cpsid	i
}
 800645e:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	0018      	movs	r0, r3
 800646e:	f7ff ffa5 	bl	80063bc <list_remove_node>
  (*node)->next = NULL;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2200      	movs	r2, #0
 8006480:	605a      	str	r2, [r3, #4]
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f383 8810 	msr	PRIMASK, r3
}
 800648c:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800648e:	46c0      	nop			; (mov r8, r8)
 8006490:	46bd      	mov	sp, r7
 8006492:	b006      	add	sp, #24
 8006494:	bd80      	pop	{r7, pc}

08006496 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b088      	sub	sp, #32
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  int size = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064a2:	f3ef 8310 	mrs	r3, PRIMASK
 80064a6:	613b      	str	r3, [r7, #16]
  return(result);
 80064a8:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80064aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80064ac:	b672      	cpsid	i
}
 80064ae:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80064b6:	e005      	b.n	80064c4 <list_get_size+0x2e>
  {
    size++;
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	3301      	adds	r3, #1
 80064bc:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d1f5      	bne.n	80064b8 <list_get_size+0x22>
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f383 8810 	msr	PRIMASK, r3
}
 80064d6:	46c0      	nop			; (mov r8, r8)
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80064d8:	69fb      	ldr	r3, [r7, #28]
}
 80064da:	0018      	movs	r0, r3
 80064dc:	46bd      	mov	sp, r7
 80064de:	b008      	add	sp, #32
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <__errno>:
 80064e4:	4b01      	ldr	r3, [pc, #4]	; (80064ec <__errno+0x8>)
 80064e6:	6818      	ldr	r0, [r3, #0]
 80064e8:	4770      	bx	lr
 80064ea:	46c0      	nop			; (mov r8, r8)
 80064ec:	2000006c 	.word	0x2000006c

080064f0 <__sflush_r>:
 80064f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064f2:	898b      	ldrh	r3, [r1, #12]
 80064f4:	0005      	movs	r5, r0
 80064f6:	000c      	movs	r4, r1
 80064f8:	071a      	lsls	r2, r3, #28
 80064fa:	d45f      	bmi.n	80065bc <__sflush_r+0xcc>
 80064fc:	684a      	ldr	r2, [r1, #4]
 80064fe:	2a00      	cmp	r2, #0
 8006500:	dc04      	bgt.n	800650c <__sflush_r+0x1c>
 8006502:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006504:	2a00      	cmp	r2, #0
 8006506:	dc01      	bgt.n	800650c <__sflush_r+0x1c>
 8006508:	2000      	movs	r0, #0
 800650a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800650c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800650e:	2f00      	cmp	r7, #0
 8006510:	d0fa      	beq.n	8006508 <__sflush_r+0x18>
 8006512:	2200      	movs	r2, #0
 8006514:	2180      	movs	r1, #128	; 0x80
 8006516:	682e      	ldr	r6, [r5, #0]
 8006518:	602a      	str	r2, [r5, #0]
 800651a:	001a      	movs	r2, r3
 800651c:	0149      	lsls	r1, r1, #5
 800651e:	400a      	ands	r2, r1
 8006520:	420b      	tst	r3, r1
 8006522:	d034      	beq.n	800658e <__sflush_r+0x9e>
 8006524:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006526:	89a3      	ldrh	r3, [r4, #12]
 8006528:	075b      	lsls	r3, r3, #29
 800652a:	d506      	bpl.n	800653a <__sflush_r+0x4a>
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	1ac0      	subs	r0, r0, r3
 8006530:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <__sflush_r+0x4a>
 8006536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006538:	1ac0      	subs	r0, r0, r3
 800653a:	0002      	movs	r2, r0
 800653c:	6a21      	ldr	r1, [r4, #32]
 800653e:	2300      	movs	r3, #0
 8006540:	0028      	movs	r0, r5
 8006542:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006544:	47b8      	blx	r7
 8006546:	89a1      	ldrh	r1, [r4, #12]
 8006548:	1c43      	adds	r3, r0, #1
 800654a:	d106      	bne.n	800655a <__sflush_r+0x6a>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	2b1d      	cmp	r3, #29
 8006550:	d831      	bhi.n	80065b6 <__sflush_r+0xc6>
 8006552:	4a2c      	ldr	r2, [pc, #176]	; (8006604 <__sflush_r+0x114>)
 8006554:	40da      	lsrs	r2, r3
 8006556:	07d3      	lsls	r3, r2, #31
 8006558:	d52d      	bpl.n	80065b6 <__sflush_r+0xc6>
 800655a:	2300      	movs	r3, #0
 800655c:	6063      	str	r3, [r4, #4]
 800655e:	6923      	ldr	r3, [r4, #16]
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	04cb      	lsls	r3, r1, #19
 8006564:	d505      	bpl.n	8006572 <__sflush_r+0x82>
 8006566:	1c43      	adds	r3, r0, #1
 8006568:	d102      	bne.n	8006570 <__sflush_r+0x80>
 800656a:	682b      	ldr	r3, [r5, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d100      	bne.n	8006572 <__sflush_r+0x82>
 8006570:	6560      	str	r0, [r4, #84]	; 0x54
 8006572:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006574:	602e      	str	r6, [r5, #0]
 8006576:	2900      	cmp	r1, #0
 8006578:	d0c6      	beq.n	8006508 <__sflush_r+0x18>
 800657a:	0023      	movs	r3, r4
 800657c:	3344      	adds	r3, #68	; 0x44
 800657e:	4299      	cmp	r1, r3
 8006580:	d002      	beq.n	8006588 <__sflush_r+0x98>
 8006582:	0028      	movs	r0, r5
 8006584:	f000 f9d0 	bl	8006928 <_free_r>
 8006588:	2000      	movs	r0, #0
 800658a:	6360      	str	r0, [r4, #52]	; 0x34
 800658c:	e7bd      	b.n	800650a <__sflush_r+0x1a>
 800658e:	2301      	movs	r3, #1
 8006590:	0028      	movs	r0, r5
 8006592:	6a21      	ldr	r1, [r4, #32]
 8006594:	47b8      	blx	r7
 8006596:	1c43      	adds	r3, r0, #1
 8006598:	d1c5      	bne.n	8006526 <__sflush_r+0x36>
 800659a:	682b      	ldr	r3, [r5, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0c2      	beq.n	8006526 <__sflush_r+0x36>
 80065a0:	2b1d      	cmp	r3, #29
 80065a2:	d001      	beq.n	80065a8 <__sflush_r+0xb8>
 80065a4:	2b16      	cmp	r3, #22
 80065a6:	d101      	bne.n	80065ac <__sflush_r+0xbc>
 80065a8:	602e      	str	r6, [r5, #0]
 80065aa:	e7ad      	b.n	8006508 <__sflush_r+0x18>
 80065ac:	2340      	movs	r3, #64	; 0x40
 80065ae:	89a2      	ldrh	r2, [r4, #12]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	81a3      	strh	r3, [r4, #12]
 80065b4:	e7a9      	b.n	800650a <__sflush_r+0x1a>
 80065b6:	2340      	movs	r3, #64	; 0x40
 80065b8:	430b      	orrs	r3, r1
 80065ba:	e7fa      	b.n	80065b2 <__sflush_r+0xc2>
 80065bc:	690f      	ldr	r7, [r1, #16]
 80065be:	2f00      	cmp	r7, #0
 80065c0:	d0a2      	beq.n	8006508 <__sflush_r+0x18>
 80065c2:	680a      	ldr	r2, [r1, #0]
 80065c4:	600f      	str	r7, [r1, #0]
 80065c6:	1bd2      	subs	r2, r2, r7
 80065c8:	9201      	str	r2, [sp, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	079b      	lsls	r3, r3, #30
 80065ce:	d100      	bne.n	80065d2 <__sflush_r+0xe2>
 80065d0:	694a      	ldr	r2, [r1, #20]
 80065d2:	60a2      	str	r2, [r4, #8]
 80065d4:	9b01      	ldr	r3, [sp, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	dc00      	bgt.n	80065dc <__sflush_r+0xec>
 80065da:	e795      	b.n	8006508 <__sflush_r+0x18>
 80065dc:	003a      	movs	r2, r7
 80065de:	0028      	movs	r0, r5
 80065e0:	9b01      	ldr	r3, [sp, #4]
 80065e2:	6a21      	ldr	r1, [r4, #32]
 80065e4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065e6:	47b0      	blx	r6
 80065e8:	2800      	cmp	r0, #0
 80065ea:	dc06      	bgt.n	80065fa <__sflush_r+0x10a>
 80065ec:	2340      	movs	r3, #64	; 0x40
 80065ee:	2001      	movs	r0, #1
 80065f0:	89a2      	ldrh	r2, [r4, #12]
 80065f2:	4240      	negs	r0, r0
 80065f4:	4313      	orrs	r3, r2
 80065f6:	81a3      	strh	r3, [r4, #12]
 80065f8:	e787      	b.n	800650a <__sflush_r+0x1a>
 80065fa:	9b01      	ldr	r3, [sp, #4]
 80065fc:	183f      	adds	r7, r7, r0
 80065fe:	1a1b      	subs	r3, r3, r0
 8006600:	9301      	str	r3, [sp, #4]
 8006602:	e7e7      	b.n	80065d4 <__sflush_r+0xe4>
 8006604:	20400001 	.word	0x20400001

08006608 <_fflush_r>:
 8006608:	690b      	ldr	r3, [r1, #16]
 800660a:	b570      	push	{r4, r5, r6, lr}
 800660c:	0005      	movs	r5, r0
 800660e:	000c      	movs	r4, r1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d102      	bne.n	800661a <_fflush_r+0x12>
 8006614:	2500      	movs	r5, #0
 8006616:	0028      	movs	r0, r5
 8006618:	bd70      	pop	{r4, r5, r6, pc}
 800661a:	2800      	cmp	r0, #0
 800661c:	d004      	beq.n	8006628 <_fflush_r+0x20>
 800661e:	6983      	ldr	r3, [r0, #24]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <_fflush_r+0x20>
 8006624:	f000 f8a8 	bl	8006778 <__sinit>
 8006628:	4b14      	ldr	r3, [pc, #80]	; (800667c <_fflush_r+0x74>)
 800662a:	429c      	cmp	r4, r3
 800662c:	d11b      	bne.n	8006666 <_fflush_r+0x5e>
 800662e:	686c      	ldr	r4, [r5, #4]
 8006630:	220c      	movs	r2, #12
 8006632:	5ea3      	ldrsh	r3, [r4, r2]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0ed      	beq.n	8006614 <_fflush_r+0xc>
 8006638:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800663a:	07d2      	lsls	r2, r2, #31
 800663c:	d404      	bmi.n	8006648 <_fflush_r+0x40>
 800663e:	059b      	lsls	r3, r3, #22
 8006640:	d402      	bmi.n	8006648 <_fflush_r+0x40>
 8006642:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006644:	f000 f95d 	bl	8006902 <__retarget_lock_acquire_recursive>
 8006648:	0028      	movs	r0, r5
 800664a:	0021      	movs	r1, r4
 800664c:	f7ff ff50 	bl	80064f0 <__sflush_r>
 8006650:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006652:	0005      	movs	r5, r0
 8006654:	07db      	lsls	r3, r3, #31
 8006656:	d4de      	bmi.n	8006616 <_fflush_r+0xe>
 8006658:	89a3      	ldrh	r3, [r4, #12]
 800665a:	059b      	lsls	r3, r3, #22
 800665c:	d4db      	bmi.n	8006616 <_fflush_r+0xe>
 800665e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006660:	f000 f950 	bl	8006904 <__retarget_lock_release_recursive>
 8006664:	e7d7      	b.n	8006616 <_fflush_r+0xe>
 8006666:	4b06      	ldr	r3, [pc, #24]	; (8006680 <_fflush_r+0x78>)
 8006668:	429c      	cmp	r4, r3
 800666a:	d101      	bne.n	8006670 <_fflush_r+0x68>
 800666c:	68ac      	ldr	r4, [r5, #8]
 800666e:	e7df      	b.n	8006630 <_fflush_r+0x28>
 8006670:	4b04      	ldr	r3, [pc, #16]	; (8006684 <_fflush_r+0x7c>)
 8006672:	429c      	cmp	r4, r3
 8006674:	d1dc      	bne.n	8006630 <_fflush_r+0x28>
 8006676:	68ec      	ldr	r4, [r5, #12]
 8006678:	e7da      	b.n	8006630 <_fflush_r+0x28>
 800667a:	46c0      	nop			; (mov r8, r8)
 800667c:	0800793c 	.word	0x0800793c
 8006680:	0800795c 	.word	0x0800795c
 8006684:	0800791c 	.word	0x0800791c

08006688 <fflush>:
 8006688:	0001      	movs	r1, r0
 800668a:	b510      	push	{r4, lr}
 800668c:	2800      	cmp	r0, #0
 800668e:	d105      	bne.n	800669c <fflush+0x14>
 8006690:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <fflush+0x20>)
 8006692:	4906      	ldr	r1, [pc, #24]	; (80066ac <fflush+0x24>)
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	f000 f8ef 	bl	8006878 <_fwalk_reent>
 800669a:	bd10      	pop	{r4, pc}
 800669c:	4b04      	ldr	r3, [pc, #16]	; (80066b0 <fflush+0x28>)
 800669e:	6818      	ldr	r0, [r3, #0]
 80066a0:	f7ff ffb2 	bl	8006608 <_fflush_r>
 80066a4:	e7f9      	b.n	800669a <fflush+0x12>
 80066a6:	46c0      	nop			; (mov r8, r8)
 80066a8:	0800797c 	.word	0x0800797c
 80066ac:	08006609 	.word	0x08006609
 80066b0:	2000006c 	.word	0x2000006c

080066b4 <std>:
 80066b4:	2300      	movs	r3, #0
 80066b6:	b510      	push	{r4, lr}
 80066b8:	0004      	movs	r4, r0
 80066ba:	6003      	str	r3, [r0, #0]
 80066bc:	6043      	str	r3, [r0, #4]
 80066be:	6083      	str	r3, [r0, #8]
 80066c0:	8181      	strh	r1, [r0, #12]
 80066c2:	6643      	str	r3, [r0, #100]	; 0x64
 80066c4:	0019      	movs	r1, r3
 80066c6:	81c2      	strh	r2, [r0, #14]
 80066c8:	6103      	str	r3, [r0, #16]
 80066ca:	6143      	str	r3, [r0, #20]
 80066cc:	6183      	str	r3, [r0, #24]
 80066ce:	2208      	movs	r2, #8
 80066d0:	305c      	adds	r0, #92	; 0x5c
 80066d2:	f000 f921 	bl	8006918 <memset>
 80066d6:	4b05      	ldr	r3, [pc, #20]	; (80066ec <std+0x38>)
 80066d8:	6224      	str	r4, [r4, #32]
 80066da:	6263      	str	r3, [r4, #36]	; 0x24
 80066dc:	4b04      	ldr	r3, [pc, #16]	; (80066f0 <std+0x3c>)
 80066de:	62a3      	str	r3, [r4, #40]	; 0x28
 80066e0:	4b04      	ldr	r3, [pc, #16]	; (80066f4 <std+0x40>)
 80066e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066e4:	4b04      	ldr	r3, [pc, #16]	; (80066f8 <std+0x44>)
 80066e6:	6323      	str	r3, [r4, #48]	; 0x30
 80066e8:	bd10      	pop	{r4, pc}
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	08006b45 	.word	0x08006b45
 80066f0:	08006b6d 	.word	0x08006b6d
 80066f4:	08006ba5 	.word	0x08006ba5
 80066f8:	08006bd1 	.word	0x08006bd1

080066fc <_cleanup_r>:
 80066fc:	b510      	push	{r4, lr}
 80066fe:	4902      	ldr	r1, [pc, #8]	; (8006708 <_cleanup_r+0xc>)
 8006700:	f000 f8ba 	bl	8006878 <_fwalk_reent>
 8006704:	bd10      	pop	{r4, pc}
 8006706:	46c0      	nop			; (mov r8, r8)
 8006708:	08006609 	.word	0x08006609

0800670c <__sfmoreglue>:
 800670c:	b570      	push	{r4, r5, r6, lr}
 800670e:	2568      	movs	r5, #104	; 0x68
 8006710:	1e4a      	subs	r2, r1, #1
 8006712:	4355      	muls	r5, r2
 8006714:	000e      	movs	r6, r1
 8006716:	0029      	movs	r1, r5
 8006718:	3174      	adds	r1, #116	; 0x74
 800671a:	f000 f971 	bl	8006a00 <_malloc_r>
 800671e:	1e04      	subs	r4, r0, #0
 8006720:	d008      	beq.n	8006734 <__sfmoreglue+0x28>
 8006722:	2100      	movs	r1, #0
 8006724:	002a      	movs	r2, r5
 8006726:	6001      	str	r1, [r0, #0]
 8006728:	6046      	str	r6, [r0, #4]
 800672a:	300c      	adds	r0, #12
 800672c:	60a0      	str	r0, [r4, #8]
 800672e:	3268      	adds	r2, #104	; 0x68
 8006730:	f000 f8f2 	bl	8006918 <memset>
 8006734:	0020      	movs	r0, r4
 8006736:	bd70      	pop	{r4, r5, r6, pc}

08006738 <__sfp_lock_acquire>:
 8006738:	b510      	push	{r4, lr}
 800673a:	4802      	ldr	r0, [pc, #8]	; (8006744 <__sfp_lock_acquire+0xc>)
 800673c:	f000 f8e1 	bl	8006902 <__retarget_lock_acquire_recursive>
 8006740:	bd10      	pop	{r4, pc}
 8006742:	46c0      	nop			; (mov r8, r8)
 8006744:	20000ba9 	.word	0x20000ba9

08006748 <__sfp_lock_release>:
 8006748:	b510      	push	{r4, lr}
 800674a:	4802      	ldr	r0, [pc, #8]	; (8006754 <__sfp_lock_release+0xc>)
 800674c:	f000 f8da 	bl	8006904 <__retarget_lock_release_recursive>
 8006750:	bd10      	pop	{r4, pc}
 8006752:	46c0      	nop			; (mov r8, r8)
 8006754:	20000ba9 	.word	0x20000ba9

08006758 <__sinit_lock_acquire>:
 8006758:	b510      	push	{r4, lr}
 800675a:	4802      	ldr	r0, [pc, #8]	; (8006764 <__sinit_lock_acquire+0xc>)
 800675c:	f000 f8d1 	bl	8006902 <__retarget_lock_acquire_recursive>
 8006760:	bd10      	pop	{r4, pc}
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	20000baa 	.word	0x20000baa

08006768 <__sinit_lock_release>:
 8006768:	b510      	push	{r4, lr}
 800676a:	4802      	ldr	r0, [pc, #8]	; (8006774 <__sinit_lock_release+0xc>)
 800676c:	f000 f8ca 	bl	8006904 <__retarget_lock_release_recursive>
 8006770:	bd10      	pop	{r4, pc}
 8006772:	46c0      	nop			; (mov r8, r8)
 8006774:	20000baa 	.word	0x20000baa

08006778 <__sinit>:
 8006778:	b513      	push	{r0, r1, r4, lr}
 800677a:	0004      	movs	r4, r0
 800677c:	f7ff ffec 	bl	8006758 <__sinit_lock_acquire>
 8006780:	69a3      	ldr	r3, [r4, #24]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <__sinit+0x14>
 8006786:	f7ff ffef 	bl	8006768 <__sinit_lock_release>
 800678a:	bd13      	pop	{r0, r1, r4, pc}
 800678c:	64a3      	str	r3, [r4, #72]	; 0x48
 800678e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006790:	6523      	str	r3, [r4, #80]	; 0x50
 8006792:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <__sinit+0x68>)
 8006794:	4a13      	ldr	r2, [pc, #76]	; (80067e4 <__sinit+0x6c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	62a2      	str	r2, [r4, #40]	; 0x28
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	42a3      	cmp	r3, r4
 800679e:	d101      	bne.n	80067a4 <__sinit+0x2c>
 80067a0:	2301      	movs	r3, #1
 80067a2:	61a3      	str	r3, [r4, #24]
 80067a4:	0020      	movs	r0, r4
 80067a6:	f000 f81f 	bl	80067e8 <__sfp>
 80067aa:	6060      	str	r0, [r4, #4]
 80067ac:	0020      	movs	r0, r4
 80067ae:	f000 f81b 	bl	80067e8 <__sfp>
 80067b2:	60a0      	str	r0, [r4, #8]
 80067b4:	0020      	movs	r0, r4
 80067b6:	f000 f817 	bl	80067e8 <__sfp>
 80067ba:	2200      	movs	r2, #0
 80067bc:	2104      	movs	r1, #4
 80067be:	60e0      	str	r0, [r4, #12]
 80067c0:	6860      	ldr	r0, [r4, #4]
 80067c2:	f7ff ff77 	bl	80066b4 <std>
 80067c6:	2201      	movs	r2, #1
 80067c8:	2109      	movs	r1, #9
 80067ca:	68a0      	ldr	r0, [r4, #8]
 80067cc:	f7ff ff72 	bl	80066b4 <std>
 80067d0:	2202      	movs	r2, #2
 80067d2:	2112      	movs	r1, #18
 80067d4:	68e0      	ldr	r0, [r4, #12]
 80067d6:	f7ff ff6d 	bl	80066b4 <std>
 80067da:	2301      	movs	r3, #1
 80067dc:	61a3      	str	r3, [r4, #24]
 80067de:	e7d2      	b.n	8006786 <__sinit+0xe>
 80067e0:	0800797c 	.word	0x0800797c
 80067e4:	080066fd 	.word	0x080066fd

080067e8 <__sfp>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	0007      	movs	r7, r0
 80067ec:	f7ff ffa4 	bl	8006738 <__sfp_lock_acquire>
 80067f0:	4b1f      	ldr	r3, [pc, #124]	; (8006870 <__sfp+0x88>)
 80067f2:	681e      	ldr	r6, [r3, #0]
 80067f4:	69b3      	ldr	r3, [r6, #24]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d102      	bne.n	8006800 <__sfp+0x18>
 80067fa:	0030      	movs	r0, r6
 80067fc:	f7ff ffbc 	bl	8006778 <__sinit>
 8006800:	3648      	adds	r6, #72	; 0x48
 8006802:	68b4      	ldr	r4, [r6, #8]
 8006804:	6873      	ldr	r3, [r6, #4]
 8006806:	3b01      	subs	r3, #1
 8006808:	d504      	bpl.n	8006814 <__sfp+0x2c>
 800680a:	6833      	ldr	r3, [r6, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d022      	beq.n	8006856 <__sfp+0x6e>
 8006810:	6836      	ldr	r6, [r6, #0]
 8006812:	e7f6      	b.n	8006802 <__sfp+0x1a>
 8006814:	220c      	movs	r2, #12
 8006816:	5ea5      	ldrsh	r5, [r4, r2]
 8006818:	2d00      	cmp	r5, #0
 800681a:	d11a      	bne.n	8006852 <__sfp+0x6a>
 800681c:	0020      	movs	r0, r4
 800681e:	4b15      	ldr	r3, [pc, #84]	; (8006874 <__sfp+0x8c>)
 8006820:	3058      	adds	r0, #88	; 0x58
 8006822:	60e3      	str	r3, [r4, #12]
 8006824:	6665      	str	r5, [r4, #100]	; 0x64
 8006826:	f000 f86b 	bl	8006900 <__retarget_lock_init_recursive>
 800682a:	f7ff ff8d 	bl	8006748 <__sfp_lock_release>
 800682e:	0020      	movs	r0, r4
 8006830:	2208      	movs	r2, #8
 8006832:	0029      	movs	r1, r5
 8006834:	6025      	str	r5, [r4, #0]
 8006836:	60a5      	str	r5, [r4, #8]
 8006838:	6065      	str	r5, [r4, #4]
 800683a:	6125      	str	r5, [r4, #16]
 800683c:	6165      	str	r5, [r4, #20]
 800683e:	61a5      	str	r5, [r4, #24]
 8006840:	305c      	adds	r0, #92	; 0x5c
 8006842:	f000 f869 	bl	8006918 <memset>
 8006846:	6365      	str	r5, [r4, #52]	; 0x34
 8006848:	63a5      	str	r5, [r4, #56]	; 0x38
 800684a:	64a5      	str	r5, [r4, #72]	; 0x48
 800684c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800684e:	0020      	movs	r0, r4
 8006850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006852:	3468      	adds	r4, #104	; 0x68
 8006854:	e7d7      	b.n	8006806 <__sfp+0x1e>
 8006856:	2104      	movs	r1, #4
 8006858:	0038      	movs	r0, r7
 800685a:	f7ff ff57 	bl	800670c <__sfmoreglue>
 800685e:	1e04      	subs	r4, r0, #0
 8006860:	6030      	str	r0, [r6, #0]
 8006862:	d1d5      	bne.n	8006810 <__sfp+0x28>
 8006864:	f7ff ff70 	bl	8006748 <__sfp_lock_release>
 8006868:	230c      	movs	r3, #12
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	e7ef      	b.n	800684e <__sfp+0x66>
 800686e:	46c0      	nop			; (mov r8, r8)
 8006870:	0800797c 	.word	0x0800797c
 8006874:	ffff0001 	.word	0xffff0001

08006878 <_fwalk_reent>:
 8006878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800687a:	0004      	movs	r4, r0
 800687c:	0006      	movs	r6, r0
 800687e:	2700      	movs	r7, #0
 8006880:	9101      	str	r1, [sp, #4]
 8006882:	3448      	adds	r4, #72	; 0x48
 8006884:	6863      	ldr	r3, [r4, #4]
 8006886:	68a5      	ldr	r5, [r4, #8]
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	9b00      	ldr	r3, [sp, #0]
 800688c:	3b01      	subs	r3, #1
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	d504      	bpl.n	800689c <_fwalk_reent+0x24>
 8006892:	6824      	ldr	r4, [r4, #0]
 8006894:	2c00      	cmp	r4, #0
 8006896:	d1f5      	bne.n	8006884 <_fwalk_reent+0xc>
 8006898:	0038      	movs	r0, r7
 800689a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800689c:	89ab      	ldrh	r3, [r5, #12]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d908      	bls.n	80068b4 <_fwalk_reent+0x3c>
 80068a2:	220e      	movs	r2, #14
 80068a4:	5eab      	ldrsh	r3, [r5, r2]
 80068a6:	3301      	adds	r3, #1
 80068a8:	d004      	beq.n	80068b4 <_fwalk_reent+0x3c>
 80068aa:	0029      	movs	r1, r5
 80068ac:	0030      	movs	r0, r6
 80068ae:	9b01      	ldr	r3, [sp, #4]
 80068b0:	4798      	blx	r3
 80068b2:	4307      	orrs	r7, r0
 80068b4:	3568      	adds	r5, #104	; 0x68
 80068b6:	e7e8      	b.n	800688a <_fwalk_reent+0x12>

080068b8 <__libc_init_array>:
 80068b8:	b570      	push	{r4, r5, r6, lr}
 80068ba:	2600      	movs	r6, #0
 80068bc:	4d0c      	ldr	r5, [pc, #48]	; (80068f0 <__libc_init_array+0x38>)
 80068be:	4c0d      	ldr	r4, [pc, #52]	; (80068f4 <__libc_init_array+0x3c>)
 80068c0:	1b64      	subs	r4, r4, r5
 80068c2:	10a4      	asrs	r4, r4, #2
 80068c4:	42a6      	cmp	r6, r4
 80068c6:	d109      	bne.n	80068dc <__libc_init_array+0x24>
 80068c8:	2600      	movs	r6, #0
 80068ca:	f000 fe33 	bl	8007534 <_init>
 80068ce:	4d0a      	ldr	r5, [pc, #40]	; (80068f8 <__libc_init_array+0x40>)
 80068d0:	4c0a      	ldr	r4, [pc, #40]	; (80068fc <__libc_init_array+0x44>)
 80068d2:	1b64      	subs	r4, r4, r5
 80068d4:	10a4      	asrs	r4, r4, #2
 80068d6:	42a6      	cmp	r6, r4
 80068d8:	d105      	bne.n	80068e6 <__libc_init_array+0x2e>
 80068da:	bd70      	pop	{r4, r5, r6, pc}
 80068dc:	00b3      	lsls	r3, r6, #2
 80068de:	58eb      	ldr	r3, [r5, r3]
 80068e0:	4798      	blx	r3
 80068e2:	3601      	adds	r6, #1
 80068e4:	e7ee      	b.n	80068c4 <__libc_init_array+0xc>
 80068e6:	00b3      	lsls	r3, r6, #2
 80068e8:	58eb      	ldr	r3, [r5, r3]
 80068ea:	4798      	blx	r3
 80068ec:	3601      	adds	r6, #1
 80068ee:	e7f2      	b.n	80068d6 <__libc_init_array+0x1e>
 80068f0:	080079bc 	.word	0x080079bc
 80068f4:	080079bc 	.word	0x080079bc
 80068f8:	080079bc 	.word	0x080079bc
 80068fc:	080079c0 	.word	0x080079c0

08006900 <__retarget_lock_init_recursive>:
 8006900:	4770      	bx	lr

08006902 <__retarget_lock_acquire_recursive>:
 8006902:	4770      	bx	lr

08006904 <__retarget_lock_release_recursive>:
 8006904:	4770      	bx	lr

08006906 <memcpy>:
 8006906:	2300      	movs	r3, #0
 8006908:	b510      	push	{r4, lr}
 800690a:	429a      	cmp	r2, r3
 800690c:	d100      	bne.n	8006910 <memcpy+0xa>
 800690e:	bd10      	pop	{r4, pc}
 8006910:	5ccc      	ldrb	r4, [r1, r3]
 8006912:	54c4      	strb	r4, [r0, r3]
 8006914:	3301      	adds	r3, #1
 8006916:	e7f8      	b.n	800690a <memcpy+0x4>

08006918 <memset>:
 8006918:	0003      	movs	r3, r0
 800691a:	1882      	adds	r2, r0, r2
 800691c:	4293      	cmp	r3, r2
 800691e:	d100      	bne.n	8006922 <memset+0xa>
 8006920:	4770      	bx	lr
 8006922:	7019      	strb	r1, [r3, #0]
 8006924:	3301      	adds	r3, #1
 8006926:	e7f9      	b.n	800691c <memset+0x4>

08006928 <_free_r>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	0005      	movs	r5, r0
 800692c:	2900      	cmp	r1, #0
 800692e:	d010      	beq.n	8006952 <_free_r+0x2a>
 8006930:	1f0c      	subs	r4, r1, #4
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	da00      	bge.n	800693a <_free_r+0x12>
 8006938:	18e4      	adds	r4, r4, r3
 800693a:	0028      	movs	r0, r5
 800693c:	f000 f988 	bl	8006c50 <__malloc_lock>
 8006940:	4a1d      	ldr	r2, [pc, #116]	; (80069b8 <_free_r+0x90>)
 8006942:	6813      	ldr	r3, [r2, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d105      	bne.n	8006954 <_free_r+0x2c>
 8006948:	6063      	str	r3, [r4, #4]
 800694a:	6014      	str	r4, [r2, #0]
 800694c:	0028      	movs	r0, r5
 800694e:	f000 f987 	bl	8006c60 <__malloc_unlock>
 8006952:	bd70      	pop	{r4, r5, r6, pc}
 8006954:	42a3      	cmp	r3, r4
 8006956:	d908      	bls.n	800696a <_free_r+0x42>
 8006958:	6821      	ldr	r1, [r4, #0]
 800695a:	1860      	adds	r0, r4, r1
 800695c:	4283      	cmp	r3, r0
 800695e:	d1f3      	bne.n	8006948 <_free_r+0x20>
 8006960:	6818      	ldr	r0, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	1841      	adds	r1, r0, r1
 8006966:	6021      	str	r1, [r4, #0]
 8006968:	e7ee      	b.n	8006948 <_free_r+0x20>
 800696a:	001a      	movs	r2, r3
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <_free_r+0x4e>
 8006972:	42a3      	cmp	r3, r4
 8006974:	d9f9      	bls.n	800696a <_free_r+0x42>
 8006976:	6811      	ldr	r1, [r2, #0]
 8006978:	1850      	adds	r0, r2, r1
 800697a:	42a0      	cmp	r0, r4
 800697c:	d10b      	bne.n	8006996 <_free_r+0x6e>
 800697e:	6820      	ldr	r0, [r4, #0]
 8006980:	1809      	adds	r1, r1, r0
 8006982:	1850      	adds	r0, r2, r1
 8006984:	6011      	str	r1, [r2, #0]
 8006986:	4283      	cmp	r3, r0
 8006988:	d1e0      	bne.n	800694c <_free_r+0x24>
 800698a:	6818      	ldr	r0, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	1841      	adds	r1, r0, r1
 8006990:	6011      	str	r1, [r2, #0]
 8006992:	6053      	str	r3, [r2, #4]
 8006994:	e7da      	b.n	800694c <_free_r+0x24>
 8006996:	42a0      	cmp	r0, r4
 8006998:	d902      	bls.n	80069a0 <_free_r+0x78>
 800699a:	230c      	movs	r3, #12
 800699c:	602b      	str	r3, [r5, #0]
 800699e:	e7d5      	b.n	800694c <_free_r+0x24>
 80069a0:	6821      	ldr	r1, [r4, #0]
 80069a2:	1860      	adds	r0, r4, r1
 80069a4:	4283      	cmp	r3, r0
 80069a6:	d103      	bne.n	80069b0 <_free_r+0x88>
 80069a8:	6818      	ldr	r0, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	1841      	adds	r1, r0, r1
 80069ae:	6021      	str	r1, [r4, #0]
 80069b0:	6063      	str	r3, [r4, #4]
 80069b2:	6054      	str	r4, [r2, #4]
 80069b4:	e7ca      	b.n	800694c <_free_r+0x24>
 80069b6:	46c0      	nop			; (mov r8, r8)
 80069b8:	20000bac 	.word	0x20000bac

080069bc <sbrk_aligned>:
 80069bc:	b570      	push	{r4, r5, r6, lr}
 80069be:	4e0f      	ldr	r6, [pc, #60]	; (80069fc <sbrk_aligned+0x40>)
 80069c0:	000d      	movs	r5, r1
 80069c2:	6831      	ldr	r1, [r6, #0]
 80069c4:	0004      	movs	r4, r0
 80069c6:	2900      	cmp	r1, #0
 80069c8:	d102      	bne.n	80069d0 <sbrk_aligned+0x14>
 80069ca:	f000 f8a9 	bl	8006b20 <_sbrk_r>
 80069ce:	6030      	str	r0, [r6, #0]
 80069d0:	0029      	movs	r1, r5
 80069d2:	0020      	movs	r0, r4
 80069d4:	f000 f8a4 	bl	8006b20 <_sbrk_r>
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	d00a      	beq.n	80069f2 <sbrk_aligned+0x36>
 80069dc:	2303      	movs	r3, #3
 80069de:	1cc5      	adds	r5, r0, #3
 80069e0:	439d      	bics	r5, r3
 80069e2:	42a8      	cmp	r0, r5
 80069e4:	d007      	beq.n	80069f6 <sbrk_aligned+0x3a>
 80069e6:	1a29      	subs	r1, r5, r0
 80069e8:	0020      	movs	r0, r4
 80069ea:	f000 f899 	bl	8006b20 <_sbrk_r>
 80069ee:	1c43      	adds	r3, r0, #1
 80069f0:	d101      	bne.n	80069f6 <sbrk_aligned+0x3a>
 80069f2:	2501      	movs	r5, #1
 80069f4:	426d      	negs	r5, r5
 80069f6:	0028      	movs	r0, r5
 80069f8:	bd70      	pop	{r4, r5, r6, pc}
 80069fa:	46c0      	nop			; (mov r8, r8)
 80069fc:	20000bb0 	.word	0x20000bb0

08006a00 <_malloc_r>:
 8006a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a02:	2203      	movs	r2, #3
 8006a04:	1ccb      	adds	r3, r1, #3
 8006a06:	4393      	bics	r3, r2
 8006a08:	3308      	adds	r3, #8
 8006a0a:	0006      	movs	r6, r0
 8006a0c:	001f      	movs	r7, r3
 8006a0e:	2b0c      	cmp	r3, #12
 8006a10:	d232      	bcs.n	8006a78 <_malloc_r+0x78>
 8006a12:	270c      	movs	r7, #12
 8006a14:	42b9      	cmp	r1, r7
 8006a16:	d831      	bhi.n	8006a7c <_malloc_r+0x7c>
 8006a18:	0030      	movs	r0, r6
 8006a1a:	f000 f919 	bl	8006c50 <__malloc_lock>
 8006a1e:	4d32      	ldr	r5, [pc, #200]	; (8006ae8 <_malloc_r+0xe8>)
 8006a20:	682b      	ldr	r3, [r5, #0]
 8006a22:	001c      	movs	r4, r3
 8006a24:	2c00      	cmp	r4, #0
 8006a26:	d12e      	bne.n	8006a86 <_malloc_r+0x86>
 8006a28:	0039      	movs	r1, r7
 8006a2a:	0030      	movs	r0, r6
 8006a2c:	f7ff ffc6 	bl	80069bc <sbrk_aligned>
 8006a30:	0004      	movs	r4, r0
 8006a32:	1c43      	adds	r3, r0, #1
 8006a34:	d11e      	bne.n	8006a74 <_malloc_r+0x74>
 8006a36:	682c      	ldr	r4, [r5, #0]
 8006a38:	0025      	movs	r5, r4
 8006a3a:	2d00      	cmp	r5, #0
 8006a3c:	d14a      	bne.n	8006ad4 <_malloc_r+0xd4>
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	0029      	movs	r1, r5
 8006a42:	18e3      	adds	r3, r4, r3
 8006a44:	0030      	movs	r0, r6
 8006a46:	9301      	str	r3, [sp, #4]
 8006a48:	f000 f86a 	bl	8006b20 <_sbrk_r>
 8006a4c:	9b01      	ldr	r3, [sp, #4]
 8006a4e:	4283      	cmp	r3, r0
 8006a50:	d143      	bne.n	8006ada <_malloc_r+0xda>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	3703      	adds	r7, #3
 8006a56:	1aff      	subs	r7, r7, r3
 8006a58:	2303      	movs	r3, #3
 8006a5a:	439f      	bics	r7, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	2f0c      	cmp	r7, #12
 8006a60:	d200      	bcs.n	8006a64 <_malloc_r+0x64>
 8006a62:	270c      	movs	r7, #12
 8006a64:	0039      	movs	r1, r7
 8006a66:	0030      	movs	r0, r6
 8006a68:	f7ff ffa8 	bl	80069bc <sbrk_aligned>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d034      	beq.n	8006ada <_malloc_r+0xda>
 8006a70:	6823      	ldr	r3, [r4, #0]
 8006a72:	19df      	adds	r7, r3, r7
 8006a74:	6027      	str	r7, [r4, #0]
 8006a76:	e013      	b.n	8006aa0 <_malloc_r+0xa0>
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	dacb      	bge.n	8006a14 <_malloc_r+0x14>
 8006a7c:	230c      	movs	r3, #12
 8006a7e:	2500      	movs	r5, #0
 8006a80:	6033      	str	r3, [r6, #0]
 8006a82:	0028      	movs	r0, r5
 8006a84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a86:	6822      	ldr	r2, [r4, #0]
 8006a88:	1bd1      	subs	r1, r2, r7
 8006a8a:	d420      	bmi.n	8006ace <_malloc_r+0xce>
 8006a8c:	290b      	cmp	r1, #11
 8006a8e:	d917      	bls.n	8006ac0 <_malloc_r+0xc0>
 8006a90:	19e2      	adds	r2, r4, r7
 8006a92:	6027      	str	r7, [r4, #0]
 8006a94:	42a3      	cmp	r3, r4
 8006a96:	d111      	bne.n	8006abc <_malloc_r+0xbc>
 8006a98:	602a      	str	r2, [r5, #0]
 8006a9a:	6863      	ldr	r3, [r4, #4]
 8006a9c:	6011      	str	r1, [r2, #0]
 8006a9e:	6053      	str	r3, [r2, #4]
 8006aa0:	0030      	movs	r0, r6
 8006aa2:	0025      	movs	r5, r4
 8006aa4:	f000 f8dc 	bl	8006c60 <__malloc_unlock>
 8006aa8:	2207      	movs	r2, #7
 8006aaa:	350b      	adds	r5, #11
 8006aac:	1d23      	adds	r3, r4, #4
 8006aae:	4395      	bics	r5, r2
 8006ab0:	1aea      	subs	r2, r5, r3
 8006ab2:	429d      	cmp	r5, r3
 8006ab4:	d0e5      	beq.n	8006a82 <_malloc_r+0x82>
 8006ab6:	1b5b      	subs	r3, r3, r5
 8006ab8:	50a3      	str	r3, [r4, r2]
 8006aba:	e7e2      	b.n	8006a82 <_malloc_r+0x82>
 8006abc:	605a      	str	r2, [r3, #4]
 8006abe:	e7ec      	b.n	8006a9a <_malloc_r+0x9a>
 8006ac0:	6862      	ldr	r2, [r4, #4]
 8006ac2:	42a3      	cmp	r3, r4
 8006ac4:	d101      	bne.n	8006aca <_malloc_r+0xca>
 8006ac6:	602a      	str	r2, [r5, #0]
 8006ac8:	e7ea      	b.n	8006aa0 <_malloc_r+0xa0>
 8006aca:	605a      	str	r2, [r3, #4]
 8006acc:	e7e8      	b.n	8006aa0 <_malloc_r+0xa0>
 8006ace:	0023      	movs	r3, r4
 8006ad0:	6864      	ldr	r4, [r4, #4]
 8006ad2:	e7a7      	b.n	8006a24 <_malloc_r+0x24>
 8006ad4:	002c      	movs	r4, r5
 8006ad6:	686d      	ldr	r5, [r5, #4]
 8006ad8:	e7af      	b.n	8006a3a <_malloc_r+0x3a>
 8006ada:	230c      	movs	r3, #12
 8006adc:	0030      	movs	r0, r6
 8006ade:	6033      	str	r3, [r6, #0]
 8006ae0:	f000 f8be 	bl	8006c60 <__malloc_unlock>
 8006ae4:	e7cd      	b.n	8006a82 <_malloc_r+0x82>
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	20000bac 	.word	0x20000bac

08006aec <iprintf>:
 8006aec:	b40f      	push	{r0, r1, r2, r3}
 8006aee:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <iprintf+0x30>)
 8006af0:	b513      	push	{r0, r1, r4, lr}
 8006af2:	681c      	ldr	r4, [r3, #0]
 8006af4:	2c00      	cmp	r4, #0
 8006af6:	d005      	beq.n	8006b04 <iprintf+0x18>
 8006af8:	69a3      	ldr	r3, [r4, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d102      	bne.n	8006b04 <iprintf+0x18>
 8006afe:	0020      	movs	r0, r4
 8006b00:	f7ff fe3a 	bl	8006778 <__sinit>
 8006b04:	ab05      	add	r3, sp, #20
 8006b06:	0020      	movs	r0, r4
 8006b08:	9a04      	ldr	r2, [sp, #16]
 8006b0a:	68a1      	ldr	r1, [r4, #8]
 8006b0c:	9301      	str	r3, [sp, #4]
 8006b0e:	f000 f8d7 	bl	8006cc0 <_vfiprintf_r>
 8006b12:	bc16      	pop	{r1, r2, r4}
 8006b14:	bc08      	pop	{r3}
 8006b16:	b004      	add	sp, #16
 8006b18:	4718      	bx	r3
 8006b1a:	46c0      	nop			; (mov r8, r8)
 8006b1c:	2000006c 	.word	0x2000006c

08006b20 <_sbrk_r>:
 8006b20:	2300      	movs	r3, #0
 8006b22:	b570      	push	{r4, r5, r6, lr}
 8006b24:	4d06      	ldr	r5, [pc, #24]	; (8006b40 <_sbrk_r+0x20>)
 8006b26:	0004      	movs	r4, r0
 8006b28:	0008      	movs	r0, r1
 8006b2a:	602b      	str	r3, [r5, #0]
 8006b2c:	f7fb f8e8 	bl	8001d00 <_sbrk>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d103      	bne.n	8006b3c <_sbrk_r+0x1c>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d000      	beq.n	8006b3c <_sbrk_r+0x1c>
 8006b3a:	6023      	str	r3, [r4, #0]
 8006b3c:	bd70      	pop	{r4, r5, r6, pc}
 8006b3e:	46c0      	nop			; (mov r8, r8)
 8006b40:	20000bb4 	.word	0x20000bb4

08006b44 <__sread>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	000c      	movs	r4, r1
 8006b48:	250e      	movs	r5, #14
 8006b4a:	5f49      	ldrsh	r1, [r1, r5]
 8006b4c:	f000 fb74 	bl	8007238 <_read_r>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	db03      	blt.n	8006b5c <__sread+0x18>
 8006b54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006b56:	181b      	adds	r3, r3, r0
 8006b58:	6563      	str	r3, [r4, #84]	; 0x54
 8006b5a:	bd70      	pop	{r4, r5, r6, pc}
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	4a02      	ldr	r2, [pc, #8]	; (8006b68 <__sread+0x24>)
 8006b60:	4013      	ands	r3, r2
 8006b62:	81a3      	strh	r3, [r4, #12]
 8006b64:	e7f9      	b.n	8006b5a <__sread+0x16>
 8006b66:	46c0      	nop			; (mov r8, r8)
 8006b68:	ffffefff 	.word	0xffffefff

08006b6c <__swrite>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	001f      	movs	r7, r3
 8006b70:	898b      	ldrh	r3, [r1, #12]
 8006b72:	0005      	movs	r5, r0
 8006b74:	000c      	movs	r4, r1
 8006b76:	0016      	movs	r6, r2
 8006b78:	05db      	lsls	r3, r3, #23
 8006b7a:	d505      	bpl.n	8006b88 <__swrite+0x1c>
 8006b7c:	230e      	movs	r3, #14
 8006b7e:	5ec9      	ldrsh	r1, [r1, r3]
 8006b80:	2200      	movs	r2, #0
 8006b82:	2302      	movs	r3, #2
 8006b84:	f000 f850 	bl	8006c28 <_lseek_r>
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	4a05      	ldr	r2, [pc, #20]	; (8006ba0 <__swrite+0x34>)
 8006b8c:	0028      	movs	r0, r5
 8006b8e:	4013      	ands	r3, r2
 8006b90:	81a3      	strh	r3, [r4, #12]
 8006b92:	0032      	movs	r2, r6
 8006b94:	230e      	movs	r3, #14
 8006b96:	5ee1      	ldrsh	r1, [r4, r3]
 8006b98:	003b      	movs	r3, r7
 8006b9a:	f000 f81f 	bl	8006bdc <_write_r>
 8006b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ba0:	ffffefff 	.word	0xffffefff

08006ba4 <__sseek>:
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	000c      	movs	r4, r1
 8006ba8:	250e      	movs	r5, #14
 8006baa:	5f49      	ldrsh	r1, [r1, r5]
 8006bac:	f000 f83c 	bl	8006c28 <_lseek_r>
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	1c42      	adds	r2, r0, #1
 8006bb4:	d103      	bne.n	8006bbe <__sseek+0x1a>
 8006bb6:	4a05      	ldr	r2, [pc, #20]	; (8006bcc <__sseek+0x28>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	81a3      	strh	r3, [r4, #12]
 8006bbc:	bd70      	pop	{r4, r5, r6, pc}
 8006bbe:	2280      	movs	r2, #128	; 0x80
 8006bc0:	0152      	lsls	r2, r2, #5
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	81a3      	strh	r3, [r4, #12]
 8006bc6:	6560      	str	r0, [r4, #84]	; 0x54
 8006bc8:	e7f8      	b.n	8006bbc <__sseek+0x18>
 8006bca:	46c0      	nop			; (mov r8, r8)
 8006bcc:	ffffefff 	.word	0xffffefff

08006bd0 <__sclose>:
 8006bd0:	b510      	push	{r4, lr}
 8006bd2:	230e      	movs	r3, #14
 8006bd4:	5ec9      	ldrsh	r1, [r1, r3]
 8006bd6:	f000 f815 	bl	8006c04 <_close_r>
 8006bda:	bd10      	pop	{r4, pc}

08006bdc <_write_r>:
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	0004      	movs	r4, r0
 8006be0:	0008      	movs	r0, r1
 8006be2:	0011      	movs	r1, r2
 8006be4:	001a      	movs	r2, r3
 8006be6:	2300      	movs	r3, #0
 8006be8:	4d05      	ldr	r5, [pc, #20]	; (8006c00 <_write_r+0x24>)
 8006bea:	602b      	str	r3, [r5, #0]
 8006bec:	f7fb f83f 	bl	8001c6e <_write>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d103      	bne.n	8006bfc <_write_r+0x20>
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d000      	beq.n	8006bfc <_write_r+0x20>
 8006bfa:	6023      	str	r3, [r4, #0]
 8006bfc:	bd70      	pop	{r4, r5, r6, pc}
 8006bfe:	46c0      	nop			; (mov r8, r8)
 8006c00:	20000bb4 	.word	0x20000bb4

08006c04 <_close_r>:
 8006c04:	2300      	movs	r3, #0
 8006c06:	b570      	push	{r4, r5, r6, lr}
 8006c08:	4d06      	ldr	r5, [pc, #24]	; (8006c24 <_close_r+0x20>)
 8006c0a:	0004      	movs	r4, r0
 8006c0c:	0008      	movs	r0, r1
 8006c0e:	602b      	str	r3, [r5, #0]
 8006c10:	f7fb f849 	bl	8001ca6 <_close>
 8006c14:	1c43      	adds	r3, r0, #1
 8006c16:	d103      	bne.n	8006c20 <_close_r+0x1c>
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d000      	beq.n	8006c20 <_close_r+0x1c>
 8006c1e:	6023      	str	r3, [r4, #0]
 8006c20:	bd70      	pop	{r4, r5, r6, pc}
 8006c22:	46c0      	nop			; (mov r8, r8)
 8006c24:	20000bb4 	.word	0x20000bb4

08006c28 <_lseek_r>:
 8006c28:	b570      	push	{r4, r5, r6, lr}
 8006c2a:	0004      	movs	r4, r0
 8006c2c:	0008      	movs	r0, r1
 8006c2e:	0011      	movs	r1, r2
 8006c30:	001a      	movs	r2, r3
 8006c32:	2300      	movs	r3, #0
 8006c34:	4d05      	ldr	r5, [pc, #20]	; (8006c4c <_lseek_r+0x24>)
 8006c36:	602b      	str	r3, [r5, #0]
 8006c38:	f7fb f856 	bl	8001ce8 <_lseek>
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	d103      	bne.n	8006c48 <_lseek_r+0x20>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d000      	beq.n	8006c48 <_lseek_r+0x20>
 8006c46:	6023      	str	r3, [r4, #0]
 8006c48:	bd70      	pop	{r4, r5, r6, pc}
 8006c4a:	46c0      	nop			; (mov r8, r8)
 8006c4c:	20000bb4 	.word	0x20000bb4

08006c50 <__malloc_lock>:
 8006c50:	b510      	push	{r4, lr}
 8006c52:	4802      	ldr	r0, [pc, #8]	; (8006c5c <__malloc_lock+0xc>)
 8006c54:	f7ff fe55 	bl	8006902 <__retarget_lock_acquire_recursive>
 8006c58:	bd10      	pop	{r4, pc}
 8006c5a:	46c0      	nop			; (mov r8, r8)
 8006c5c:	20000ba8 	.word	0x20000ba8

08006c60 <__malloc_unlock>:
 8006c60:	b510      	push	{r4, lr}
 8006c62:	4802      	ldr	r0, [pc, #8]	; (8006c6c <__malloc_unlock+0xc>)
 8006c64:	f7ff fe4e 	bl	8006904 <__retarget_lock_release_recursive>
 8006c68:	bd10      	pop	{r4, pc}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	20000ba8 	.word	0x20000ba8

08006c70 <__sfputc_r>:
 8006c70:	6893      	ldr	r3, [r2, #8]
 8006c72:	b510      	push	{r4, lr}
 8006c74:	3b01      	subs	r3, #1
 8006c76:	6093      	str	r3, [r2, #8]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	da04      	bge.n	8006c86 <__sfputc_r+0x16>
 8006c7c:	6994      	ldr	r4, [r2, #24]
 8006c7e:	42a3      	cmp	r3, r4
 8006c80:	db07      	blt.n	8006c92 <__sfputc_r+0x22>
 8006c82:	290a      	cmp	r1, #10
 8006c84:	d005      	beq.n	8006c92 <__sfputc_r+0x22>
 8006c86:	6813      	ldr	r3, [r2, #0]
 8006c88:	1c58      	adds	r0, r3, #1
 8006c8a:	6010      	str	r0, [r2, #0]
 8006c8c:	7019      	strb	r1, [r3, #0]
 8006c8e:	0008      	movs	r0, r1
 8006c90:	bd10      	pop	{r4, pc}
 8006c92:	f000 fae5 	bl	8007260 <__swbuf_r>
 8006c96:	0001      	movs	r1, r0
 8006c98:	e7f9      	b.n	8006c8e <__sfputc_r+0x1e>

08006c9a <__sfputs_r>:
 8006c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9c:	0006      	movs	r6, r0
 8006c9e:	000f      	movs	r7, r1
 8006ca0:	0014      	movs	r4, r2
 8006ca2:	18d5      	adds	r5, r2, r3
 8006ca4:	42ac      	cmp	r4, r5
 8006ca6:	d101      	bne.n	8006cac <__sfputs_r+0x12>
 8006ca8:	2000      	movs	r0, #0
 8006caa:	e007      	b.n	8006cbc <__sfputs_r+0x22>
 8006cac:	7821      	ldrb	r1, [r4, #0]
 8006cae:	003a      	movs	r2, r7
 8006cb0:	0030      	movs	r0, r6
 8006cb2:	f7ff ffdd 	bl	8006c70 <__sfputc_r>
 8006cb6:	3401      	adds	r4, #1
 8006cb8:	1c43      	adds	r3, r0, #1
 8006cba:	d1f3      	bne.n	8006ca4 <__sfputs_r+0xa>
 8006cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cc0 <_vfiprintf_r>:
 8006cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc2:	b0a1      	sub	sp, #132	; 0x84
 8006cc4:	0006      	movs	r6, r0
 8006cc6:	000c      	movs	r4, r1
 8006cc8:	001f      	movs	r7, r3
 8006cca:	9203      	str	r2, [sp, #12]
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	d004      	beq.n	8006cda <_vfiprintf_r+0x1a>
 8006cd0:	6983      	ldr	r3, [r0, #24]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <_vfiprintf_r+0x1a>
 8006cd6:	f7ff fd4f 	bl	8006778 <__sinit>
 8006cda:	4b8e      	ldr	r3, [pc, #568]	; (8006f14 <_vfiprintf_r+0x254>)
 8006cdc:	429c      	cmp	r4, r3
 8006cde:	d11c      	bne.n	8006d1a <_vfiprintf_r+0x5a>
 8006ce0:	6874      	ldr	r4, [r6, #4]
 8006ce2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ce4:	07db      	lsls	r3, r3, #31
 8006ce6:	d405      	bmi.n	8006cf4 <_vfiprintf_r+0x34>
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	059b      	lsls	r3, r3, #22
 8006cec:	d402      	bmi.n	8006cf4 <_vfiprintf_r+0x34>
 8006cee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cf0:	f7ff fe07 	bl	8006902 <__retarget_lock_acquire_recursive>
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	071b      	lsls	r3, r3, #28
 8006cf8:	d502      	bpl.n	8006d00 <_vfiprintf_r+0x40>
 8006cfa:	6923      	ldr	r3, [r4, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d11d      	bne.n	8006d3c <_vfiprintf_r+0x7c>
 8006d00:	0021      	movs	r1, r4
 8006d02:	0030      	movs	r0, r6
 8006d04:	f000 fb02 	bl	800730c <__swsetup_r>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d017      	beq.n	8006d3c <_vfiprintf_r+0x7c>
 8006d0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d0e:	07db      	lsls	r3, r3, #31
 8006d10:	d50d      	bpl.n	8006d2e <_vfiprintf_r+0x6e>
 8006d12:	2001      	movs	r0, #1
 8006d14:	4240      	negs	r0, r0
 8006d16:	b021      	add	sp, #132	; 0x84
 8006d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d1a:	4b7f      	ldr	r3, [pc, #508]	; (8006f18 <_vfiprintf_r+0x258>)
 8006d1c:	429c      	cmp	r4, r3
 8006d1e:	d101      	bne.n	8006d24 <_vfiprintf_r+0x64>
 8006d20:	68b4      	ldr	r4, [r6, #8]
 8006d22:	e7de      	b.n	8006ce2 <_vfiprintf_r+0x22>
 8006d24:	4b7d      	ldr	r3, [pc, #500]	; (8006f1c <_vfiprintf_r+0x25c>)
 8006d26:	429c      	cmp	r4, r3
 8006d28:	d1db      	bne.n	8006ce2 <_vfiprintf_r+0x22>
 8006d2a:	68f4      	ldr	r4, [r6, #12]
 8006d2c:	e7d9      	b.n	8006ce2 <_vfiprintf_r+0x22>
 8006d2e:	89a3      	ldrh	r3, [r4, #12]
 8006d30:	059b      	lsls	r3, r3, #22
 8006d32:	d4ee      	bmi.n	8006d12 <_vfiprintf_r+0x52>
 8006d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d36:	f7ff fde5 	bl	8006904 <__retarget_lock_release_recursive>
 8006d3a:	e7ea      	b.n	8006d12 <_vfiprintf_r+0x52>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	ad08      	add	r5, sp, #32
 8006d40:	616b      	str	r3, [r5, #20]
 8006d42:	3320      	adds	r3, #32
 8006d44:	766b      	strb	r3, [r5, #25]
 8006d46:	3310      	adds	r3, #16
 8006d48:	76ab      	strb	r3, [r5, #26]
 8006d4a:	9707      	str	r7, [sp, #28]
 8006d4c:	9f03      	ldr	r7, [sp, #12]
 8006d4e:	783b      	ldrb	r3, [r7, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <_vfiprintf_r+0x98>
 8006d54:	2b25      	cmp	r3, #37	; 0x25
 8006d56:	d14e      	bne.n	8006df6 <_vfiprintf_r+0x136>
 8006d58:	9b03      	ldr	r3, [sp, #12]
 8006d5a:	1afb      	subs	r3, r7, r3
 8006d5c:	9305      	str	r3, [sp, #20]
 8006d5e:	9b03      	ldr	r3, [sp, #12]
 8006d60:	429f      	cmp	r7, r3
 8006d62:	d00d      	beq.n	8006d80 <_vfiprintf_r+0xc0>
 8006d64:	9b05      	ldr	r3, [sp, #20]
 8006d66:	0021      	movs	r1, r4
 8006d68:	0030      	movs	r0, r6
 8006d6a:	9a03      	ldr	r2, [sp, #12]
 8006d6c:	f7ff ff95 	bl	8006c9a <__sfputs_r>
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d100      	bne.n	8006d76 <_vfiprintf_r+0xb6>
 8006d74:	e0b5      	b.n	8006ee2 <_vfiprintf_r+0x222>
 8006d76:	696a      	ldr	r2, [r5, #20]
 8006d78:	9b05      	ldr	r3, [sp, #20]
 8006d7a:	4694      	mov	ip, r2
 8006d7c:	4463      	add	r3, ip
 8006d7e:	616b      	str	r3, [r5, #20]
 8006d80:	783b      	ldrb	r3, [r7, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d100      	bne.n	8006d88 <_vfiprintf_r+0xc8>
 8006d86:	e0ac      	b.n	8006ee2 <_vfiprintf_r+0x222>
 8006d88:	2201      	movs	r2, #1
 8006d8a:	1c7b      	adds	r3, r7, #1
 8006d8c:	9303      	str	r3, [sp, #12]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	4252      	negs	r2, r2
 8006d92:	606a      	str	r2, [r5, #4]
 8006d94:	a904      	add	r1, sp, #16
 8006d96:	3254      	adds	r2, #84	; 0x54
 8006d98:	1852      	adds	r2, r2, r1
 8006d9a:	602b      	str	r3, [r5, #0]
 8006d9c:	60eb      	str	r3, [r5, #12]
 8006d9e:	60ab      	str	r3, [r5, #8]
 8006da0:	7013      	strb	r3, [r2, #0]
 8006da2:	65ab      	str	r3, [r5, #88]	; 0x58
 8006da4:	9b03      	ldr	r3, [sp, #12]
 8006da6:	2205      	movs	r2, #5
 8006da8:	7819      	ldrb	r1, [r3, #0]
 8006daa:	485d      	ldr	r0, [pc, #372]	; (8006f20 <_vfiprintf_r+0x260>)
 8006dac:	f000 fb92 	bl	80074d4 <memchr>
 8006db0:	9b03      	ldr	r3, [sp, #12]
 8006db2:	1c5f      	adds	r7, r3, #1
 8006db4:	2800      	cmp	r0, #0
 8006db6:	d120      	bne.n	8006dfa <_vfiprintf_r+0x13a>
 8006db8:	682a      	ldr	r2, [r5, #0]
 8006dba:	06d3      	lsls	r3, r2, #27
 8006dbc:	d504      	bpl.n	8006dc8 <_vfiprintf_r+0x108>
 8006dbe:	2353      	movs	r3, #83	; 0x53
 8006dc0:	a904      	add	r1, sp, #16
 8006dc2:	185b      	adds	r3, r3, r1
 8006dc4:	2120      	movs	r1, #32
 8006dc6:	7019      	strb	r1, [r3, #0]
 8006dc8:	0713      	lsls	r3, r2, #28
 8006dca:	d504      	bpl.n	8006dd6 <_vfiprintf_r+0x116>
 8006dcc:	2353      	movs	r3, #83	; 0x53
 8006dce:	a904      	add	r1, sp, #16
 8006dd0:	185b      	adds	r3, r3, r1
 8006dd2:	212b      	movs	r1, #43	; 0x2b
 8006dd4:	7019      	strb	r1, [r3, #0]
 8006dd6:	9b03      	ldr	r3, [sp, #12]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b2a      	cmp	r3, #42	; 0x2a
 8006ddc:	d016      	beq.n	8006e0c <_vfiprintf_r+0x14c>
 8006dde:	2100      	movs	r1, #0
 8006de0:	68eb      	ldr	r3, [r5, #12]
 8006de2:	9f03      	ldr	r7, [sp, #12]
 8006de4:	783a      	ldrb	r2, [r7, #0]
 8006de6:	1c78      	adds	r0, r7, #1
 8006de8:	3a30      	subs	r2, #48	; 0x30
 8006dea:	4684      	mov	ip, r0
 8006dec:	2a09      	cmp	r2, #9
 8006dee:	d94f      	bls.n	8006e90 <_vfiprintf_r+0x1d0>
 8006df0:	2900      	cmp	r1, #0
 8006df2:	d111      	bne.n	8006e18 <_vfiprintf_r+0x158>
 8006df4:	e017      	b.n	8006e26 <_vfiprintf_r+0x166>
 8006df6:	3701      	adds	r7, #1
 8006df8:	e7a9      	b.n	8006d4e <_vfiprintf_r+0x8e>
 8006dfa:	4b49      	ldr	r3, [pc, #292]	; (8006f20 <_vfiprintf_r+0x260>)
 8006dfc:	682a      	ldr	r2, [r5, #0]
 8006dfe:	1ac0      	subs	r0, r0, r3
 8006e00:	2301      	movs	r3, #1
 8006e02:	4083      	lsls	r3, r0
 8006e04:	4313      	orrs	r3, r2
 8006e06:	602b      	str	r3, [r5, #0]
 8006e08:	9703      	str	r7, [sp, #12]
 8006e0a:	e7cb      	b.n	8006da4 <_vfiprintf_r+0xe4>
 8006e0c:	9b07      	ldr	r3, [sp, #28]
 8006e0e:	1d19      	adds	r1, r3, #4
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	9107      	str	r1, [sp, #28]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	db01      	blt.n	8006e1c <_vfiprintf_r+0x15c>
 8006e18:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e1a:	e004      	b.n	8006e26 <_vfiprintf_r+0x166>
 8006e1c:	425b      	negs	r3, r3
 8006e1e:	60eb      	str	r3, [r5, #12]
 8006e20:	2302      	movs	r3, #2
 8006e22:	4313      	orrs	r3, r2
 8006e24:	602b      	str	r3, [r5, #0]
 8006e26:	783b      	ldrb	r3, [r7, #0]
 8006e28:	2b2e      	cmp	r3, #46	; 0x2e
 8006e2a:	d10a      	bne.n	8006e42 <_vfiprintf_r+0x182>
 8006e2c:	787b      	ldrb	r3, [r7, #1]
 8006e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e30:	d137      	bne.n	8006ea2 <_vfiprintf_r+0x1e2>
 8006e32:	9b07      	ldr	r3, [sp, #28]
 8006e34:	3702      	adds	r7, #2
 8006e36:	1d1a      	adds	r2, r3, #4
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	9207      	str	r2, [sp, #28]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	db2d      	blt.n	8006e9c <_vfiprintf_r+0x1dc>
 8006e40:	9309      	str	r3, [sp, #36]	; 0x24
 8006e42:	2203      	movs	r2, #3
 8006e44:	7839      	ldrb	r1, [r7, #0]
 8006e46:	4837      	ldr	r0, [pc, #220]	; (8006f24 <_vfiprintf_r+0x264>)
 8006e48:	f000 fb44 	bl	80074d4 <memchr>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d007      	beq.n	8006e60 <_vfiprintf_r+0x1a0>
 8006e50:	4b34      	ldr	r3, [pc, #208]	; (8006f24 <_vfiprintf_r+0x264>)
 8006e52:	682a      	ldr	r2, [r5, #0]
 8006e54:	1ac0      	subs	r0, r0, r3
 8006e56:	2340      	movs	r3, #64	; 0x40
 8006e58:	4083      	lsls	r3, r0
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	3701      	adds	r7, #1
 8006e5e:	602b      	str	r3, [r5, #0]
 8006e60:	7839      	ldrb	r1, [r7, #0]
 8006e62:	1c7b      	adds	r3, r7, #1
 8006e64:	2206      	movs	r2, #6
 8006e66:	4830      	ldr	r0, [pc, #192]	; (8006f28 <_vfiprintf_r+0x268>)
 8006e68:	9303      	str	r3, [sp, #12]
 8006e6a:	7629      	strb	r1, [r5, #24]
 8006e6c:	f000 fb32 	bl	80074d4 <memchr>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d045      	beq.n	8006f00 <_vfiprintf_r+0x240>
 8006e74:	4b2d      	ldr	r3, [pc, #180]	; (8006f2c <_vfiprintf_r+0x26c>)
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d127      	bne.n	8006eca <_vfiprintf_r+0x20a>
 8006e7a:	2207      	movs	r2, #7
 8006e7c:	9b07      	ldr	r3, [sp, #28]
 8006e7e:	3307      	adds	r3, #7
 8006e80:	4393      	bics	r3, r2
 8006e82:	3308      	adds	r3, #8
 8006e84:	9307      	str	r3, [sp, #28]
 8006e86:	696b      	ldr	r3, [r5, #20]
 8006e88:	9a04      	ldr	r2, [sp, #16]
 8006e8a:	189b      	adds	r3, r3, r2
 8006e8c:	616b      	str	r3, [r5, #20]
 8006e8e:	e75d      	b.n	8006d4c <_vfiprintf_r+0x8c>
 8006e90:	210a      	movs	r1, #10
 8006e92:	434b      	muls	r3, r1
 8006e94:	4667      	mov	r7, ip
 8006e96:	189b      	adds	r3, r3, r2
 8006e98:	3909      	subs	r1, #9
 8006e9a:	e7a3      	b.n	8006de4 <_vfiprintf_r+0x124>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	425b      	negs	r3, r3
 8006ea0:	e7ce      	b.n	8006e40 <_vfiprintf_r+0x180>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	001a      	movs	r2, r3
 8006ea6:	3701      	adds	r7, #1
 8006ea8:	606b      	str	r3, [r5, #4]
 8006eaa:	7839      	ldrb	r1, [r7, #0]
 8006eac:	1c78      	adds	r0, r7, #1
 8006eae:	3930      	subs	r1, #48	; 0x30
 8006eb0:	4684      	mov	ip, r0
 8006eb2:	2909      	cmp	r1, #9
 8006eb4:	d903      	bls.n	8006ebe <_vfiprintf_r+0x1fe>
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0c3      	beq.n	8006e42 <_vfiprintf_r+0x182>
 8006eba:	9209      	str	r2, [sp, #36]	; 0x24
 8006ebc:	e7c1      	b.n	8006e42 <_vfiprintf_r+0x182>
 8006ebe:	230a      	movs	r3, #10
 8006ec0:	435a      	muls	r2, r3
 8006ec2:	4667      	mov	r7, ip
 8006ec4:	1852      	adds	r2, r2, r1
 8006ec6:	3b09      	subs	r3, #9
 8006ec8:	e7ef      	b.n	8006eaa <_vfiprintf_r+0x1ea>
 8006eca:	ab07      	add	r3, sp, #28
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	0022      	movs	r2, r4
 8006ed0:	0029      	movs	r1, r5
 8006ed2:	0030      	movs	r0, r6
 8006ed4:	4b16      	ldr	r3, [pc, #88]	; (8006f30 <_vfiprintf_r+0x270>)
 8006ed6:	e000      	b.n	8006eda <_vfiprintf_r+0x21a>
 8006ed8:	bf00      	nop
 8006eda:	9004      	str	r0, [sp, #16]
 8006edc:	9b04      	ldr	r3, [sp, #16]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	d1d1      	bne.n	8006e86 <_vfiprintf_r+0x1c6>
 8006ee2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ee4:	07db      	lsls	r3, r3, #31
 8006ee6:	d405      	bmi.n	8006ef4 <_vfiprintf_r+0x234>
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	059b      	lsls	r3, r3, #22
 8006eec:	d402      	bmi.n	8006ef4 <_vfiprintf_r+0x234>
 8006eee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ef0:	f7ff fd08 	bl	8006904 <__retarget_lock_release_recursive>
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	065b      	lsls	r3, r3, #25
 8006ef8:	d500      	bpl.n	8006efc <_vfiprintf_r+0x23c>
 8006efa:	e70a      	b.n	8006d12 <_vfiprintf_r+0x52>
 8006efc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006efe:	e70a      	b.n	8006d16 <_vfiprintf_r+0x56>
 8006f00:	ab07      	add	r3, sp, #28
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	0022      	movs	r2, r4
 8006f06:	0029      	movs	r1, r5
 8006f08:	0030      	movs	r0, r6
 8006f0a:	4b09      	ldr	r3, [pc, #36]	; (8006f30 <_vfiprintf_r+0x270>)
 8006f0c:	f000 f882 	bl	8007014 <_printf_i>
 8006f10:	e7e3      	b.n	8006eda <_vfiprintf_r+0x21a>
 8006f12:	46c0      	nop			; (mov r8, r8)
 8006f14:	0800793c 	.word	0x0800793c
 8006f18:	0800795c 	.word	0x0800795c
 8006f1c:	0800791c 	.word	0x0800791c
 8006f20:	08007980 	.word	0x08007980
 8006f24:	08007986 	.word	0x08007986
 8006f28:	0800798a 	.word	0x0800798a
 8006f2c:	00000000 	.word	0x00000000
 8006f30:	08006c9b 	.word	0x08006c9b

08006f34 <_printf_common>:
 8006f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f36:	0015      	movs	r5, r2
 8006f38:	9301      	str	r3, [sp, #4]
 8006f3a:	688a      	ldr	r2, [r1, #8]
 8006f3c:	690b      	ldr	r3, [r1, #16]
 8006f3e:	000c      	movs	r4, r1
 8006f40:	9000      	str	r0, [sp, #0]
 8006f42:	4293      	cmp	r3, r2
 8006f44:	da00      	bge.n	8006f48 <_printf_common+0x14>
 8006f46:	0013      	movs	r3, r2
 8006f48:	0022      	movs	r2, r4
 8006f4a:	602b      	str	r3, [r5, #0]
 8006f4c:	3243      	adds	r2, #67	; 0x43
 8006f4e:	7812      	ldrb	r2, [r2, #0]
 8006f50:	2a00      	cmp	r2, #0
 8006f52:	d001      	beq.n	8006f58 <_printf_common+0x24>
 8006f54:	3301      	adds	r3, #1
 8006f56:	602b      	str	r3, [r5, #0]
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	069b      	lsls	r3, r3, #26
 8006f5c:	d502      	bpl.n	8006f64 <_printf_common+0x30>
 8006f5e:	682b      	ldr	r3, [r5, #0]
 8006f60:	3302      	adds	r3, #2
 8006f62:	602b      	str	r3, [r5, #0]
 8006f64:	6822      	ldr	r2, [r4, #0]
 8006f66:	2306      	movs	r3, #6
 8006f68:	0017      	movs	r7, r2
 8006f6a:	401f      	ands	r7, r3
 8006f6c:	421a      	tst	r2, r3
 8006f6e:	d027      	beq.n	8006fc0 <_printf_common+0x8c>
 8006f70:	0023      	movs	r3, r4
 8006f72:	3343      	adds	r3, #67	; 0x43
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	1e5a      	subs	r2, r3, #1
 8006f78:	4193      	sbcs	r3, r2
 8006f7a:	6822      	ldr	r2, [r4, #0]
 8006f7c:	0692      	lsls	r2, r2, #26
 8006f7e:	d430      	bmi.n	8006fe2 <_printf_common+0xae>
 8006f80:	0022      	movs	r2, r4
 8006f82:	9901      	ldr	r1, [sp, #4]
 8006f84:	9800      	ldr	r0, [sp, #0]
 8006f86:	9e08      	ldr	r6, [sp, #32]
 8006f88:	3243      	adds	r2, #67	; 0x43
 8006f8a:	47b0      	blx	r6
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d025      	beq.n	8006fdc <_printf_common+0xa8>
 8006f90:	2306      	movs	r3, #6
 8006f92:	6820      	ldr	r0, [r4, #0]
 8006f94:	682a      	ldr	r2, [r5, #0]
 8006f96:	68e1      	ldr	r1, [r4, #12]
 8006f98:	2500      	movs	r5, #0
 8006f9a:	4003      	ands	r3, r0
 8006f9c:	2b04      	cmp	r3, #4
 8006f9e:	d103      	bne.n	8006fa8 <_printf_common+0x74>
 8006fa0:	1a8d      	subs	r5, r1, r2
 8006fa2:	43eb      	mvns	r3, r5
 8006fa4:	17db      	asrs	r3, r3, #31
 8006fa6:	401d      	ands	r5, r3
 8006fa8:	68a3      	ldr	r3, [r4, #8]
 8006faa:	6922      	ldr	r2, [r4, #16]
 8006fac:	4293      	cmp	r3, r2
 8006fae:	dd01      	ble.n	8006fb4 <_printf_common+0x80>
 8006fb0:	1a9b      	subs	r3, r3, r2
 8006fb2:	18ed      	adds	r5, r5, r3
 8006fb4:	2700      	movs	r7, #0
 8006fb6:	42bd      	cmp	r5, r7
 8006fb8:	d120      	bne.n	8006ffc <_printf_common+0xc8>
 8006fba:	2000      	movs	r0, #0
 8006fbc:	e010      	b.n	8006fe0 <_printf_common+0xac>
 8006fbe:	3701      	adds	r7, #1
 8006fc0:	68e3      	ldr	r3, [r4, #12]
 8006fc2:	682a      	ldr	r2, [r5, #0]
 8006fc4:	1a9b      	subs	r3, r3, r2
 8006fc6:	42bb      	cmp	r3, r7
 8006fc8:	ddd2      	ble.n	8006f70 <_printf_common+0x3c>
 8006fca:	0022      	movs	r2, r4
 8006fcc:	2301      	movs	r3, #1
 8006fce:	9901      	ldr	r1, [sp, #4]
 8006fd0:	9800      	ldr	r0, [sp, #0]
 8006fd2:	9e08      	ldr	r6, [sp, #32]
 8006fd4:	3219      	adds	r2, #25
 8006fd6:	47b0      	blx	r6
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	d1f0      	bne.n	8006fbe <_printf_common+0x8a>
 8006fdc:	2001      	movs	r0, #1
 8006fde:	4240      	negs	r0, r0
 8006fe0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006fe2:	2030      	movs	r0, #48	; 0x30
 8006fe4:	18e1      	adds	r1, r4, r3
 8006fe6:	3143      	adds	r1, #67	; 0x43
 8006fe8:	7008      	strb	r0, [r1, #0]
 8006fea:	0021      	movs	r1, r4
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	3145      	adds	r1, #69	; 0x45
 8006ff0:	7809      	ldrb	r1, [r1, #0]
 8006ff2:	18a2      	adds	r2, r4, r2
 8006ff4:	3243      	adds	r2, #67	; 0x43
 8006ff6:	3302      	adds	r3, #2
 8006ff8:	7011      	strb	r1, [r2, #0]
 8006ffa:	e7c1      	b.n	8006f80 <_printf_common+0x4c>
 8006ffc:	0022      	movs	r2, r4
 8006ffe:	2301      	movs	r3, #1
 8007000:	9901      	ldr	r1, [sp, #4]
 8007002:	9800      	ldr	r0, [sp, #0]
 8007004:	9e08      	ldr	r6, [sp, #32]
 8007006:	321a      	adds	r2, #26
 8007008:	47b0      	blx	r6
 800700a:	1c43      	adds	r3, r0, #1
 800700c:	d0e6      	beq.n	8006fdc <_printf_common+0xa8>
 800700e:	3701      	adds	r7, #1
 8007010:	e7d1      	b.n	8006fb6 <_printf_common+0x82>
	...

08007014 <_printf_i>:
 8007014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007016:	b08b      	sub	sp, #44	; 0x2c
 8007018:	9206      	str	r2, [sp, #24]
 800701a:	000a      	movs	r2, r1
 800701c:	3243      	adds	r2, #67	; 0x43
 800701e:	9307      	str	r3, [sp, #28]
 8007020:	9005      	str	r0, [sp, #20]
 8007022:	9204      	str	r2, [sp, #16]
 8007024:	7e0a      	ldrb	r2, [r1, #24]
 8007026:	000c      	movs	r4, r1
 8007028:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800702a:	2a78      	cmp	r2, #120	; 0x78
 800702c:	d807      	bhi.n	800703e <_printf_i+0x2a>
 800702e:	2a62      	cmp	r2, #98	; 0x62
 8007030:	d809      	bhi.n	8007046 <_printf_i+0x32>
 8007032:	2a00      	cmp	r2, #0
 8007034:	d100      	bne.n	8007038 <_printf_i+0x24>
 8007036:	e0c1      	b.n	80071bc <_printf_i+0x1a8>
 8007038:	2a58      	cmp	r2, #88	; 0x58
 800703a:	d100      	bne.n	800703e <_printf_i+0x2a>
 800703c:	e08c      	b.n	8007158 <_printf_i+0x144>
 800703e:	0026      	movs	r6, r4
 8007040:	3642      	adds	r6, #66	; 0x42
 8007042:	7032      	strb	r2, [r6, #0]
 8007044:	e022      	b.n	800708c <_printf_i+0x78>
 8007046:	0010      	movs	r0, r2
 8007048:	3863      	subs	r0, #99	; 0x63
 800704a:	2815      	cmp	r0, #21
 800704c:	d8f7      	bhi.n	800703e <_printf_i+0x2a>
 800704e:	f7f9 f863 	bl	8000118 <__gnu_thumb1_case_shi>
 8007052:	0016      	.short	0x0016
 8007054:	fff6001f 	.word	0xfff6001f
 8007058:	fff6fff6 	.word	0xfff6fff6
 800705c:	001ffff6 	.word	0x001ffff6
 8007060:	fff6fff6 	.word	0xfff6fff6
 8007064:	fff6fff6 	.word	0xfff6fff6
 8007068:	003600a8 	.word	0x003600a8
 800706c:	fff6009a 	.word	0xfff6009a
 8007070:	00b9fff6 	.word	0x00b9fff6
 8007074:	0036fff6 	.word	0x0036fff6
 8007078:	fff6fff6 	.word	0xfff6fff6
 800707c:	009e      	.short	0x009e
 800707e:	0026      	movs	r6, r4
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	3642      	adds	r6, #66	; 0x42
 8007084:	1d11      	adds	r1, r2, #4
 8007086:	6019      	str	r1, [r3, #0]
 8007088:	6813      	ldr	r3, [r2, #0]
 800708a:	7033      	strb	r3, [r6, #0]
 800708c:	2301      	movs	r3, #1
 800708e:	e0a7      	b.n	80071e0 <_printf_i+0x1cc>
 8007090:	6808      	ldr	r0, [r1, #0]
 8007092:	6819      	ldr	r1, [r3, #0]
 8007094:	1d0a      	adds	r2, r1, #4
 8007096:	0605      	lsls	r5, r0, #24
 8007098:	d50b      	bpl.n	80070b2 <_printf_i+0x9e>
 800709a:	680d      	ldr	r5, [r1, #0]
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	2d00      	cmp	r5, #0
 80070a0:	da03      	bge.n	80070aa <_printf_i+0x96>
 80070a2:	232d      	movs	r3, #45	; 0x2d
 80070a4:	9a04      	ldr	r2, [sp, #16]
 80070a6:	426d      	negs	r5, r5
 80070a8:	7013      	strb	r3, [r2, #0]
 80070aa:	4b61      	ldr	r3, [pc, #388]	; (8007230 <_printf_i+0x21c>)
 80070ac:	270a      	movs	r7, #10
 80070ae:	9303      	str	r3, [sp, #12]
 80070b0:	e01b      	b.n	80070ea <_printf_i+0xd6>
 80070b2:	680d      	ldr	r5, [r1, #0]
 80070b4:	601a      	str	r2, [r3, #0]
 80070b6:	0641      	lsls	r1, r0, #25
 80070b8:	d5f1      	bpl.n	800709e <_printf_i+0x8a>
 80070ba:	b22d      	sxth	r5, r5
 80070bc:	e7ef      	b.n	800709e <_printf_i+0x8a>
 80070be:	680d      	ldr	r5, [r1, #0]
 80070c0:	6819      	ldr	r1, [r3, #0]
 80070c2:	1d08      	adds	r0, r1, #4
 80070c4:	6018      	str	r0, [r3, #0]
 80070c6:	062e      	lsls	r6, r5, #24
 80070c8:	d501      	bpl.n	80070ce <_printf_i+0xba>
 80070ca:	680d      	ldr	r5, [r1, #0]
 80070cc:	e003      	b.n	80070d6 <_printf_i+0xc2>
 80070ce:	066d      	lsls	r5, r5, #25
 80070d0:	d5fb      	bpl.n	80070ca <_printf_i+0xb6>
 80070d2:	680d      	ldr	r5, [r1, #0]
 80070d4:	b2ad      	uxth	r5, r5
 80070d6:	4b56      	ldr	r3, [pc, #344]	; (8007230 <_printf_i+0x21c>)
 80070d8:	2708      	movs	r7, #8
 80070da:	9303      	str	r3, [sp, #12]
 80070dc:	2a6f      	cmp	r2, #111	; 0x6f
 80070de:	d000      	beq.n	80070e2 <_printf_i+0xce>
 80070e0:	3702      	adds	r7, #2
 80070e2:	0023      	movs	r3, r4
 80070e4:	2200      	movs	r2, #0
 80070e6:	3343      	adds	r3, #67	; 0x43
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	6863      	ldr	r3, [r4, #4]
 80070ec:	60a3      	str	r3, [r4, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	db03      	blt.n	80070fa <_printf_i+0xe6>
 80070f2:	2204      	movs	r2, #4
 80070f4:	6821      	ldr	r1, [r4, #0]
 80070f6:	4391      	bics	r1, r2
 80070f8:	6021      	str	r1, [r4, #0]
 80070fa:	2d00      	cmp	r5, #0
 80070fc:	d102      	bne.n	8007104 <_printf_i+0xf0>
 80070fe:	9e04      	ldr	r6, [sp, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00c      	beq.n	800711e <_printf_i+0x10a>
 8007104:	9e04      	ldr	r6, [sp, #16]
 8007106:	0028      	movs	r0, r5
 8007108:	0039      	movs	r1, r7
 800710a:	f7f9 f895 	bl	8000238 <__aeabi_uidivmod>
 800710e:	9b03      	ldr	r3, [sp, #12]
 8007110:	3e01      	subs	r6, #1
 8007112:	5c5b      	ldrb	r3, [r3, r1]
 8007114:	7033      	strb	r3, [r6, #0]
 8007116:	002b      	movs	r3, r5
 8007118:	0005      	movs	r5, r0
 800711a:	429f      	cmp	r7, r3
 800711c:	d9f3      	bls.n	8007106 <_printf_i+0xf2>
 800711e:	2f08      	cmp	r7, #8
 8007120:	d109      	bne.n	8007136 <_printf_i+0x122>
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	07db      	lsls	r3, r3, #31
 8007126:	d506      	bpl.n	8007136 <_printf_i+0x122>
 8007128:	6863      	ldr	r3, [r4, #4]
 800712a:	6922      	ldr	r2, [r4, #16]
 800712c:	4293      	cmp	r3, r2
 800712e:	dc02      	bgt.n	8007136 <_printf_i+0x122>
 8007130:	2330      	movs	r3, #48	; 0x30
 8007132:	3e01      	subs	r6, #1
 8007134:	7033      	strb	r3, [r6, #0]
 8007136:	9b04      	ldr	r3, [sp, #16]
 8007138:	1b9b      	subs	r3, r3, r6
 800713a:	6123      	str	r3, [r4, #16]
 800713c:	9b07      	ldr	r3, [sp, #28]
 800713e:	0021      	movs	r1, r4
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	9805      	ldr	r0, [sp, #20]
 8007144:	9b06      	ldr	r3, [sp, #24]
 8007146:	aa09      	add	r2, sp, #36	; 0x24
 8007148:	f7ff fef4 	bl	8006f34 <_printf_common>
 800714c:	1c43      	adds	r3, r0, #1
 800714e:	d14c      	bne.n	80071ea <_printf_i+0x1d6>
 8007150:	2001      	movs	r0, #1
 8007152:	4240      	negs	r0, r0
 8007154:	b00b      	add	sp, #44	; 0x2c
 8007156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007158:	3145      	adds	r1, #69	; 0x45
 800715a:	700a      	strb	r2, [r1, #0]
 800715c:	4a34      	ldr	r2, [pc, #208]	; (8007230 <_printf_i+0x21c>)
 800715e:	9203      	str	r2, [sp, #12]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	6821      	ldr	r1, [r4, #0]
 8007164:	ca20      	ldmia	r2!, {r5}
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	0608      	lsls	r0, r1, #24
 800716a:	d516      	bpl.n	800719a <_printf_i+0x186>
 800716c:	07cb      	lsls	r3, r1, #31
 800716e:	d502      	bpl.n	8007176 <_printf_i+0x162>
 8007170:	2320      	movs	r3, #32
 8007172:	4319      	orrs	r1, r3
 8007174:	6021      	str	r1, [r4, #0]
 8007176:	2710      	movs	r7, #16
 8007178:	2d00      	cmp	r5, #0
 800717a:	d1b2      	bne.n	80070e2 <_printf_i+0xce>
 800717c:	2320      	movs	r3, #32
 800717e:	6822      	ldr	r2, [r4, #0]
 8007180:	439a      	bics	r2, r3
 8007182:	6022      	str	r2, [r4, #0]
 8007184:	e7ad      	b.n	80070e2 <_printf_i+0xce>
 8007186:	2220      	movs	r2, #32
 8007188:	6809      	ldr	r1, [r1, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	6022      	str	r2, [r4, #0]
 800718e:	0022      	movs	r2, r4
 8007190:	2178      	movs	r1, #120	; 0x78
 8007192:	3245      	adds	r2, #69	; 0x45
 8007194:	7011      	strb	r1, [r2, #0]
 8007196:	4a27      	ldr	r2, [pc, #156]	; (8007234 <_printf_i+0x220>)
 8007198:	e7e1      	b.n	800715e <_printf_i+0x14a>
 800719a:	0648      	lsls	r0, r1, #25
 800719c:	d5e6      	bpl.n	800716c <_printf_i+0x158>
 800719e:	b2ad      	uxth	r5, r5
 80071a0:	e7e4      	b.n	800716c <_printf_i+0x158>
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	680d      	ldr	r5, [r1, #0]
 80071a6:	1d10      	adds	r0, r2, #4
 80071a8:	6949      	ldr	r1, [r1, #20]
 80071aa:	6018      	str	r0, [r3, #0]
 80071ac:	6813      	ldr	r3, [r2, #0]
 80071ae:	062e      	lsls	r6, r5, #24
 80071b0:	d501      	bpl.n	80071b6 <_printf_i+0x1a2>
 80071b2:	6019      	str	r1, [r3, #0]
 80071b4:	e002      	b.n	80071bc <_printf_i+0x1a8>
 80071b6:	066d      	lsls	r5, r5, #25
 80071b8:	d5fb      	bpl.n	80071b2 <_printf_i+0x19e>
 80071ba:	8019      	strh	r1, [r3, #0]
 80071bc:	2300      	movs	r3, #0
 80071be:	9e04      	ldr	r6, [sp, #16]
 80071c0:	6123      	str	r3, [r4, #16]
 80071c2:	e7bb      	b.n	800713c <_printf_i+0x128>
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	1d11      	adds	r1, r2, #4
 80071c8:	6019      	str	r1, [r3, #0]
 80071ca:	6816      	ldr	r6, [r2, #0]
 80071cc:	2100      	movs	r1, #0
 80071ce:	0030      	movs	r0, r6
 80071d0:	6862      	ldr	r2, [r4, #4]
 80071d2:	f000 f97f 	bl	80074d4 <memchr>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	d001      	beq.n	80071de <_printf_i+0x1ca>
 80071da:	1b80      	subs	r0, r0, r6
 80071dc:	6060      	str	r0, [r4, #4]
 80071de:	6863      	ldr	r3, [r4, #4]
 80071e0:	6123      	str	r3, [r4, #16]
 80071e2:	2300      	movs	r3, #0
 80071e4:	9a04      	ldr	r2, [sp, #16]
 80071e6:	7013      	strb	r3, [r2, #0]
 80071e8:	e7a8      	b.n	800713c <_printf_i+0x128>
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	0032      	movs	r2, r6
 80071ee:	9906      	ldr	r1, [sp, #24]
 80071f0:	9805      	ldr	r0, [sp, #20]
 80071f2:	9d07      	ldr	r5, [sp, #28]
 80071f4:	47a8      	blx	r5
 80071f6:	1c43      	adds	r3, r0, #1
 80071f8:	d0aa      	beq.n	8007150 <_printf_i+0x13c>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	079b      	lsls	r3, r3, #30
 80071fe:	d415      	bmi.n	800722c <_printf_i+0x218>
 8007200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007202:	68e0      	ldr	r0, [r4, #12]
 8007204:	4298      	cmp	r0, r3
 8007206:	daa5      	bge.n	8007154 <_printf_i+0x140>
 8007208:	0018      	movs	r0, r3
 800720a:	e7a3      	b.n	8007154 <_printf_i+0x140>
 800720c:	0022      	movs	r2, r4
 800720e:	2301      	movs	r3, #1
 8007210:	9906      	ldr	r1, [sp, #24]
 8007212:	9805      	ldr	r0, [sp, #20]
 8007214:	9e07      	ldr	r6, [sp, #28]
 8007216:	3219      	adds	r2, #25
 8007218:	47b0      	blx	r6
 800721a:	1c43      	adds	r3, r0, #1
 800721c:	d098      	beq.n	8007150 <_printf_i+0x13c>
 800721e:	3501      	adds	r5, #1
 8007220:	68e3      	ldr	r3, [r4, #12]
 8007222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007224:	1a9b      	subs	r3, r3, r2
 8007226:	42ab      	cmp	r3, r5
 8007228:	dcf0      	bgt.n	800720c <_printf_i+0x1f8>
 800722a:	e7e9      	b.n	8007200 <_printf_i+0x1ec>
 800722c:	2500      	movs	r5, #0
 800722e:	e7f7      	b.n	8007220 <_printf_i+0x20c>
 8007230:	08007991 	.word	0x08007991
 8007234:	080079a2 	.word	0x080079a2

08007238 <_read_r>:
 8007238:	b570      	push	{r4, r5, r6, lr}
 800723a:	0004      	movs	r4, r0
 800723c:	0008      	movs	r0, r1
 800723e:	0011      	movs	r1, r2
 8007240:	001a      	movs	r2, r3
 8007242:	2300      	movs	r3, #0
 8007244:	4d05      	ldr	r5, [pc, #20]	; (800725c <_read_r+0x24>)
 8007246:	602b      	str	r3, [r5, #0]
 8007248:	f7fa fcf4 	bl	8001c34 <_read>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d103      	bne.n	8007258 <_read_r+0x20>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d000      	beq.n	8007258 <_read_r+0x20>
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	bd70      	pop	{r4, r5, r6, pc}
 800725a:	46c0      	nop			; (mov r8, r8)
 800725c:	20000bb4 	.word	0x20000bb4

08007260 <__swbuf_r>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	0005      	movs	r5, r0
 8007264:	000e      	movs	r6, r1
 8007266:	0014      	movs	r4, r2
 8007268:	2800      	cmp	r0, #0
 800726a:	d004      	beq.n	8007276 <__swbuf_r+0x16>
 800726c:	6983      	ldr	r3, [r0, #24]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <__swbuf_r+0x16>
 8007272:	f7ff fa81 	bl	8006778 <__sinit>
 8007276:	4b22      	ldr	r3, [pc, #136]	; (8007300 <__swbuf_r+0xa0>)
 8007278:	429c      	cmp	r4, r3
 800727a:	d12e      	bne.n	80072da <__swbuf_r+0x7a>
 800727c:	686c      	ldr	r4, [r5, #4]
 800727e:	69a3      	ldr	r3, [r4, #24]
 8007280:	60a3      	str	r3, [r4, #8]
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	071b      	lsls	r3, r3, #28
 8007286:	d532      	bpl.n	80072ee <__swbuf_r+0x8e>
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d02f      	beq.n	80072ee <__swbuf_r+0x8e>
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	6922      	ldr	r2, [r4, #16]
 8007292:	b2f7      	uxtb	r7, r6
 8007294:	1a98      	subs	r0, r3, r2
 8007296:	6963      	ldr	r3, [r4, #20]
 8007298:	b2f6      	uxtb	r6, r6
 800729a:	4283      	cmp	r3, r0
 800729c:	dc05      	bgt.n	80072aa <__swbuf_r+0x4a>
 800729e:	0021      	movs	r1, r4
 80072a0:	0028      	movs	r0, r5
 80072a2:	f7ff f9b1 	bl	8006608 <_fflush_r>
 80072a6:	2800      	cmp	r0, #0
 80072a8:	d127      	bne.n	80072fa <__swbuf_r+0x9a>
 80072aa:	68a3      	ldr	r3, [r4, #8]
 80072ac:	3001      	adds	r0, #1
 80072ae:	3b01      	subs	r3, #1
 80072b0:	60a3      	str	r3, [r4, #8]
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	1c5a      	adds	r2, r3, #1
 80072b6:	6022      	str	r2, [r4, #0]
 80072b8:	701f      	strb	r7, [r3, #0]
 80072ba:	6963      	ldr	r3, [r4, #20]
 80072bc:	4283      	cmp	r3, r0
 80072be:	d004      	beq.n	80072ca <__swbuf_r+0x6a>
 80072c0:	89a3      	ldrh	r3, [r4, #12]
 80072c2:	07db      	lsls	r3, r3, #31
 80072c4:	d507      	bpl.n	80072d6 <__swbuf_r+0x76>
 80072c6:	2e0a      	cmp	r6, #10
 80072c8:	d105      	bne.n	80072d6 <__swbuf_r+0x76>
 80072ca:	0021      	movs	r1, r4
 80072cc:	0028      	movs	r0, r5
 80072ce:	f7ff f99b 	bl	8006608 <_fflush_r>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	d111      	bne.n	80072fa <__swbuf_r+0x9a>
 80072d6:	0030      	movs	r0, r6
 80072d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072da:	4b0a      	ldr	r3, [pc, #40]	; (8007304 <__swbuf_r+0xa4>)
 80072dc:	429c      	cmp	r4, r3
 80072de:	d101      	bne.n	80072e4 <__swbuf_r+0x84>
 80072e0:	68ac      	ldr	r4, [r5, #8]
 80072e2:	e7cc      	b.n	800727e <__swbuf_r+0x1e>
 80072e4:	4b08      	ldr	r3, [pc, #32]	; (8007308 <__swbuf_r+0xa8>)
 80072e6:	429c      	cmp	r4, r3
 80072e8:	d1c9      	bne.n	800727e <__swbuf_r+0x1e>
 80072ea:	68ec      	ldr	r4, [r5, #12]
 80072ec:	e7c7      	b.n	800727e <__swbuf_r+0x1e>
 80072ee:	0021      	movs	r1, r4
 80072f0:	0028      	movs	r0, r5
 80072f2:	f000 f80b 	bl	800730c <__swsetup_r>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d0c9      	beq.n	800728e <__swbuf_r+0x2e>
 80072fa:	2601      	movs	r6, #1
 80072fc:	4276      	negs	r6, r6
 80072fe:	e7ea      	b.n	80072d6 <__swbuf_r+0x76>
 8007300:	0800793c 	.word	0x0800793c
 8007304:	0800795c 	.word	0x0800795c
 8007308:	0800791c 	.word	0x0800791c

0800730c <__swsetup_r>:
 800730c:	4b37      	ldr	r3, [pc, #220]	; (80073ec <__swsetup_r+0xe0>)
 800730e:	b570      	push	{r4, r5, r6, lr}
 8007310:	681d      	ldr	r5, [r3, #0]
 8007312:	0006      	movs	r6, r0
 8007314:	000c      	movs	r4, r1
 8007316:	2d00      	cmp	r5, #0
 8007318:	d005      	beq.n	8007326 <__swsetup_r+0x1a>
 800731a:	69ab      	ldr	r3, [r5, #24]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d102      	bne.n	8007326 <__swsetup_r+0x1a>
 8007320:	0028      	movs	r0, r5
 8007322:	f7ff fa29 	bl	8006778 <__sinit>
 8007326:	4b32      	ldr	r3, [pc, #200]	; (80073f0 <__swsetup_r+0xe4>)
 8007328:	429c      	cmp	r4, r3
 800732a:	d10f      	bne.n	800734c <__swsetup_r+0x40>
 800732c:	686c      	ldr	r4, [r5, #4]
 800732e:	230c      	movs	r3, #12
 8007330:	5ee2      	ldrsh	r2, [r4, r3]
 8007332:	b293      	uxth	r3, r2
 8007334:	0711      	lsls	r1, r2, #28
 8007336:	d42d      	bmi.n	8007394 <__swsetup_r+0x88>
 8007338:	06d9      	lsls	r1, r3, #27
 800733a:	d411      	bmi.n	8007360 <__swsetup_r+0x54>
 800733c:	2309      	movs	r3, #9
 800733e:	2001      	movs	r0, #1
 8007340:	6033      	str	r3, [r6, #0]
 8007342:	3337      	adds	r3, #55	; 0x37
 8007344:	4313      	orrs	r3, r2
 8007346:	81a3      	strh	r3, [r4, #12]
 8007348:	4240      	negs	r0, r0
 800734a:	bd70      	pop	{r4, r5, r6, pc}
 800734c:	4b29      	ldr	r3, [pc, #164]	; (80073f4 <__swsetup_r+0xe8>)
 800734e:	429c      	cmp	r4, r3
 8007350:	d101      	bne.n	8007356 <__swsetup_r+0x4a>
 8007352:	68ac      	ldr	r4, [r5, #8]
 8007354:	e7eb      	b.n	800732e <__swsetup_r+0x22>
 8007356:	4b28      	ldr	r3, [pc, #160]	; (80073f8 <__swsetup_r+0xec>)
 8007358:	429c      	cmp	r4, r3
 800735a:	d1e8      	bne.n	800732e <__swsetup_r+0x22>
 800735c:	68ec      	ldr	r4, [r5, #12]
 800735e:	e7e6      	b.n	800732e <__swsetup_r+0x22>
 8007360:	075b      	lsls	r3, r3, #29
 8007362:	d513      	bpl.n	800738c <__swsetup_r+0x80>
 8007364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007366:	2900      	cmp	r1, #0
 8007368:	d008      	beq.n	800737c <__swsetup_r+0x70>
 800736a:	0023      	movs	r3, r4
 800736c:	3344      	adds	r3, #68	; 0x44
 800736e:	4299      	cmp	r1, r3
 8007370:	d002      	beq.n	8007378 <__swsetup_r+0x6c>
 8007372:	0030      	movs	r0, r6
 8007374:	f7ff fad8 	bl	8006928 <_free_r>
 8007378:	2300      	movs	r3, #0
 800737a:	6363      	str	r3, [r4, #52]	; 0x34
 800737c:	2224      	movs	r2, #36	; 0x24
 800737e:	89a3      	ldrh	r3, [r4, #12]
 8007380:	4393      	bics	r3, r2
 8007382:	81a3      	strh	r3, [r4, #12]
 8007384:	2300      	movs	r3, #0
 8007386:	6063      	str	r3, [r4, #4]
 8007388:	6923      	ldr	r3, [r4, #16]
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	2308      	movs	r3, #8
 800738e:	89a2      	ldrh	r2, [r4, #12]
 8007390:	4313      	orrs	r3, r2
 8007392:	81a3      	strh	r3, [r4, #12]
 8007394:	6923      	ldr	r3, [r4, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10b      	bne.n	80073b2 <__swsetup_r+0xa6>
 800739a:	21a0      	movs	r1, #160	; 0xa0
 800739c:	2280      	movs	r2, #128	; 0x80
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	0089      	lsls	r1, r1, #2
 80073a2:	0092      	lsls	r2, r2, #2
 80073a4:	400b      	ands	r3, r1
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d003      	beq.n	80073b2 <__swsetup_r+0xa6>
 80073aa:	0021      	movs	r1, r4
 80073ac:	0030      	movs	r0, r6
 80073ae:	f000 f84d 	bl	800744c <__smakebuf_r>
 80073b2:	220c      	movs	r2, #12
 80073b4:	5ea3      	ldrsh	r3, [r4, r2]
 80073b6:	2001      	movs	r0, #1
 80073b8:	001a      	movs	r2, r3
 80073ba:	b299      	uxth	r1, r3
 80073bc:	4002      	ands	r2, r0
 80073be:	4203      	tst	r3, r0
 80073c0:	d00f      	beq.n	80073e2 <__swsetup_r+0xd6>
 80073c2:	2200      	movs	r2, #0
 80073c4:	60a2      	str	r2, [r4, #8]
 80073c6:	6962      	ldr	r2, [r4, #20]
 80073c8:	4252      	negs	r2, r2
 80073ca:	61a2      	str	r2, [r4, #24]
 80073cc:	2000      	movs	r0, #0
 80073ce:	6922      	ldr	r2, [r4, #16]
 80073d0:	4282      	cmp	r2, r0
 80073d2:	d1ba      	bne.n	800734a <__swsetup_r+0x3e>
 80073d4:	060a      	lsls	r2, r1, #24
 80073d6:	d5b8      	bpl.n	800734a <__swsetup_r+0x3e>
 80073d8:	2240      	movs	r2, #64	; 0x40
 80073da:	4313      	orrs	r3, r2
 80073dc:	81a3      	strh	r3, [r4, #12]
 80073de:	3801      	subs	r0, #1
 80073e0:	e7b3      	b.n	800734a <__swsetup_r+0x3e>
 80073e2:	0788      	lsls	r0, r1, #30
 80073e4:	d400      	bmi.n	80073e8 <__swsetup_r+0xdc>
 80073e6:	6962      	ldr	r2, [r4, #20]
 80073e8:	60a2      	str	r2, [r4, #8]
 80073ea:	e7ef      	b.n	80073cc <__swsetup_r+0xc0>
 80073ec:	2000006c 	.word	0x2000006c
 80073f0:	0800793c 	.word	0x0800793c
 80073f4:	0800795c 	.word	0x0800795c
 80073f8:	0800791c 	.word	0x0800791c

080073fc <__swhatbuf_r>:
 80073fc:	b570      	push	{r4, r5, r6, lr}
 80073fe:	000e      	movs	r6, r1
 8007400:	001d      	movs	r5, r3
 8007402:	230e      	movs	r3, #14
 8007404:	5ec9      	ldrsh	r1, [r1, r3]
 8007406:	0014      	movs	r4, r2
 8007408:	b096      	sub	sp, #88	; 0x58
 800740a:	2900      	cmp	r1, #0
 800740c:	da08      	bge.n	8007420 <__swhatbuf_r+0x24>
 800740e:	220c      	movs	r2, #12
 8007410:	5eb3      	ldrsh	r3, [r6, r2]
 8007412:	2200      	movs	r2, #0
 8007414:	602a      	str	r2, [r5, #0]
 8007416:	061b      	lsls	r3, r3, #24
 8007418:	d411      	bmi.n	800743e <__swhatbuf_r+0x42>
 800741a:	2380      	movs	r3, #128	; 0x80
 800741c:	00db      	lsls	r3, r3, #3
 800741e:	e00f      	b.n	8007440 <__swhatbuf_r+0x44>
 8007420:	466a      	mov	r2, sp
 8007422:	f000 f863 	bl	80074ec <_fstat_r>
 8007426:	2800      	cmp	r0, #0
 8007428:	dbf1      	blt.n	800740e <__swhatbuf_r+0x12>
 800742a:	23f0      	movs	r3, #240	; 0xf0
 800742c:	9901      	ldr	r1, [sp, #4]
 800742e:	021b      	lsls	r3, r3, #8
 8007430:	4019      	ands	r1, r3
 8007432:	4b05      	ldr	r3, [pc, #20]	; (8007448 <__swhatbuf_r+0x4c>)
 8007434:	18c9      	adds	r1, r1, r3
 8007436:	424b      	negs	r3, r1
 8007438:	4159      	adcs	r1, r3
 800743a:	6029      	str	r1, [r5, #0]
 800743c:	e7ed      	b.n	800741a <__swhatbuf_r+0x1e>
 800743e:	2340      	movs	r3, #64	; 0x40
 8007440:	2000      	movs	r0, #0
 8007442:	6023      	str	r3, [r4, #0]
 8007444:	b016      	add	sp, #88	; 0x58
 8007446:	bd70      	pop	{r4, r5, r6, pc}
 8007448:	ffffe000 	.word	0xffffe000

0800744c <__smakebuf_r>:
 800744c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800744e:	2602      	movs	r6, #2
 8007450:	898b      	ldrh	r3, [r1, #12]
 8007452:	0005      	movs	r5, r0
 8007454:	000c      	movs	r4, r1
 8007456:	4233      	tst	r3, r6
 8007458:	d006      	beq.n	8007468 <__smakebuf_r+0x1c>
 800745a:	0023      	movs	r3, r4
 800745c:	3347      	adds	r3, #71	; 0x47
 800745e:	6023      	str	r3, [r4, #0]
 8007460:	6123      	str	r3, [r4, #16]
 8007462:	2301      	movs	r3, #1
 8007464:	6163      	str	r3, [r4, #20]
 8007466:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007468:	466a      	mov	r2, sp
 800746a:	ab01      	add	r3, sp, #4
 800746c:	f7ff ffc6 	bl	80073fc <__swhatbuf_r>
 8007470:	9900      	ldr	r1, [sp, #0]
 8007472:	0007      	movs	r7, r0
 8007474:	0028      	movs	r0, r5
 8007476:	f7ff fac3 	bl	8006a00 <_malloc_r>
 800747a:	2800      	cmp	r0, #0
 800747c:	d108      	bne.n	8007490 <__smakebuf_r+0x44>
 800747e:	220c      	movs	r2, #12
 8007480:	5ea3      	ldrsh	r3, [r4, r2]
 8007482:	059a      	lsls	r2, r3, #22
 8007484:	d4ef      	bmi.n	8007466 <__smakebuf_r+0x1a>
 8007486:	2203      	movs	r2, #3
 8007488:	4393      	bics	r3, r2
 800748a:	431e      	orrs	r6, r3
 800748c:	81a6      	strh	r6, [r4, #12]
 800748e:	e7e4      	b.n	800745a <__smakebuf_r+0xe>
 8007490:	4b0f      	ldr	r3, [pc, #60]	; (80074d0 <__smakebuf_r+0x84>)
 8007492:	62ab      	str	r3, [r5, #40]	; 0x28
 8007494:	2380      	movs	r3, #128	; 0x80
 8007496:	89a2      	ldrh	r2, [r4, #12]
 8007498:	6020      	str	r0, [r4, #0]
 800749a:	4313      	orrs	r3, r2
 800749c:	81a3      	strh	r3, [r4, #12]
 800749e:	9b00      	ldr	r3, [sp, #0]
 80074a0:	6120      	str	r0, [r4, #16]
 80074a2:	6163      	str	r3, [r4, #20]
 80074a4:	9b01      	ldr	r3, [sp, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00d      	beq.n	80074c6 <__smakebuf_r+0x7a>
 80074aa:	0028      	movs	r0, r5
 80074ac:	230e      	movs	r3, #14
 80074ae:	5ee1      	ldrsh	r1, [r4, r3]
 80074b0:	f000 f82e 	bl	8007510 <_isatty_r>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d006      	beq.n	80074c6 <__smakebuf_r+0x7a>
 80074b8:	2203      	movs	r2, #3
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	4393      	bics	r3, r2
 80074be:	001a      	movs	r2, r3
 80074c0:	2301      	movs	r3, #1
 80074c2:	4313      	orrs	r3, r2
 80074c4:	81a3      	strh	r3, [r4, #12]
 80074c6:	89a0      	ldrh	r0, [r4, #12]
 80074c8:	4307      	orrs	r7, r0
 80074ca:	81a7      	strh	r7, [r4, #12]
 80074cc:	e7cb      	b.n	8007466 <__smakebuf_r+0x1a>
 80074ce:	46c0      	nop			; (mov r8, r8)
 80074d0:	080066fd 	.word	0x080066fd

080074d4 <memchr>:
 80074d4:	b2c9      	uxtb	r1, r1
 80074d6:	1882      	adds	r2, r0, r2
 80074d8:	4290      	cmp	r0, r2
 80074da:	d101      	bne.n	80074e0 <memchr+0xc>
 80074dc:	2000      	movs	r0, #0
 80074de:	4770      	bx	lr
 80074e0:	7803      	ldrb	r3, [r0, #0]
 80074e2:	428b      	cmp	r3, r1
 80074e4:	d0fb      	beq.n	80074de <memchr+0xa>
 80074e6:	3001      	adds	r0, #1
 80074e8:	e7f6      	b.n	80074d8 <memchr+0x4>
	...

080074ec <_fstat_r>:
 80074ec:	2300      	movs	r3, #0
 80074ee:	b570      	push	{r4, r5, r6, lr}
 80074f0:	4d06      	ldr	r5, [pc, #24]	; (800750c <_fstat_r+0x20>)
 80074f2:	0004      	movs	r4, r0
 80074f4:	0008      	movs	r0, r1
 80074f6:	0011      	movs	r1, r2
 80074f8:	602b      	str	r3, [r5, #0]
 80074fa:	f7fa fbde 	bl	8001cba <_fstat>
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	d103      	bne.n	800750a <_fstat_r+0x1e>
 8007502:	682b      	ldr	r3, [r5, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d000      	beq.n	800750a <_fstat_r+0x1e>
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	bd70      	pop	{r4, r5, r6, pc}
 800750c:	20000bb4 	.word	0x20000bb4

08007510 <_isatty_r>:
 8007510:	2300      	movs	r3, #0
 8007512:	b570      	push	{r4, r5, r6, lr}
 8007514:	4d06      	ldr	r5, [pc, #24]	; (8007530 <_isatty_r+0x20>)
 8007516:	0004      	movs	r4, r0
 8007518:	0008      	movs	r0, r1
 800751a:	602b      	str	r3, [r5, #0]
 800751c:	f7fa fbdb 	bl	8001cd6 <_isatty>
 8007520:	1c43      	adds	r3, r0, #1
 8007522:	d103      	bne.n	800752c <_isatty_r+0x1c>
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d000      	beq.n	800752c <_isatty_r+0x1c>
 800752a:	6023      	str	r3, [r4, #0]
 800752c:	bd70      	pop	{r4, r5, r6, pc}
 800752e:	46c0      	nop			; (mov r8, r8)
 8007530:	20000bb4 	.word	0x20000bb4

08007534 <_init>:
 8007534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007536:	46c0      	nop			; (mov r8, r8)
 8007538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800753a:	bc08      	pop	{r3}
 800753c:	469e      	mov	lr, r3
 800753e:	4770      	bx	lr

08007540 <_fini>:
 8007540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007546:	bc08      	pop	{r3}
 8007548:	469e      	mov	lr, r3
 800754a:	4770      	bx	lr
 800754c:	0000      	movs	r0, r0
	...

08007550 <__FLASH_Program_Fast_veneer>:
 8007550:	b401      	push	{r0}
 8007552:	4802      	ldr	r0, [pc, #8]	; (800755c <__FLASH_Program_Fast_veneer+0xc>)
 8007554:	4684      	mov	ip, r0
 8007556:	bc01      	pop	{r0}
 8007558:	4760      	bx	ip
 800755a:	bf00      	nop
 800755c:	200000d1 	.word	0x200000d1

Disassembly of section .data:

20000000 <SERVER_BDADDRR>:
20000000:	04030201 00000605                       ........

20000008 <FIRST_SERVICE_UUID>:
20000008:	2b987b88 9d89fc6b b8ae48f3 984f3988     .{.+k....H...9O.

20000018 <FF_CHAR_UUID>:
20000018:	2b987b88 9d89fc6b b8ae48f3 984f3987     .{.+k....H...9O.

20000028 <CHAT_SERVICE_UUID>:
20000028:	2b987b88 9d89fc6b b8ae48f4 984f3988     .{.+k....H...9O.

20000038 <RX_CHAR_UUID>:
20000038:	2b987b88 9d89fc6b b8ae49f4 984f3988     .{.+k....I...9O.

20000048 <TX_CHAR_UUID>:
20000048:	2b987b88 9d89fc6b b8ae4af4 984f3988     .{.+k....J...9O.

20000058 <set_connectable>:
20000058:	                                         .

20000059 <consd>:
20000059:	                                         .

2000005a <next_ack>:
2000005a:	                                         ..

2000005c <StartPageAddress>:
2000005c:	08040000                                ....

20000060 <SystemCoreClock>:
20000060:	00f42400                                .$..

20000064 <uwTickPrio>:
20000064:	00000004                                ....

20000068 <uwTickFreq>:
20000068:	00000001                                ....

2000006c <_impure_ptr>:
2000006c:	20000070                                p.. 

20000070 <impure_data>:
20000070:	00000000 0800793c 0800795c 0800791c     ....<y..\y...y..
	...

200000d0 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200000d0:	b580      	push	{r7, lr}
200000d2:	b088      	sub	sp, #32
200000d4:	af00      	add	r7, sp, #0
200000d6:	6078      	str	r0, [r7, #4]
200000d8:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200000da:	231f      	movs	r3, #31
200000dc:	18fb      	adds	r3, r7, r3
200000de:	2200      	movs	r2, #0
200000e0:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200000e2:	687b      	ldr	r3, [r7, #4]
200000e4:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200000e6:	683b      	ldr	r3, [r7, #0]
200000e8:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200000ea:	4b1a      	ldr	r3, [pc, #104]	; (20000154 <FLASH_Program_Fast+0x84>)
200000ec:	695a      	ldr	r2, [r3, #20]
200000ee:	4b19      	ldr	r3, [pc, #100]	; (20000154 <FLASH_Program_Fast+0x84>)
200000f0:	2180      	movs	r1, #128	; 0x80
200000f2:	02c9      	lsls	r1, r1, #11
200000f4:	430a      	orrs	r2, r1
200000f6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000f8:	f3ef 8310 	mrs	r3, PRIMASK
200000fc:	60fb      	str	r3, [r7, #12]
  return(result);
200000fe:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000100:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000102:	b672      	cpsid	i
}
20000104:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000106:	e00f      	b.n	20000128 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000108:	697a      	ldr	r2, [r7, #20]
2000010a:	69bb      	ldr	r3, [r7, #24]
2000010c:	6812      	ldr	r2, [r2, #0]
2000010e:	601a      	str	r2, [r3, #0]
    src += 4U;
20000110:	697b      	ldr	r3, [r7, #20]
20000112:	3304      	adds	r3, #4
20000114:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000116:	69bb      	ldr	r3, [r7, #24]
20000118:	3304      	adds	r3, #4
2000011a:	61bb      	str	r3, [r7, #24]
    index++;
2000011c:	211f      	movs	r1, #31
2000011e:	187b      	adds	r3, r7, r1
20000120:	781a      	ldrb	r2, [r3, #0]
20000122:	187b      	adds	r3, r7, r1
20000124:	3201      	adds	r2, #1
20000126:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000128:	231f      	movs	r3, #31
2000012a:	18fb      	adds	r3, r7, r3
2000012c:	781b      	ldrb	r3, [r3, #0]
2000012e:	2b3f      	cmp	r3, #63	; 0x3f
20000130:	d9ea      	bls.n	20000108 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
20000132:	46c0      	nop			; (mov r8, r8)
20000134:	4b07      	ldr	r3, [pc, #28]	; (20000154 <FLASH_Program_Fast+0x84>)
20000136:	691a      	ldr	r2, [r3, #16]
20000138:	23c0      	movs	r3, #192	; 0xc0
2000013a:	029b      	lsls	r3, r3, #10
2000013c:	4013      	ands	r3, r2
2000013e:	d1f9      	bne.n	20000134 <FLASH_Program_Fast+0x64>
20000140:	693b      	ldr	r3, [r7, #16]
20000142:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000144:	68bb      	ldr	r3, [r7, #8]
20000146:	f383 8810 	msr	PRIMASK, r3
}
2000014a:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
2000014c:	46c0      	nop			; (mov r8, r8)
2000014e:	46bd      	mov	sp, r7
20000150:	b008      	add	sp, #32
20000152:	bd80      	pop	{r7, pc}
20000154:	40022000 	.word	0x40022000
