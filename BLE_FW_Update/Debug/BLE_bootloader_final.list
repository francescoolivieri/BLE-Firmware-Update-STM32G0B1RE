
BLE_bootloader_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007270  080000c0  080000c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08007330  08007330  00017330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800776c  0800776c  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  0800776c  0800776c  0001776c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007774  08007774  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007774  08007774  00017774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007778  08007778  00017778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  0800777c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000a58  20000140  080078b8  00020140  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b98  080078b8  00020b98  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b659  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041a7  00000000  00000000  0003b7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  0003f968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  00040d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000216f7  00000000  00000000  00042028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b6b5  00000000  00000000  0006371f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bde7d  00000000  00000000  0007edd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013cc51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f90  00000000  00000000  0013cca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000140 	.word	0x20000140
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007308 	.word	0x08007308

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000144 	.word	0x20000144
 8000104:	08007308 	.word	0x08007308

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	469b      	mov	fp, r3
 800048e:	d433      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 8000490:	465a      	mov	r2, fp
 8000492:	4653      	mov	r3, sl
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83a      	bhi.n	800051a <__udivmoddi4+0xc2>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e078      	b.n	800059c <__udivmoddi4+0x144>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e075      	b.n	80005a2 <__udivmoddi4+0x14a>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e028      	b.n	8000522 <__udivmoddi4+0xca>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	2320      	movs	r3, #32
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	4652      	mov	r2, sl
 8000500:	40da      	lsrs	r2, r3
 8000502:	4641      	mov	r1, r8
 8000504:	0013      	movs	r3, r2
 8000506:	464a      	mov	r2, r9
 8000508:	408a      	lsls	r2, r1
 800050a:	0017      	movs	r7, r2
 800050c:	4642      	mov	r2, r8
 800050e:	431f      	orrs	r7, r3
 8000510:	4653      	mov	r3, sl
 8000512:	4093      	lsls	r3, r2
 8000514:	001e      	movs	r6, r3
 8000516:	42af      	cmp	r7, r5
 8000518:	d9c4      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051a:	2200      	movs	r2, #0
 800051c:	2300      	movs	r3, #0
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	4643      	mov	r3, r8
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0d9      	beq.n	80004dc <__udivmoddi4+0x84>
 8000528:	07fb      	lsls	r3, r7, #31
 800052a:	0872      	lsrs	r2, r6, #1
 800052c:	431a      	orrs	r2, r3
 800052e:	4646      	mov	r6, r8
 8000530:	087b      	lsrs	r3, r7, #1
 8000532:	e00e      	b.n	8000552 <__udivmoddi4+0xfa>
 8000534:	42ab      	cmp	r3, r5
 8000536:	d101      	bne.n	800053c <__udivmoddi4+0xe4>
 8000538:	42a2      	cmp	r2, r4
 800053a:	d80c      	bhi.n	8000556 <__udivmoddi4+0xfe>
 800053c:	1aa4      	subs	r4, r4, r2
 800053e:	419d      	sbcs	r5, r3
 8000540:	2001      	movs	r0, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2100      	movs	r1, #0
 8000548:	3e01      	subs	r6, #1
 800054a:	1824      	adds	r4, r4, r0
 800054c:	414d      	adcs	r5, r1
 800054e:	2e00      	cmp	r6, #0
 8000550:	d006      	beq.n	8000560 <__udivmoddi4+0x108>
 8000552:	42ab      	cmp	r3, r5
 8000554:	d9ee      	bls.n	8000534 <__udivmoddi4+0xdc>
 8000556:	3e01      	subs	r6, #1
 8000558:	1924      	adds	r4, r4, r4
 800055a:	416d      	adcs	r5, r5
 800055c:	2e00      	cmp	r6, #0
 800055e:	d1f8      	bne.n	8000552 <__udivmoddi4+0xfa>
 8000560:	9800      	ldr	r0, [sp, #0]
 8000562:	9901      	ldr	r1, [sp, #4]
 8000564:	465b      	mov	r3, fp
 8000566:	1900      	adds	r0, r0, r4
 8000568:	4169      	adcs	r1, r5
 800056a:	2b00      	cmp	r3, #0
 800056c:	db24      	blt.n	80005b8 <__udivmoddi4+0x160>
 800056e:	002b      	movs	r3, r5
 8000570:	465a      	mov	r2, fp
 8000572:	4644      	mov	r4, r8
 8000574:	40d3      	lsrs	r3, r2
 8000576:	002a      	movs	r2, r5
 8000578:	40e2      	lsrs	r2, r4
 800057a:	001c      	movs	r4, r3
 800057c:	465b      	mov	r3, fp
 800057e:	0015      	movs	r5, r2
 8000580:	2b00      	cmp	r3, #0
 8000582:	db2a      	blt.n	80005da <__udivmoddi4+0x182>
 8000584:	0026      	movs	r6, r4
 8000586:	409e      	lsls	r6, r3
 8000588:	0033      	movs	r3, r6
 800058a:	0026      	movs	r6, r4
 800058c:	4647      	mov	r7, r8
 800058e:	40be      	lsls	r6, r7
 8000590:	0032      	movs	r2, r6
 8000592:	1a80      	subs	r0, r0, r2
 8000594:	4199      	sbcs	r1, r3
 8000596:	9000      	str	r0, [sp, #0]
 8000598:	9101      	str	r1, [sp, #4]
 800059a:	e79f      	b.n	80004dc <__udivmoddi4+0x84>
 800059c:	42a3      	cmp	r3, r4
 800059e:	d8bc      	bhi.n	800051a <__udivmoddi4+0xc2>
 80005a0:	e783      	b.n	80004aa <__udivmoddi4+0x52>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	2200      	movs	r2, #0
 80005ac:	9100      	str	r1, [sp, #0]
 80005ae:	9201      	str	r2, [sp, #4]
 80005b0:	2201      	movs	r2, #1
 80005b2:	40da      	lsrs	r2, r3
 80005b4:	9201      	str	r2, [sp, #4]
 80005b6:	e786      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	002a      	movs	r2, r5
 80005c0:	4646      	mov	r6, r8
 80005c2:	409a      	lsls	r2, r3
 80005c4:	0023      	movs	r3, r4
 80005c6:	40f3      	lsrs	r3, r6
 80005c8:	4644      	mov	r4, r8
 80005ca:	4313      	orrs	r3, r2
 80005cc:	002a      	movs	r2, r5
 80005ce:	40e2      	lsrs	r2, r4
 80005d0:	001c      	movs	r4, r3
 80005d2:	465b      	mov	r3, fp
 80005d4:	0015      	movs	r5, r2
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	dad4      	bge.n	8000584 <__udivmoddi4+0x12c>
 80005da:	4642      	mov	r2, r8
 80005dc:	002f      	movs	r7, r5
 80005de:	2320      	movs	r3, #32
 80005e0:	0026      	movs	r6, r4
 80005e2:	4097      	lsls	r7, r2
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	40de      	lsrs	r6, r3
 80005e8:	003b      	movs	r3, r7
 80005ea:	4333      	orrs	r3, r6
 80005ec:	e7cd      	b.n	800058a <__udivmoddi4+0x132>
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	0008      	movs	r0, r1
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			; (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	; (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b089      	sub	sp, #36	; 0x24
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <HCI_TL_SPI_Init+0xa8>)
 800064e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <HCI_TL_SPI_Init+0xa8>)
 8000652:	2101      	movs	r1, #1
 8000654:	430a      	orrs	r2, r1
 8000656:	635a      	str	r2, [r3, #52]	; 0x34
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <HCI_TL_SPI_Init+0xa8>)
 800065a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065c:	2201      	movs	r2, #1
 800065e:	4013      	ands	r3, r2
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000664:	240c      	movs	r4, #12
 8000666:	193b      	adds	r3, r7, r4
 8000668:	2201      	movs	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2288      	movs	r2, #136	; 0x88
 8000670:	0352      	lsls	r2, r2, #13
 8000672:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	193b      	adds	r3, r7, r4
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800067a:	193a      	adds	r2, r7, r4
 800067c:	23a0      	movs	r3, #160	; 0xa0
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	0011      	movs	r1, r2
 8000682:	0018      	movs	r0, r3
 8000684:	f001 ffc0 	bl	8002608 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000688:	0021      	movs	r1, r4
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	000c      	movs	r4, r1
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2201      	movs	r2, #1
 8000698:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	193b      	adds	r3, r7, r4
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80006a6:	193a      	adds	r2, r7, r4
 80006a8:	23a0      	movs	r3, #160	; 0xa0
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	0011      	movs	r1, r2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f001 ffaa 	bl	8002608 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80006b4:	0021      	movs	r1, r4
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2202      	movs	r2, #2
 80006ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2201      	movs	r2, #1
 80006c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80006ce:	187a      	adds	r2, r7, r1
 80006d0:	23a0      	movs	r3, #160	; 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f001 ff96 	bl	8002608 <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 80006dc:	f001 f8d0 	bl	8001880 <BSP_SPI1_Init>
 80006e0:	0003      	movs	r3, r0
}
 80006e2:	0018      	movs	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b009      	add	sp, #36	; 0x24
 80006e8:	bd90      	pop	{r4, r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40021000 	.word	0x40021000

080006f0 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80006f4:	23a0      	movs	r3, #160	; 0xa0
 80006f6:	05db      	lsls	r3, r3, #23
 80006f8:	2101      	movs	r1, #1
 80006fa:	0018      	movs	r0, r3
 80006fc:	f002 f8f0 	bl	80028e0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000700:	23a0      	movs	r3, #160	; 0xa0
 8000702:	05db      	lsls	r3, r3, #23
 8000704:	2102      	movs	r1, #2
 8000706:	0018      	movs	r0, r3
 8000708:	f002 f8ea 	bl	80028e0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	005a      	lsls	r2, r3, #1
 8000710:	23a0      	movs	r3, #160	; 0xa0
 8000712:	05db      	lsls	r3, r3, #23
 8000714:	0011      	movs	r1, r2
 8000716:	0018      	movs	r0, r3
 8000718:	f002 f8e2 	bl	80028e0 <HAL_GPIO_DeInit>
  return 0;
 800071c:	2300      	movs	r3, #0
}
 800071e:	0018      	movs	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000728:	23a0      	movs	r3, #160	; 0xa0
 800072a:	05db      	lsls	r3, r3, #23
 800072c:	2201      	movs	r2, #1
 800072e:	2102      	movs	r1, #2
 8000730:	0018      	movs	r0, r3
 8000732:	f002 f9ca 	bl	8002aca <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000736:	2380      	movs	r3, #128	; 0x80
 8000738:	0059      	lsls	r1, r3, #1
 800073a:	23a0      	movs	r3, #160	; 0xa0
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	2200      	movs	r2, #0
 8000740:	0018      	movs	r0, r3
 8000742:	f002 f9c2 	bl	8002aca <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000746:	2005      	movs	r0, #5
 8000748:	f001 fbdc 	bl	8001f04 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	0059      	lsls	r1, r3, #1
 8000750:	23a0      	movs	r3, #160	; 0xa0
 8000752:	05db      	lsls	r3, r3, #23
 8000754:	2201      	movs	r2, #1
 8000756:	0018      	movs	r0, r3
 8000758:	f002 f9b7 	bl	8002aca <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800075c:	2005      	movs	r0, #5
 800075e:	f001 fbd1 	bl	8001f04 <HAL_Delay>
  return 0;
 8000762:	2300      	movs	r3, #0
}
 8000764:	0018      	movs	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800076c:	b5b0      	push	{r4, r5, r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	000a      	movs	r2, r1
 8000776:	1cbb      	adds	r3, r7, #2
 8000778:	801a      	strh	r2, [r3, #0]
  uint16_t byte_count;
  uint8_t len = 0;
 800077a:	231d      	movs	r3, #29
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
  uint8_t char_ff = 0xff;
 8000782:	231c      	movs	r3, #28
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	22ff      	movs	r2, #255	; 0xff
 8000788:	701a      	strb	r2, [r3, #0]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800078a:	2514      	movs	r5, #20
 800078c:	197b      	adds	r3, r7, r5
 800078e:	4a32      	ldr	r2, [pc, #200]	; (8000858 <HCI_TL_SPI_Receive+0xec>)
 8000790:	6811      	ldr	r1, [r2, #0]
 8000792:	6019      	str	r1, [r3, #0]
 8000794:	7912      	ldrb	r2, [r2, #4]
 8000796:	711a      	strb	r2, [r3, #4]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000798:	23a0      	movs	r3, #160	; 0xa0
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	2200      	movs	r2, #0
 800079e:	2102      	movs	r1, #2
 80007a0:	0018      	movs	r0, r3
 80007a2:	f002 f992 	bl	8002aca <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80007a6:	240c      	movs	r4, #12
 80007a8:	1939      	adds	r1, r7, r4
 80007aa:	197b      	adds	r3, r7, r5
 80007ac:	2205      	movs	r2, #5
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 f896 	bl	80018e0 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 80007b4:	0021      	movs	r1, r4
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d13d      	bne.n	800083a <HCI_TL_SPI_Receive+0xce>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	791b      	ldrb	r3, [r3, #4]
 80007c2:	021b      	lsls	r3, r3, #8
 80007c4:	b21a      	sxth	r2, r3
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	78db      	ldrb	r3, [r3, #3]
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	4313      	orrs	r3, r2
 80007ce:	b21a      	sxth	r2, r3
 80007d0:	211e      	movs	r1, #30
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	801a      	strh	r2, [r3, #0]

    if(byte_count > 0)
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d02d      	beq.n	800083a <HCI_TL_SPI_Receive+0xce>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 80007de:	187a      	adds	r2, r7, r1
 80007e0:	1cbb      	adds	r3, r7, #2
 80007e2:	8812      	ldrh	r2, [r2, #0]
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d903      	bls.n	80007f2 <HCI_TL_SPI_Receive+0x86>
        byte_count = size;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	1cba      	adds	r2, r7, #2
 80007ee:	8812      	ldrh	r2, [r2, #0]
 80007f0:	801a      	strh	r2, [r3, #0]
      }

      for(len = 0; len < byte_count; len++)
 80007f2:	231d      	movs	r3, #29
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
 80007fa:	e015      	b.n	8000828 <HCI_TL_SPI_Receive+0xbc>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80007fc:	241b      	movs	r4, #27
 80007fe:	1939      	adds	r1, r7, r4
 8000800:	231c      	movs	r3, #28
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	2201      	movs	r2, #1
 8000806:	0018      	movs	r0, r3
 8000808:	f001 f86a 	bl	80018e0 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 800080c:	211d      	movs	r1, #29
 800080e:	187b      	adds	r3, r7, r1
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	18d3      	adds	r3, r2, r3
 8000816:	193a      	adds	r2, r7, r4
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	b2d2      	uxtb	r2, r2
 800081c:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 800081e:	187b      	adds	r3, r7, r1
 8000820:	781a      	ldrb	r2, [r3, #0]
 8000822:	187b      	adds	r3, r7, r1
 8000824:	3201      	adds	r2, #1
 8000826:	701a      	strb	r2, [r3, #0]
 8000828:	231d      	movs	r3, #29
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b29b      	uxth	r3, r3
 8000830:	221e      	movs	r2, #30
 8000832:	18ba      	adds	r2, r7, r2
 8000834:	8812      	ldrh	r2, [r2, #0]
 8000836:	429a      	cmp	r2, r3
 8000838:	d8e0      	bhi.n	80007fc <HCI_TL_SPI_Receive+0x90>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800083a:	23a0      	movs	r3, #160	; 0xa0
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	2201      	movs	r2, #1
 8000840:	2102      	movs	r1, #2
 8000842:	0018      	movs	r0, r3
 8000844:	f002 f941 	bl	8002aca <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8000848:	231d      	movs	r3, #29
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	781b      	ldrb	r3, [r3, #0]
}
 800084e:	0018      	movs	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	b008      	add	sp, #32
 8000854:	bdb0      	pop	{r4, r5, r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	08007330 	.word	0x08007330

0800085c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b089      	sub	sp, #36	; 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	000a      	movs	r2, r1
 8000866:	1cbb      	adds	r3, r7, #2
 8000868:	801a      	strh	r2, [r3, #0]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800086a:	2310      	movs	r3, #16
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	4a27      	ldr	r2, [pc, #156]	; (800090c <HCI_TL_SPI_Send+0xb0>)
 8000870:	6811      	ldr	r1, [r2, #0]
 8000872:	6019      	str	r1, [r3, #0]
 8000874:	7912      	ldrb	r2, [r2, #4]
 8000876:	711a      	strb	r2, [r3, #4]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000878:	f001 fb3a 	bl	8001ef0 <HAL_GetTick>
 800087c:	0003      	movs	r3, r0
 800087e:	61bb      	str	r3, [r7, #24]

  do
  {
    result = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000884:	23a0      	movs	r3, #160	; 0xa0
 8000886:	05db      	lsls	r3, r3, #23
 8000888:	2200      	movs	r2, #0
 800088a:	2102      	movs	r1, #2
 800088c:	0018      	movs	r0, r3
 800088e:	f002 f91c 	bl	8002aca <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000892:	2408      	movs	r4, #8
 8000894:	1939      	adds	r1, r7, r4
 8000896:	2310      	movs	r3, #16
 8000898:	18fb      	adds	r3, r7, r3
 800089a:	2205      	movs	r2, #5
 800089c:	0018      	movs	r0, r3
 800089e:	f001 f81f 	bl	80018e0 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 80008a2:	0022      	movs	r2, r4
 80008a4:	18bb      	adds	r3, r7, r2
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d112      	bne.n	80008d2 <HCI_TL_SPI_Send+0x76>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80008ac:	18bb      	adds	r3, r7, r2
 80008ae:	785b      	ldrb	r3, [r3, #1]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	1cba      	adds	r2, r7, #2
 80008b4:	8812      	ldrh	r2, [r2, #0]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d807      	bhi.n	80008ca <HCI_TL_SPI_Send+0x6e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80008ba:	1cbb      	adds	r3, r7, #2
 80008bc:	881a      	ldrh	r2, [r3, #0]
 80008be:	4914      	ldr	r1, [pc, #80]	; (8000910 <HCI_TL_SPI_Send+0xb4>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	0018      	movs	r0, r3
 80008c4:	f001 f80c 	bl	80018e0 <BSP_SPI1_SendRecv>
 80008c8:	e006      	b.n	80008d8 <HCI_TL_SPI_Send+0x7c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	425b      	negs	r3, r3
 80008ce:	61fb      	str	r3, [r7, #28]
 80008d0:	e002      	b.n	80008d8 <HCI_TL_SPI_Send+0x7c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	425b      	negs	r3, r3
 80008d6:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80008d8:	23a0      	movs	r3, #160	; 0xa0
 80008da:	05db      	lsls	r3, r3, #23
 80008dc:	2201      	movs	r2, #1
 80008de:	2102      	movs	r1, #2
 80008e0:	0018      	movs	r0, r3
 80008e2:	f002 f8f2 	bl	8002aca <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80008e6:	f001 fb03 	bl	8001ef0 <HAL_GetTick>
 80008ea:	0002      	movs	r2, r0
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d903      	bls.n	80008fc <HCI_TL_SPI_Send+0xa0>
    {
      result = -3;
 80008f4:	2303      	movs	r3, #3
 80008f6:	425b      	negs	r3, r3
 80008f8:	61fb      	str	r3, [r7, #28]
      break;
 80008fa:	e002      	b.n	8000902 <HCI_TL_SPI_Send+0xa6>
    }
  } while(result < 0);
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	dbbe      	blt.n	8000880 <HCI_TL_SPI_Send+0x24>

  return result;
 8000902:	69fb      	ldr	r3, [r7, #28]
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	b009      	add	sp, #36	; 0x24
 800090a:	bd90      	pop	{r4, r7, pc}
 800090c:	08007338 	.word	0x08007338
 8000910:	20000168 	.word	0x20000168

08000914 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000918:	23a0      	movs	r3, #160	; 0xa0
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	2101      	movs	r1, #1
 800091e:	0018      	movs	r0, r3
 8000920:	f002 f8b6 	bl	8002a90 <HAL_GPIO_ReadPin>
 8000924:	0003      	movs	r3, r0
 8000926:	3b01      	subs	r3, #1
 8000928:	425a      	negs	r2, r3
 800092a:	4153      	adcs	r3, r2
 800092c:	b2db      	uxtb	r3, r3
}
 800092e:	0018      	movs	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4a16      	ldr	r2, [pc, #88]	; (8000998 <hci_tl_lowlevel_init+0x64>)
 800093e:	601a      	str	r2, [r3, #0]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	4a16      	ldr	r2, [pc, #88]	; (800099c <hci_tl_lowlevel_init+0x68>)
 8000944:	605a      	str	r2, [r3, #4]
  fops.Send    = HCI_TL_SPI_Send;
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <hci_tl_lowlevel_init+0x6c>)
 800094a:	611a      	str	r2, [r3, #16]
  fops.Receive = HCI_TL_SPI_Receive;
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <hci_tl_lowlevel_init+0x70>)
 8000950:	60da      	str	r2, [r3, #12]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <hci_tl_lowlevel_init+0x74>)
 8000956:	609a      	str	r2, [r3, #8]
  fops.GetTick = BSP_GetTick;
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4a14      	ldr	r2, [pc, #80]	; (80009ac <hci_tl_lowlevel_init+0x78>)
 800095c:	619a      	str	r2, [r3, #24]

  hci_register_io_bus (&fops);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	0018      	movs	r0, r3
 8000962:	f005 f9c5 	bl	8005cf0 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8000966:	23c0      	movs	r3, #192	; 0xc0
 8000968:	04da      	lsls	r2, r3, #19
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <hci_tl_lowlevel_init+0x7c>)
 800096c:	0011      	movs	r1, r2
 800096e:	0018      	movs	r0, r3
 8000970:	f001 fbfc 	bl	800216c <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000974:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <hci_tl_lowlevel_init+0x80>)
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <hci_tl_lowlevel_init+0x7c>)
 8000978:	2100      	movs	r1, #0
 800097a:	0018      	movs	r0, r3
 800097c:	f001 fbc4 	bl	8002108 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2005      	movs	r0, #5
 8000986:	f001 fb8d 	bl	80020a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800098a:	2005      	movs	r0, #5
 800098c:	f001 fb9f 	bl	80020ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b008      	add	sp, #32
 8000996:	bd80      	pop	{r7, pc}
 8000998:	08000645 	.word	0x08000645
 800099c:	080006f1 	.word	0x080006f1
 80009a0:	0800085d 	.word	0x0800085d
 80009a4:	0800076d 	.word	0x0800076d
 80009a8:	08000725 	.word	0x08000725
 80009ac:	08001921 	.word	0x08001921
 80009b0:	2000015c 	.word	0x2000015c
 80009b4:	080009b9 	.word	0x080009b9

080009b8 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80009bc:	e004      	b.n	80009c8 <hci_tl_lowlevel_isr+0x10>
  {
    if (hci_notify_asynch_evt(NULL))
 80009be:	2000      	movs	r0, #0
 80009c0:	f005 fb14 	bl	8005fec <hci_notify_asynch_evt>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d104      	bne.n	80009d2 <hci_tl_lowlevel_isr+0x1a>
  while(IsDataAvailable())
 80009c8:	f7ff ffa4 	bl	8000914 <IsDataAvailable>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d1f6      	bne.n	80009be <hci_tl_lowlevel_isr+0x6>
 80009d0:	e000      	b.n	80009d4 <hci_tl_lowlevel_isr+0x1c>
    {
      return;
 80009d2:	46c0      	nop			; (mov r8, r8)
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <BlueNRG_Init>:
extern uint8_t notification_enabled;

/*
 * Initialization task
 */
void BlueNRG_Init(void){
 80009d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	af02      	add	r7, sp, #8
	tBleStatus ret;
	uint8_t bdaddr[BDADDR_SIZE];
	const char *name = "MyBLE";
 80009de:	4b47      	ldr	r3, [pc, #284]	; (8000afc <BlueNRG_Init+0x124>)
 80009e0:	617b      	str	r3, [r7, #20]

	uint16_t service_handle, dev_name_char_handle, appearance_char_handle; // handlers of GAP service

	BLUENRG_memcpy(bdaddr, SERVER_BDADDRR, sizeof(SERVER_BDADDRR));
 80009e2:	250c      	movs	r5, #12
 80009e4:	197b      	adds	r3, r7, r5
 80009e6:	4a46      	ldr	r2, [pc, #280]	; (8000b00 <BlueNRG_Init+0x128>)
 80009e8:	6811      	ldr	r1, [r2, #0]
 80009ea:	6019      	str	r1, [r3, #0]
 80009ec:	8892      	ldrh	r2, [r2, #4]
 80009ee:	809a      	strh	r2, [r3, #4]

	/* Init HCI */
	hci_init(HCI_Event_CB,  NULL);
 80009f0:	4b44      	ldr	r3, [pc, #272]	; (8000b04 <BlueNRG_Init+0x12c>)
 80009f2:	2100      	movs	r1, #0
 80009f4:	0018      	movs	r0, r3
 80009f6:	f005 f92f 	bl	8005c58 <hci_init>

	/* Reset HCI */
	hci_reset();
 80009fa:	f005 f80c 	bl	8005a16 <hci_reset>
	HAL_Delay(100);
 80009fe:	2064      	movs	r0, #100	; 0x64
 8000a00:	f001 fa80 	bl	8001f04 <HAL_Delay>

	printf("Start initialization... \n\r");
 8000a04:	4b40      	ldr	r3, [pc, #256]	; (8000b08 <BlueNRG_Init+0x130>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f005 ff5a 	bl	80068c0 <iprintf>
	fflush(stdout);
 8000a0c:	4b3f      	ldr	r3, [pc, #252]	; (8000b0c <BlueNRG_Init+0x134>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	0018      	movs	r0, r3
 8000a14:	f005 fd22 	bl	800645c <fflush>

	/* Configure device address */
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8000a18:	2613      	movs	r6, #19
 8000a1a:	19bc      	adds	r4, r7, r6
 8000a1c:	197b      	adds	r3, r7, r5
 8000a1e:	001a      	movs	r2, r3
 8000a20:	2106      	movs	r1, #6
 8000a22:	2000      	movs	r0, #0
 8000a24:	f004 ff8e 	bl	8005944 <aci_hal_write_config_data>
 8000a28:	0003      	movs	r3, r0
 8000a2a:	7023      	strb	r3, [r4, #0]

	if(ret != BLE_STATUS_SUCCESS){
 8000a2c:	19bb      	adds	r3, r7, r6
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d003      	beq.n	8000a3c <BlueNRG_Init+0x64>
		printf("Failed to set Public Address \n\r");
 8000a34:	4b36      	ldr	r3, [pc, #216]	; (8000b10 <BlueNRG_Init+0x138>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f005 ff42 	bl	80068c0 <iprintf>
	}

	/* Initialize GATT server */
	aci_gatt_init();
 8000a3c:	f004 fd36 	bl	80054ac <aci_gatt_init>
	if(ret != BLE_STATUS_SUCCESS){
 8000a40:	2313      	movs	r3, #19
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <BlueNRG_Init+0x7a>
		printf("Failed to GATT Initialization \n\r");
 8000a4a:	4b32      	ldr	r3, [pc, #200]	; (8000b14 <BlueNRG_Init+0x13c>)
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f005 ff37 	bl	80068c0 <iprintf>
	}

	/* Initialize GAP service */
	ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle); //2nd arg -> privacy (0: no, 1: yes)
 8000a52:	2513      	movs	r5, #19
 8000a54:	197c      	adds	r4, r7, r5
 8000a56:	230a      	movs	r3, #10
 8000a58:	18fa      	adds	r2, r7, r3
 8000a5a:	1dbb      	adds	r3, r7, #6
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	2308      	movs	r3, #8
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	0013      	movs	r3, r2
 8000a66:	2207      	movs	r2, #7
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f004 fb98 	bl	80051a0 <aci_gap_init_IDB05A1>
 8000a70:	0003      	movs	r3, r0
 8000a72:	7023      	strb	r3, [r4, #0]
	//ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle,  &appearance_char_handle);

	if(ret != BLE_STATUS_SUCCESS){
 8000a74:	197b      	adds	r3, r7, r5
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d003      	beq.n	8000a84 <BlueNRG_Init+0xac>
		printf("Failed to Initialize GAP Service\n\r");
 8000a7c:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <BlueNRG_Init+0x140>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f005 ff1e 	bl	80068c0 <iprintf>
	}


	/* Update characteristics */
	ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8000a84:	230a      	movs	r3, #10
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	881d      	ldrh	r5, [r3, #0]
 8000a8a:	2308      	movs	r3, #8
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	881e      	ldrh	r6, [r3, #0]
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	0018      	movs	r0, r3
 8000a94:	f7ff fb38 	bl	8000108 <strlen>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	2313      	movs	r3, #19
 8000a9e:	18fc      	adds	r4, r7, r3
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	0013      	movs	r3, r2
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	0031      	movs	r1, r6
 8000aaa:	0028      	movs	r0, r5
 8000aac:	f004 fea6 	bl	80057fc <aci_gatt_update_char_value>
 8000ab0:	0003      	movs	r3, r0
 8000ab2:	7023      	strb	r3, [r4, #0]
	if(ret != BLE_STATUS_SUCCESS){
 8000ab4:	2213      	movs	r2, #19
 8000ab6:	18bb      	adds	r3, r7, r2
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d006      	beq.n	8000acc <BlueNRG_Init+0xf4>
		printf("Failed to Update Characteristics %d\n\r", ret);
 8000abe:	18bb      	adds	r3, r7, r2
 8000ac0:	781a      	ldrb	r2, [r3, #0]
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <BlueNRG_Init+0x144>)
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f005 fefa 	bl	80068c0 <iprintf>
	}

	/* Add custom service */
	ret = Add_FWupdate_Service();
 8000acc:	2513      	movs	r5, #19
 8000ace:	197c      	adds	r4, r7, r5
 8000ad0:	f000 fcb6 	bl	8001440 <Add_FWupdate_Service>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	7023      	strb	r3, [r4, #0]
	if(ret != BLE_STATUS_SUCCESS){
 8000ad8:	197b      	adds	r3, r7, r5
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <BlueNRG_Init+0x110>
		printf("Failed to Add Service\n\r");
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <BlueNRG_Init+0x148>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f005 feec 	bl	80068c0 <iprintf>
	}

	fflush(stdout);
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <BlueNRG_Init+0x134>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	0018      	movs	r0, r3
 8000af0:	f005 fcb4 	bl	800645c <fflush>
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b007      	add	sp, #28
 8000afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000afc:	08007340 	.word	0x08007340
 8000b00:	20000000 	.word	0x20000000
 8000b04:	080016e5 	.word	0x080016e5
 8000b08:	08007348 	.word	0x08007348
 8000b0c:	20000050 	.word	0x20000050
 8000b10:	08007364 	.word	0x08007364
 8000b14:	08007384 	.word	0x08007384
 8000b18:	080073a8 	.word	0x080073a8
 8000b1c:	080073cc 	.word	0x080073cc
 8000b20:	080073f4 	.word	0x080073f4

08000b24 <BlueNRG_Process>:


/*
 * Background task
 */
void BlueNRG_Process(void){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	if(set_connectable){
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <BlueNRG_Process+0x20>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d004      	beq.n	8000b3a <BlueNRG_Process+0x16>
		Enable_Advertising();
 8000b30:	f000 f80a 	bl	8000b48 <Enable_Advertising>
		set_connectable = FALSE;
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <BlueNRG_Process+0x20>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
	}

	/* Process user event */
	hci_user_evt_proc();
 8000b3a:	f005 fa29 	bl	8005f90 <hci_user_evt_proc>

}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000040 	.word	0x20000040

08000b48 <Enable_Advertising>:

static void Enable_Advertising(void){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af08      	add	r7, sp, #32
	char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'B', 'L', 'E', '-', 'G', '-', 'U', 'P'};
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <Enable_Advertising+0x4c>)
 8000b52:	ca03      	ldmia	r2!, {r0, r1}
 8000b54:	c303      	stmia	r3!, {r0, r1}
 8000b56:	7812      	ldrb	r2, [r2, #0]
 8000b58:	701a      	strb	r2, [r3, #0]

	hci_le_set_scan_resp_data(0, NULL);
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f004 ff80 	bl	8005a62 <hci_le_set_scan_resp_data>

	/* Set device in General Discoverable mode */
	aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 8000b62:	2300      	movs	r3, #0
 8000b64:	9306      	str	r3, [sp, #24]
 8000b66:	2300      	movs	r3, #0
 8000b68:	9305      	str	r3, [sp, #20]
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	9304      	str	r3, [sp, #16]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9303      	str	r3, [sp, #12]
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	9302      	str	r3, [sp, #8]
 8000b76:	2309      	movs	r3, #9
 8000b78:	9301      	str	r3, [sp, #4]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	2000      	movs	r0, #0
 8000b86:	f004 fb76 	bl	8005276 <aci_gap_set_discoverable>
}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b004      	add	sp, #16
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	0800740c 	.word	0x0800740c

08000b98 <Write_FW_to_flash>:
#include <stdio.h>
#include "stm32g0xx_hal.h"
#include "flash_manager.h"

uint32_t StartPageAddress = FLASH_APP_ADDR;
void Write_FW_to_flash(uint64_t *data_to_flash, uint16_t num_bytes){
 8000b98:	b5b0      	push	{r4, r5, r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	000a      	movs	r2, r1
 8000ba2:	1cbb      	adds	r3, r7, #2
 8000ba4:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef ret;

	ret = HAL_FLASH_Unlock();
 8000ba6:	250e      	movs	r5, #14
 8000ba8:	197c      	adds	r4, r7, r5
 8000baa:	f001 fb89 	bl	80022c0 <HAL_FLASH_Unlock>
 8000bae:	0003      	movs	r3, r0
 8000bb0:	7023      	strb	r3, [r4, #0]
	if(ret != HAL_OK){
 8000bb2:	197b      	adds	r3, r7, r5
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <Write_FW_to_flash+0x2a>
		printf("ERROR Unlock!");
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <Write_FW_to_flash+0xa0>)
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f005 fe7f 	bl	80068c0 <iprintf>
	}
	HAL_FLASH_OB_Unlock();
 8000bc2:	f001 fbbd 	bl	8002340 <HAL_FLASH_OB_Unlock>

	uint8_t sofar = 0;
 8000bc6:	230f      	movs	r3, #15
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
	uint8_t num_dwords = num_bytes;
 8000bce:	230d      	movs	r3, #13
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	1cba      	adds	r2, r7, #2
 8000bd4:	8812      	ldrh	r2, [r2, #0]
 8000bd6:	701a      	strb	r2, [r3, #0]
	while(sofar < num_dwords){
 8000bd8:	e01f      	b.n	8000c1a <Write_FW_to_flash+0x82>
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, StartPageAddress, data_to_flash[sofar]) == HAL_OK){
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <Write_FW_to_flash+0xa4>)
 8000bdc:	6819      	ldr	r1, [r3, #0]
 8000bde:	240f      	movs	r4, #15
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	18d3      	adds	r3, r2, r3
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f001 fb18 	bl	8002224 <HAL_FLASH_Program>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d10b      	bne.n	8000c10 <Write_FW_to_flash+0x78>
			StartPageAddress += 8; // doubleword
 8000bf8:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <Write_FW_to_flash+0xa4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3308      	adds	r3, #8
 8000bfe:	001a      	movs	r2, r3
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <Write_FW_to_flash+0xa4>)
 8000c02:	601a      	str	r2, [r3, #0]
			sofar++;
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	781a      	ldrb	r2, [r3, #0]
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	3201      	adds	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	e004      	b.n	8000c1a <Write_FW_to_flash+0x82>
		}else{
			printf("EROR!\n\r");
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <Write_FW_to_flash+0xa8>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f005 fe54 	bl	80068c0 <iprintf>
			return;
 8000c18:	e00b      	b.n	8000c32 <Write_FW_to_flash+0x9a>
	while(sofar < num_dwords){
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	18fa      	adds	r2, r7, r3
 8000c1e:	230d      	movs	r3, #13
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	7812      	ldrb	r2, [r2, #0]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d3d7      	bcc.n	8000bda <Write_FW_to_flash+0x42>
		}
	}

	HAL_FLASH_OB_Lock();
 8000c2a:	f001 fbb1 	bl	8002390 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8000c2e:	f001 fb6b 	bl	8002308 <HAL_FLASH_Lock>
}
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b004      	add	sp, #16
 8000c36:	bdb0      	pop	{r4, r5, r7, pc}
 8000c38:	08007418 	.word	0x08007418
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	08007428 	.word	0x08007428

08000c44 <Erase_Application_Memory>:

void Erase_Application_Memory(void){
 8000c44:	b5b0      	push	{r4, r5, r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint32_t PageError;

	printf("before : %x \n\r", *(volatile uint16_t*)0x08040000);
 8000c4a:	4b28      	ldr	r3, [pc, #160]	; (8000cec <Erase_Application_Memory+0xa8>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	001a      	movs	r2, r3
 8000c52:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <Erase_Application_Memory+0xac>)
 8000c54:	0011      	movs	r1, r2
 8000c56:	0018      	movs	r0, r3
 8000c58:	f005 fe32 	bl	80068c0 <iprintf>

	ret = HAL_FLASH_Unlock();
 8000c5c:	2517      	movs	r5, #23
 8000c5e:	197c      	adds	r4, r7, r5
 8000c60:	f001 fb2e 	bl	80022c0 <HAL_FLASH_Unlock>
 8000c64:	0003      	movs	r3, r0
 8000c66:	7023      	strb	r3, [r4, #0]
	if(ret != HAL_OK){
 8000c68:	197b      	adds	r3, r7, r5
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <Erase_Application_Memory+0x34>
		printf("ERROR Unlock!");
 8000c70:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <Erase_Application_Memory+0xb0>)
 8000c72:	0018      	movs	r0, r3
 8000c74:	f005 fe24 	bl	80068c0 <iprintf>
	}
	HAL_FLASH_OB_Unlock();
 8000c78:	f001 fb62 	bl	8002340 <HAL_FLASH_OB_Unlock>

	ret               = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
	*/

	/* Clear BANK_2 */
    pEraseInit.Banks     = FLASH_BANK_2;
 8000c7c:	003b      	movs	r3, r7
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	0212      	lsls	r2, r2, #8
 8000c82:	605a      	str	r2, [r3, #4]
    pEraseInit.NbPages   = 128;
 8000c84:	003b      	movs	r3, r7
 8000c86:	2280      	movs	r2, #128	; 0x80
 8000c88:	60da      	str	r2, [r3, #12]
    pEraseInit.Page      = 0;
 8000c8a:	003b      	movs	r3, r7
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
    pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000c90:	003b      	movs	r3, r7
 8000c92:	2202      	movs	r2, #2
 8000c94:	601a      	str	r2, [r3, #0]
    ret = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8000c96:	2517      	movs	r5, #23
 8000c98:	197c      	adds	r4, r7, r5
 8000c9a:	2310      	movs	r3, #16
 8000c9c:	18fa      	adds	r2, r7, r3
 8000c9e:	003b      	movs	r3, r7
 8000ca0:	0011      	movs	r1, r2
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f001 fc00 	bl	80024a8 <HAL_FLASHEx_Erase>
 8000ca8:	0003      	movs	r3, r0
 8000caa:	7023      	strb	r3, [r4, #0]

	if(ret != HAL_OK)
 8000cac:	197b      	adds	r3, r7, r5
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d003      	beq.n	8000cbc <Erase_Application_Memory+0x78>
		printf("NO\n\r");
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <Erase_Application_Memory+0xb4>)
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f005 fe02 	bl	80068c0 <iprintf>

	fflush(stdout);
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <Erase_Application_Memory+0xb8>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f005 fbca 	bl	800645c <fflush>

	HAL_FLASH_OB_Lock();
 8000cc8:	f001 fb62 	bl	8002390 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8000ccc:	f001 fb1c 	bl	8002308 <HAL_FLASH_Lock>

	printf("after: %x \n\r", *(volatile uint16_t*)0x08040000);
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <Erase_Application_Memory+0xa8>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	001a      	movs	r2, r3
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <Erase_Application_Memory+0xbc>)
 8000cda:	0011      	movs	r1, r2
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f005 fdef 	bl	80068c0 <iprintf>

}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b006      	add	sp, #24
 8000ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	08040000 	.word	0x08040000
 8000cf0:	08007430 	.word	0x08007430
 8000cf4:	08007418 	.word	0x08007418
 8000cf8:	08007440 	.word	0x08007440
 8000cfc:	20000050 	.word	0x20000050
 8000d00:	08007448 	.word	0x08007448

08000d04 <go2App>:

void go2App(void){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
	uint32_t JumpAddress;
	pFunction Jump_TO_Application;

	//if(((*(uint32_t *) FLASH_APP_ADDR) & 0x2FFD8000) == 0x20000000){
		JumpAddress =  *(__IO uint32_t *) (FLASH_APP_ADDR + 4);
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <go2App+0x44>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	60fb      	str	r3, [r7, #12]
		Jump_TO_Application = (pFunction) JumpAddress;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	60bb      	str	r3, [r7, #8]


		HAL_RCC_DeInit();
 8000d14:	f001 ff42 	bl	8002b9c <HAL_RCC_DeInit>
		HAL_DeInit();
 8000d18:	f001 f862 	bl	8001de0 <HAL_DeInit>

		SysTick->CTRL = 0;
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <go2App+0x48>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <go2App+0x48>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0;
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <go2App+0x48>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]

		__set_MSP(*(uint32_t *)FLASH_APP_ADDR);
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <go2App+0x4c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f383 8808 	msr	MSP, r3
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
		Jump_TO_Application();
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4798      	blx	r3

}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b004      	add	sp, #16
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	08040004 	.word	0x08040004
 8000d4c:	e000e010 	.word	0xe000e010
 8000d50:	08040000 	.word	0x08040000

08000d54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b08b      	sub	sp, #44	; 0x2c
 8000d58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	2414      	movs	r4, #20
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	0018      	movs	r0, r3
 8000d60:	2314      	movs	r3, #20
 8000d62:	001a      	movs	r2, r3
 8000d64:	2100      	movs	r1, #0
 8000d66:	f005 fcc1 	bl	80066ec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	4b3d      	ldr	r3, [pc, #244]	; (8000e60 <MX_GPIO_Init+0x10c>)
 8000d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d6e:	4b3c      	ldr	r3, [pc, #240]	; (8000e60 <MX_GPIO_Init+0x10c>)
 8000d70:	2104      	movs	r1, #4
 8000d72:	430a      	orrs	r2, r1
 8000d74:	635a      	str	r2, [r3, #52]	; 0x34
 8000d76:	4b3a      	ldr	r3, [pc, #232]	; (8000e60 <MX_GPIO_Init+0x10c>)
 8000d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d82:	4b37      	ldr	r3, [pc, #220]	; (8000e60 <MX_GPIO_Init+0x10c>)
 8000d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d86:	4b36      	ldr	r3, [pc, #216]	; (8000e60 <MX_GPIO_Init+0x10c>)
 8000d88:	2120      	movs	r1, #32
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d8e:	4b34      	ldr	r3, [pc, #208]	; (8000e60 <MX_GPIO_Init+0x10c>)
 8000d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d92:	2220      	movs	r2, #32
 8000d94:	4013      	ands	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <MX_GPIO_Init+0x10c>)
 8000d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d9e:	4b30      	ldr	r3, [pc, #192]	; (8000e60 <MX_GPIO_Init+0x10c>)
 8000da0:	2101      	movs	r1, #1
 8000da2:	430a      	orrs	r2, r1
 8000da4:	635a      	str	r2, [r3, #52]	; 0x34
 8000da6:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <MX_GPIO_Init+0x10c>)
 8000da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000daa:	2201      	movs	r2, #1
 8000dac:	4013      	ands	r3, r2
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <MX_GPIO_Init+0x10c>)
 8000db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <MX_GPIO_Init+0x10c>)
 8000db8:	2102      	movs	r1, #2
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34
 8000dbe:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <MX_GPIO_Init+0x10c>)
 8000dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8000dca:	2381      	movs	r3, #129	; 0x81
 8000dcc:	0059      	lsls	r1, r3, #1
 8000dce:	23a0      	movs	r3, #160	; 0xa0
 8000dd0:	05db      	lsls	r3, r3, #23
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f001 fe78 	bl	8002aca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dda:	193b      	adds	r3, r7, r4
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	0192      	lsls	r2, r2, #6
 8000de0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	2201      	movs	r2, #1
 8000dec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <MX_GPIO_Init+0x110>)
 8000df2:	0019      	movs	r1, r3
 8000df4:	0010      	movs	r0, r2
 8000df6:	f001 fc07 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dfa:	193b      	adds	r3, r7, r4
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e00:	193b      	adds	r3, r7, r4
 8000e02:	2288      	movs	r2, #136	; 0x88
 8000e04:	0352      	lsls	r2, r2, #13
 8000e06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	193b      	adds	r3, r7, r4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	193a      	adds	r2, r7, r4
 8000e10:	23a0      	movs	r3, #160	; 0xa0
 8000e12:	05db      	lsls	r3, r3, #23
 8000e14:	0011      	movs	r1, r2
 8000e16:	0018      	movs	r0, r3
 8000e18:	f001 fbf6 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_1|GPIO_PIN_8;
 8000e1c:	0021      	movs	r1, r4
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2291      	movs	r2, #145	; 0x91
 8000e22:	0052      	lsls	r2, r2, #1
 8000e24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2201      	movs	r2, #1
 8000e2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	187a      	adds	r2, r7, r1
 8000e3a:	23a0      	movs	r3, #160	; 0xa0
 8000e3c:	05db      	lsls	r3, r3, #23
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f001 fbe1 	bl	8002608 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2005      	movs	r0, #5
 8000e4c:	f001 f92a 	bl	80020a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000e50:	2005      	movs	r0, #5
 8000e52:	f001 f93c 	bl	80020ce <HAL_NVIC_EnableIRQ>

}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b00b      	add	sp, #44	; 0x2c
 8000e5c:	bd90      	pop	{r4, r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	40021000 	.word	0x40021000
 8000e64:	50000800 	.word	0x50000800

08000e68 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e70:	2301      	movs	r3, #1
 8000e72:	425b      	negs	r3, r3
 8000e74:	1d39      	adds	r1, r7, #4
 8000e76:	4804      	ldr	r0, [pc, #16]	; (8000e88 <__io_putchar+0x20>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f003 fabb 	bl	80043f4 <HAL_UART_Transmit>

	return ch;
 8000e7e:	687b      	ldr	r3, [r7, #4]
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b002      	add	sp, #8
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200007e8 	.word	0x200007e8

08000e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e90:	f000 ff86 	bl	8001da0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e94:	f000 f81e 	bl	8000ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e98:	f7ff ff5c 	bl	8000d54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e9c:	f000 fea8 	bl	8001bf0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  BlueNRG_Init();
 8000ea0:	f7ff fd9a 	bl	80009d8 <BlueNRG_Init>
  printf("Initialization Succesfull! \n\r");
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <main+0x3c>)
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f005 fd0a 	bl	80068c0 <iprintf>
  fflush(stdout);
 8000eac:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <main+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f005 fad2 	bl	800645c <fflush>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  printf("Device is now discoverable! \n\r");
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <main+0x44>)
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f005 fd00 	bl	80068c0 <iprintf>

  while (1)
  {
	  BlueNRG_Process();
 8000ec0:	f7ff fe30 	bl	8000b24 <BlueNRG_Process>
 8000ec4:	e7fc      	b.n	8000ec0 <main+0x34>
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	08007458 	.word	0x08007458
 8000ecc:	20000050 	.word	0x20000050
 8000ed0:	08007478 	.word	0x08007478

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b095      	sub	sp, #84	; 0x54
 8000ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eda:	2414      	movs	r4, #20
 8000edc:	193b      	adds	r3, r7, r4
 8000ede:	0018      	movs	r0, r3
 8000ee0:	233c      	movs	r3, #60	; 0x3c
 8000ee2:	001a      	movs	r2, r3
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	f005 fc01 	bl	80066ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	0018      	movs	r0, r3
 8000eee:	2310      	movs	r3, #16
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	f005 fbfa 	bl	80066ec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	0018      	movs	r0, r3
 8000efe:	f001 fe01 	bl	8002b04 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	2202      	movs	r2, #2
 8000f06:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f08:	193b      	adds	r3, r7, r4
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	0052      	lsls	r2, r2, #1
 8000f0e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000f10:	193b      	adds	r3, r7, r4
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	2240      	movs	r2, #64	; 0x40
 8000f1a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f1c:	193b      	adds	r3, r7, r4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f22:	193b      	adds	r3, r7, r4
 8000f24:	0018      	movs	r0, r3
 8000f26:	f001 feb5 	bl	8002c94 <HAL_RCC_OscConfig>
 8000f2a:	1e03      	subs	r3, r0, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000f2e:	f000 f819 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f002 fa00 	bl	8003354 <HAL_RCC_ClockConfig>
 8000f54:	1e03      	subs	r3, r0, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000f58:	f000 f804 	bl	8000f64 <Error_Handler>
  }
}
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b015      	add	sp, #84	; 0x54
 8000f62:	bd90      	pop	{r4, r7, pc}

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <Error_Handler+0x8>
	...

08000f70 <data_handler>:
uint16_t total_pck = 0;
uint16_t count_pck = 0;

bool next_ack = true;

void data_handler(uint8_t *data_buffer, uint8_t num_bytes){
 8000f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f72:	b08d      	sub	sp, #52	; 0x34
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	61f8      	str	r0, [r7, #28]
 8000f78:	000a      	movs	r2, r1
 8000f7a:	231b      	movs	r3, #27
 8000f7c:	18fb      	adds	r3, r7, r3
 8000f7e:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

	int i;
	for(i=0 ; i<num_bytes && num_bytes<=CHAT_DATA_LEN ; i++){
 8000f80:	2300      	movs	r3, #0
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f84:	e00c      	b.n	8000fa0 <data_handler+0x30>
		printf("%02x", data_buffer[i]);
 8000f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f88:	69fa      	ldr	r2, [r7, #28]
 8000f8a:	18d3      	adds	r3, r2, r3
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	001a      	movs	r2, r3
 8000f90:	4ba8      	ldr	r3, [pc, #672]	; (8001234 <data_handler+0x2c4>)
 8000f92:	0011      	movs	r1, r2
 8000f94:	0018      	movs	r0, r3
 8000f96:	f005 fc93 	bl	80068c0 <iprintf>
	for(i=0 ; i<num_bytes && num_bytes<=CHAT_DATA_LEN ; i++){
 8000f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fa0:	211b      	movs	r1, #27
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	da03      	bge.n	8000fb4 <data_handler+0x44>
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b14      	cmp	r3, #20
 8000fb2:	d9e8      	bls.n	8000f86 <data_handler+0x16>
	}
	printf("\n\r");
 8000fb4:	4ba0      	ldr	r3, [pc, #640]	; (8001238 <data_handler+0x2c8>)
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f005 fc82 	bl	80068c0 <iprintf>

	switch(connection_status){
 8000fbc:	4b9f      	ldr	r3, [pc, #636]	; (800123c <data_handler+0x2cc>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d002      	beq.n	8000fca <data_handler+0x5a>
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d036      	beq.n	8001036 <data_handler+0xc6>
 8000fc8:	e123      	b.n	8001212 <data_handler+0x2a2>
		case CONNECTED:   // receive START FLASH MODE pck
			if(verify_data(data_buffer, num_bytes, START_FLASH_MODE) == true){
 8000fca:	231b      	movs	r3, #27
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	7819      	ldrb	r1, [r3, #0]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f000 f94d 	bl	8001274 <verify_data>
 8000fda:	0003      	movs	r3, r0
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d121      	bne.n	8001024 <data_handler+0xb4>
				total_pck = (data_buffer[1] << 8) + data_buffer[2];
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	3302      	adds	r3, #2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	18d3      	adds	r3, r2, r3
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	4b91      	ldr	r3, [pc, #580]	; (8001240 <data_handler+0x2d0>)
 8000ffa:	801a      	strh	r2, [r3, #0]
				printf("I expect %d packets \n\r", total_pck);
 8000ffc:	4b90      	ldr	r3, [pc, #576]	; (8001240 <data_handler+0x2d0>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	001a      	movs	r2, r3
 8001002:	4b90      	ldr	r3, [pc, #576]	; (8001244 <data_handler+0x2d4>)
 8001004:	0011      	movs	r1, r2
 8001006:	0018      	movs	r0, r3
 8001008:	f005 fc5a 	bl	80068c0 <iprintf>


				send_ack(true, WRITE_FLASH_PACKET_RESPONSE);
 800100c:	2102      	movs	r1, #2
 800100e:	2001      	movs	r0, #1
 8001010:	f000 f98e 	bl	8001330 <send_ack>
				connection_status = RECEVEING_FW;
 8001014:	4b89      	ldr	r3, [pc, #548]	; (800123c <data_handler+0x2cc>)
 8001016:	2202      	movs	r2, #2
 8001018:	701a      	strb	r2, [r3, #0]
				printf("READY TO RECEIVE FW\n\r");
 800101a:	4b8b      	ldr	r3, [pc, #556]	; (8001248 <data_handler+0x2d8>)
 800101c:	0018      	movs	r0, r3
 800101e:	f005 fc4f 	bl	80068c0 <iprintf>
				send_ack(false, WRITE_FLASH_PACKET_RESPONSE);

				printf("Received an init pck that I can't handle or wrong\n\r");
			}

			break;
 8001022:	e0fc      	b.n	800121e <data_handler+0x2ae>
				send_ack(false, WRITE_FLASH_PACKET_RESPONSE);
 8001024:	2102      	movs	r1, #2
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f982 	bl	8001330 <send_ack>
				printf("Received an init pck that I can't handle or wrong\n\r");
 800102c:	4b87      	ldr	r3, [pc, #540]	; (800124c <data_handler+0x2dc>)
 800102e:	0018      	movs	r0, r3
 8001030:	f005 fc46 	bl	80068c0 <iprintf>
			break;
 8001034:	e0f3      	b.n	800121e <data_handler+0x2ae>
		case RECEVEING_FW:
			if(verify_data(data_buffer, num_bytes, WRITE_FLASH_PACKET)){
 8001036:	231b      	movs	r3, #27
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	7819      	ldrb	r1, [r3, #0]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	2201      	movs	r2, #1
 8001040:	0018      	movs	r0, r3
 8001042:	f000 f917 	bl	8001274 <verify_data>
 8001046:	1e03      	subs	r3, r0, #0
 8001048:	d100      	bne.n	800104c <data_handler+0xdc>
 800104a:	e0da      	b.n	8001202 <data_handler+0x292>
				uint16_t pck_num = (data_buffer[1] << 8) + data_buffer[2];
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	3301      	adds	r3, #1
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b29b      	uxth	r3, r3
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b299      	uxth	r1, r3
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	3302      	adds	r3, #2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b29a      	uxth	r2, r3
 8001060:	200e      	movs	r0, #14
 8001062:	2618      	movs	r6, #24
 8001064:	1983      	adds	r3, r0, r6
 8001066:	19db      	adds	r3, r3, r7
 8001068:	188a      	adds	r2, r1, r2
 800106a:	801a      	strh	r2, [r3, #0]

				if(pck_num == count_pck){
 800106c:	4b78      	ldr	r3, [pc, #480]	; (8001250 <data_handler+0x2e0>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	1982      	adds	r2, r0, r6
 8001072:	19d2      	adds	r2, r2, r7
 8001074:	8812      	ldrh	r2, [r2, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d000      	beq.n	800107c <data_handler+0x10c>
 800107a:	e08c      	b.n	8001196 <data_handler+0x226>
					// save msg
					for(int i=3 ; i<num_bytes-1 ; i++){
 800107c:	2303      	movs	r3, #3
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001080:	e07a      	b.n	8001178 <data_handler+0x208>
						if((i-3)%8 != 0){
 8001082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001084:	3b03      	subs	r3, #3
 8001086:	001a      	movs	r2, r3
 8001088:	2307      	movs	r3, #7
 800108a:	4013      	ands	r3, r2
 800108c:	d039      	beq.n	8001102 <data_handler+0x192>
							data_to_flash[consd] += ((uint64_t)data_buffer[i] << ((i-3)%8)*8 );
 800108e:	4b71      	ldr	r3, [pc, #452]	; (8001254 <data_handler+0x2e4>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	4a71      	ldr	r2, [pc, #452]	; (8001258 <data_handler+0x2e8>)
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	18d3      	adds	r3, r2, r3
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	6859      	ldr	r1, [r3, #4]
 800109c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109e:	69fa      	ldr	r2, [r7, #28]
 80010a0:	18d3      	adds	r3, r2, r3
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ac:	3b03      	subs	r3, #3
 80010ae:	4a6b      	ldr	r2, [pc, #428]	; (800125c <data_handler+0x2ec>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	d504      	bpl.n	80010be <data_handler+0x14e>
 80010b4:	3b01      	subs	r3, #1
 80010b6:	2208      	movs	r2, #8
 80010b8:	4252      	negs	r2, r2
 80010ba:	4313      	orrs	r3, r2
 80010bc:	3301      	adds	r3, #1
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	001a      	movs	r2, r3
 80010c2:	3a20      	subs	r2, #32
 80010c4:	2a00      	cmp	r2, #0
 80010c6:	db03      	blt.n	80010d0 <data_handler+0x160>
 80010c8:	693e      	ldr	r6, [r7, #16]
 80010ca:	4096      	lsls	r6, r2
 80010cc:	0035      	movs	r5, r6
 80010ce:	e008      	b.n	80010e2 <data_handler+0x172>
 80010d0:	2220      	movs	r2, #32
 80010d2:	1ad2      	subs	r2, r2, r3
 80010d4:	693e      	ldr	r6, [r7, #16]
 80010d6:	40d6      	lsrs	r6, r2
 80010d8:	0032      	movs	r2, r6
 80010da:	697e      	ldr	r6, [r7, #20]
 80010dc:	409e      	lsls	r6, r3
 80010de:	0035      	movs	r5, r6
 80010e0:	4315      	orrs	r5, r2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	409a      	lsls	r2, r3
 80010e6:	0014      	movs	r4, r2
 80010e8:	4b5a      	ldr	r3, [pc, #360]	; (8001254 <data_handler+0x2e4>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	001e      	movs	r6, r3
 80010ee:	0002      	movs	r2, r0
 80010f0:	000b      	movs	r3, r1
 80010f2:	1912      	adds	r2, r2, r4
 80010f4:	416b      	adcs	r3, r5
 80010f6:	4858      	ldr	r0, [pc, #352]	; (8001258 <data_handler+0x2e8>)
 80010f8:	00f1      	lsls	r1, r6, #3
 80010fa:	1841      	adds	r1, r0, r1
 80010fc:	600a      	str	r2, [r1, #0]
 80010fe:	604b      	str	r3, [r1, #4]
 8001100:	e037      	b.n	8001172 <data_handler+0x202>
						}else{
							consd++;
 8001102:	4b54      	ldr	r3, [pc, #336]	; (8001254 <data_handler+0x2e4>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	3301      	adds	r3, #1
 8001108:	b29a      	uxth	r2, r3
 800110a:	4b52      	ldr	r3, [pc, #328]	; (8001254 <data_handler+0x2e4>)
 800110c:	801a      	strh	r2, [r3, #0]
							data_to_flash[consd] = ((uint64_t)data_buffer[i] << ((i-3)%8)*8 );
 800110e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	18d3      	adds	r3, r2, r3
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111e:	3b03      	subs	r3, #3
 8001120:	4a4e      	ldr	r2, [pc, #312]	; (800125c <data_handler+0x2ec>)
 8001122:	4013      	ands	r3, r2
 8001124:	d504      	bpl.n	8001130 <data_handler+0x1c0>
 8001126:	3b01      	subs	r3, #1
 8001128:	2208      	movs	r2, #8
 800112a:	4252      	negs	r2, r2
 800112c:	4313      	orrs	r3, r2
 800112e:	3301      	adds	r3, #1
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4a48      	ldr	r2, [pc, #288]	; (8001254 <data_handler+0x2e4>)
 8001134:	8812      	ldrh	r2, [r2, #0]
 8001136:	0011      	movs	r1, r2
 8001138:	001a      	movs	r2, r3
 800113a:	3a20      	subs	r2, #32
 800113c:	2a00      	cmp	r2, #0
 800113e:	db03      	blt.n	8001148 <data_handler+0x1d8>
 8001140:	68b8      	ldr	r0, [r7, #8]
 8001142:	4090      	lsls	r0, r2
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	e00a      	b.n	800115e <data_handler+0x1ee>
 8001148:	2220      	movs	r2, #32
 800114a:	1ad2      	subs	r2, r2, r3
 800114c:	68b8      	ldr	r0, [r7, #8]
 800114e:	40d0      	lsrs	r0, r2
 8001150:	0002      	movs	r2, r0
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	4098      	lsls	r0, r3
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	4310      	orrs	r0, r2
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	409a      	lsls	r2, r3
 8001162:	603a      	str	r2, [r7, #0]
 8001164:	4a3c      	ldr	r2, [pc, #240]	; (8001258 <data_handler+0x2e8>)
 8001166:	00cb      	lsls	r3, r1, #3
 8001168:	18d3      	adds	r3, r2, r3
 800116a:	6839      	ldr	r1, [r7, #0]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	6019      	str	r1, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
					for(int i=3 ; i<num_bytes-1 ; i++){
 8001172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001174:	3301      	adds	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
 8001178:	231b      	movs	r3, #27
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	3b01      	subs	r3, #1
 8001180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001182:	429a      	cmp	r2, r3
 8001184:	da00      	bge.n	8001188 <data_handler+0x218>
 8001186:	e77c      	b.n	8001082 <data_handler+0x112>
						}
					}
					count_pck++;
 8001188:	4b31      	ldr	r3, [pc, #196]	; (8001250 <data_handler+0x2e0>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <data_handler+0x2e0>)
 8001192:	801a      	strh	r2, [r3, #0]
 8001194:	e00e      	b.n	80011b4 <data_handler+0x244>
				}else{
					printf("Wrong pck_num %d, %d \n\r", pck_num, count_pck);
 8001196:	230e      	movs	r3, #14
 8001198:	2218      	movs	r2, #24
 800119a:	189b      	adds	r3, r3, r2
 800119c:	19db      	adds	r3, r3, r7
 800119e:	8819      	ldrh	r1, [r3, #0]
 80011a0:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <data_handler+0x2e0>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	001a      	movs	r2, r3
 80011a6:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <data_handler+0x2f0>)
 80011a8:	0018      	movs	r0, r3
 80011aa:	f005 fb89 	bl	80068c0 <iprintf>
					next_ack = false;
 80011ae:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <data_handler+0x2f4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
				}

				if(count_pck%10 == 0 || count_pck == total_pck){
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <data_handler+0x2e0>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	210a      	movs	r1, #10
 80011ba:	0018      	movs	r0, r3
 80011bc:	f7ff f83c 	bl	8000238 <__aeabi_uidivmod>
 80011c0:	000b      	movs	r3, r1
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <data_handler+0x264>
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <data_handler+0x2e0>)
 80011ca:	881a      	ldrh	r2, [r3, #0]
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <data_handler+0x2d0>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d123      	bne.n	800121c <data_handler+0x2ac>

					Write_FW_to_flash(data_to_flash, consd+1);
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <data_handler+0x2e4>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <data_handler+0x2e8>)
 80011de:	0011      	movs	r1, r2
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff fcd9 	bl	8000b98 <Write_FW_to_flash>
					consd = -1;
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <data_handler+0x2e4>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	4252      	negs	r2, r2
 80011ec:	801a      	strh	r2, [r3, #0]

					send_ack(next_ack, WRITE_FLASH_PACKET_RESPONSE);
 80011ee:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <data_handler+0x2f4>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2102      	movs	r1, #2
 80011f4:	0018      	movs	r0, r3
 80011f6:	f000 f89b 	bl	8001330 <send_ack>
					if(next_ack == false){
						// reset the buffer properly
					}else{
						// you can save properly
					}
					next_ack = true;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <data_handler+0x2f4>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
			}else{
				printf("Ricevuto pckt sbagliato \n\r");
				next_ack = false;
			}

			break;
 8001200:	e00c      	b.n	800121c <data_handler+0x2ac>
				printf("Ricevuto pckt sbagliato \n\r");
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <data_handler+0x2f8>)
 8001204:	0018      	movs	r0, r3
 8001206:	f005 fb5b 	bl	80068c0 <iprintf>
				next_ack = false;
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <data_handler+0x2f4>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
			break;
 8001210:	e004      	b.n	800121c <data_handler+0x2ac>

		default:
			printf("Connection status handle not found\n\r");
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <data_handler+0x2fc>)
 8001214:	0018      	movs	r0, r3
 8001216:	f005 fb53 	bl	80068c0 <iprintf>

			break;
 800121a:	e000      	b.n	800121e <data_handler+0x2ae>
			break;
 800121c:	46c0      	nop			; (mov r8, r8)
	}
	fflush(stdout);
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <data_handler+0x300>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	0018      	movs	r0, r3
 8001226:	f005 f919 	bl	800645c <fflush>

}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	b00d      	add	sp, #52	; 0x34
 8001230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	08007498 	.word	0x08007498
 8001238:	080074a0 	.word	0x080074a0
 800123c:	20000267 	.word	0x20000267
 8001240:	20000768 	.word	0x20000768
 8001244:	080074a4 	.word	0x080074a4
 8001248:	080074bc 	.word	0x080074bc
 800124c:	080074d4 	.word	0x080074d4
 8001250:	2000076a 	.word	0x2000076a
 8001254:	2000000c 	.word	0x2000000c
 8001258:	20000268 	.word	0x20000268
 800125c:	80000007 	.word	0x80000007
 8001260:	08007508 	.word	0x08007508
 8001264:	2000000e 	.word	0x2000000e
 8001268:	08007520 	.word	0x08007520
 800126c:	0800753c 	.word	0x0800753c
 8001270:	20000050 	.word	0x20000050

08001274 <verify_data>:

bool verify_data(uint8_t *data_buffer, uint8_t num_bytes, PckType expected_pck){
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	0008      	movs	r0, r1
 800127e:	0011      	movs	r1, r2
 8001280:	1cfb      	adds	r3, r7, #3
 8001282:	1c02      	adds	r2, r0, #0
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	1cbb      	adds	r3, r7, #2
 8001288:	1c0a      	adds	r2, r1, #0
 800128a:	701a      	strb	r2, [r3, #0]
	uint8_t rcv_crc = data_buffer[num_bytes-1];;
 800128c:	1cfb      	adds	r3, r7, #3
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	3b01      	subs	r3, #1
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	18d2      	adds	r2, r2, r3
 8001296:	230e      	movs	r3, #14
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	7812      	ldrb	r2, [r2, #0]
 800129c:	701a      	strb	r2, [r3, #0]

	uint8_t checksum = 0;
 800129e:	230f      	movs	r3, #15
 80012a0:	18fb      	adds	r3, r7, r3
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]

	switch(expected_pck){
 80012a6:	1cbb      	adds	r3, r7, #2
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <verify_data+0x40>
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d018      	beq.n	80012e4 <verify_data+0x70>
 80012b2:	e025      	b.n	8001300 <verify_data+0x8c>
		case START_FLASH_MODE:

			/* check cmd and lenght of the msg */
			if(data_buffer[0] != START_FLASH_MODE_CMD || num_bytes != START_FLASH_MODE_LEN)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2bbb      	cmp	r3, #187	; 0xbb
 80012ba:	d103      	bne.n	80012c4 <verify_data+0x50>
 80012bc:	1cfb      	adds	r3, r7, #3
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d001      	beq.n	80012c8 <verify_data+0x54>
				return false;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e02c      	b.n	8001322 <verify_data+0xae>

			checksum = sum_payload(data_buffer, 1, num_bytes-2); // -2 because sum_payload include end index
 80012c8:	1cfb      	adds	r3, r7, #3
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	3b02      	subs	r3, #2
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	230f      	movs	r3, #15
 80012d2:	18fc      	adds	r4, r7, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2101      	movs	r1, #1
 80012d8:	0018      	movs	r0, r3
 80012da:	f000 f87f 	bl	80013dc <sum_payload>
 80012de:	0003      	movs	r3, r0
 80012e0:	7023      	strb	r3, [r4, #0]
			/*
			for(int i=0; i<16 && i+1<num_bytes-1 ; i++){
				checksum += data_buffer[i+1];
			}*/
			break;
 80012e2:	e013      	b.n	800130c <verify_data+0x98>

		case WRITE_FLASH_PACKET:
			// add controls
			checksum = sum_payload(data_buffer, 3, num_bytes-2);
 80012e4:	1cfb      	adds	r3, r7, #3
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	3b02      	subs	r3, #2
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	230f      	movs	r3, #15
 80012ee:	18fc      	adds	r4, r7, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2103      	movs	r1, #3
 80012f4:	0018      	movs	r0, r3
 80012f6:	f000 f871 	bl	80013dc <sum_payload>
 80012fa:	0003      	movs	r3, r0
 80012fc:	7023      	strb	r3, [r4, #0]
			/*
			for(int i=0; i<16 && i+3<num_bytes-1 ; i++){
				checksum += data_buffer[i+3];
			}*/
			break;
 80012fe:	e005      	b.n	800130c <verify_data+0x98>

		default:
			printf("Can't verify this data\n\r");
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <verify_data+0xb8>)
 8001302:	0018      	movs	r0, r3
 8001304:	f005 fadc 	bl	80068c0 <iprintf>

			return false;
 8001308:	2300      	movs	r3, #0
 800130a:	e00a      	b.n	8001322 <verify_data+0xae>
	}

	//printf("ck rcv: %d, clc: %d", rcv_crc, checksum);

	if(checksum == rcv_crc){
 800130c:	230f      	movs	r3, #15
 800130e:	18fa      	adds	r2, r7, r3
 8001310:	230e      	movs	r3, #14
 8001312:	18fb      	adds	r3, r7, r3
 8001314:	7812      	ldrb	r2, [r2, #0]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	d101      	bne.n	8001320 <verify_data+0xac>
		return true;
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <verify_data+0xae>
	}else{
		return false;
 8001320:	2300      	movs	r3, #0
	}
}
 8001322:	0018      	movs	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	b005      	add	sp, #20
 8001328:	bd90      	pop	{r4, r7, pc}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	08007564 	.word	0x08007564

08001330 <send_ack>:


void send_ack(bool ack, PckType reply_type){
 8001330:	b5b0      	push	{r4, r5, r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	0002      	movs	r2, r0
 8001338:	1dfb      	adds	r3, r7, #7
 800133a:	701a      	strb	r2, [r3, #0]
 800133c:	1dbb      	adds	r3, r7, #6
 800133e:	1c0a      	adds	r2, r1, #0
 8001340:	701a      	strb	r2, [r3, #0]
	uint8_t ack_msg;

	if(ack == true){
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d104      	bne.n	8001354 <send_ack+0x24>
		ack_msg = 0x00;
 800134a:	230f      	movs	r3, #15
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	e003      	b.n	800135c <send_ack+0x2c>
	}else{
		ack_msg = 0x01;
 8001354:	230f      	movs	r3, #15
 8001356:	18fb      	adds	r3, r7, r3
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t msg_len = 0;
 800135c:	250e      	movs	r5, #14
 800135e:	197b      	adds	r3, r7, r5
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
	switch(reply_type){
 8001364:	1dbb      	adds	r3, r7, #6
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d12b      	bne.n	80013c4 <send_ack+0x94>
		case WRITE_FLASH_PACKET_RESPONSE:
			msg_len = WRITE_FLASH_PACKET_RESPONSE_LEN;
 800136c:	197b      	adds	r3, r7, r5
 800136e:	2205      	movs	r2, #5
 8001370:	701a      	strb	r2, [r3, #0]
			uint8_t msg[WRITE_FLASH_PACKET_RESPONSE_LEN];

			msg[0] = ack_msg;
 8001372:	2108      	movs	r1, #8
 8001374:	187b      	adds	r3, r7, r1
 8001376:	220f      	movs	r2, #15
 8001378:	18ba      	adds	r2, r7, r2
 800137a:	7812      	ldrb	r2, [r2, #0]
 800137c:	701a      	strb	r2, [r3, #0]
			msg[1] = 0x00; // CMD ?!
 800137e:	187b      	adds	r3, r7, r1
 8001380:	2200      	movs	r2, #0
 8001382:	705a      	strb	r2, [r3, #1]
			msg[2] = (count_pck >> 8) & 0xff;
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <send_ack+0xa4>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	b29b      	uxth	r3, r3
 800138c:	b2da      	uxtb	r2, r3
 800138e:	187b      	adds	r3, r7, r1
 8001390:	709a      	strb	r2, [r3, #2]
			msg[3] = (count_pck & 0xff);
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <send_ack+0xa4>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	187b      	adds	r3, r7, r1
 800139a:	70da      	strb	r2, [r3, #3]
			msg[4] = sum_payload(msg, 2, 3);
 800139c:	000c      	movs	r4, r1
 800139e:	187b      	adds	r3, r7, r1
 80013a0:	2203      	movs	r2, #3
 80013a2:	2102      	movs	r1, #2
 80013a4:	0018      	movs	r0, r3
 80013a6:	f000 f819 	bl	80013dc <sum_payload>
 80013aa:	0003      	movs	r3, r0
 80013ac:	001a      	movs	r2, r3
 80013ae:	0021      	movs	r1, r4
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	711a      	strb	r2, [r3, #4]

			//printf("%02x", msg);

			Update_TX_Char(msg, msg_len);
 80013b4:	197b      	adds	r3, r7, r5
 80013b6:	781a      	ldrb	r2, [r3, #0]
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	0011      	movs	r1, r2
 80013bc:	0018      	movs	r0, r3
 80013be:	f000 f8a3 	bl	8001508 <Update_TX_Char>
 80013c2:	e003      	b.n	80013cc <send_ack+0x9c>
			break;

		default:
			printf("Can't handle the reply_type\n\r");
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <send_ack+0xa8>)
 80013c6:	0018      	movs	r0, r3
 80013c8:	f005 fa7a 	bl	80068c0 <iprintf>
			return;
			break;
	}

}
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b004      	add	sp, #16
 80013d0:	bdb0      	pop	{r4, r5, r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	2000076a 	.word	0x2000076a
 80013d8:	08007580 	.word	0x08007580

080013dc <sum_payload>:


uint8_t sum_payload(uint8_t *payload, uint8_t start, uint8_t end){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	0008      	movs	r0, r1
 80013e6:	0011      	movs	r1, r2
 80013e8:	1cfb      	adds	r3, r7, #3
 80013ea:	1c02      	adds	r2, r0, #0
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	1cbb      	adds	r3, r7, #2
 80013f0:	1c0a      	adds	r2, r1, #0
 80013f2:	701a      	strb	r2, [r3, #0]
	uint8_t sum = 0;
 80013f4:	230f      	movs	r3, #15
 80013f6:	18fb      	adds	r3, r7, r3
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]

	for(int i=start; i<=end ;i++){
 80013fc:	1cfb      	adds	r3, r7, #3
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	e00c      	b.n	800141e <sum_payload+0x42>
		sum += payload[i];
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	18d3      	adds	r3, r2, r3
 800140a:	7819      	ldrb	r1, [r3, #0]
 800140c:	220f      	movs	r2, #15
 800140e:	18bb      	adds	r3, r7, r2
 8001410:	18ba      	adds	r2, r7, r2
 8001412:	7812      	ldrb	r2, [r2, #0]
 8001414:	188a      	adds	r2, r1, r2
 8001416:	701a      	strb	r2, [r3, #0]
	for(int i=start; i<=end ;i++){
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	3301      	adds	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	1cbb      	adds	r3, r7, #2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	429a      	cmp	r2, r3
 8001426:	dded      	ble.n	8001404 <sum_payload+0x28>
	}
	sum = sum & 0xff;
 8001428:	210f      	movs	r1, #15
 800142a:	187b      	adds	r3, r7, r1
 800142c:	187a      	adds	r2, r7, r1
 800142e:	7812      	ldrb	r2, [r2, #0]
 8001430:	701a      	strb	r2, [r3, #0]

	return sum;
 8001432:	187b      	adds	r3, r7, r1
 8001434:	781b      	ldrb	r3, [r3, #0]
}
 8001436:	0018      	movs	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	b004      	add	sp, #16
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <Add_FWupdate_Service>:
extern ConnectionStatus connection_status;
extern uint16_t count_pck;
extern uint16_t consd;
extern uint16_t total_pck;

tBleStatus Add_FWupdate_Service(void){
 8001440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001442:	b095      	sub	sp, #84	; 0x54
 8001444:	af06      	add	r7, sp, #24
	tBleStatus ret;
	Service_UUID_t chat_service_uuid;
	Char_UUID_t rx_char_uuid, tx_char_uuid;

	BLUENRG_memcpy(&chat_service_uuid.Service_UUID_128, CHAT_SERVICE_UUID, 16);
 8001446:	2124      	movs	r1, #36	; 0x24
 8001448:	187b      	adds	r3, r7, r1
 800144a:	4a29      	ldr	r2, [pc, #164]	; (80014f0 <Add_FWupdate_Service+0xb0>)
 800144c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800144e:	c331      	stmia	r3!, {r0, r4, r5}
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	601a      	str	r2, [r3, #0]

	BLUENRG_memcpy(rx_char_uuid.Char_UUID_128, RX_CHAR_UUID, 16);
 8001454:	2614      	movs	r6, #20
 8001456:	19bb      	adds	r3, r7, r6
 8001458:	4a26      	ldr	r2, [pc, #152]	; (80014f4 <Add_FWupdate_Service+0xb4>)
 800145a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800145c:	c331      	stmia	r3!, {r0, r4, r5}
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	601a      	str	r2, [r3, #0]
	BLUENRG_memcpy(tx_char_uuid.Char_UUID_128, TX_CHAR_UUID, 16);
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	4a24      	ldr	r2, [pc, #144]	; (80014f8 <Add_FWupdate_Service+0xb8>)
 8001466:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001468:	c331      	stmia	r3!, {r0, r4, r5}
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	601a      	str	r2, [r3, #0]

	/* ---- Add Second Service ---- */
	ret = aci_gatt_add_serv(UUID_TYPE_128, chat_service_uuid.Service_UUID_128, PRIMARY_SERVICE, 7, &chat_service_handle);
 800146e:	2537      	movs	r5, #55	; 0x37
 8001470:	197c      	adds	r4, r7, r5
 8001472:	1879      	adds	r1, r7, r1
 8001474:	4b21      	ldr	r3, [pc, #132]	; (80014fc <Add_FWupdate_Service+0xbc>)
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2307      	movs	r3, #7
 800147a:	2201      	movs	r2, #1
 800147c:	2002      	movs	r0, #2
 800147e:	f004 f83c 	bl	80054fa <aci_gatt_add_serv>
 8001482:	0003      	movs	r3, r0
 8001484:	7023      	strb	r3, [r4, #0]

	/* Add Characteristics */
	ret = aci_gatt_add_char(chat_service_handle, UUID_TYPE_128, rx_char_uuid.Char_UUID_128, CHAT_DATA_LEN, CHAR_PROP_WRITE_WITHOUT_RESP | CHAR_PROP_WRITE, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,16, 1, &rx_char_handle);
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <Add_FWupdate_Service+0xbc>)
 8001488:	8818      	ldrh	r0, [r3, #0]
 800148a:	197c      	adds	r4, r7, r5
 800148c:	19ba      	adds	r2, r7, r6
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <Add_FWupdate_Service+0xc0>)
 8001490:	9305      	str	r3, [sp, #20]
 8001492:	2301      	movs	r3, #1
 8001494:	9304      	str	r3, [sp, #16]
 8001496:	2310      	movs	r3, #16
 8001498:	9303      	str	r3, [sp, #12]
 800149a:	2301      	movs	r3, #1
 800149c:	9302      	str	r3, [sp, #8]
 800149e:	2300      	movs	r3, #0
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	230c      	movs	r3, #12
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2314      	movs	r3, #20
 80014a8:	2102      	movs	r1, #2
 80014aa:	f004 f8c1 	bl	8005630 <aci_gatt_add_char>
 80014ae:	0003      	movs	r3, r0
 80014b0:	7023      	strb	r3, [r4, #0]

	ret = aci_gatt_add_char(chat_service_handle, UUID_TYPE_128, tx_char_uuid.Char_UUID_128, CHAT_DATA_LEN, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0, 16, 1, &tx_char_handle);
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <Add_FWupdate_Service+0xbc>)
 80014b4:	8818      	ldrh	r0, [r3, #0]
 80014b6:	197c      	adds	r4, r7, r5
 80014b8:	1d3a      	adds	r2, r7, #4
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <Add_FWupdate_Service+0xc4>)
 80014bc:	9305      	str	r3, [sp, #20]
 80014be:	2301      	movs	r3, #1
 80014c0:	9304      	str	r3, [sp, #16]
 80014c2:	2310      	movs	r3, #16
 80014c4:	9303      	str	r3, [sp, #12]
 80014c6:	2300      	movs	r3, #0
 80014c8:	9302      	str	r3, [sp, #8]
 80014ca:	2300      	movs	r3, #0
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	2310      	movs	r3, #16
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2314      	movs	r3, #20
 80014d4:	2102      	movs	r1, #2
 80014d6:	f004 f8ab 	bl	8005630 <aci_gatt_add_char>
 80014da:	0003      	movs	r3, r0
 80014dc:	7023      	strb	r3, [r4, #0]

	Erase_Application_Memory();
 80014de:	f7ff fbb1 	bl	8000c44 <Erase_Application_Memory>

	return ret;
 80014e2:	197b      	adds	r3, r7, r5
 80014e4:	781b      	ldrb	r3, [r3, #0]
}
 80014e6:	0018      	movs	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b00f      	add	sp, #60	; 0x3c
 80014ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	20000010 	.word	0x20000010
 80014f4:	20000020 	.word	0x20000020
 80014f8:	20000030 	.word	0x20000030
 80014fc:	2000076c 	.word	0x2000076c
 8001500:	2000076e 	.word	0x2000076e
 8001504:	20000770 	.word	0x20000770

08001508 <Update_TX_Char>:

void Update_TX_Char(uint8_t *data_buffer, uint8_t num_bytes){
 8001508:	b5b0      	push	{r4, r5, r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af02      	add	r7, sp, #8
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	000a      	movs	r2, r1
 8001512:	1cfb      	adds	r3, r7, #3
 8001514:	701a      	strb	r2, [r3, #0]
	tBleStatus ret;

	for(int i=0; i<num_bytes ; i++){
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	e00c      	b.n	8001536 <Update_TX_Char+0x2e>
		printf("%02x ", data_buffer[i]);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	18d3      	adds	r3, r2, r3
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	001a      	movs	r2, r3
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <Update_TX_Char+0x78>)
 8001528:	0011      	movs	r1, r2
 800152a:	0018      	movs	r0, r3
 800152c:	f005 f9c8 	bl	80068c0 <iprintf>
	for(int i=0; i<num_bytes ; i++){
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3301      	adds	r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	1cfb      	adds	r3, r7, #3
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbed      	blt.n	800151c <Update_TX_Char+0x14>
	}
	printf("\n\r");
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <Update_TX_Char+0x7c>)
 8001542:	0018      	movs	r0, r3
 8001544:	f005 f9bc 	bl	80068c0 <iprintf>

	ret = aci_gatt_update_char_value(chat_service_handle, tx_char_handle, 0, num_bytes, data_buffer);
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <Update_TX_Char+0x80>)
 800154a:	8818      	ldrh	r0, [r3, #0]
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <Update_TX_Char+0x84>)
 800154e:	8819      	ldrh	r1, [r3, #0]
 8001550:	250b      	movs	r5, #11
 8001552:	197c      	adds	r4, r7, r5
 8001554:	1cfb      	adds	r3, r7, #3
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	0013      	movs	r3, r2
 800155e:	2200      	movs	r2, #0
 8001560:	f004 f94c 	bl	80057fc <aci_gatt_update_char_value>
 8001564:	0003      	movs	r3, r0
 8001566:	7023      	strb	r3, [r4, #0]

	if(ret != BLE_STATUS_SUCCESS){
 8001568:	197b      	adds	r3, r7, r5
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <Update_TX_Char+0x70>
		printf("Error while updating tx_char value \n\r");
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <Update_TX_Char+0x88>)
 8001572:	0018      	movs	r0, r3
 8001574:	f005 f9a4 	bl	80068c0 <iprintf>
	}

}
 8001578:	46c0      	nop			; (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	b004      	add	sp, #16
 800157e:	bdb0      	pop	{r4, r5, r7, pc}
 8001580:	080075a0 	.word	0x080075a0
 8001584:	080075a8 	.word	0x080075a8
 8001588:	2000076c 	.word	0x2000076c
 800158c:	20000770 	.word	0x20000770
 8001590:	080075ac 	.word	0x080075ac

08001594 <GAP_ConnectionComplete_CB>:

void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle){
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	000a      	movs	r2, r1
 800159e:	1cbb      	adds	r3, r7, #2
 80015a0:	801a      	strh	r2, [r3, #0]
	connected = TRUE;
 80015a2:	4b16      	ldr	r3, [pc, #88]	; (80015fc <GAP_ConnectionComplete_CB+0x68>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
	connection_handle = handle;
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <GAP_ConnectionComplete_CB+0x6c>)
 80015aa:	1cba      	adds	r2, r7, #2
 80015ac:	8812      	ldrh	r2, [r2, #0]
 80015ae:	801a      	strh	r2, [r3, #0]
	connection_status = CONNECTED;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <GAP_ConnectionComplete_CB+0x70>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	701a      	strb	r2, [r3, #0]

	printf("Connection Complete...\n\r");
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <GAP_ConnectionComplete_CB+0x74>)
 80015b8:	0018      	movs	r0, r3
 80015ba:	f005 f981 	bl	80068c0 <iprintf>

	for(int i=5; i>=0 ; i--){
 80015be:	2305      	movs	r3, #5
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	e00c      	b.n	80015de <GAP_ConnectionComplete_CB+0x4a>
		printf("%02X -", addr[i]);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	18d3      	adds	r3, r2, r3
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	001a      	movs	r2, r3
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <GAP_ConnectionComplete_CB+0x78>)
 80015d0:	0011      	movs	r1, r2
 80015d2:	0018      	movs	r0, r3
 80015d4:	f005 f974 	bl	80068c0 <iprintf>
	for(int i=5; i>=0 ; i--){
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	3b01      	subs	r3, #1
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	daef      	bge.n	80015c4 <GAP_ConnectionComplete_CB+0x30>
	}
	printf("%02X\n\r",addr[0]);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	001a      	movs	r2, r3
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <GAP_ConnectionComplete_CB+0x7c>)
 80015ec:	0011      	movs	r1, r2
 80015ee:	0018      	movs	r0, r3
 80015f0:	f005 f966 	bl	80068c0 <iprintf>
}
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b004      	add	sp, #16
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000774 	.word	0x20000774
 8001600:	20000778 	.word	0x20000778
 8001604:	20000267 	.word	0x20000267
 8001608:	080075d4 	.word	0x080075d4
 800160c:	080075f0 	.word	0x080075f0
 8001610:	080075f8 	.word	0x080075f8

08001614 <GAP_DisconnectionComplete_CB>:

void GAP_DisconnectionComplete_CB(void){
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	connected = FALSE;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <GAP_DisconnectionComplete_CB+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
	connection_status = IDLE;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <GAP_DisconnectionComplete_CB+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
	printf("Disconnection Complete...\n\r");
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <GAP_DisconnectionComplete_CB+0x54>)
 8001626:	0018      	movs	r0, r3
 8001628:	f005 f94a 	bl	80068c0 <iprintf>
	set_connectable = TRUE;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <GAP_DisconnectionComplete_CB+0x58>)
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
	notification_enabled = FALSE;
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <GAP_DisconnectionComplete_CB+0x5c>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]

	if(count_pck == total_pck){
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <GAP_DisconnectionComplete_CB+0x60>)
 800163a:	881a      	ldrh	r2, [r3, #0]
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <GAP_DisconnectionComplete_CB+0x64>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d102      	bne.n	800164a <GAP_DisconnectionComplete_CB+0x36>
		go2App();
 8001644:	f7ff fb5e 	bl	8000d04 <go2App>
	}else{
		count_pck = 0;
		consd = -1;
	}
}
 8001648:	e006      	b.n	8001658 <GAP_DisconnectionComplete_CB+0x44>
		count_pck = 0;
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <GAP_DisconnectionComplete_CB+0x60>)
 800164c:	2200      	movs	r2, #0
 800164e:	801a      	strh	r2, [r3, #0]
		consd = -1;
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <GAP_DisconnectionComplete_CB+0x68>)
 8001652:	2201      	movs	r2, #1
 8001654:	4252      	negs	r2, r2
 8001656:	801a      	strh	r2, [r3, #0]
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	20000774 	.word	0x20000774
 8001664:	20000267 	.word	0x20000267
 8001668:	08007600 	.word	0x08007600
 800166c:	20000040 	.word	0x20000040
 8001670:	2000077a 	.word	0x2000077a
 8001674:	2000076a 	.word	0x2000076a
 8001678:	20000768 	.word	0x20000768
 800167c:	2000000c 	.word	0x2000000c

08001680 <Attribute_Modified_CB>:

void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	603a      	str	r2, [r7, #0]
 8001688:	1dbb      	adds	r3, r7, #6
 800168a:	1c02      	adds	r2, r0, #0
 800168c:	801a      	strh	r2, [r3, #0]
 800168e:	1d7b      	adds	r3, r7, #5
 8001690:	1c0a      	adds	r2, r1, #0
 8001692:	701a      	strb	r2, [r3, #0]


	if(handle == rx_char_handle+1){
 8001694:	1dbb      	adds	r3, r7, #6
 8001696:	881a      	ldrh	r2, [r3, #0]
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <Attribute_Modified_CB+0x58>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	429a      	cmp	r2, r3
 80016a0:	d107      	bne.n	80016b2 <Attribute_Modified_CB+0x32>
		data_handler(att_data, data_length);
 80016a2:	1d7b      	adds	r3, r7, #5
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	0011      	movs	r1, r2
 80016aa:	0018      	movs	r0, r3
 80016ac:	f7ff fc60 	bl	8000f70 <data_handler>
		if(att_data[0] == 0x01){
			notification_enabled = TRUE;
		}

	}
}
 80016b0:	e00d      	b.n	80016ce <Attribute_Modified_CB+0x4e>
	}else if(handle == tx_char_handle+2){
 80016b2:	1dbb      	adds	r3, r7, #6
 80016b4:	881a      	ldrh	r2, [r3, #0]
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <Attribute_Modified_CB+0x5c>)
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	3302      	adds	r3, #2
 80016bc:	429a      	cmp	r2, r3
 80016be:	d106      	bne.n	80016ce <Attribute_Modified_CB+0x4e>
		if(att_data[0] == 0x01){
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d102      	bne.n	80016ce <Attribute_Modified_CB+0x4e>
			notification_enabled = TRUE;
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <Attribute_Modified_CB+0x60>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]
}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b002      	add	sp, #8
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	2000076e 	.word	0x2000076e
 80016dc:	20000770 	.word	0x20000770
 80016e0:	2000077a 	.word	0x2000077a

080016e4 <HCI_Event_CB>:
 * @note   Inside this function each event must be identified and correctly
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void HCI_Event_CB(void *pData){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	hci_uart_pckt *hci_pckt = (hci_uart_pckt *)pData;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24

	/* Process event packet */
	if(hci_pckt->type == HCI_EVENT_PKT){
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d163      	bne.n	80017c0 <HCI_Event_CB+0xdc>
		/* Get data from packet */
		hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	3301      	adds	r3, #1
 80016fc:	623b      	str	r3, [r7, #32]

		switch(event_pckt->evt){
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2bff      	cmp	r3, #255	; 0xff
 8001704:	d01f      	beq.n	8001746 <HCI_Event_CB+0x62>
 8001706:	dc52      	bgt.n	80017ae <HCI_Event_CB+0xca>
 8001708:	2b05      	cmp	r3, #5
 800170a:	d002      	beq.n	8001712 <HCI_Event_CB+0x2e>
 800170c:	2b3e      	cmp	r3, #62	; 0x3e
 800170e:	d003      	beq.n	8001718 <HCI_Event_CB+0x34>
 8001710:	e04d      	b.n	80017ae <HCI_Event_CB+0xca>
			case EVT_DISCONN_COMPLETE:
				GAP_DisconnectionComplete_CB();
 8001712:	f7ff ff7f 	bl	8001614 <GAP_DisconnectionComplete_CB>

				break;
 8001716:	e05d      	b.n	80017d4 <HCI_Event_CB+0xf0>

			case EVT_LE_META_EVENT:
				{
					evt_le_meta_event *evt = (evt_le_meta_event*)event_pckt->data;
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	3302      	adds	r3, #2
 800171c:	613b      	str	r3, [r7, #16]

					switch(evt->subevent){
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d155      	bne.n	80017d2 <HCI_Event_CB+0xee>


						case EVT_LE_CONN_COMPLETE:
						{
							evt_le_connection_complete *cc = (evt_le_connection_complete *)evt->data;
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	3301      	adds	r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
							GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1d58      	adds	r0, r3, #5
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	785a      	ldrb	r2, [r3, #1]
 8001734:	789b      	ldrb	r3, [r3, #2]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	4313      	orrs	r3, r2
 800173a:	b29b      	uxth	r3, r3
 800173c:	0019      	movs	r1, r3
 800173e:	f7ff ff29 	bl	8001594 <GAP_ConnectionComplete_CB>
						}
							break;
 8001742:	46c0      	nop			; (mov r8, r8)
					}
				}

				break;
 8001744:	e045      	b.n	80017d2 <HCI_Event_CB+0xee>

			case EVT_VENDOR:
			{
				evt_blue_aci *blue_evt = (evt_blue_aci*)event_pckt->data;
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	3302      	adds	r3, #2
 800174a:	61fb      	str	r3, [r7, #28]

				switch(blue_evt->ecode){
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	781a      	ldrb	r2, [r3, #0]
 8001750:	785b      	ldrb	r3, [r3, #1]
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	4313      	orrs	r3, r2
 8001756:	b29b      	uxth	r3, r3
 8001758:	4a20      	ldr	r2, [pc, #128]	; (80017dc <HCI_Event_CB+0xf8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d003      	beq.n	8001766 <HCI_Event_CB+0x82>
 800175e:	4a20      	ldr	r2, [pc, #128]	; (80017e0 <HCI_Event_CB+0xfc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d011      	beq.n	8001788 <HCI_Event_CB+0xa4>
						break;
*/
				}
			}

				break;
 8001764:	e036      	b.n	80017d4 <HCI_Event_CB+0xf0>
						evt_gatt_attr_modified_IDB05A1 *evt =
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3302      	adds	r3, #2
 800176a:	617b      	str	r3, [r7, #20]
						Attribute_Modified_CB(evt->attr_handle, evt->data_length,
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	789a      	ldrb	r2, [r3, #2]
 8001770:	78db      	ldrb	r3, [r3, #3]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	4313      	orrs	r3, r2
 8001776:	b298      	uxth	r0, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	7919      	ldrb	r1, [r3, #4]
								evt->att_data);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3307      	adds	r3, #7
						Attribute_Modified_CB(evt->attr_handle, evt->data_length,
 8001780:	001a      	movs	r2, r3
 8001782:	f7ff ff7d 	bl	8001680 <Attribute_Modified_CB>
						break;
 8001786:	e011      	b.n	80017ac <HCI_Event_CB+0xc8>
						printf("NON DOVREBBE ENTRARE\n\r");
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HCI_Event_CB+0x100>)
 800178a:	0018      	movs	r0, r3
 800178c:	f005 f898 	bl	80068c0 <iprintf>
						evt_gatt_attr_notification *evt =
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	3302      	adds	r3, #2
 8001794:	61bb      	str	r3, [r7, #24]
						data_handler(evt->attr_value, evt->event_data_length - 2);
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	1d5a      	adds	r2, r3, #5
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	789b      	ldrb	r3, [r3, #2]
 800179e:	3b02      	subs	r3, #2
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	0019      	movs	r1, r3
 80017a4:	0010      	movs	r0, r2
 80017a6:	f7ff fbe3 	bl	8000f70 <data_handler>
						break;
 80017aa:	46c0      	nop			; (mov r8, r8)
				break;
 80017ac:	e012      	b.n	80017d4 <HCI_Event_CB+0xf0>


			default:
				printf("%d\n\r",event_pckt->evt);
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	001a      	movs	r2, r3
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HCI_Event_CB+0x104>)
 80017b6:	0011      	movs	r1, r2
 80017b8:	0018      	movs	r0, r3
 80017ba:	f005 f881 	bl	80068c0 <iprintf>
				break;
 80017be:	e009      	b.n	80017d4 <HCI_Event_CB+0xf0>
		}

	}else{
		printf("pckt_type: %d", hci_pckt->type);
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	001a      	movs	r2, r3
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HCI_Event_CB+0x108>)
 80017c8:	0011      	movs	r1, r2
 80017ca:	0018      	movs	r0, r3
 80017cc:	f005 f878 	bl	80068c0 <iprintf>
	}
}
 80017d0:	e000      	b.n	80017d4 <HCI_Event_CB+0xf0>
				break;
 80017d2:	46c0      	nop			; (mov r8, r8)
}
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b00a      	add	sp, #40	; 0x28
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	00000c01 	.word	0x00000c01
 80017e0:	00000c0f 	.word	0x00000c0f
 80017e4:	0800761c 	.word	0x0800761c
 80017e8:	08007634 	.word	0x08007634
 80017ec:	0800763c 	.word	0x0800763c

080017f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_MspInit+0x44>)
 80017f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_MspInit+0x44>)
 80017fc:	2101      	movs	r1, #1
 80017fe:	430a      	orrs	r2, r1
 8001800:	641a      	str	r2, [r3, #64]	; 0x40
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <HAL_MspInit+0x44>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	2201      	movs	r2, #1
 8001808:	4013      	ands	r3, r2
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_MspInit+0x44>)
 8001810:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_MspInit+0x44>)
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	0549      	lsls	r1, r1, #21
 8001818:	430a      	orrs	r2, r1
 800181a:	63da      	str	r2, [r3, #60]	; 0x3c
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_MspInit+0x44>)
 800181e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	055b      	lsls	r3, r3, #21
 8001824:	4013      	ands	r3, r2
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b002      	add	sp, #8
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	40021000 	.word	0x40021000

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800183c:	e7fe      	b.n	800183c <NMI_Handler+0x4>

0800183e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <HardFault_Handler+0x4>

08001844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185c:	f000 fb36 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001860:	46c0      	nop			; (mov r8, r8)
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <EXTI0_1_IRQHandler+0x14>)
 800186e:	0018      	movs	r0, r3
 8001870:	f000 fc8e 	bl	8002190 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001874:	46c0      	nop			; (mov r8, r8)
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	2000015c 	.word	0x2000015c

08001880 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <BSP_SPI1_Init+0x54>)
 800188c:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <BSP_SPI1_Init+0x58>)
 800188e:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <BSP_SPI1_Init+0x5c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	1c59      	adds	r1, r3, #1
 8001896:	4a11      	ldr	r2, [pc, #68]	; (80018dc <BSP_SPI1_Init+0x5c>)
 8001898:	6011      	str	r1, [r2, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d115      	bne.n	80018ca <BSP_SPI1_Init+0x4a>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <BSP_SPI1_Init+0x54>)
 80018a0:	0018      	movs	r0, r3
 80018a2:	f002 fbcf 	bl	8004044 <HAL_SPI_GetState>
 80018a6:	1e03      	subs	r3, r0, #0
 80018a8:	d10f      	bne.n	80018ca <BSP_SPI1_Init+0x4a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <BSP_SPI1_Init+0x54>)
 80018ac:	0018      	movs	r0, r3
 80018ae:	f000 f887 	bl	80019c0 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d108      	bne.n	80018ca <BSP_SPI1_Init+0x4a>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <BSP_SPI1_Init+0x54>)
 80018ba:	0018      	movs	r0, r3
 80018bc:	f000 f838 	bl	8001930 <MX_SPI1_Init>
 80018c0:	1e03      	subs	r3, r0, #0
 80018c2:	d002      	beq.n	80018ca <BSP_SPI1_Init+0x4a>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80018c4:	2308      	movs	r3, #8
 80018c6:	425b      	negs	r3, r3
 80018c8:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80018ca:	687b      	ldr	r3, [r7, #4]
}
 80018cc:	0018      	movs	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b002      	add	sp, #8
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2000077c 	.word	0x2000077c
 80018d8:	40013000 	.word	0x40013000
 80018dc:	200007e0 	.word	0x200007e0

080018e0 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	1dbb      	adds	r3, r7, #6
 80018ec:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80018f2:	1dbb      	adds	r3, r7, #6
 80018f4:	881c      	ldrh	r4, [r3, #0]
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	68f9      	ldr	r1, [r7, #12]
 80018fa:	4808      	ldr	r0, [pc, #32]	; (800191c <BSP_SPI1_SendRecv+0x3c>)
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	015b      	lsls	r3, r3, #5
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	0023      	movs	r3, r4
 8001904:	f002 f9cc 	bl	8003ca0 <HAL_SPI_TransmitReceive>
 8001908:	1e03      	subs	r3, r0, #0
 800190a:	d002      	beq.n	8001912 <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800190c:	2306      	movs	r3, #6
 800190e:	425b      	negs	r3, r3
 8001910:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001912:	697b      	ldr	r3, [r7, #20]
}
 8001914:	0018      	movs	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	b007      	add	sp, #28
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	2000077c 	.word	0x2000077c

08001920 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001924:	f000 fae4 	bl	8001ef0 <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
}
 800192a:	0018      	movs	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001938:	240f      	movs	r4, #15
 800193a:	193b      	adds	r3, r7, r4
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]

  hspi->Instance = SPI1;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a1e      	ldr	r2, [pc, #120]	; (80019bc <MX_SPI1_Init+0x8c>)
 8001944:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2282      	movs	r2, #130	; 0x82
 800194a:	0052      	lsls	r2, r2, #1
 800194c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	22e0      	movs	r2, #224	; 0xe0
 8001958:	00d2      	lsls	r2, r2, #3
 800195a:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2280      	movs	r2, #128	; 0x80
 800196c:	0092      	lsls	r2, r2, #2
 800196e:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2218      	movs	r2, #24
 8001974:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2207      	movs	r2, #7
 800198c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2208      	movs	r2, #8
 8001998:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	0018      	movs	r0, r3
 800199e:	f002 f8bf 	bl	8003b20 <HAL_SPI_Init>
 80019a2:	1e03      	subs	r3, r0, #0
 80019a4:	d002      	beq.n	80019ac <MX_SPI1_Init+0x7c>
  {
    ret = HAL_ERROR;
 80019a6:	193b      	adds	r3, r7, r4
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80019ac:	230f      	movs	r3, #15
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	781b      	ldrb	r3, [r3, #0]
}
 80019b2:	0018      	movs	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b005      	add	sp, #20
 80019b8:	bd90      	pop	{r4, r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	40013000 	.word	0x40013000

080019c0 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b08b      	sub	sp, #44	; 0x2c
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019c8:	4b36      	ldr	r3, [pc, #216]	; (8001aa4 <SPI1_MspInit+0xe4>)
 80019ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019cc:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <SPI1_MspInit+0xe4>)
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	0149      	lsls	r1, r1, #5
 80019d2:	430a      	orrs	r2, r1
 80019d4:	641a      	str	r2, [r3, #64]	; 0x40
 80019d6:	4b33      	ldr	r3, [pc, #204]	; (8001aa4 <SPI1_MspInit+0xe4>)
 80019d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	015b      	lsls	r3, r3, #5
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <SPI1_MspInit+0xe4>)
 80019e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e8:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <SPI1_MspInit+0xe4>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	430a      	orrs	r2, r1
 80019ee:	635a      	str	r2, [r3, #52]	; 0x34
 80019f0:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <SPI1_MspInit+0xe4>)
 80019f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f4:	2201      	movs	r2, #1
 80019f6:	4013      	ands	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <SPI1_MspInit+0xe4>)
 80019fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a00:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <SPI1_MspInit+0xe4>)
 8001a02:	2102      	movs	r1, #2
 8001a04:	430a      	orrs	r2, r1
 8001a06:	635a      	str	r2, [r3, #52]	; 0x34
 8001a08:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <SPI1_MspInit+0xe4>)
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	4013      	ands	r3, r2
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001a14:	2414      	movs	r4, #20
 8001a16:	193b      	adds	r3, r7, r4
 8001a18:	2240      	movs	r2, #64	; 0x40
 8001a1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	193b      	adds	r3, r7, r4
 8001a1e:	2202      	movs	r2, #2
 8001a20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	193b      	adds	r3, r7, r4
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	193b      	adds	r3, r7, r4
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001a2e:	193b      	adds	r3, r7, r4
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001a34:	193a      	adds	r2, r7, r4
 8001a36:	23a0      	movs	r3, #160	; 0xa0
 8001a38:	05db      	lsls	r3, r3, #23
 8001a3a:	0011      	movs	r1, r2
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f000 fde3 	bl	8002608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001a42:	193b      	adds	r3, r7, r4
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	193b      	adds	r3, r7, r4
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	193b      	adds	r3, r7, r4
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	193b      	adds	r3, r7, r4
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001a5a:	193b      	adds	r3, r7, r4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001a60:	193a      	adds	r2, r7, r4
 8001a62:	23a0      	movs	r3, #160	; 0xa0
 8001a64:	05db      	lsls	r3, r3, #23
 8001a66:	0011      	movs	r1, r2
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f000 fdcd 	bl	8002608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001a6e:	0021      	movs	r1, r4
 8001a70:	187b      	adds	r3, r7, r1
 8001a72:	2208      	movs	r2, #8
 8001a74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	2202      	movs	r2, #2
 8001a7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	187b      	adds	r3, r7, r1
 8001a84:	2200      	movs	r2, #0
 8001a86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001a8e:	187b      	adds	r3, r7, r1
 8001a90:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <SPI1_MspInit+0xe8>)
 8001a92:	0019      	movs	r1, r3
 8001a94:	0010      	movs	r0, r2
 8001a96:	f000 fdb7 	bl	8002608 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b00b      	add	sp, #44	; 0x2c
 8001aa0:	bd90      	pop	{r4, r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	50000400 	.word	0x50000400

08001aac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	e00a      	b.n	8001ad4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001abe:	e000      	b.n	8001ac2 <_read+0x16>
 8001ac0:	bf00      	nop
 8001ac2:	0001      	movs	r1, r0
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	60ba      	str	r2, [r7, #8]
 8001aca:	b2ca      	uxtb	r2, r1
 8001acc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dbf0      	blt.n	8001abe <_read+0x12>
	}

return len;
 8001adc:	687b      	ldr	r3, [r7, #4]
}
 8001ade:	0018      	movs	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b006      	add	sp, #24
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e009      	b.n	8001b0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	60ba      	str	r2, [r7, #8]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7ff f9b1 	bl	8000e68 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	dbf1      	blt.n	8001af8 <_write+0x12>
	}
	return len;
 8001b14:	687b      	ldr	r3, [r7, #4]
}
 8001b16:	0018      	movs	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b006      	add	sp, #24
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <_close>:

int _close(int file)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
	return -1;
 8001b26:	2301      	movs	r3, #1
 8001b28:	425b      	negs	r3, r3
}
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b002      	add	sp, #8
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	2280      	movs	r2, #128	; 0x80
 8001b40:	0192      	lsls	r2, r2, #6
 8001b42:	605a      	str	r2, [r3, #4]
	return 0;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b002      	add	sp, #8
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_isatty>:

int _isatty(int file)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
	return 1;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	0018      	movs	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b002      	add	sp, #8
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	0018      	movs	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b004      	add	sp, #16
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b80:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <_sbrk+0x5c>)
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <_sbrk+0x60>)
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <_sbrk+0x64>)
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <_sbrk+0x68>)
 8001b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	18d3      	adds	r3, r2, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d207      	bcs.n	8001bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba8:	f004 fb86 	bl	80062b8 <__errno>
 8001bac:	0003      	movs	r3, r0
 8001bae:	220c      	movs	r2, #12
 8001bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	425b      	negs	r3, r3
 8001bb6:	e009      	b.n	8001bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	18d2      	adds	r2, r2, r3
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <_sbrk+0x64>)
 8001bc8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001bca:	68fb      	ldr	r3, [r7, #12]
}
 8001bcc:	0018      	movs	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b006      	add	sp, #24
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20024000 	.word	0x20024000
 8001bd8:	00000400 	.word	0x00000400
 8001bdc:	200007e4 	.word	0x200007e4
 8001be0:	20000b98 	.word	0x20000b98

08001be4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bf4:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <MX_USART2_UART_Init+0x94>)
 8001bf6:	4a24      	ldr	r2, [pc, #144]	; (8001c88 <MX_USART2_UART_Init+0x98>)
 8001bf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bfa:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <MX_USART2_UART_Init+0x94>)
 8001bfc:	22e1      	movs	r2, #225	; 0xe1
 8001bfe:	0252      	lsls	r2, r2, #9
 8001c00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c02:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <MX_USART2_UART_Init+0x94>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c08:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <MX_USART2_UART_Init+0x94>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <MX_USART2_UART_Init+0x94>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <MX_USART2_UART_Init+0x94>)
 8001c16:	220c      	movs	r2, #12
 8001c18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <MX_USART2_UART_Init+0x94>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <MX_USART2_UART_Init+0x94>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <MX_USART2_UART_Init+0x94>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <MX_USART2_UART_Init+0x94>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <MX_USART2_UART_Init+0x94>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <MX_USART2_UART_Init+0x94>)
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f002 fb84 	bl	8004348 <HAL_UART_Init>
 8001c40:	1e03      	subs	r3, r0, #0
 8001c42:	d001      	beq.n	8001c48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c44:	f7ff f98e 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_USART2_UART_Init+0x94>)
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f003 f9c7 	bl	8004fe0 <HAL_UARTEx_SetTxFifoThreshold>
 8001c52:	1e03      	subs	r3, r0, #0
 8001c54:	d001      	beq.n	8001c5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c56:	f7ff f985 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <MX_USART2_UART_Init+0x94>)
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f003 f9fe 	bl	8005060 <HAL_UARTEx_SetRxFifoThreshold>
 8001c64:	1e03      	subs	r3, r0, #0
 8001c66:	d001      	beq.n	8001c6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c68:	f7ff f97c 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <MX_USART2_UART_Init+0x94>)
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f003 f97c 	bl	8004f6c <HAL_UARTEx_DisableFifoMode>
 8001c74:	1e03      	subs	r3, r0, #0
 8001c76:	d001      	beq.n	8001c7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c78:	f7ff f974 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c7c:	46c0      	nop			; (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	200007e8 	.word	0x200007e8
 8001c88:	40004400 	.word	0x40004400

08001c8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b09d      	sub	sp, #116	; 0x74
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	235c      	movs	r3, #92	; 0x5c
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	0018      	movs	r0, r3
 8001c9a:	2314      	movs	r3, #20
 8001c9c:	001a      	movs	r2, r3
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	f004 fd24 	bl	80066ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ca4:	2410      	movs	r4, #16
 8001ca6:	193b      	adds	r3, r7, r4
 8001ca8:	0018      	movs	r0, r3
 8001caa:	234c      	movs	r3, #76	; 0x4c
 8001cac:	001a      	movs	r2, r3
 8001cae:	2100      	movs	r1, #0
 8001cb0:	f004 fd1c 	bl	80066ec <memset>
  if(uartHandle->Instance==USART2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a22      	ldr	r2, [pc, #136]	; (8001d44 <HAL_UART_MspInit+0xb8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d13e      	bne.n	8001d3c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cbe:	193b      	adds	r3, r7, r4
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cc4:	193b      	adds	r3, r7, r4
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cca:	193b      	adds	r3, r7, r4
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f001 fceb 	bl	80036a8 <HAL_RCCEx_PeriphCLKConfig>
 8001cd2:	1e03      	subs	r3, r0, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001cd6:	f7ff f945 	bl	8000f64 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cda:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <HAL_UART_MspInit+0xbc>)
 8001cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_UART_MspInit+0xbc>)
 8001ce0:	2180      	movs	r1, #128	; 0x80
 8001ce2:	0289      	lsls	r1, r1, #10
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ce8:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_UART_MspInit+0xbc>)
 8001cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	029b      	lsls	r3, r3, #10
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <HAL_UART_MspInit+0xbc>)
 8001cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <HAL_UART_MspInit+0xbc>)
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	635a      	str	r2, [r3, #52]	; 0x34
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <HAL_UART_MspInit+0xbc>)
 8001d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d06:	2201      	movs	r2, #1
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001d0e:	215c      	movs	r1, #92	; 0x5c
 8001d10:	187b      	adds	r3, r7, r1
 8001d12:	220c      	movs	r2, #12
 8001d14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	187b      	adds	r3, r7, r1
 8001d18:	2202      	movs	r2, #2
 8001d1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	187b      	adds	r3, r7, r1
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001d28:	187b      	adds	r3, r7, r1
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	187a      	adds	r2, r7, r1
 8001d30:	23a0      	movs	r3, #160	; 0xa0
 8001d32:	05db      	lsls	r3, r3, #23
 8001d34:	0011      	movs	r1, r2
 8001d36:	0018      	movs	r0, r3
 8001d38:	f000 fc66 	bl	8002608 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d3c:	46c0      	nop			; (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b01d      	add	sp, #116	; 0x74
 8001d42:	bd90      	pop	{r4, r7, pc}
 8001d44:	40004400 	.word	0x40004400
 8001d48:	40021000 	.word	0x40021000

08001d4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d4e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d50:	f7ff ff48 	bl	8001be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d56:	490d      	ldr	r1, [pc, #52]	; (8001d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d58:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <LoopForever+0xe>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d5c:	e002      	b.n	8001d64 <LoopCopyDataInit>

08001d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d62:	3304      	adds	r3, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d68:	d3f9      	bcc.n	8001d5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d6c:	4c0a      	ldr	r4, [pc, #40]	; (8001d98 <LoopForever+0x16>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d70:	e001      	b.n	8001d76 <LoopFillZerobss>

08001d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d74:	3204      	adds	r2, #4

08001d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d78:	d3fb      	bcc.n	8001d72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d7a:	f004 fc87 	bl	800668c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d7e:	f7ff f885 	bl	8000e8c <main>

08001d82 <LoopForever>:

LoopForever:
  b LoopForever
 8001d82:	e7fe      	b.n	8001d82 <LoopForever>
  ldr   r0, =_estack
 8001d84:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d8c:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8001d90:	0800777c 	.word	0x0800777c
  ldr r2, =_sbss
 8001d94:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 8001d98:	20000b98 	.word	0x20000b98

08001d9c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d9c:	e7fe      	b.n	8001d9c <ADC1_COMP_IRQHandler>
	...

08001da0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001da6:	1dfb      	adds	r3, r7, #7
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_Init+0x3c>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_Init+0x3c>)
 8001db2:	2180      	movs	r1, #128	; 0x80
 8001db4:	0049      	lsls	r1, r1, #1
 8001db6:	430a      	orrs	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f000 f83c 	bl	8001e38 <HAL_InitTick>
 8001dc0:	1e03      	subs	r3, r0, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001dc4:	1dfb      	adds	r3, r7, #7
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	e001      	b.n	8001dd0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001dcc:	f7ff fd10 	bl	80017f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dd0:	1dfb      	adds	r3, r7, #7
 8001dd2:	781b      	ldrb	r3, [r3, #0]
}
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b002      	add	sp, #8
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40022000 	.word	0x40022000

08001de0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_DeInit+0x48>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	4252      	negs	r2, r2
 8001dea:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_APB1_RELEASE_RESET();
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_DeInit+0x48>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_APB2_FORCE_RESET();
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <HAL_DeInit+0x48>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	4252      	negs	r2, r2
 8001df8:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_APB2_RELEASE_RESET();
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_DeInit+0x48>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30

  __HAL_RCC_AHB_FORCE_RESET();
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_DeInit+0x48>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	4252      	negs	r2, r2
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8001e08:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <HAL_DeInit+0x48>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_IOP_FORCE_RESET();
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_DeInit+0x48>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	4252      	negs	r2, r2
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_IOP_RELEASE_RESET();
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <HAL_DeInit+0x48>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001e1c:	f000 f806 	bl	8001e2c <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	0018      	movs	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000

08001e2c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001e30:	46c0      	nop			; (mov r8, r8)
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e40:	230f      	movs	r3, #15
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_InitTick+0x88>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d02b      	beq.n	8001ea8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001e50:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <HAL_InitTick+0x8c>)
 8001e52:	681c      	ldr	r4, [r3, #0]
 8001e54:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <HAL_InitTick+0x88>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	0019      	movs	r1, r3
 8001e5a:	23fa      	movs	r3, #250	; 0xfa
 8001e5c:	0098      	lsls	r0, r3, #2
 8001e5e:	f7fe f965 	bl	800012c <__udivsi3>
 8001e62:	0003      	movs	r3, r0
 8001e64:	0019      	movs	r1, r3
 8001e66:	0020      	movs	r0, r4
 8001e68:	f7fe f960 	bl	800012c <__udivsi3>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f000 f93d 	bl	80020ee <HAL_SYSTICK_Config>
 8001e74:	1e03      	subs	r3, r0, #0
 8001e76:	d112      	bne.n	8001e9e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d80a      	bhi.n	8001e94 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	2301      	movs	r3, #1
 8001e82:	425b      	negs	r3, r3
 8001e84:	2200      	movs	r2, #0
 8001e86:	0018      	movs	r0, r3
 8001e88:	f000 f90c 	bl	80020a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <HAL_InitTick+0x90>)
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	e00d      	b.n	8001eb0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001e94:	230f      	movs	r3, #15
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	e008      	b.n	8001eb0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e9e:	230f      	movs	r3, #15
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
 8001ea6:	e003      	b.n	8001eb0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ea8:	230f      	movs	r3, #15
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001eb0:	230f      	movs	r3, #15
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	781b      	ldrb	r3, [r3, #0]
}
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b005      	add	sp, #20
 8001ebc:	bd90      	pop	{r4, r7, pc}
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	2000004c 	.word	0x2000004c
 8001ec4:	20000044 	.word	0x20000044
 8001ec8:	20000048 	.word	0x20000048

08001ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_IncTick+0x1c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_IncTick+0x20>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	18d2      	adds	r2, r2, r3
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <HAL_IncTick+0x20>)
 8001ede:	601a      	str	r2, [r3, #0]
}
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	2000004c 	.word	0x2000004c
 8001eec:	2000087c 	.word	0x2000087c

08001ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef4:	4b02      	ldr	r3, [pc, #8]	; (8001f00 <HAL_GetTick+0x10>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	2000087c 	.word	0x2000087c

08001f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f0c:	f7ff fff0 	bl	8001ef0 <HAL_GetTick>
 8001f10:	0003      	movs	r3, r0
 8001f12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	d005      	beq.n	8001f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <HAL_Delay+0x44>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	001a      	movs	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	189b      	adds	r3, r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	f7ff ffe0 	bl	8001ef0 <HAL_GetTick>
 8001f30:	0002      	movs	r2, r0
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d8f7      	bhi.n	8001f2c <HAL_Delay+0x28>
  {
  }
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b004      	add	sp, #16
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	2000004c 	.word	0x2000004c

08001f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	0002      	movs	r2, r0
 8001f54:	1dfb      	adds	r3, r7, #7
 8001f56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	1dfb      	adds	r3, r7, #7
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b7f      	cmp	r3, #127	; 0x7f
 8001f5e:	d809      	bhi.n	8001f74 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f60:	1dfb      	adds	r3, r7, #7
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	001a      	movs	r2, r3
 8001f66:	231f      	movs	r3, #31
 8001f68:	401a      	ands	r2, r3
 8001f6a:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <__NVIC_EnableIRQ+0x30>)
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	4091      	lsls	r1, r2
 8001f70:	000a      	movs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001f74:	46c0      	nop			; (mov r8, r8)
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b002      	add	sp, #8
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	e000e100 	.word	0xe000e100

08001f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	0002      	movs	r2, r0
 8001f88:	6039      	str	r1, [r7, #0]
 8001f8a:	1dfb      	adds	r3, r7, #7
 8001f8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f8e:	1dfb      	adds	r3, r7, #7
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b7f      	cmp	r3, #127	; 0x7f
 8001f94:	d828      	bhi.n	8001fe8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f96:	4a2f      	ldr	r2, [pc, #188]	; (8002054 <__NVIC_SetPriority+0xd4>)
 8001f98:	1dfb      	adds	r3, r7, #7
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	b25b      	sxtb	r3, r3
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	33c0      	adds	r3, #192	; 0xc0
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	589b      	ldr	r3, [r3, r2]
 8001fa6:	1dfa      	adds	r2, r7, #7
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	0011      	movs	r1, r2
 8001fac:	2203      	movs	r2, #3
 8001fae:	400a      	ands	r2, r1
 8001fb0:	00d2      	lsls	r2, r2, #3
 8001fb2:	21ff      	movs	r1, #255	; 0xff
 8001fb4:	4091      	lsls	r1, r2
 8001fb6:	000a      	movs	r2, r1
 8001fb8:	43d2      	mvns	r2, r2
 8001fba:	401a      	ands	r2, r3
 8001fbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	019b      	lsls	r3, r3, #6
 8001fc2:	22ff      	movs	r2, #255	; 0xff
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	1dfb      	adds	r3, r7, #7
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	0018      	movs	r0, r3
 8001fcc:	2303      	movs	r3, #3
 8001fce:	4003      	ands	r3, r0
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd4:	481f      	ldr	r0, [pc, #124]	; (8002054 <__NVIC_SetPriority+0xd4>)
 8001fd6:	1dfb      	adds	r3, r7, #7
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	b25b      	sxtb	r3, r3
 8001fdc:	089b      	lsrs	r3, r3, #2
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	33c0      	adds	r3, #192	; 0xc0
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fe6:	e031      	b.n	800204c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe8:	4a1b      	ldr	r2, [pc, #108]	; (8002058 <__NVIC_SetPriority+0xd8>)
 8001fea:	1dfb      	adds	r3, r7, #7
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	0019      	movs	r1, r3
 8001ff0:	230f      	movs	r3, #15
 8001ff2:	400b      	ands	r3, r1
 8001ff4:	3b08      	subs	r3, #8
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	3306      	adds	r3, #6
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	18d3      	adds	r3, r2, r3
 8001ffe:	3304      	adds	r3, #4
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	1dfa      	adds	r2, r7, #7
 8002004:	7812      	ldrb	r2, [r2, #0]
 8002006:	0011      	movs	r1, r2
 8002008:	2203      	movs	r2, #3
 800200a:	400a      	ands	r2, r1
 800200c:	00d2      	lsls	r2, r2, #3
 800200e:	21ff      	movs	r1, #255	; 0xff
 8002010:	4091      	lsls	r1, r2
 8002012:	000a      	movs	r2, r1
 8002014:	43d2      	mvns	r2, r2
 8002016:	401a      	ands	r2, r3
 8002018:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	019b      	lsls	r3, r3, #6
 800201e:	22ff      	movs	r2, #255	; 0xff
 8002020:	401a      	ands	r2, r3
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	0018      	movs	r0, r3
 8002028:	2303      	movs	r3, #3
 800202a:	4003      	ands	r3, r0
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002030:	4809      	ldr	r0, [pc, #36]	; (8002058 <__NVIC_SetPriority+0xd8>)
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	001c      	movs	r4, r3
 8002038:	230f      	movs	r3, #15
 800203a:	4023      	ands	r3, r4
 800203c:	3b08      	subs	r3, #8
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	430a      	orrs	r2, r1
 8002042:	3306      	adds	r3, #6
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	18c3      	adds	r3, r0, r3
 8002048:	3304      	adds	r3, #4
 800204a:	601a      	str	r2, [r3, #0]
}
 800204c:	46c0      	nop			; (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	b003      	add	sp, #12
 8002052:	bd90      	pop	{r4, r7, pc}
 8002054:	e000e100 	.word	0xe000e100
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	1e5a      	subs	r2, r3, #1
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	045b      	lsls	r3, r3, #17
 800206c:	429a      	cmp	r2, r3
 800206e:	d301      	bcc.n	8002074 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002070:	2301      	movs	r3, #1
 8002072:	e010      	b.n	8002096 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <SysTick_Config+0x44>)
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	3a01      	subs	r2, #1
 800207a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207c:	2301      	movs	r3, #1
 800207e:	425b      	negs	r3, r3
 8002080:	2103      	movs	r1, #3
 8002082:	0018      	movs	r0, r3
 8002084:	f7ff ff7c 	bl	8001f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <SysTick_Config+0x44>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <SysTick_Config+0x44>)
 8002090:	2207      	movs	r2, #7
 8002092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002094:	2300      	movs	r3, #0
}
 8002096:	0018      	movs	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	b002      	add	sp, #8
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	e000e010 	.word	0xe000e010

080020a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	210f      	movs	r1, #15
 80020b0:	187b      	adds	r3, r7, r1
 80020b2:	1c02      	adds	r2, r0, #0
 80020b4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	187b      	adds	r3, r7, r1
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	b25b      	sxtb	r3, r3
 80020be:	0011      	movs	r1, r2
 80020c0:	0018      	movs	r0, r3
 80020c2:	f7ff ff5d 	bl	8001f80 <__NVIC_SetPriority>
}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b004      	add	sp, #16
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	0002      	movs	r2, r0
 80020d6:	1dfb      	adds	r3, r7, #7
 80020d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020da:	1dfb      	adds	r3, r7, #7
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b25b      	sxtb	r3, r3
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7ff ff33 	bl	8001f4c <__NVIC_EnableIRQ>
}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b002      	add	sp, #8
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7ff ffaf 	bl	800205c <SysTick_Config>
 80020fe:	0003      	movs	r3, r0
}
 8002100:	0018      	movs	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	200b      	movs	r0, #11
 8002114:	183b      	adds	r3, r7, r0
 8002116:	1c0a      	adds	r2, r1, #0
 8002118:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800211a:	2317      	movs	r3, #23
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 8002122:	183b      	adds	r3, r7, r0
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d010      	beq.n	800214c <HAL_EXTI_RegisterCallback+0x44>
 800212a:	dc13      	bgt.n	8002154 <HAL_EXTI_RegisterCallback+0x4c>
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_EXTI_RegisterCallback+0x2e>
 8002130:	2b01      	cmp	r3, #1
 8002132:	d007      	beq.n	8002144 <HAL_EXTI_RegisterCallback+0x3c>
 8002134:	e00e      	b.n	8002154 <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	609a      	str	r2, [r3, #8]
      break;
 8002142:	e00c      	b.n	800215e <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	605a      	str	r2, [r3, #4]
      break;
 800214a:	e008      	b.n	800215e <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	609a      	str	r2, [r3, #8]
      break;
 8002152:	e004      	b.n	800215e <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 8002154:	2317      	movs	r3, #23
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
      break;
 800215c:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 800215e:	2317      	movs	r3, #23
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	781b      	ldrb	r3, [r3, #0]
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b006      	add	sp, #24
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e003      	b.n	8002188 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002186:	2300      	movs	r3, #0
  }
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	0c1b      	lsrs	r3, r3, #16
 800219e:	2201      	movs	r2, #1
 80021a0:	4013      	ands	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	221f      	movs	r2, #31
 80021aa:	4013      	ands	r3, r2
 80021ac:	2201      	movs	r2, #1
 80021ae:	409a      	lsls	r2, r3
 80021b0:	0013      	movs	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	015b      	lsls	r3, r3, #5
 80021b8:	4a18      	ldr	r2, [pc, #96]	; (800221c <HAL_EXTI_IRQHandler+0x8c>)
 80021ba:	4694      	mov	ip, r2
 80021bc:	4463      	add	r3, ip
 80021be:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d009      	beq.n	80021e4 <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	015b      	lsls	r3, r3, #5
 80021e8:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <HAL_EXTI_IRQHandler+0x90>)
 80021ea:	4694      	mov	ip, r2
 80021ec:	4463      	add	r3, ip
 80021ee:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d009      	beq.n	8002214 <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	4798      	blx	r3
    }
  }
}
 8002214:	46c0      	nop			; (mov r8, r8)
 8002216:	46bd      	mov	sp, r7
 8002218:	b006      	add	sp, #24
 800221a:	bd80      	pop	{r7, pc}
 800221c:	4002180c 	.word	0x4002180c
 8002220:	40021810 	.word	0x40021810

08002224 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002224:	b5b0      	push	{r4, r5, r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	603a      	str	r2, [r7, #0]
 8002230:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002232:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <HAL_FLASH_Program+0x94>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_FLASH_Program+0x1a>
 800223a:	2302      	movs	r3, #2
 800223c:	e038      	b.n	80022b0 <HAL_FLASH_Program+0x8c>
 800223e:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <HAL_FLASH_Program+0x94>)
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002244:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <HAL_FLASH_Program+0x94>)
 8002246:	2200      	movs	r2, #0
 8002248:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800224a:	2517      	movs	r5, #23
 800224c:	197c      	adds	r4, r7, r5
 800224e:	23fa      	movs	r3, #250	; 0xfa
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	0018      	movs	r0, r3
 8002254:	f000 f8ba 	bl	80023cc <FLASH_WaitForLastOperation>
 8002258:	0003      	movs	r3, r0
 800225a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800225c:	197b      	adds	r3, r7, r5
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d11f      	bne.n	80022a4 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d106      	bne.n	8002278 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68b9      	ldr	r1, [r7, #8]
 8002270:	0008      	movs	r0, r1
 8002272:	f000 f8f9 	bl	8002468 <FLASH_Program_DoubleWord>
 8002276:	e005      	b.n	8002284 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	0011      	movs	r1, r2
 800227e:	0018      	movs	r0, r3
 8002280:	f005 f84e 	bl	8007320 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002284:	2317      	movs	r3, #23
 8002286:	18fc      	adds	r4, r7, r3
 8002288:	23fa      	movs	r3, #250	; 0xfa
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	0018      	movs	r0, r3
 800228e:	f000 f89d 	bl	80023cc <FLASH_WaitForLastOperation>
 8002292:	0003      	movs	r3, r0
 8002294:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_FLASH_Program+0x98>)
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	43d9      	mvns	r1, r3
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_FLASH_Program+0x98>)
 80022a0:	400a      	ands	r2, r1
 80022a2:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <HAL_FLASH_Program+0x94>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80022aa:	2317      	movs	r3, #23
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	781b      	ldrb	r3, [r3, #0]
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b006      	add	sp, #24
 80022b6:	bdb0      	pop	{r4, r5, r7, pc}
 80022b8:	20000880 	.word	0x20000880
 80022bc:	40022000 	.word	0x40022000

080022c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80022c6:	1dfb      	adds	r3, r7, #7
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_FLASH_Unlock+0x3c>)
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	da0c      	bge.n	80022ee <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_FLASH_Unlock+0x3c>)
 80022d6:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <HAL_FLASH_Unlock+0x40>)
 80022d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_FLASH_Unlock+0x3c>)
 80022dc:	4a09      	ldr	r2, [pc, #36]	; (8002304 <HAL_FLASH_Unlock+0x44>)
 80022de:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_FLASH_Unlock+0x3c>)
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	da02      	bge.n	80022ee <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80022e8:	1dfb      	adds	r3, r7, #7
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80022ee:	1dfb      	adds	r3, r7, #7
 80022f0:	781b      	ldrb	r3, [r3, #0]
}
 80022f2:	0018      	movs	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b002      	add	sp, #8
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	40022000 	.word	0x40022000
 8002300:	45670123 	.word	0x45670123
 8002304:	cdef89ab 	.word	0xcdef89ab

08002308 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800230e:	1dfb      	adds	r3, r7, #7
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_FLASH_Lock+0x34>)
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_FLASH_Lock+0x34>)
 800231a:	2180      	movs	r1, #128	; 0x80
 800231c:	0609      	lsls	r1, r1, #24
 800231e:	430a      	orrs	r2, r1
 8002320:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_FLASH_Lock+0x34>)
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	2b00      	cmp	r3, #0
 8002328:	da02      	bge.n	8002330 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 800232a:	1dfb      	adds	r3, r7, #7
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002330:	1dfb      	adds	r3, r7, #7
 8002332:	781b      	ldrb	r3, [r3, #0]
}
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40022000 	.word	0x40022000

08002340 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8002346:	1dfb      	adds	r3, r7, #7
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_FLASH_OB_Unlock+0x44>)
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	05db      	lsls	r3, r3, #23
 8002354:	4013      	ands	r3, r2
 8002356:	d00e      	beq.n	8002376 <HAL_FLASH_OB_Unlock+0x36>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_FLASH_OB_Unlock+0x44>)
 800235a:	4a0b      	ldr	r2, [pc, #44]	; (8002388 <HAL_FLASH_OB_Unlock+0x48>)
 800235c:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_FLASH_OB_Unlock+0x44>)
 8002360:	4a0a      	ldr	r2, [pc, #40]	; (800238c <HAL_FLASH_OB_Unlock+0x4c>)
 8002362:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 8002364:	4b07      	ldr	r3, [pc, #28]	; (8002384 <HAL_FLASH_OB_Unlock+0x44>)
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	05db      	lsls	r3, r3, #23
 800236c:	4013      	ands	r3, r2
 800236e:	d102      	bne.n	8002376 <HAL_FLASH_OB_Unlock+0x36>
    {
      status = HAL_OK;
 8002370:	1dfb      	adds	r3, r7, #7
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002376:	1dfb      	adds	r3, r7, #7
 8002378:	781b      	ldrb	r3, [r3, #0]
}
 800237a:	0018      	movs	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	b002      	add	sp, #8
 8002380:	bd80      	pop	{r7, pc}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	40022000 	.word	0x40022000
 8002388:	08192a3b 	.word	0x08192a3b
 800238c:	4c5d6e7f 	.word	0x4c5d6e7f

08002390 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8002396:	1dfb      	adds	r3, r7, #7
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_FLASH_OB_Lock+0x38>)
 800239e:	695a      	ldr	r2, [r3, #20]
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_FLASH_OB_Lock+0x38>)
 80023a2:	2180      	movs	r1, #128	; 0x80
 80023a4:	05c9      	lsls	r1, r1, #23
 80023a6:	430a      	orrs	r2, r1
 80023a8:	615a      	str	r2, [r3, #20]

  /* verify option bytes are locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <HAL_FLASH_OB_Lock+0x38>)
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	05db      	lsls	r3, r3, #23
 80023b2:	4013      	ands	r3, r2
 80023b4:	d002      	beq.n	80023bc <HAL_FLASH_OB_Lock+0x2c>
  {
    status = HAL_OK;
 80023b6:	1dfb      	adds	r3, r7, #7
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80023bc:	1dfb      	adds	r3, r7, #7
 80023be:	781b      	ldrb	r3, [r3, #0]
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b002      	add	sp, #8
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40022000 	.word	0x40022000

080023cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 80023d4:	f7ff fd8c 	bl	8001ef0 <HAL_GetTick>
 80023d8:	0002      	movs	r2, r0
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	189b      	adds	r3, r3, r2
 80023de:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 80023e0:	23c0      	movs	r3, #192	; 0xc0
 80023e2:	029b      	lsls	r3, r3, #10
 80023e4:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 80023e6:	e007      	b.n	80023f8 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 80023e8:	f7ff fd82 	bl	8001ef0 <HAL_GetTick>
 80023ec:	0002      	movs	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d801      	bhi.n	80023f8 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e02a      	b.n	800244e <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 80023f8:	4b17      	ldr	r3, [pc, #92]	; (8002458 <FLASH_WaitForLastOperation+0x8c>)
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	4013      	ands	r3, r2
 8002400:	d1f2      	bne.n	80023e8 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <FLASH_WaitForLastOperation+0x8c>)
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	4a15      	ldr	r2, [pc, #84]	; (800245c <FLASH_WaitForLastOperation+0x90>)
 8002408:	4013      	ands	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <FLASH_WaitForLastOperation+0x8c>)
 800240e:	4a14      	ldr	r2, [pc, #80]	; (8002460 <FLASH_WaitForLastOperation+0x94>)
 8002410:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d004      	beq.n	8002422 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <FLASH_WaitForLastOperation+0x98>)
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e015      	b.n	800244e <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8002422:	f7ff fd65 	bl	8001ef0 <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	189b      	adds	r3, r3, r2
 800242c:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800242e:	e007      	b.n	8002440 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8002430:	f7ff fd5e 	bl	8001ef0 <HAL_GetTick>
 8002434:	0002      	movs	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4293      	cmp	r3, r2
 800243a:	d801      	bhi.n	8002440 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e006      	b.n	800244e <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <FLASH_WaitForLastOperation+0x8c>)
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	02db      	lsls	r3, r3, #11
 8002448:	4013      	ands	r3, r2
 800244a:	d1f1      	bne.n	8002430 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	0018      	movs	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	b004      	add	sp, #16
 8002454:	bd80      	pop	{r7, pc}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	40022000 	.word	0x40022000
 800245c:	0000c3fa 	.word	0x0000c3fa
 8002460:	0008c3fb 	.word	0x0008c3fb
 8002464:	20000880 	.word	0x20000880

08002468 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002468:	b5b0      	push	{r4, r5, r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	603a      	str	r2, [r7, #0]
 8002472:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <FLASH_Program_DoubleWord+0x3c>)
 8002476:	695a      	ldr	r2, [r3, #20]
 8002478:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <FLASH_Program_DoubleWord+0x3c>)
 800247a:	2101      	movs	r1, #1
 800247c:	430a      	orrs	r2, r1
 800247e:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002486:	f3bf 8f6f 	isb	sy
}
 800248a:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	001c      	movs	r4, r3
 8002490:	2300      	movs	r3, #0
 8002492:	001d      	movs	r5, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3304      	adds	r3, #4
 8002498:	0022      	movs	r2, r4
 800249a:	601a      	str	r2, [r3, #0]
}
 800249c:	46c0      	nop			; (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	b004      	add	sp, #16
 80024a2:	bdb0      	pop	{r4, r5, r7, pc}
 80024a4:	40022000 	.word	0x40022000

080024a8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80024a8:	b5b0      	push	{r4, r5, r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80024b2:	4b33      	ldr	r3, [pc, #204]	; (8002580 <HAL_FLASHEx_Erase+0xd8>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_FLASHEx_Erase+0x16>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e05c      	b.n	8002578 <HAL_FLASHEx_Erase+0xd0>
 80024be:	4b30      	ldr	r3, [pc, #192]	; (8002580 <HAL_FLASHEx_Erase+0xd8>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80024c4:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <HAL_FLASHEx_Erase+0xd8>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80024ca:	250f      	movs	r5, #15
 80024cc:	197c      	adds	r4, r7, r5
 80024ce:	23fa      	movs	r3, #250	; 0xfa
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	0018      	movs	r0, r3
 80024d4:	f7ff ff7a 	bl	80023cc <FLASH_WaitForLastOperation>
 80024d8:	0003      	movs	r3, r0
 80024da:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80024dc:	002c      	movs	r4, r5
 80024de:	193b      	adds	r3, r7, r4
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d142      	bne.n	800256c <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d10d      	bne.n	800250a <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 f848 	bl	8002588 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80024f8:	193c      	adds	r4, r7, r4
 80024fa:	23fa      	movs	r3, #250	; 0xfa
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	0018      	movs	r0, r3
 8002500:	f7ff ff64 	bl	80023cc <FLASH_WaitForLastOperation>
 8002504:	0003      	movs	r3, r0
 8002506:	7023      	strb	r3, [r4, #0]
 8002508:	e030      	b.n	800256c <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2201      	movs	r2, #1
 800250e:	4252      	negs	r2, r2
 8002510:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	e01a      	b.n	8002550 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	0011      	movs	r1, r2
 8002522:	0018      	movs	r0, r3
 8002524:	f000 f844 	bl	80025b0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002528:	250f      	movs	r5, #15
 800252a:	197c      	adds	r4, r7, r5
 800252c:	23fa      	movs	r3, #250	; 0xfa
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	0018      	movs	r0, r3
 8002532:	f7ff ff4b 	bl	80023cc <FLASH_WaitForLastOperation>
 8002536:	0003      	movs	r3, r0
 8002538:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800253a:	197b      	adds	r3, r7, r5
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	601a      	str	r2, [r3, #0]
          break;
 8002548:	e00a      	b.n	8002560 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	3301      	adds	r3, #1
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	18d3      	adds	r3, r2, r3
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	429a      	cmp	r2, r3
 800255e:	d3dc      	bcc.n	800251a <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002560:	4b08      	ldr	r3, [pc, #32]	; (8002584 <HAL_FLASHEx_Erase+0xdc>)
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	4b07      	ldr	r3, [pc, #28]	; (8002584 <HAL_FLASHEx_Erase+0xdc>)
 8002566:	2102      	movs	r1, #2
 8002568:	438a      	bics	r2, r1
 800256a:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <HAL_FLASHEx_Erase+0xd8>)
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002572:	230f      	movs	r3, #15
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	781b      	ldrb	r3, [r3, #0]
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b004      	add	sp, #16
 800257e:	bdb0      	pop	{r4, r5, r7, pc}
 8002580:	20000880 	.word	0x20000880
 8002584:	40022000 	.word	0x40022000

08002588 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <FLASH_MassErase+0x24>)
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	431a      	orrs	r2, r3
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <FLASH_MassErase+0x24>)
 800259a:	2180      	movs	r1, #128	; 0x80
 800259c:	0249      	lsls	r1, r1, #9
 800259e:	430a      	orrs	r2, r1
 80025a0:	615a      	str	r2, [r3, #20]
}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b002      	add	sp, #8
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	40022000 	.word	0x40022000

080025b0 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80025ba:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <FLASH_PageErase+0x48>)
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <FLASH_PageErase+0x4c>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d005      	beq.n	80025d6 <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2280      	movs	r2, #128	; 0x80
 80025ce:	0192      	lsls	r2, r2, #6
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	e003      	b.n	80025de <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4a09      	ldr	r2, [pc, #36]	; (8002600 <FLASH_PageErase+0x50>)
 80025da:	4013      	ands	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	00da      	lsls	r2, r3, #3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	431a      	orrs	r2, r3
 80025e6:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <FLASH_PageErase+0x48>)
 80025e8:	4906      	ldr	r1, [pc, #24]	; (8002604 <FLASH_PageErase+0x54>)
 80025ea:	430a      	orrs	r2, r1
 80025ec:	615a      	str	r2, [r3, #20]
}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b004      	add	sp, #16
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	40022000 	.word	0x40022000
 80025fc:	ffffe007 	.word	0xffffe007
 8002600:	ffffdfff 	.word	0xffffdfff
 8002604:	00010002 	.word	0x00010002

08002608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002616:	e14d      	b.n	80028b4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2101      	movs	r1, #1
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4091      	lsls	r1, r2
 8002622:	000a      	movs	r2, r1
 8002624:	4013      	ands	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d100      	bne.n	8002630 <HAL_GPIO_Init+0x28>
 800262e:	e13e      	b.n	80028ae <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2203      	movs	r2, #3
 8002636:	4013      	ands	r3, r2
 8002638:	2b01      	cmp	r3, #1
 800263a:	d005      	beq.n	8002648 <HAL_GPIO_Init+0x40>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2203      	movs	r2, #3
 8002642:	4013      	ands	r3, r2
 8002644:	2b02      	cmp	r3, #2
 8002646:	d130      	bne.n	80026aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	2203      	movs	r2, #3
 8002654:	409a      	lsls	r2, r3
 8002656:	0013      	movs	r3, r2
 8002658:	43da      	mvns	r2, r3
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	409a      	lsls	r2, r3
 800266a:	0013      	movs	r3, r2
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800267e:	2201      	movs	r2, #1
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	409a      	lsls	r2, r3
 8002684:	0013      	movs	r3, r2
 8002686:	43da      	mvns	r2, r3
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4013      	ands	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	2201      	movs	r2, #1
 8002696:	401a      	ands	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	409a      	lsls	r2, r3
 800269c:	0013      	movs	r3, r2
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2203      	movs	r2, #3
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d017      	beq.n	80026e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	2203      	movs	r2, #3
 80026c2:	409a      	lsls	r2, r3
 80026c4:	0013      	movs	r3, r2
 80026c6:	43da      	mvns	r2, r3
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	409a      	lsls	r2, r3
 80026d8:	0013      	movs	r3, r2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2203      	movs	r2, #3
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d123      	bne.n	800273a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	08da      	lsrs	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3208      	adds	r2, #8
 80026fa:	0092      	lsls	r2, r2, #2
 80026fc:	58d3      	ldr	r3, [r2, r3]
 80026fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2207      	movs	r2, #7
 8002704:	4013      	ands	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	220f      	movs	r2, #15
 800270a:	409a      	lsls	r2, r3
 800270c:	0013      	movs	r3, r2
 800270e:	43da      	mvns	r2, r3
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2107      	movs	r1, #7
 800271e:	400b      	ands	r3, r1
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	409a      	lsls	r2, r3
 8002724:	0013      	movs	r3, r2
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	08da      	lsrs	r2, r3, #3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3208      	adds	r2, #8
 8002734:	0092      	lsls	r2, r2, #2
 8002736:	6939      	ldr	r1, [r7, #16]
 8002738:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	2203      	movs	r2, #3
 8002746:	409a      	lsls	r2, r3
 8002748:	0013      	movs	r3, r2
 800274a:	43da      	mvns	r2, r3
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2203      	movs	r2, #3
 8002758:	401a      	ands	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	409a      	lsls	r2, r3
 8002760:	0013      	movs	r3, r2
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	23c0      	movs	r3, #192	; 0xc0
 8002774:	029b      	lsls	r3, r3, #10
 8002776:	4013      	ands	r3, r2
 8002778:	d100      	bne.n	800277c <HAL_GPIO_Init+0x174>
 800277a:	e098      	b.n	80028ae <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800277c:	4a53      	ldr	r2, [pc, #332]	; (80028cc <HAL_GPIO_Init+0x2c4>)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	089b      	lsrs	r3, r3, #2
 8002782:	3318      	adds	r3, #24
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	589b      	ldr	r3, [r3, r2]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2203      	movs	r2, #3
 800278e:	4013      	ands	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	220f      	movs	r2, #15
 8002794:	409a      	lsls	r2, r3
 8002796:	0013      	movs	r3, r2
 8002798:	43da      	mvns	r2, r3
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	23a0      	movs	r3, #160	; 0xa0
 80027a4:	05db      	lsls	r3, r3, #23
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d019      	beq.n	80027de <HAL_GPIO_Init+0x1d6>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a48      	ldr	r2, [pc, #288]	; (80028d0 <HAL_GPIO_Init+0x2c8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d013      	beq.n	80027da <HAL_GPIO_Init+0x1d2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a47      	ldr	r2, [pc, #284]	; (80028d4 <HAL_GPIO_Init+0x2cc>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00d      	beq.n	80027d6 <HAL_GPIO_Init+0x1ce>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a46      	ldr	r2, [pc, #280]	; (80028d8 <HAL_GPIO_Init+0x2d0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d007      	beq.n	80027d2 <HAL_GPIO_Init+0x1ca>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a45      	ldr	r2, [pc, #276]	; (80028dc <HAL_GPIO_Init+0x2d4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d101      	bne.n	80027ce <HAL_GPIO_Init+0x1c6>
 80027ca:	2304      	movs	r3, #4
 80027cc:	e008      	b.n	80027e0 <HAL_GPIO_Init+0x1d8>
 80027ce:	2305      	movs	r3, #5
 80027d0:	e006      	b.n	80027e0 <HAL_GPIO_Init+0x1d8>
 80027d2:	2303      	movs	r3, #3
 80027d4:	e004      	b.n	80027e0 <HAL_GPIO_Init+0x1d8>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e002      	b.n	80027e0 <HAL_GPIO_Init+0x1d8>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_GPIO_Init+0x1d8>
 80027de:	2300      	movs	r3, #0
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	2103      	movs	r1, #3
 80027e4:	400a      	ands	r2, r1
 80027e6:	00d2      	lsls	r2, r2, #3
 80027e8:	4093      	lsls	r3, r2
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80027f0:	4936      	ldr	r1, [pc, #216]	; (80028cc <HAL_GPIO_Init+0x2c4>)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	3318      	adds	r3, #24
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027fe:	4b33      	ldr	r3, [pc, #204]	; (80028cc <HAL_GPIO_Init+0x2c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	43da      	mvns	r2, r3
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4013      	ands	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	035b      	lsls	r3, r3, #13
 8002816:	4013      	ands	r3, r2
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002822:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <HAL_GPIO_Init+0x2c4>)
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002828:	4b28      	ldr	r3, [pc, #160]	; (80028cc <HAL_GPIO_Init+0x2c4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	43da      	mvns	r2, r3
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	039b      	lsls	r3, r3, #14
 8002840:	4013      	ands	r3, r2
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800284c:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <HAL_GPIO_Init+0x2c4>)
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002852:	4a1e      	ldr	r2, [pc, #120]	; (80028cc <HAL_GPIO_Init+0x2c4>)
 8002854:	2384      	movs	r3, #132	; 0x84
 8002856:	58d3      	ldr	r3, [r2, r3]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	43da      	mvns	r2, r3
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	029b      	lsls	r3, r3, #10
 800286c:	4013      	ands	r3, r2
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002878:	4914      	ldr	r1, [pc, #80]	; (80028cc <HAL_GPIO_Init+0x2c4>)
 800287a:	2284      	movs	r2, #132	; 0x84
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002880:	4a12      	ldr	r2, [pc, #72]	; (80028cc <HAL_GPIO_Init+0x2c4>)
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	58d3      	ldr	r3, [r2, r3]
 8002886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	43da      	mvns	r2, r3
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	025b      	lsls	r3, r3, #9
 800289a:	4013      	ands	r3, r2
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028a6:	4909      	ldr	r1, [pc, #36]	; (80028cc <HAL_GPIO_Init+0x2c4>)
 80028a8:	2280      	movs	r2, #128	; 0x80
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	3301      	adds	r3, #1
 80028b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	40da      	lsrs	r2, r3
 80028bc:	1e13      	subs	r3, r2, #0
 80028be:	d000      	beq.n	80028c2 <HAL_GPIO_Init+0x2ba>
 80028c0:	e6aa      	b.n	8002618 <HAL_GPIO_Init+0x10>
  }
}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	46c0      	nop			; (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b006      	add	sp, #24
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021800 	.word	0x40021800
 80028d0:	50000400 	.word	0x50000400
 80028d4:	50000800 	.word	0x50000800
 80028d8:	50000c00 	.word	0x50000c00
 80028dc:	50001000 	.word	0x50001000

080028e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80028ee:	e0ba      	b.n	8002a66 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80028f0:	2201      	movs	r2, #1
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	409a      	lsls	r2, r3
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d100      	bne.n	8002904 <HAL_GPIO_DeInit+0x24>
 8002902:	e0ad      	b.n	8002a60 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8002904:	4a5d      	ldr	r2, [pc, #372]	; (8002a7c <HAL_GPIO_DeInit+0x19c>)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	3318      	adds	r3, #24
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	589b      	ldr	r3, [r3, r2]
 8002910:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2203      	movs	r2, #3
 8002916:	4013      	ands	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	220f      	movs	r2, #15
 800291c:	409a      	lsls	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	4013      	ands	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	23a0      	movs	r3, #160	; 0xa0
 8002928:	05db      	lsls	r3, r3, #23
 800292a:	429a      	cmp	r2, r3
 800292c:	d019      	beq.n	8002962 <HAL_GPIO_DeInit+0x82>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a53      	ldr	r2, [pc, #332]	; (8002a80 <HAL_GPIO_DeInit+0x1a0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_GPIO_DeInit+0x7e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a52      	ldr	r2, [pc, #328]	; (8002a84 <HAL_GPIO_DeInit+0x1a4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00d      	beq.n	800295a <HAL_GPIO_DeInit+0x7a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a51      	ldr	r2, [pc, #324]	; (8002a88 <HAL_GPIO_DeInit+0x1a8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <HAL_GPIO_DeInit+0x76>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a50      	ldr	r2, [pc, #320]	; (8002a8c <HAL_GPIO_DeInit+0x1ac>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_GPIO_DeInit+0x72>
 800294e:	2304      	movs	r3, #4
 8002950:	e008      	b.n	8002964 <HAL_GPIO_DeInit+0x84>
 8002952:	2305      	movs	r3, #5
 8002954:	e006      	b.n	8002964 <HAL_GPIO_DeInit+0x84>
 8002956:	2303      	movs	r3, #3
 8002958:	e004      	b.n	8002964 <HAL_GPIO_DeInit+0x84>
 800295a:	2302      	movs	r3, #2
 800295c:	e002      	b.n	8002964 <HAL_GPIO_DeInit+0x84>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <HAL_GPIO_DeInit+0x84>
 8002962:	2300      	movs	r3, #0
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	2103      	movs	r1, #3
 8002968:	400a      	ands	r2, r1
 800296a:	00d2      	lsls	r2, r2, #3
 800296c:	4093      	lsls	r3, r2
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	429a      	cmp	r2, r3
 8002972:	d136      	bne.n	80029e2 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002974:	4a41      	ldr	r2, [pc, #260]	; (8002a7c <HAL_GPIO_DeInit+0x19c>)
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	58d3      	ldr	r3, [r2, r3]
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	43d2      	mvns	r2, r2
 800297e:	493f      	ldr	r1, [pc, #252]	; (8002a7c <HAL_GPIO_DeInit+0x19c>)
 8002980:	4013      	ands	r3, r2
 8002982:	2280      	movs	r2, #128	; 0x80
 8002984:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8002986:	4a3d      	ldr	r2, [pc, #244]	; (8002a7c <HAL_GPIO_DeInit+0x19c>)
 8002988:	2384      	movs	r3, #132	; 0x84
 800298a:	58d3      	ldr	r3, [r2, r3]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	43d2      	mvns	r2, r2
 8002990:	493a      	ldr	r1, [pc, #232]	; (8002a7c <HAL_GPIO_DeInit+0x19c>)
 8002992:	4013      	ands	r3, r2
 8002994:	2284      	movs	r2, #132	; 0x84
 8002996:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002998:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <HAL_GPIO_DeInit+0x19c>)
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	43d9      	mvns	r1, r3
 80029a0:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <HAL_GPIO_DeInit+0x19c>)
 80029a2:	400a      	ands	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80029a6:	4b35      	ldr	r3, [pc, #212]	; (8002a7c <HAL_GPIO_DeInit+0x19c>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	43d9      	mvns	r1, r3
 80029ae:	4b33      	ldr	r3, [pc, #204]	; (8002a7c <HAL_GPIO_DeInit+0x19c>)
 80029b0:	400a      	ands	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2203      	movs	r2, #3
 80029b8:	4013      	ands	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	220f      	movs	r2, #15
 80029be:	409a      	lsls	r2, r3
 80029c0:	0013      	movs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80029c4:	4a2d      	ldr	r2, [pc, #180]	; (8002a7c <HAL_GPIO_DeInit+0x19c>)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	089b      	lsrs	r3, r3, #2
 80029ca:	3318      	adds	r3, #24
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	589a      	ldr	r2, [r3, r2]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	43d9      	mvns	r1, r3
 80029d4:	4829      	ldr	r0, [pc, #164]	; (8002a7c <HAL_GPIO_DeInit+0x19c>)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	089b      	lsrs	r3, r3, #2
 80029da:	400a      	ands	r2, r1
 80029dc:	3318      	adds	r3, #24
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	2103      	movs	r1, #3
 80029ec:	4099      	lsls	r1, r3
 80029ee:	000b      	movs	r3, r1
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	08da      	lsrs	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3208      	adds	r2, #8
 80029fe:	0092      	lsls	r2, r2, #2
 8002a00:	58d3      	ldr	r3, [r2, r3]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	2107      	movs	r1, #7
 8002a06:	400a      	ands	r2, r1
 8002a08:	0092      	lsls	r2, r2, #2
 8002a0a:	210f      	movs	r1, #15
 8002a0c:	4091      	lsls	r1, r2
 8002a0e:	000a      	movs	r2, r1
 8002a10:	43d1      	mvns	r1, r2
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	08d2      	lsrs	r2, r2, #3
 8002a16:	4019      	ands	r1, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3208      	adds	r2, #8
 8002a1c:	0092      	lsls	r2, r2, #2
 8002a1e:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	0052      	lsls	r2, r2, #1
 8002a28:	2103      	movs	r1, #3
 8002a2a:	4091      	lsls	r1, r2
 8002a2c:	000a      	movs	r2, r1
 8002a2e:	43d2      	mvns	r2, r2
 8002a30:	401a      	ands	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4091      	lsls	r1, r2
 8002a40:	000a      	movs	r2, r1
 8002a42:	43d2      	mvns	r2, r2
 8002a44:	401a      	ands	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	0052      	lsls	r2, r2, #1
 8002a52:	2103      	movs	r1, #3
 8002a54:	4091      	lsls	r1, r2
 8002a56:	000a      	movs	r2, r1
 8002a58:	43d2      	mvns	r2, r2
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	3301      	adds	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	40da      	lsrs	r2, r3
 8002a6c:	1e13      	subs	r3, r2, #0
 8002a6e:	d000      	beq.n	8002a72 <HAL_GPIO_DeInit+0x192>
 8002a70:	e73e      	b.n	80028f0 <HAL_GPIO_DeInit+0x10>
  }
}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46c0      	nop			; (mov r8, r8)
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b006      	add	sp, #24
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021800 	.word	0x40021800
 8002a80:	50000400 	.word	0x50000400
 8002a84:	50000800 	.word	0x50000800
 8002a88:	50000c00 	.word	0x50000c00
 8002a8c:	50001000 	.word	0x50001000

08002a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	000a      	movs	r2, r1
 8002a9a:	1cbb      	adds	r3, r7, #2
 8002a9c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	1cba      	adds	r2, r7, #2
 8002aa4:	8812      	ldrh	r2, [r2, #0]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002aaa:	230f      	movs	r3, #15
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	e003      	b.n	8002abc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ab4:	230f      	movs	r3, #15
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002abc:	230f      	movs	r3, #15
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	781b      	ldrb	r3, [r3, #0]
}
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b004      	add	sp, #16
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	0008      	movs	r0, r1
 8002ad4:	0011      	movs	r1, r2
 8002ad6:	1cbb      	adds	r3, r7, #2
 8002ad8:	1c02      	adds	r2, r0, #0
 8002ada:	801a      	strh	r2, [r3, #0]
 8002adc:	1c7b      	adds	r3, r7, #1
 8002ade:	1c0a      	adds	r2, r1, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ae2:	1c7b      	adds	r3, r7, #1
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d004      	beq.n	8002af4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aea:	1cbb      	adds	r3, r7, #2
 8002aec:	881a      	ldrh	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002af2:	e003      	b.n	8002afc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002af4:	1cbb      	adds	r3, r7, #2
 8002af6:	881a      	ldrh	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b002      	add	sp, #8
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002b0c:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a19      	ldr	r2, [pc, #100]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	0019      	movs	r1, r3
 8002b16:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d11f      	bne.n	8002b68 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002b28:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	189b      	adds	r3, r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4912      	ldr	r1, [pc, #72]	; (8002b80 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002b36:	0018      	movs	r0, r3
 8002b38:	f7fd faf8 	bl	800012c <__udivsi3>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	3301      	adds	r3, #1
 8002b40:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b42:	e008      	b.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	e001      	b.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e009      	b.n	8002b6a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b56:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	401a      	ands	r2, r3
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d0ed      	beq.n	8002b44 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b004      	add	sp, #16
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	40007000 	.word	0x40007000
 8002b78:	fffff9ff 	.word	0xfffff9ff
 8002b7c:	20000044 	.word	0x20000044
 8002b80:	000f4240 	.word	0x000f4240

08002b84 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	23e0      	movs	r3, #224	; 0xe0
 8002b8e:	01db      	lsls	r3, r3, #7
 8002b90:	4013      	ands	r3, r2
}
 8002b92:	0018      	movs	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000

08002b9c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ba2:	f7ff f9a5 	bl	8001ef0 <HAL_GetTick>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	607b      	str	r3, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002baa:	4b35      	ldr	r3, [pc, #212]	; (8002c80 <HAL_RCC_DeInit+0xe4>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	4b34      	ldr	r3, [pc, #208]	; (8002c80 <HAL_RCC_DeInit+0xe4>)
 8002bb0:	2180      	movs	r1, #128	; 0x80
 8002bb2:	0049      	lsls	r1, r1, #1
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_DeInit+0x30>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bba:	f7ff f999 	bl	8001ef0 <HAL_GetTick>
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e054      	b.n	8002c76 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bcc:	4b2c      	ldr	r3, [pc, #176]	; (8002c80 <HAL_RCC_DeInit+0xe4>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  RCC->ICSCR = RCC_ICSCR_HSITRIM_6;
 8002bd8:	4b29      	ldr	r3, [pc, #164]	; (8002c80 <HAL_RCC_DeInit+0xe4>)
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	01d2      	lsls	r2, r2, #7
 8002bde:	605a      	str	r2, [r3, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002be0:	f7ff f986 	bl	8001ef0 <HAL_GetTick>
 8002be4:	0003      	movs	r3, r0
 8002be6:	607b      	str	r3, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000000u;
 8002be8:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_RCC_DeInit+0xe4>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002bee:	e009      	b.n	8002c04 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf0:	f7ff f97e 	bl	8001ef0 <HAL_GetTick>
 8002bf4:	0002      	movs	r2, r0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <HAL_RCC_DeInit+0xe8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e038      	b.n	8002c76 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002c04:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <HAL_RCC_DeInit+0xe4>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2238      	movs	r2, #56	; 0x38
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_DeInit+0x54>
    }
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <HAL_RCC_DeInit+0xe4>)
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	0052      	lsls	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8002c16:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <HAL_RCC_DeInit+0xe4>)
 8002c18:	2280      	movs	r2, #128	; 0x80
 8002c1a:	0052      	lsls	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002c1e:	f7ff f967 	bl	8001ef0 <HAL_GetTick>
 8002c22:	0003      	movs	r3, r0
 8002c24:	607b      	str	r3, [r7, #4]

  /* Wait till PLL is ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_DeInit+0x9e>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c28:	f7ff f962 	bl	8001ef0 <HAL_GetTick>
 8002c2c:	0002      	movs	r2, r0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_DeInit+0x9e>
    {
      return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e01d      	b.n	8002c76 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c3a:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <HAL_RCC_DeInit+0xe4>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	049b      	lsls	r3, r3, #18
 8002c42:	4013      	ands	r3, r2
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_DeInit+0x8c>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8002c46:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <HAL_RCC_DeInit+0xe4>)
 8002c48:	2280      	movs	r2, #128	; 0x80
 8002c4a:	0152      	lsls	r2, r2, #5
 8002c4c:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000u;
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <HAL_RCC_DeInit+0xe4>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]

  /* Clear all flags */
  RCC->CICR = 0xFFFFFFFFu;
 8002c54:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_RCC_DeInit+0xe4>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	4252      	negs	r2, r2
 8002c5a:	621a      	str	r2, [r3, #32]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <HAL_RCC_DeInit+0xec>)
 8002c5e:	4a0b      	ldr	r2, [pc, #44]	; (8002c8c <HAL_RCC_DeInit+0xf0>)
 8002c60:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_DeInit+0xf4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7ff f8e6 	bl	8001e38 <HAL_InitTick>
 8002c6c:	1e03      	subs	r3, r0, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_DeInit+0xd8>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <HAL_RCC_DeInit+0xda>
  }
  else
  {
    return HAL_OK;
 8002c74:	2300      	movs	r3, #0
  }
}
 8002c76:	0018      	movs	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b002      	add	sp, #8
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	40021000 	.word	0x40021000
 8002c84:	00001388 	.word	0x00001388
 8002c88:	20000044 	.word	0x20000044
 8002c8c:	00f42400 	.word	0x00f42400
 8002c90:	20000048 	.word	0x20000048

08002c94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d102      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f000 fb50 	bl	8003348 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2201      	movs	r2, #1
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d100      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x20>
 8002cb2:	e07c      	b.n	8002dae <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb4:	4bc3      	ldr	r3, [pc, #780]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2238      	movs	r2, #56	; 0x38
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cbe:	4bc1      	ldr	r3, [pc, #772]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b10      	cmp	r3, #16
 8002ccc:	d102      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x40>
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d002      	beq.n	8002cda <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d10b      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cda:	4bba      	ldr	r3, [pc, #744]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	2380      	movs	r3, #128	; 0x80
 8002ce0:	029b      	lsls	r3, r3, #10
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d062      	beq.n	8002dac <HAL_RCC_OscConfig+0x118>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d15e      	bne.n	8002dac <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e32a      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	025b      	lsls	r3, r3, #9
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d107      	bne.n	8002d0e <HAL_RCC_OscConfig+0x7a>
 8002cfe:	4bb1      	ldr	r3, [pc, #708]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	4bb0      	ldr	r3, [pc, #704]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002d04:	2180      	movs	r1, #128	; 0x80
 8002d06:	0249      	lsls	r1, r1, #9
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e020      	b.n	8002d50 <HAL_RCC_OscConfig+0xbc>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	23a0      	movs	r3, #160	; 0xa0
 8002d14:	02db      	lsls	r3, r3, #11
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d10e      	bne.n	8002d38 <HAL_RCC_OscConfig+0xa4>
 8002d1a:	4baa      	ldr	r3, [pc, #680]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4ba9      	ldr	r3, [pc, #676]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002d20:	2180      	movs	r1, #128	; 0x80
 8002d22:	02c9      	lsls	r1, r1, #11
 8002d24:	430a      	orrs	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	4ba6      	ldr	r3, [pc, #664]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4ba5      	ldr	r3, [pc, #660]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002d2e:	2180      	movs	r1, #128	; 0x80
 8002d30:	0249      	lsls	r1, r1, #9
 8002d32:	430a      	orrs	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0xbc>
 8002d38:	4ba2      	ldr	r3, [pc, #648]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4ba1      	ldr	r3, [pc, #644]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002d3e:	49a2      	ldr	r1, [pc, #648]	; (8002fc8 <HAL_RCC_OscConfig+0x334>)
 8002d40:	400a      	ands	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	4b9f      	ldr	r3, [pc, #636]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b9e      	ldr	r3, [pc, #632]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002d4a:	49a0      	ldr	r1, [pc, #640]	; (8002fcc <HAL_RCC_OscConfig+0x338>)
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d014      	beq.n	8002d82 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7ff f8ca 	bl	8001ef0 <HAL_GetTick>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d62:	f7ff f8c5 	bl	8001ef0 <HAL_GetTick>
 8002d66:	0002      	movs	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b64      	cmp	r3, #100	; 0x64
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e2e9      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d74:	4b93      	ldr	r3, [pc, #588]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	029b      	lsls	r3, r3, #10
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0xce>
 8002d80:	e015      	b.n	8002dae <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d82:	f7ff f8b5 	bl	8001ef0 <HAL_GetTick>
 8002d86:	0003      	movs	r3, r0
 8002d88:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7ff f8b0 	bl	8001ef0 <HAL_GetTick>
 8002d90:	0002      	movs	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	; 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e2d4      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d9e:	4b89      	ldr	r3, [pc, #548]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	029b      	lsls	r3, r3, #10
 8002da6:	4013      	ands	r3, r2
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0xf8>
 8002daa:	e000      	b.n	8002dae <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2202      	movs	r2, #2
 8002db4:	4013      	ands	r3, r2
 8002db6:	d100      	bne.n	8002dba <HAL_RCC_OscConfig+0x126>
 8002db8:	e099      	b.n	8002eee <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dba:	4b82      	ldr	r3, [pc, #520]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2238      	movs	r2, #56	; 0x38
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dc4:	4b7f      	ldr	r3, [pc, #508]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	2203      	movs	r2, #3
 8002dca:	4013      	ands	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d102      	bne.n	8002dda <HAL_RCC_OscConfig+0x146>
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d002      	beq.n	8002de0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d135      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002de0:	4b78      	ldr	r3, [pc, #480]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4013      	ands	r3, r2
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_OscConfig+0x164>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e2a7      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df8:	4b72      	ldr	r3, [pc, #456]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a74      	ldr	r2, [pc, #464]	; (8002fd0 <HAL_RCC_OscConfig+0x33c>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	0019      	movs	r1, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	021a      	lsls	r2, r3, #8
 8002e08:	4b6e      	ldr	r3, [pc, #440]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d112      	bne.n	8002e3a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e14:	4b6b      	ldr	r3, [pc, #428]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a6e      	ldr	r2, [pc, #440]	; (8002fd4 <HAL_RCC_OscConfig+0x340>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	4b68      	ldr	r3, [pc, #416]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002e28:	4b66      	ldr	r3, [pc, #408]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	0adb      	lsrs	r3, r3, #11
 8002e2e:	2207      	movs	r2, #7
 8002e30:	4013      	ands	r3, r2
 8002e32:	4a69      	ldr	r2, [pc, #420]	; (8002fd8 <HAL_RCC_OscConfig+0x344>)
 8002e34:	40da      	lsrs	r2, r3
 8002e36:	4b69      	ldr	r3, [pc, #420]	; (8002fdc <HAL_RCC_OscConfig+0x348>)
 8002e38:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e3a:	4b69      	ldr	r3, [pc, #420]	; (8002fe0 <HAL_RCC_OscConfig+0x34c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f7fe fffa 	bl	8001e38 <HAL_InitTick>
 8002e44:	1e03      	subs	r3, r0, #0
 8002e46:	d051      	beq.n	8002eec <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e27d      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d030      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e54:	4b5b      	ldr	r3, [pc, #364]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a5e      	ldr	r2, [pc, #376]	; (8002fd4 <HAL_RCC_OscConfig+0x340>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	4b58      	ldr	r3, [pc, #352]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002e64:	430a      	orrs	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002e68:	4b56      	ldr	r3, [pc, #344]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b55      	ldr	r3, [pc, #340]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002e6e:	2180      	movs	r1, #128	; 0x80
 8002e70:	0049      	lsls	r1, r1, #1
 8002e72:	430a      	orrs	r2, r1
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7ff f83b 	bl	8001ef0 <HAL_GetTick>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e80:	f7ff f836 	bl	8001ef0 <HAL_GetTick>
 8002e84:	0002      	movs	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e25a      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e92:	4b4c      	ldr	r3, [pc, #304]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9e:	4b49      	ldr	r3, [pc, #292]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4a4b      	ldr	r2, [pc, #300]	; (8002fd0 <HAL_RCC_OscConfig+0x33c>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	021a      	lsls	r2, r3, #8
 8002eae:	4b45      	ldr	r3, [pc, #276]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	e01b      	b.n	8002eee <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002eb6:	4b43      	ldr	r3, [pc, #268]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4b42      	ldr	r3, [pc, #264]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002ebc:	4949      	ldr	r1, [pc, #292]	; (8002fe4 <HAL_RCC_OscConfig+0x350>)
 8002ebe:	400a      	ands	r2, r1
 8002ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec2:	f7ff f815 	bl	8001ef0 <HAL_GetTick>
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ecc:	f7ff f810 	bl	8001ef0 <HAL_GetTick>
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e234      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ede:	4b39      	ldr	r3, [pc, #228]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x238>
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d047      	beq.n	8002f88 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ef8:	4b32      	ldr	r3, [pc, #200]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2238      	movs	r2, #56	; 0x38
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b18      	cmp	r3, #24
 8002f02:	d10a      	bne.n	8002f1a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002f04:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f08:	2202      	movs	r2, #2
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d03c      	beq.n	8002f88 <HAL_RCC_OscConfig+0x2f4>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d138      	bne.n	8002f88 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e216      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d019      	beq.n	8002f56 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002f22:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002f24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f26:	4b27      	ldr	r3, [pc, #156]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002f28:	2101      	movs	r1, #1
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7fe ffdf 	bl	8001ef0 <HAL_GetTick>
 8002f32:	0003      	movs	r3, r0
 8002f34:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f38:	f7fe ffda 	bl	8001ef0 <HAL_GetTick>
 8002f3c:	0002      	movs	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e1fe      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4e:	2202      	movs	r2, #2
 8002f50:	4013      	ands	r3, r2
 8002f52:	d0f1      	beq.n	8002f38 <HAL_RCC_OscConfig+0x2a4>
 8002f54:	e018      	b.n	8002f88 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002f56:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002f58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f5a:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	438a      	bics	r2, r1
 8002f60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f62:	f7fe ffc5 	bl	8001ef0 <HAL_GetTick>
 8002f66:	0003      	movs	r3, r0
 8002f68:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f6c:	f7fe ffc0 	bl	8001ef0 <HAL_GetTick>
 8002f70:	0002      	movs	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e1e4      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f82:	2202      	movs	r2, #2
 8002f84:	4013      	ands	r3, r2
 8002f86:	d1f1      	bne.n	8002f6c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d100      	bne.n	8002f94 <HAL_RCC_OscConfig+0x300>
 8002f92:	e0c7      	b.n	8003124 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f94:	231f      	movs	r3, #31
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f9c:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2238      	movs	r2, #56	; 0x38
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	d11f      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fac:	2202      	movs	r2, #2
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d100      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x320>
 8002fb2:	e0b7      	b.n	8003124 <HAL_RCC_OscConfig+0x490>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d000      	beq.n	8002fbe <HAL_RCC_OscConfig+0x32a>
 8002fbc:	e0b2      	b.n	8003124 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e1c2      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	fffeffff 	.word	0xfffeffff
 8002fcc:	fffbffff 	.word	0xfffbffff
 8002fd0:	ffff80ff 	.word	0xffff80ff
 8002fd4:	ffffc7ff 	.word	0xffffc7ff
 8002fd8:	00f42400 	.word	0x00f42400
 8002fdc:	20000044 	.word	0x20000044
 8002fe0:	20000048 	.word	0x20000048
 8002fe4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fe8:	4bb5      	ldr	r3, [pc, #724]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8002fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fec:	2380      	movs	r3, #128	; 0x80
 8002fee:	055b      	lsls	r3, r3, #21
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x364>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x366>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d011      	beq.n	8003022 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002ffe:	4bb0      	ldr	r3, [pc, #704]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8003000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003002:	4baf      	ldr	r3, [pc, #700]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8003004:	2180      	movs	r1, #128	; 0x80
 8003006:	0549      	lsls	r1, r1, #21
 8003008:	430a      	orrs	r2, r1
 800300a:	63da      	str	r2, [r3, #60]	; 0x3c
 800300c:	4bac      	ldr	r3, [pc, #688]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 800300e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	055b      	lsls	r3, r3, #21
 8003014:	4013      	ands	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800301a:	231f      	movs	r3, #31
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003022:	4ba8      	ldr	r3, [pc, #672]	; (80032c4 <HAL_RCC_OscConfig+0x630>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	4013      	ands	r3, r2
 800302c:	d11a      	bne.n	8003064 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800302e:	4ba5      	ldr	r3, [pc, #660]	; (80032c4 <HAL_RCC_OscConfig+0x630>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4ba4      	ldr	r3, [pc, #656]	; (80032c4 <HAL_RCC_OscConfig+0x630>)
 8003034:	2180      	movs	r1, #128	; 0x80
 8003036:	0049      	lsls	r1, r1, #1
 8003038:	430a      	orrs	r2, r1
 800303a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800303c:	f7fe ff58 	bl	8001ef0 <HAL_GetTick>
 8003040:	0003      	movs	r3, r0
 8003042:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003046:	f7fe ff53 	bl	8001ef0 <HAL_GetTick>
 800304a:	0002      	movs	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e177      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003058:	4b9a      	ldr	r3, [pc, #616]	; (80032c4 <HAL_RCC_OscConfig+0x630>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4013      	ands	r3, r2
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d106      	bne.n	800307a <HAL_RCC_OscConfig+0x3e6>
 800306c:	4b94      	ldr	r3, [pc, #592]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 800306e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003070:	4b93      	ldr	r3, [pc, #588]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8003072:	2101      	movs	r1, #1
 8003074:	430a      	orrs	r2, r1
 8003076:	65da      	str	r2, [r3, #92]	; 0x5c
 8003078:	e01c      	b.n	80030b4 <HAL_RCC_OscConfig+0x420>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b05      	cmp	r3, #5
 8003080:	d10c      	bne.n	800309c <HAL_RCC_OscConfig+0x408>
 8003082:	4b8f      	ldr	r3, [pc, #572]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8003084:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003086:	4b8e      	ldr	r3, [pc, #568]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8003088:	2104      	movs	r1, #4
 800308a:	430a      	orrs	r2, r1
 800308c:	65da      	str	r2, [r3, #92]	; 0x5c
 800308e:	4b8c      	ldr	r3, [pc, #560]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8003090:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003092:	4b8b      	ldr	r3, [pc, #556]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8003094:	2101      	movs	r1, #1
 8003096:	430a      	orrs	r2, r1
 8003098:	65da      	str	r2, [r3, #92]	; 0x5c
 800309a:	e00b      	b.n	80030b4 <HAL_RCC_OscConfig+0x420>
 800309c:	4b88      	ldr	r3, [pc, #544]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 800309e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030a0:	4b87      	ldr	r3, [pc, #540]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 80030a2:	2101      	movs	r1, #1
 80030a4:	438a      	bics	r2, r1
 80030a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80030a8:	4b85      	ldr	r3, [pc, #532]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 80030aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030ac:	4b84      	ldr	r3, [pc, #528]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 80030ae:	2104      	movs	r1, #4
 80030b0:	438a      	bics	r2, r1
 80030b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d014      	beq.n	80030e6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fe ff18 	bl	8001ef0 <HAL_GetTick>
 80030c0:	0003      	movs	r3, r0
 80030c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c4:	e009      	b.n	80030da <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c6:	f7fe ff13 	bl	8001ef0 <HAL_GetTick>
 80030ca:	0002      	movs	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	4a7d      	ldr	r2, [pc, #500]	; (80032c8 <HAL_RCC_OscConfig+0x634>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e136      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030da:	4b79      	ldr	r3, [pc, #484]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 80030dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030de:	2202      	movs	r2, #2
 80030e0:	4013      	ands	r3, r2
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x432>
 80030e4:	e013      	b.n	800310e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fe ff03 	bl	8001ef0 <HAL_GetTick>
 80030ea:	0003      	movs	r3, r0
 80030ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030ee:	e009      	b.n	8003104 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f0:	f7fe fefe 	bl	8001ef0 <HAL_GetTick>
 80030f4:	0002      	movs	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	4a73      	ldr	r2, [pc, #460]	; (80032c8 <HAL_RCC_OscConfig+0x634>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e121      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003104:	4b6e      	ldr	r3, [pc, #440]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	2202      	movs	r2, #2
 800310a:	4013      	ands	r3, r2
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800310e:	231f      	movs	r3, #31
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d105      	bne.n	8003124 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003118:	4b69      	ldr	r3, [pc, #420]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 800311a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800311c:	4b68      	ldr	r3, [pc, #416]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 800311e:	496b      	ldr	r1, [pc, #428]	; (80032cc <HAL_RCC_OscConfig+0x638>)
 8003120:	400a      	ands	r2, r1
 8003122:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2220      	movs	r2, #32
 800312a:	4013      	ands	r3, r2
 800312c:	d039      	beq.n	80031a2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d01b      	beq.n	800316e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003136:	4b62      	ldr	r3, [pc, #392]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4b61      	ldr	r3, [pc, #388]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 800313c:	2180      	movs	r1, #128	; 0x80
 800313e:	03c9      	lsls	r1, r1, #15
 8003140:	430a      	orrs	r2, r1
 8003142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003144:	f7fe fed4 	bl	8001ef0 <HAL_GetTick>
 8003148:	0003      	movs	r3, r0
 800314a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800314e:	f7fe fecf 	bl	8001ef0 <HAL_GetTick>
 8003152:	0002      	movs	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e0f3      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003160:	4b57      	ldr	r3, [pc, #348]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	041b      	lsls	r3, r3, #16
 8003168:	4013      	ands	r3, r2
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x4ba>
 800316c:	e019      	b.n	80031a2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800316e:	4b54      	ldr	r3, [pc, #336]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8003174:	4956      	ldr	r1, [pc, #344]	; (80032d0 <HAL_RCC_OscConfig+0x63c>)
 8003176:	400a      	ands	r2, r1
 8003178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317a:	f7fe feb9 	bl	8001ef0 <HAL_GetTick>
 800317e:	0003      	movs	r3, r0
 8003180:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003184:	f7fe feb4 	bl	8001ef0 <HAL_GetTick>
 8003188:	0002      	movs	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e0d8      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003196:	4b4a      	ldr	r3, [pc, #296]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	041b      	lsls	r3, r3, #16
 800319e:	4013      	ands	r3, r2
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d100      	bne.n	80031ac <HAL_RCC_OscConfig+0x518>
 80031aa:	e0cc      	b.n	8003346 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ac:	4b44      	ldr	r3, [pc, #272]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2238      	movs	r2, #56	; 0x38
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b10      	cmp	r3, #16
 80031b6:	d100      	bne.n	80031ba <HAL_RCC_OscConfig+0x526>
 80031b8:	e07b      	b.n	80032b2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d156      	bne.n	8003270 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c2:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4b3e      	ldr	r3, [pc, #248]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 80031c8:	4942      	ldr	r1, [pc, #264]	; (80032d4 <HAL_RCC_OscConfig+0x640>)
 80031ca:	400a      	ands	r2, r1
 80031cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ce:	f7fe fe8f 	bl	8001ef0 <HAL_GetTick>
 80031d2:	0003      	movs	r3, r0
 80031d4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d8:	f7fe fe8a 	bl	8001ef0 <HAL_GetTick>
 80031dc:	0002      	movs	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e0ae      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ea:	4b35      	ldr	r3, [pc, #212]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	049b      	lsls	r3, r3, #18
 80031f2:	4013      	ands	r3, r2
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031f6:	4b32      	ldr	r3, [pc, #200]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	4a37      	ldr	r2, [pc, #220]	; (80032d8 <HAL_RCC_OscConfig+0x644>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	0019      	movs	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	431a      	orrs	r2, r3
 8003224:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8003226:	430a      	orrs	r2, r1
 8003228:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322a:	4b25      	ldr	r3, [pc, #148]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8003230:	2180      	movs	r1, #128	; 0x80
 8003232:	0449      	lsls	r1, r1, #17
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003238:	4b21      	ldr	r3, [pc, #132]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 800323e:	2180      	movs	r1, #128	; 0x80
 8003240:	0549      	lsls	r1, r1, #21
 8003242:	430a      	orrs	r2, r1
 8003244:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003246:	f7fe fe53 	bl	8001ef0 <HAL_GetTick>
 800324a:	0003      	movs	r3, r0
 800324c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003250:	f7fe fe4e 	bl	8001ef0 <HAL_GetTick>
 8003254:	0002      	movs	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e072      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003262:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	2380      	movs	r3, #128	; 0x80
 8003268:	049b      	lsls	r3, r3, #18
 800326a:	4013      	ands	r3, r2
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x5bc>
 800326e:	e06a      	b.n	8003346 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003270:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 8003276:	4917      	ldr	r1, [pc, #92]	; (80032d4 <HAL_RCC_OscConfig+0x640>)
 8003278:	400a      	ands	r2, r1
 800327a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fe fe38 	bl	8001ef0 <HAL_GetTick>
 8003280:	0003      	movs	r3, r0
 8003282:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003286:	f7fe fe33 	bl	8001ef0 <HAL_GetTick>
 800328a:	0002      	movs	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e057      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003298:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	049b      	lsls	r3, r3, #18
 80032a0:	4013      	ands	r3, r2
 80032a2:	d1f0      	bne.n	8003286 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80032a4:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RCC_OscConfig+0x62c>)
 80032aa:	490c      	ldr	r1, [pc, #48]	; (80032dc <HAL_RCC_OscConfig+0x648>)
 80032ac:	400a      	ands	r2, r1
 80032ae:	60da      	str	r2, [r3, #12]
 80032b0:	e049      	b.n	8003346 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d112      	bne.n	80032e0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e044      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40007000 	.word	0x40007000
 80032c8:	00001388 	.word	0x00001388
 80032cc:	efffffff 	.word	0xefffffff
 80032d0:	ffbfffff 	.word	0xffbfffff
 80032d4:	feffffff 	.word	0xfeffffff
 80032d8:	11c1808c 	.word	0x11c1808c
 80032dc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80032e0:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_RCC_OscConfig+0x6bc>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2203      	movs	r2, #3
 80032ea:	401a      	ands	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d126      	bne.n	8003342 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2270      	movs	r2, #112	; 0x70
 80032f8:	401a      	ands	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d11f      	bne.n	8003342 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	23fe      	movs	r3, #254	; 0xfe
 8003306:	01db      	lsls	r3, r3, #7
 8003308:	401a      	ands	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d116      	bne.n	8003342 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	23f8      	movs	r3, #248	; 0xf8
 8003318:	039b      	lsls	r3, r3, #14
 800331a:	401a      	ands	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d10e      	bne.n	8003342 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	23e0      	movs	r3, #224	; 0xe0
 8003328:	051b      	lsls	r3, r3, #20
 800332a:	401a      	ands	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003330:	429a      	cmp	r2, r3
 8003332:	d106      	bne.n	8003342 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	0f5b      	lsrs	r3, r3, #29
 8003338:	075a      	lsls	r2, r3, #29
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d001      	beq.n	8003346 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	0018      	movs	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	b008      	add	sp, #32
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000

08003354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0e9      	b.n	800353c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003368:	4b76      	ldr	r3, [pc, #472]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2207      	movs	r2, #7
 800336e:	4013      	ands	r3, r2
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d91e      	bls.n	80033b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b73      	ldr	r3, [pc, #460]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2207      	movs	r2, #7
 800337c:	4393      	bics	r3, r2
 800337e:	0019      	movs	r1, r3
 8003380:	4b70      	ldr	r3, [pc, #448]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003388:	f7fe fdb2 	bl	8001ef0 <HAL_GetTick>
 800338c:	0003      	movs	r3, r0
 800338e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003390:	e009      	b.n	80033a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003392:	f7fe fdad 	bl	8001ef0 <HAL_GetTick>
 8003396:	0002      	movs	r2, r0
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	4a6a      	ldr	r2, [pc, #424]	; (8003548 <HAL_RCC_ClockConfig+0x1f4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e0ca      	b.n	800353c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033a6:	4b67      	ldr	r3, [pc, #412]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2207      	movs	r2, #7
 80033ac:	4013      	ands	r3, r2
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d1ee      	bne.n	8003392 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2202      	movs	r2, #2
 80033ba:	4013      	ands	r3, r2
 80033bc:	d015      	beq.n	80033ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2204      	movs	r2, #4
 80033c4:	4013      	ands	r3, r2
 80033c6:	d006      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80033c8:	4b60      	ldr	r3, [pc, #384]	; (800354c <HAL_RCC_ClockConfig+0x1f8>)
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	4b5f      	ldr	r3, [pc, #380]	; (800354c <HAL_RCC_ClockConfig+0x1f8>)
 80033ce:	21e0      	movs	r1, #224	; 0xe0
 80033d0:	01c9      	lsls	r1, r1, #7
 80033d2:	430a      	orrs	r2, r1
 80033d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d6:	4b5d      	ldr	r3, [pc, #372]	; (800354c <HAL_RCC_ClockConfig+0x1f8>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	4a5d      	ldr	r2, [pc, #372]	; (8003550 <HAL_RCC_ClockConfig+0x1fc>)
 80033dc:	4013      	ands	r3, r2
 80033de:	0019      	movs	r1, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	4b59      	ldr	r3, [pc, #356]	; (800354c <HAL_RCC_ClockConfig+0x1f8>)
 80033e6:	430a      	orrs	r2, r1
 80033e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2201      	movs	r2, #1
 80033f0:	4013      	ands	r3, r2
 80033f2:	d057      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d107      	bne.n	800340c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fc:	4b53      	ldr	r3, [pc, #332]	; (800354c <HAL_RCC_ClockConfig+0x1f8>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	2380      	movs	r3, #128	; 0x80
 8003402:	029b      	lsls	r3, r3, #10
 8003404:	4013      	ands	r3, r2
 8003406:	d12b      	bne.n	8003460 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e097      	b.n	800353c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d107      	bne.n	8003424 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003414:	4b4d      	ldr	r3, [pc, #308]	; (800354c <HAL_RCC_ClockConfig+0x1f8>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	049b      	lsls	r3, r3, #18
 800341c:	4013      	ands	r3, r2
 800341e:	d11f      	bne.n	8003460 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e08b      	b.n	800353c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d107      	bne.n	800343c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800342c:	4b47      	ldr	r3, [pc, #284]	; (800354c <HAL_RCC_ClockConfig+0x1f8>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4013      	ands	r3, r2
 8003436:	d113      	bne.n	8003460 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e07f      	b.n	800353c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b03      	cmp	r3, #3
 8003442:	d106      	bne.n	8003452 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003444:	4b41      	ldr	r3, [pc, #260]	; (800354c <HAL_RCC_ClockConfig+0x1f8>)
 8003446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003448:	2202      	movs	r2, #2
 800344a:	4013      	ands	r3, r2
 800344c:	d108      	bne.n	8003460 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e074      	b.n	800353c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003452:	4b3e      	ldr	r3, [pc, #248]	; (800354c <HAL_RCC_ClockConfig+0x1f8>)
 8003454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003456:	2202      	movs	r2, #2
 8003458:	4013      	ands	r3, r2
 800345a:	d101      	bne.n	8003460 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e06d      	b.n	800353c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003460:	4b3a      	ldr	r3, [pc, #232]	; (800354c <HAL_RCC_ClockConfig+0x1f8>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2207      	movs	r2, #7
 8003466:	4393      	bics	r3, r2
 8003468:	0019      	movs	r1, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	4b37      	ldr	r3, [pc, #220]	; (800354c <HAL_RCC_ClockConfig+0x1f8>)
 8003470:	430a      	orrs	r2, r1
 8003472:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003474:	f7fe fd3c 	bl	8001ef0 <HAL_GetTick>
 8003478:	0003      	movs	r3, r0
 800347a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347c:	e009      	b.n	8003492 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347e:	f7fe fd37 	bl	8001ef0 <HAL_GetTick>
 8003482:	0002      	movs	r2, r0
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	4a2f      	ldr	r2, [pc, #188]	; (8003548 <HAL_RCC_ClockConfig+0x1f4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e054      	b.n	800353c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	4b2e      	ldr	r3, [pc, #184]	; (800354c <HAL_RCC_ClockConfig+0x1f8>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2238      	movs	r2, #56	; 0x38
 8003498:	401a      	ands	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d1ec      	bne.n	800347e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a4:	4b27      	ldr	r3, [pc, #156]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2207      	movs	r2, #7
 80034aa:	4013      	ands	r3, r2
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d21e      	bcs.n	80034f0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2207      	movs	r2, #7
 80034b8:	4393      	bics	r3, r2
 80034ba:	0019      	movs	r1, r3
 80034bc:	4b21      	ldr	r3, [pc, #132]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034c4:	f7fe fd14 	bl	8001ef0 <HAL_GetTick>
 80034c8:	0003      	movs	r3, r0
 80034ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034cc:	e009      	b.n	80034e2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ce:	f7fe fd0f 	bl	8001ef0 <HAL_GetTick>
 80034d2:	0002      	movs	r2, r0
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <HAL_RCC_ClockConfig+0x1f4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e02c      	b.n	800353c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034e2:	4b18      	ldr	r3, [pc, #96]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2207      	movs	r2, #7
 80034e8:	4013      	ands	r3, r2
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d1ee      	bne.n	80034ce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2204      	movs	r2, #4
 80034f6:	4013      	ands	r3, r2
 80034f8:	d009      	beq.n	800350e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80034fa:	4b14      	ldr	r3, [pc, #80]	; (800354c <HAL_RCC_ClockConfig+0x1f8>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	4a15      	ldr	r2, [pc, #84]	; (8003554 <HAL_RCC_ClockConfig+0x200>)
 8003500:	4013      	ands	r3, r2
 8003502:	0019      	movs	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	4b10      	ldr	r3, [pc, #64]	; (800354c <HAL_RCC_ClockConfig+0x1f8>)
 800350a:	430a      	orrs	r2, r1
 800350c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800350e:	f000 f829 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 8003512:	0001      	movs	r1, r0
 8003514:	4b0d      	ldr	r3, [pc, #52]	; (800354c <HAL_RCC_ClockConfig+0x1f8>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	0a1b      	lsrs	r3, r3, #8
 800351a:	220f      	movs	r2, #15
 800351c:	401a      	ands	r2, r3
 800351e:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <HAL_RCC_ClockConfig+0x204>)
 8003520:	0092      	lsls	r2, r2, #2
 8003522:	58d3      	ldr	r3, [r2, r3]
 8003524:	221f      	movs	r2, #31
 8003526:	4013      	ands	r3, r2
 8003528:	000a      	movs	r2, r1
 800352a:	40da      	lsrs	r2, r3
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_RCC_ClockConfig+0x208>)
 800352e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_ClockConfig+0x20c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	0018      	movs	r0, r3
 8003536:	f7fe fc7f 	bl	8001e38 <HAL_InitTick>
 800353a:	0003      	movs	r3, r0
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b004      	add	sp, #16
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40022000 	.word	0x40022000
 8003548:	00001388 	.word	0x00001388
 800354c:	40021000 	.word	0x40021000
 8003550:	fffff0ff 	.word	0xfffff0ff
 8003554:	ffff8fff 	.word	0xffff8fff
 8003558:	0800764c 	.word	0x0800764c
 800355c:	20000044 	.word	0x20000044
 8003560:	20000048 	.word	0x20000048

08003564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800356a:	4b3c      	ldr	r3, [pc, #240]	; (800365c <HAL_RCC_GetSysClockFreq+0xf8>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2238      	movs	r2, #56	; 0x38
 8003570:	4013      	ands	r3, r2
 8003572:	d10f      	bne.n	8003594 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003574:	4b39      	ldr	r3, [pc, #228]	; (800365c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	0adb      	lsrs	r3, r3, #11
 800357a:	2207      	movs	r2, #7
 800357c:	4013      	ands	r3, r2
 800357e:	2201      	movs	r2, #1
 8003580:	409a      	lsls	r2, r3
 8003582:	0013      	movs	r3, r2
 8003584:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003586:	6839      	ldr	r1, [r7, #0]
 8003588:	4835      	ldr	r0, [pc, #212]	; (8003660 <HAL_RCC_GetSysClockFreq+0xfc>)
 800358a:	f7fc fdcf 	bl	800012c <__udivsi3>
 800358e:	0003      	movs	r3, r0
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	e05d      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003594:	4b31      	ldr	r3, [pc, #196]	; (800365c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2238      	movs	r2, #56	; 0x38
 800359a:	4013      	ands	r3, r2
 800359c:	2b08      	cmp	r3, #8
 800359e:	d102      	bne.n	80035a6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035a0:	4b30      	ldr	r3, [pc, #192]	; (8003664 <HAL_RCC_GetSysClockFreq+0x100>)
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	e054      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a6:	4b2d      	ldr	r3, [pc, #180]	; (800365c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2238      	movs	r2, #56	; 0x38
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d138      	bne.n	8003624 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80035b2:	4b2a      	ldr	r3, [pc, #168]	; (800365c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2203      	movs	r2, #3
 80035b8:	4013      	ands	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035bc:	4b27      	ldr	r3, [pc, #156]	; (800365c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	2207      	movs	r2, #7
 80035c4:	4013      	ands	r3, r2
 80035c6:	3301      	adds	r3, #1
 80035c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d10d      	bne.n	80035ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035d0:	68b9      	ldr	r1, [r7, #8]
 80035d2:	4824      	ldr	r0, [pc, #144]	; (8003664 <HAL_RCC_GetSysClockFreq+0x100>)
 80035d4:	f7fc fdaa 	bl	800012c <__udivsi3>
 80035d8:	0003      	movs	r3, r0
 80035da:	0019      	movs	r1, r3
 80035dc:	4b1f      	ldr	r3, [pc, #124]	; (800365c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	0a1b      	lsrs	r3, r3, #8
 80035e2:	227f      	movs	r2, #127	; 0x7f
 80035e4:	4013      	ands	r3, r2
 80035e6:	434b      	muls	r3, r1
 80035e8:	617b      	str	r3, [r7, #20]
        break;
 80035ea:	e00d      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	481c      	ldr	r0, [pc, #112]	; (8003660 <HAL_RCC_GetSysClockFreq+0xfc>)
 80035f0:	f7fc fd9c 	bl	800012c <__udivsi3>
 80035f4:	0003      	movs	r3, r0
 80035f6:	0019      	movs	r1, r3
 80035f8:	4b18      	ldr	r3, [pc, #96]	; (800365c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	0a1b      	lsrs	r3, r3, #8
 80035fe:	227f      	movs	r2, #127	; 0x7f
 8003600:	4013      	ands	r3, r2
 8003602:	434b      	muls	r3, r1
 8003604:	617b      	str	r3, [r7, #20]
        break;
 8003606:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003608:	4b14      	ldr	r3, [pc, #80]	; (800365c <HAL_RCC_GetSysClockFreq+0xf8>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	0f5b      	lsrs	r3, r3, #29
 800360e:	2207      	movs	r2, #7
 8003610:	4013      	ands	r3, r2
 8003612:	3301      	adds	r3, #1
 8003614:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	6978      	ldr	r0, [r7, #20]
 800361a:	f7fc fd87 	bl	800012c <__udivsi3>
 800361e:	0003      	movs	r3, r0
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	e015      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003624:	4b0d      	ldr	r3, [pc, #52]	; (800365c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2238      	movs	r2, #56	; 0x38
 800362a:	4013      	ands	r3, r2
 800362c:	2b20      	cmp	r3, #32
 800362e:	d103      	bne.n	8003638 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003630:	2380      	movs	r3, #128	; 0x80
 8003632:	021b      	lsls	r3, r3, #8
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	e00b      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003638:	4b08      	ldr	r3, [pc, #32]	; (800365c <HAL_RCC_GetSysClockFreq+0xf8>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2238      	movs	r2, #56	; 0x38
 800363e:	4013      	ands	r3, r2
 8003640:	2b18      	cmp	r3, #24
 8003642:	d103      	bne.n	800364c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003644:	23fa      	movs	r3, #250	; 0xfa
 8003646:	01db      	lsls	r3, r3, #7
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	e001      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003650:	693b      	ldr	r3, [r7, #16]
}
 8003652:	0018      	movs	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	b006      	add	sp, #24
 8003658:	bd80      	pop	{r7, pc}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	40021000 	.word	0x40021000
 8003660:	00f42400 	.word	0x00f42400
 8003664:	007a1200 	.word	0x007a1200

08003668 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800366c:	4b02      	ldr	r3, [pc, #8]	; (8003678 <HAL_RCC_GetHCLKFreq+0x10>)
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	20000044 	.word	0x20000044

0800367c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800367c:	b5b0      	push	{r4, r5, r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003680:	f7ff fff2 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 8003684:	0004      	movs	r4, r0
 8003686:	f7ff fa7d 	bl	8002b84 <LL_RCC_GetAPB1Prescaler>
 800368a:	0003      	movs	r3, r0
 800368c:	0b1a      	lsrs	r2, r3, #12
 800368e:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003690:	0092      	lsls	r2, r2, #2
 8003692:	58d3      	ldr	r3, [r2, r3]
 8003694:	221f      	movs	r2, #31
 8003696:	4013      	ands	r3, r2
 8003698:	40dc      	lsrs	r4, r3
 800369a:	0023      	movs	r3, r4
}
 800369c:	0018      	movs	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	bdb0      	pop	{r4, r5, r7, pc}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	0800768c 	.word	0x0800768c

080036a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80036b0:	2313      	movs	r3, #19
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036b8:	2312      	movs	r3, #18
 80036ba:	18fb      	adds	r3, r7, r3
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	2380      	movs	r3, #128	; 0x80
 80036c6:	029b      	lsls	r3, r3, #10
 80036c8:	4013      	ands	r3, r2
 80036ca:	d100      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x26>
 80036cc:	e0ad      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ce:	2011      	movs	r0, #17
 80036d0:	183b      	adds	r3, r7, r0
 80036d2:	2200      	movs	r2, #0
 80036d4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d6:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80036d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	055b      	lsls	r3, r3, #21
 80036de:	4013      	ands	r3, r2
 80036e0:	d110      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e2:	4b44      	ldr	r3, [pc, #272]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80036e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036e6:	4b43      	ldr	r3, [pc, #268]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80036e8:	2180      	movs	r1, #128	; 0x80
 80036ea:	0549      	lsls	r1, r1, #21
 80036ec:	430a      	orrs	r2, r1
 80036ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80036f0:	4b40      	ldr	r3, [pc, #256]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80036f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	055b      	lsls	r3, r3, #21
 80036f8:	4013      	ands	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]
 80036fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036fe:	183b      	adds	r3, r7, r0
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003704:	4b3c      	ldr	r3, [pc, #240]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4b3b      	ldr	r3, [pc, #236]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800370a:	2180      	movs	r1, #128	; 0x80
 800370c:	0049      	lsls	r1, r1, #1
 800370e:	430a      	orrs	r2, r1
 8003710:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003712:	f7fe fbed 	bl	8001ef0 <HAL_GetTick>
 8003716:	0003      	movs	r3, r0
 8003718:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800371a:	e00b      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371c:	f7fe fbe8 	bl	8001ef0 <HAL_GetTick>
 8003720:	0002      	movs	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d904      	bls.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800372a:	2313      	movs	r3, #19
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	2203      	movs	r2, #3
 8003730:	701a      	strb	r2, [r3, #0]
        break;
 8003732:	e005      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003734:	4b30      	ldr	r3, [pc, #192]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4013      	ands	r3, r2
 800373e:	d0ed      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003740:	2313      	movs	r3, #19
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d15e      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800374a:	4b2a      	ldr	r3, [pc, #168]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800374c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800374e:	23c0      	movs	r3, #192	; 0xc0
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4013      	ands	r3, r2
 8003754:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d019      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	429a      	cmp	r2, r3
 8003764:	d014      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003766:	4b23      	ldr	r3, [pc, #140]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376a:	4a24      	ldr	r2, [pc, #144]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800376c:	4013      	ands	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003770:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003772:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003774:	4b1f      	ldr	r3, [pc, #124]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003776:	2180      	movs	r1, #128	; 0x80
 8003778:	0249      	lsls	r1, r1, #9
 800377a:	430a      	orrs	r2, r1
 800377c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003780:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003782:	4b1c      	ldr	r3, [pc, #112]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003784:	491e      	ldr	r1, [pc, #120]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003786:	400a      	ands	r2, r1
 8003788:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800378a:	4b1a      	ldr	r3, [pc, #104]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2201      	movs	r2, #1
 8003794:	4013      	ands	r3, r2
 8003796:	d016      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fe fbaa 	bl	8001ef0 <HAL_GetTick>
 800379c:	0003      	movs	r3, r0
 800379e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037a0:	e00c      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a2:	f7fe fba5 	bl	8001ef0 <HAL_GetTick>
 80037a6:	0002      	movs	r2, r0
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	4a15      	ldr	r2, [pc, #84]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d904      	bls.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80037b2:	2313      	movs	r3, #19
 80037b4:	18fb      	adds	r3, r7, r3
 80037b6:	2203      	movs	r2, #3
 80037b8:	701a      	strb	r2, [r3, #0]
            break;
 80037ba:	e004      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037bc:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80037be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c0:	2202      	movs	r2, #2
 80037c2:	4013      	ands	r3, r2
 80037c4:	d0ed      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80037c6:	2313      	movs	r3, #19
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037d0:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80037d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d4:	4a09      	ldr	r2, [pc, #36]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	0019      	movs	r1, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037de:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80037e0:	430a      	orrs	r2, r1
 80037e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80037e4:	e016      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037e6:	2312      	movs	r3, #18
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	2213      	movs	r2, #19
 80037ec:	18ba      	adds	r2, r7, r2
 80037ee:	7812      	ldrb	r2, [r2, #0]
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	e00f      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40007000 	.word	0x40007000
 80037fc:	fffffcff 	.word	0xfffffcff
 8003800:	fffeffff 	.word	0xfffeffff
 8003804:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003808:	2312      	movs	r3, #18
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	2213      	movs	r2, #19
 800380e:	18ba      	adds	r2, r7, r2
 8003810:	7812      	ldrb	r2, [r2, #0]
 8003812:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003814:	2311      	movs	r3, #17
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d105      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800381e:	4bb6      	ldr	r3, [pc, #728]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003822:	4bb5      	ldr	r3, [pc, #724]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003824:	49b5      	ldr	r1, [pc, #724]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003826:	400a      	ands	r2, r1
 8003828:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2201      	movs	r2, #1
 8003830:	4013      	ands	r3, r2
 8003832:	d009      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003834:	4bb0      	ldr	r3, [pc, #704]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003838:	2203      	movs	r2, #3
 800383a:	4393      	bics	r3, r2
 800383c:	0019      	movs	r1, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	4bad      	ldr	r3, [pc, #692]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003844:	430a      	orrs	r2, r1
 8003846:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2202      	movs	r2, #2
 800384e:	4013      	ands	r3, r2
 8003850:	d009      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003852:	4ba9      	ldr	r3, [pc, #676]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	220c      	movs	r2, #12
 8003858:	4393      	bics	r3, r2
 800385a:	0019      	movs	r1, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	4ba5      	ldr	r3, [pc, #660]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003862:	430a      	orrs	r2, r1
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2204      	movs	r2, #4
 800386c:	4013      	ands	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003870:	4ba1      	ldr	r3, [pc, #644]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003874:	2230      	movs	r2, #48	; 0x30
 8003876:	4393      	bics	r3, r2
 8003878:	0019      	movs	r1, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	4b9e      	ldr	r3, [pc, #632]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003880:	430a      	orrs	r2, r1
 8003882:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2210      	movs	r2, #16
 800388a:	4013      	ands	r3, r2
 800388c:	d009      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800388e:	4b9a      	ldr	r3, [pc, #616]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	4a9b      	ldr	r2, [pc, #620]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003894:	4013      	ands	r3, r2
 8003896:	0019      	movs	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	4b96      	ldr	r3, [pc, #600]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800389e:	430a      	orrs	r2, r1
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	015b      	lsls	r3, r3, #5
 80038aa:	4013      	ands	r3, r2
 80038ac:	d009      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80038ae:	4b92      	ldr	r3, [pc, #584]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	4a94      	ldr	r2, [pc, #592]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	0019      	movs	r1, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	4b8e      	ldr	r3, [pc, #568]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038be:	430a      	orrs	r2, r1
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	2380      	movs	r3, #128	; 0x80
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4013      	ands	r3, r2
 80038cc:	d009      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ce:	4b8a      	ldr	r3, [pc, #552]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	4a8d      	ldr	r2, [pc, #564]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	0019      	movs	r1, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038dc:	4b86      	ldr	r3, [pc, #536]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038de:	430a      	orrs	r2, r1
 80038e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	2380      	movs	r3, #128	; 0x80
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4013      	ands	r3, r2
 80038ec:	d009      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038ee:	4b82      	ldr	r3, [pc, #520]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f2:	4a86      	ldr	r2, [pc, #536]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	0019      	movs	r1, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fc:	4b7e      	ldr	r3, [pc, #504]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038fe:	430a      	orrs	r2, r1
 8003900:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2220      	movs	r2, #32
 8003908:	4013      	ands	r3, r2
 800390a:	d009      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800390c:	4b7a      	ldr	r3, [pc, #488]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	4a7f      	ldr	r2, [pc, #508]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003912:	4013      	ands	r3, r2
 8003914:	0019      	movs	r1, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699a      	ldr	r2, [r3, #24]
 800391a:	4b77      	ldr	r3, [pc, #476]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800391c:	430a      	orrs	r2, r1
 800391e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2240      	movs	r2, #64	; 0x40
 8003926:	4013      	ands	r3, r2
 8003928:	d009      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800392a:	4b73      	ldr	r3, [pc, #460]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800392c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392e:	4a79      	ldr	r2, [pc, #484]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003930:	4013      	ands	r3, r2
 8003932:	0019      	movs	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	4b6f      	ldr	r3, [pc, #444]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800393a:	430a      	orrs	r2, r1
 800393c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	2380      	movs	r3, #128	; 0x80
 8003944:	01db      	lsls	r3, r3, #7
 8003946:	4013      	ands	r3, r2
 8003948:	d015      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800394a:	4b6b      	ldr	r3, [pc, #428]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800394c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	0899      	lsrs	r1, r3, #2
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003956:	4b68      	ldr	r3, [pc, #416]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003958:	430a      	orrs	r2, r1
 800395a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003960:	2380      	movs	r3, #128	; 0x80
 8003962:	05db      	lsls	r3, r3, #23
 8003964:	429a      	cmp	r2, r3
 8003966:	d106      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003968:	4b63      	ldr	r3, [pc, #396]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	4b62      	ldr	r3, [pc, #392]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800396e:	2180      	movs	r1, #128	; 0x80
 8003970:	0249      	lsls	r1, r1, #9
 8003972:	430a      	orrs	r2, r1
 8003974:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	031b      	lsls	r3, r3, #12
 800397e:	4013      	ands	r3, r2
 8003980:	d009      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003982:	4b5d      	ldr	r3, [pc, #372]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	2240      	movs	r2, #64	; 0x40
 8003988:	4393      	bics	r3, r2
 800398a:	0019      	movs	r1, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003990:	4b59      	ldr	r3, [pc, #356]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003992:	430a      	orrs	r2, r1
 8003994:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	039b      	lsls	r3, r3, #14
 800399e:	4013      	ands	r3, r2
 80039a0:	d016      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80039a2:	4b55      	ldr	r3, [pc, #340]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	4a5c      	ldr	r2, [pc, #368]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	0019      	movs	r1, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b0:	4b51      	ldr	r3, [pc, #324]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039b2:	430a      	orrs	r2, r1
 80039b4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	03db      	lsls	r3, r3, #15
 80039be:	429a      	cmp	r2, r3
 80039c0:	d106      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80039c2:	4b4d      	ldr	r3, [pc, #308]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	4b4c      	ldr	r3, [pc, #304]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039c8:	2180      	movs	r1, #128	; 0x80
 80039ca:	0449      	lsls	r1, r1, #17
 80039cc:	430a      	orrs	r2, r1
 80039ce:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	2380      	movs	r3, #128	; 0x80
 80039d6:	03db      	lsls	r3, r3, #15
 80039d8:	4013      	ands	r3, r2
 80039da:	d016      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80039dc:	4b46      	ldr	r3, [pc, #280]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e0:	4a4e      	ldr	r2, [pc, #312]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	0019      	movs	r1, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ea:	4b43      	ldr	r3, [pc, #268]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039ec:	430a      	orrs	r2, r1
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	045b      	lsls	r3, r3, #17
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d106      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80039fc:	4b3e      	ldr	r3, [pc, #248]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	4b3d      	ldr	r3, [pc, #244]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a02:	2180      	movs	r1, #128	; 0x80
 8003a04:	0449      	lsls	r1, r1, #17
 8003a06:	430a      	orrs	r2, r1
 8003a08:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	4013      	ands	r3, r2
 8003a14:	d014      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003a16:	4b38      	ldr	r3, [pc, #224]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	4393      	bics	r3, r2
 8003a1e:	0019      	movs	r1, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1a      	ldr	r2, [r3, #32]
 8003a24:	4b34      	ldr	r3, [pc, #208]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a26:	430a      	orrs	r2, r1
 8003a28:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d106      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a32:	4b31      	ldr	r3, [pc, #196]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	4b30      	ldr	r3, [pc, #192]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a38:	2180      	movs	r1, #128	; 0x80
 8003a3a:	0249      	lsls	r1, r1, #9
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	2380      	movs	r3, #128	; 0x80
 8003a46:	019b      	lsls	r3, r3, #6
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d014      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a50:	220c      	movs	r2, #12
 8003a52:	4393      	bics	r3, r2
 8003a54:	0019      	movs	r1, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a5a:	4b27      	ldr	r3, [pc, #156]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d106      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a68:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	4b22      	ldr	r3, [pc, #136]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a6e:	2180      	movs	r1, #128	; 0x80
 8003a70:	0249      	lsls	r1, r1, #9
 8003a72:	430a      	orrs	r2, r1
 8003a74:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	045b      	lsls	r3, r3, #17
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d016      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a82:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a86:	4a22      	ldr	r2, [pc, #136]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a90:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a92:	430a      	orrs	r2, r1
 8003a94:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a9a:	2380      	movs	r3, #128	; 0x80
 8003a9c:	019b      	lsls	r3, r3, #6
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d106      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003aa2:	4b15      	ldr	r3, [pc, #84]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aa8:	2180      	movs	r1, #128	; 0x80
 8003aaa:	0449      	lsls	r1, r1, #17
 8003aac:	430a      	orrs	r2, r1
 8003aae:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	2380      	movs	r3, #128	; 0x80
 8003ab6:	049b      	lsls	r3, r3, #18
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d016      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003abc:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac0:	4a10      	ldr	r2, [pc, #64]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003aca:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003acc:	430a      	orrs	r2, r1
 8003ace:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d106      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ae2:	2180      	movs	r1, #128	; 0x80
 8003ae4:	0449      	lsls	r1, r1, #17
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003aea:	2312      	movs	r3, #18
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	781b      	ldrb	r3, [r3, #0]
}
 8003af0:	0018      	movs	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b006      	add	sp, #24
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	efffffff 	.word	0xefffffff
 8003b00:	fffff3ff 	.word	0xfffff3ff
 8003b04:	fffffcff 	.word	0xfffffcff
 8003b08:	fff3ffff 	.word	0xfff3ffff
 8003b0c:	ffcfffff 	.word	0xffcfffff
 8003b10:	ffffcfff 	.word	0xffffcfff
 8003b14:	ffff3fff 	.word	0xffff3fff
 8003b18:	ffbfffff 	.word	0xffbfffff
 8003b1c:	feffffff 	.word	0xfeffffff

08003b20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e0a8      	b.n	8003c84 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	2382      	movs	r3, #130	; 0x82
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d009      	beq.n	8003b5a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	61da      	str	r2, [r3, #28]
 8003b4c:	e005      	b.n	8003b5a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	225d      	movs	r2, #93	; 0x5d
 8003b64:	5c9b      	ldrb	r3, [r3, r2]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d107      	bne.n	8003b7c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	225c      	movs	r2, #92	; 0x5c
 8003b70:	2100      	movs	r1, #0
 8003b72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f000 f88a 	bl	8003c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	225d      	movs	r2, #93	; 0x5d
 8003b80:	2102      	movs	r1, #2
 8003b82:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2140      	movs	r1, #64	; 0x40
 8003b90:	438a      	bics	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	23e0      	movs	r3, #224	; 0xe0
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d902      	bls.n	8003ba6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	e002      	b.n	8003bac <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	015b      	lsls	r3, r3, #5
 8003baa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	23f0      	movs	r3, #240	; 0xf0
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d008      	beq.n	8003bca <HAL_SPI_Init+0xaa>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	23e0      	movs	r3, #224	; 0xe0
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d002      	beq.n	8003bca <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	2382      	movs	r3, #130	; 0x82
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6899      	ldr	r1, [r3, #8]
 8003bd8:	2384      	movs	r3, #132	; 0x84
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	400b      	ands	r3, r1
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	2102      	movs	r1, #2
 8003be6:	400b      	ands	r3, r1
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	2101      	movs	r1, #1
 8003bf0:	400b      	ands	r3, r1
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6999      	ldr	r1, [r3, #24]
 8003bf8:	2380      	movs	r3, #128	; 0x80
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	400b      	ands	r3, r1
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	2138      	movs	r1, #56	; 0x38
 8003c06:	400b      	ands	r3, r1
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	2180      	movs	r1, #128	; 0x80
 8003c10:	400b      	ands	r3, r1
 8003c12:	431a      	orrs	r2, r3
 8003c14:	0011      	movs	r1, r2
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c1a:	2380      	movs	r3, #128	; 0x80
 8003c1c:	019b      	lsls	r3, r3, #6
 8003c1e:	401a      	ands	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	0c1b      	lsrs	r3, r3, #16
 8003c2e:	2204      	movs	r2, #4
 8003c30:	401a      	ands	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	2110      	movs	r1, #16
 8003c38:	400b      	ands	r3, r1
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c40:	2108      	movs	r1, #8
 8003c42:	400b      	ands	r3, r1
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68d9      	ldr	r1, [r3, #12]
 8003c4a:	23f0      	movs	r3, #240	; 0xf0
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	400b      	ands	r3, r1
 8003c50:	431a      	orrs	r2, r3
 8003c52:	0011      	movs	r1, r2
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	015b      	lsls	r3, r3, #5
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4907      	ldr	r1, [pc, #28]	; (8003c8c <HAL_SPI_Init+0x16c>)
 8003c70:	400a      	ands	r2, r1
 8003c72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	225d      	movs	r2, #93	; 0x5d
 8003c7e:	2101      	movs	r1, #1
 8003c80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	0018      	movs	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b004      	add	sp, #16
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	fffff7ff 	.word	0xfffff7ff

08003c90 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	; 0x28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	001a      	movs	r2, r3
 8003cae:	1cbb      	adds	r3, r7, #2
 8003cb0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003cb6:	2323      	movs	r3, #35	; 0x23
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	225c      	movs	r2, #92	; 0x5c
 8003cc2:	5c9b      	ldrb	r3, [r3, r2]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_SPI_TransmitReceive+0x2c>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e1b5      	b.n	8004038 <HAL_SPI_TransmitReceive+0x398>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	225c      	movs	r2, #92	; 0x5c
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cd4:	f7fe f90c 	bl	8001ef0 <HAL_GetTick>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cdc:	201b      	movs	r0, #27
 8003cde:	183b      	adds	r3, r7, r0
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	215d      	movs	r1, #93	; 0x5d
 8003ce4:	5c52      	ldrb	r2, [r2, r1]
 8003ce6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003cee:	2312      	movs	r3, #18
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	1cba      	adds	r2, r7, #2
 8003cf4:	8812      	ldrh	r2, [r2, #0]
 8003cf6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cf8:	183b      	adds	r3, r7, r0
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d011      	beq.n	8003d24 <HAL_SPI_TransmitReceive+0x84>
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	2382      	movs	r3, #130	; 0x82
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d107      	bne.n	8003d1a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d103      	bne.n	8003d1a <HAL_SPI_TransmitReceive+0x7a>
 8003d12:	183b      	adds	r3, r7, r0
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d004      	beq.n	8003d24 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003d1a:	2323      	movs	r3, #35	; 0x23
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	2202      	movs	r2, #2
 8003d20:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d22:	e17e      	b.n	8004022 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d006      	beq.n	8003d38 <HAL_SPI_TransmitReceive+0x98>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_SPI_TransmitReceive+0x98>
 8003d30:	1cbb      	adds	r3, r7, #2
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d104      	bne.n	8003d42 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003d38:	2323      	movs	r3, #35	; 0x23
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d40:	e16f      	b.n	8004022 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	225d      	movs	r2, #93	; 0x5d
 8003d46:	5c9b      	ldrb	r3, [r3, r2]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d003      	beq.n	8003d56 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	225d      	movs	r2, #93	; 0x5d
 8003d52:	2105      	movs	r1, #5
 8003d54:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1cba      	adds	r2, r7, #2
 8003d66:	2146      	movs	r1, #70	; 0x46
 8003d68:	8812      	ldrh	r2, [r2, #0]
 8003d6a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1cba      	adds	r2, r7, #2
 8003d70:	2144      	movs	r1, #68	; 0x44
 8003d72:	8812      	ldrh	r2, [r2, #0]
 8003d74:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1cba      	adds	r2, r7, #2
 8003d80:	8812      	ldrh	r2, [r2, #0]
 8003d82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1cba      	adds	r2, r7, #2
 8003d88:	8812      	ldrh	r2, [r2, #0]
 8003d8a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	23e0      	movs	r3, #224	; 0xe0
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d908      	bls.n	8003db6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	49a4      	ldr	r1, [pc, #656]	; (8004040 <HAL_SPI_TransmitReceive+0x3a0>)
 8003db0:	400a      	ands	r2, r1
 8003db2:	605a      	str	r2, [r3, #4]
 8003db4:	e008      	b.n	8003dc8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2180      	movs	r1, #128	; 0x80
 8003dc2:	0149      	lsls	r1, r1, #5
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2240      	movs	r2, #64	; 0x40
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b40      	cmp	r3, #64	; 0x40
 8003dd4:	d007      	beq.n	8003de6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2140      	movs	r1, #64	; 0x40
 8003de2:	430a      	orrs	r2, r1
 8003de4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	23e0      	movs	r3, #224	; 0xe0
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d800      	bhi.n	8003df4 <HAL_SPI_TransmitReceive+0x154>
 8003df2:	e07f      	b.n	8003ef4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_SPI_TransmitReceive+0x168>
 8003dfc:	2312      	movs	r3, #18
 8003dfe:	18fb      	adds	r3, r7, r3
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d000      	beq.n	8003e08 <HAL_SPI_TransmitReceive+0x168>
 8003e06:	e069      	b.n	8003edc <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	881a      	ldrh	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	1c9a      	adds	r2, r3, #2
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e2c:	e056      	b.n	8003edc <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2202      	movs	r2, #2
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d11b      	bne.n	8003e74 <HAL_SPI_TransmitReceive+0x1d4>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d016      	beq.n	8003e74 <HAL_SPI_TransmitReceive+0x1d4>
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d113      	bne.n	8003e74 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	881a      	ldrh	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	1c9a      	adds	r2, r3, #2
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d11c      	bne.n	8003ebc <HAL_SPI_TransmitReceive+0x21c>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2246      	movs	r2, #70	; 0x46
 8003e86:	5a9b      	ldrh	r3, [r3, r2]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d016      	beq.n	8003ebc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	b292      	uxth	r2, r2
 8003e9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	1c9a      	adds	r2, r3, #2
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2246      	movs	r2, #70	; 0x46
 8003eaa:	5a9b      	ldrh	r3, [r3, r2]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b299      	uxth	r1, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2246      	movs	r2, #70	; 0x46
 8003eb6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ebc:	f7fe f818 	bl	8001ef0 <HAL_GetTick>
 8003ec0:	0002      	movs	r2, r0
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d807      	bhi.n	8003edc <HAL_SPI_TransmitReceive+0x23c>
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ece:	3301      	adds	r3, #1
 8003ed0:	d004      	beq.n	8003edc <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8003ed2:	2323      	movs	r3, #35	; 0x23
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	701a      	strb	r2, [r3, #0]
        goto error;
 8003eda:	e0a2      	b.n	8004022 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1a3      	bne.n	8003e2e <HAL_SPI_TransmitReceive+0x18e>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2246      	movs	r2, #70	; 0x46
 8003eea:	5a9b      	ldrh	r3, [r3, r2]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d19d      	bne.n	8003e2e <HAL_SPI_TransmitReceive+0x18e>
 8003ef2:	e085      	b.n	8004000 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_SPI_TransmitReceive+0x268>
 8003efc:	2312      	movs	r3, #18
 8003efe:	18fb      	adds	r3, r7, r3
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d000      	beq.n	8003f08 <HAL_SPI_TransmitReceive+0x268>
 8003f06:	e070      	b.n	8003fea <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	7812      	ldrb	r2, [r2, #0]
 8003f14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f2e:	e05c      	b.n	8003fea <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2202      	movs	r2, #2
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d11c      	bne.n	8003f78 <HAL_SPI_TransmitReceive+0x2d8>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d017      	beq.n	8003f78 <HAL_SPI_TransmitReceive+0x2d8>
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d114      	bne.n	8003f78 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	330c      	adds	r3, #12
 8003f58:	7812      	ldrb	r2, [r2, #0]
 8003f5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d11e      	bne.n	8003fc4 <HAL_SPI_TransmitReceive+0x324>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2246      	movs	r2, #70	; 0x46
 8003f8a:	5a9b      	ldrh	r3, [r3, r2]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d018      	beq.n	8003fc4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	330c      	adds	r3, #12
 8003f98:	001a      	movs	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	7812      	ldrb	r2, [r2, #0]
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2246      	movs	r2, #70	; 0x46
 8003fb2:	5a9b      	ldrh	r3, [r3, r2]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b299      	uxth	r1, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2246      	movs	r2, #70	; 0x46
 8003fbe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fc4:	f7fd ff94 	bl	8001ef0 <HAL_GetTick>
 8003fc8:	0002      	movs	r2, r0
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d802      	bhi.n	8003fda <HAL_SPI_TransmitReceive+0x33a>
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	d102      	bne.n	8003fe0 <HAL_SPI_TransmitReceive+0x340>
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d104      	bne.n	8003fea <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003fe0:	2323      	movs	r3, #35	; 0x23
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	701a      	strb	r2, [r3, #0]
        goto error;
 8003fe8:	e01b      	b.n	8004022 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d19d      	bne.n	8003f30 <HAL_SPI_TransmitReceive+0x290>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2246      	movs	r2, #70	; 0x46
 8003ff8:	5a9b      	ldrh	r3, [r3, r2]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d197      	bne.n	8003f30 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	0018      	movs	r0, r3
 8004008:	f000 f958 	bl	80042bc <SPI_EndRxTxTransaction>
 800400c:	1e03      	subs	r3, r0, #0
 800400e:	d007      	beq.n	8004020 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8004010:	2323      	movs	r3, #35	; 0x23
 8004012:	18fb      	adds	r3, r7, r3
 8004014:	2201      	movs	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	661a      	str	r2, [r3, #96]	; 0x60
 800401e:	e000      	b.n	8004022 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8004020:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	225d      	movs	r2, #93	; 0x5d
 8004026:	2101      	movs	r1, #1
 8004028:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	225c      	movs	r2, #92	; 0x5c
 800402e:	2100      	movs	r1, #0
 8004030:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004032:	2323      	movs	r3, #35	; 0x23
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	781b      	ldrb	r3, [r3, #0]
}
 8004038:	0018      	movs	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	b00a      	add	sp, #40	; 0x28
 800403e:	bd80      	pop	{r7, pc}
 8004040:	ffffefff 	.word	0xffffefff

08004044 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	225d      	movs	r2, #93	; 0x5d
 8004050:	5c9b      	ldrb	r3, [r3, r2]
 8004052:	b2db      	uxtb	r3, r3
}
 8004054:	0018      	movs	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	b002      	add	sp, #8
 800405a:	bd80      	pop	{r7, pc}

0800405c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	1dfb      	adds	r3, r7, #7
 800406a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800406c:	f7fd ff40 	bl	8001ef0 <HAL_GetTick>
 8004070:	0002      	movs	r2, r0
 8004072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004074:	1a9b      	subs	r3, r3, r2
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	18d3      	adds	r3, r2, r3
 800407a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800407c:	f7fd ff38 	bl	8001ef0 <HAL_GetTick>
 8004080:	0003      	movs	r3, r0
 8004082:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004084:	4b3a      	ldr	r3, [pc, #232]	; (8004170 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	015b      	lsls	r3, r3, #5
 800408a:	0d1b      	lsrs	r3, r3, #20
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	4353      	muls	r3, r2
 8004090:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004092:	e058      	b.n	8004146 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	3301      	adds	r3, #1
 8004098:	d055      	beq.n	8004146 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800409a:	f7fd ff29 	bl	8001ef0 <HAL_GetTick>
 800409e:	0002      	movs	r2, r0
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d902      	bls.n	80040b0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d142      	bne.n	8004136 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	21e0      	movs	r1, #224	; 0xe0
 80040bc:	438a      	bics	r2, r1
 80040be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	2382      	movs	r3, #130	; 0x82
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d113      	bne.n	80040f4 <SPI_WaitFlagStateUntilTimeout+0x98>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	2380      	movs	r3, #128	; 0x80
 80040d2:	021b      	lsls	r3, r3, #8
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d005      	beq.n	80040e4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d107      	bne.n	80040f4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2140      	movs	r1, #64	; 0x40
 80040f0:	438a      	bics	r2, r1
 80040f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040f8:	2380      	movs	r3, #128	; 0x80
 80040fa:	019b      	lsls	r3, r3, #6
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d110      	bne.n	8004122 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	491a      	ldr	r1, [pc, #104]	; (8004174 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800410c:	400a      	ands	r2, r1
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2180      	movs	r1, #128	; 0x80
 800411c:	0189      	lsls	r1, r1, #6
 800411e:	430a      	orrs	r2, r1
 8004120:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	225d      	movs	r2, #93	; 0x5d
 8004126:	2101      	movs	r1, #1
 8004128:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	225c      	movs	r2, #92	; 0x5c
 800412e:	2100      	movs	r1, #0
 8004130:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e017      	b.n	8004166 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	3b01      	subs	r3, #1
 8004144:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	4013      	ands	r3, r2
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	425a      	negs	r2, r3
 8004156:	4153      	adcs	r3, r2
 8004158:	b2db      	uxtb	r3, r3
 800415a:	001a      	movs	r2, r3
 800415c:	1dfb      	adds	r3, r7, #7
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d197      	bne.n	8004094 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	0018      	movs	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	b008      	add	sp, #32
 800416c:	bd80      	pop	{r7, pc}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	20000044 	.word	0x20000044
 8004174:	ffffdfff 	.word	0xffffdfff

08004178 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08a      	sub	sp, #40	; 0x28
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004186:	2317      	movs	r3, #23
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800418e:	f7fd feaf 	bl	8001ef0 <HAL_GetTick>
 8004192:	0002      	movs	r2, r0
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	18d3      	adds	r3, r2, r3
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800419e:	f7fd fea7 	bl	8001ef0 <HAL_GetTick>
 80041a2:	0003      	movs	r3, r0
 80041a4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	330c      	adds	r3, #12
 80041ac:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80041ae:	4b41      	ldr	r3, [pc, #260]	; (80042b4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	0013      	movs	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	189b      	adds	r3, r3, r2
 80041b8:	00da      	lsls	r2, r3, #3
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	0d1b      	lsrs	r3, r3, #20
 80041be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c0:	4353      	muls	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80041c4:	e068      	b.n	8004298 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	23c0      	movs	r3, #192	; 0xc0
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d10a      	bne.n	80041e6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d107      	bne.n	80041e6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	2117      	movs	r1, #23
 80041de:	187b      	adds	r3, r7, r1
 80041e0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80041e2:	187b      	adds	r3, r7, r1
 80041e4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	3301      	adds	r3, #1
 80041ea:	d055      	beq.n	8004298 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041ec:	f7fd fe80 	bl	8001ef0 <HAL_GetTick>
 80041f0:	0002      	movs	r2, r0
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d902      	bls.n	8004202 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d142      	bne.n	8004288 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	21e0      	movs	r1, #224	; 0xe0
 800420e:	438a      	bics	r2, r1
 8004210:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	2382      	movs	r3, #130	; 0x82
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	429a      	cmp	r2, r3
 800421c:	d113      	bne.n	8004246 <SPI_WaitFifoStateUntilTimeout+0xce>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	021b      	lsls	r3, r3, #8
 8004226:	429a      	cmp	r2, r3
 8004228:	d005      	beq.n	8004236 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	2380      	movs	r3, #128	; 0x80
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	429a      	cmp	r2, r3
 8004234:	d107      	bne.n	8004246 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2140      	movs	r1, #64	; 0x40
 8004242:	438a      	bics	r2, r1
 8004244:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800424a:	2380      	movs	r3, #128	; 0x80
 800424c:	019b      	lsls	r3, r3, #6
 800424e:	429a      	cmp	r2, r3
 8004250:	d110      	bne.n	8004274 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4916      	ldr	r1, [pc, #88]	; (80042b8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800425e:	400a      	ands	r2, r1
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2180      	movs	r1, #128	; 0x80
 800426e:	0189      	lsls	r1, r1, #6
 8004270:	430a      	orrs	r2, r1
 8004272:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	225d      	movs	r2, #93	; 0x5d
 8004278:	2101      	movs	r1, #1
 800427a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	225c      	movs	r2, #92	; 0x5c
 8004280:	2100      	movs	r1, #0
 8004282:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e010      	b.n	80042aa <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	3b01      	subs	r3, #1
 8004296:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	4013      	ands	r3, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d18e      	bne.n	80041c6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	0018      	movs	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b00a      	add	sp, #40	; 0x28
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	20000044 	.word	0x20000044
 80042b8:	ffffdfff 	.word	0xffffdfff

080042bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	23c0      	movs	r3, #192	; 0xc0
 80042cc:	0159      	lsls	r1, r3, #5
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	0013      	movs	r3, r2
 80042d6:	2200      	movs	r2, #0
 80042d8:	f7ff ff4e 	bl	8004178 <SPI_WaitFifoStateUntilTimeout>
 80042dc:	1e03      	subs	r3, r0, #0
 80042de:	d007      	beq.n	80042f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e4:	2220      	movs	r2, #32
 80042e6:	431a      	orrs	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e027      	b.n	8004340 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	0013      	movs	r3, r2
 80042fa:	2200      	movs	r2, #0
 80042fc:	2180      	movs	r1, #128	; 0x80
 80042fe:	f7ff fead 	bl	800405c <SPI_WaitFlagStateUntilTimeout>
 8004302:	1e03      	subs	r3, r0, #0
 8004304:	d007      	beq.n	8004316 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430a:	2220      	movs	r2, #32
 800430c:	431a      	orrs	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e014      	b.n	8004340 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	23c0      	movs	r3, #192	; 0xc0
 800431a:	00d9      	lsls	r1, r3, #3
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	0013      	movs	r3, r2
 8004324:	2200      	movs	r2, #0
 8004326:	f7ff ff27 	bl	8004178 <SPI_WaitFifoStateUntilTimeout>
 800432a:	1e03      	subs	r3, r0, #0
 800432c:	d007      	beq.n	800433e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004332:	2220      	movs	r2, #32
 8004334:	431a      	orrs	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e000      	b.n	8004340 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	0018      	movs	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	b004      	add	sp, #16
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e046      	b.n	80043e8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2288      	movs	r2, #136	; 0x88
 800435e:	589b      	ldr	r3, [r3, r2]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d107      	bne.n	8004374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2284      	movs	r2, #132	; 0x84
 8004368:	2100      	movs	r1, #0
 800436a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	0018      	movs	r0, r3
 8004370:	f7fd fc8c 	bl	8001c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2288      	movs	r2, #136	; 0x88
 8004378:	2124      	movs	r1, #36	; 0x24
 800437a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2101      	movs	r1, #1
 8004388:	438a      	bics	r2, r1
 800438a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	0018      	movs	r0, r3
 8004390:	f000 f8cc 	bl	800452c <UART_SetConfig>
 8004394:	0003      	movs	r3, r0
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e024      	b.n	80043e8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	0018      	movs	r0, r3
 80043aa:	f000 fc15 	bl	8004bd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	490d      	ldr	r1, [pc, #52]	; (80043f0 <HAL_UART_Init+0xa8>)
 80043ba:	400a      	ands	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	212a      	movs	r1, #42	; 0x2a
 80043ca:	438a      	bics	r2, r1
 80043cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2101      	movs	r1, #1
 80043da:	430a      	orrs	r2, r1
 80043dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	0018      	movs	r0, r3
 80043e2:	f000 fcad 	bl	8004d40 <UART_CheckIdleState>
 80043e6:	0003      	movs	r3, r0
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b002      	add	sp, #8
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	ffffb7ff 	.word	0xffffb7ff

080043f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08a      	sub	sp, #40	; 0x28
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	1dbb      	adds	r3, r7, #6
 8004402:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2288      	movs	r2, #136	; 0x88
 8004408:	589b      	ldr	r3, [r3, r2]
 800440a:	2b20      	cmp	r3, #32
 800440c:	d000      	beq.n	8004410 <HAL_UART_Transmit+0x1c>
 800440e:	e088      	b.n	8004522 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_UART_Transmit+0x2a>
 8004416:	1dbb      	adds	r3, r7, #6
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e080      	b.n	8004524 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	015b      	lsls	r3, r3, #5
 800442a:	429a      	cmp	r2, r3
 800442c:	d109      	bne.n	8004442 <HAL_UART_Transmit+0x4e>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d105      	bne.n	8004442 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2201      	movs	r2, #1
 800443a:	4013      	ands	r3, r2
 800443c:	d001      	beq.n	8004442 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e070      	b.n	8004524 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2290      	movs	r2, #144	; 0x90
 8004446:	2100      	movs	r1, #0
 8004448:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2288      	movs	r2, #136	; 0x88
 800444e:	2121      	movs	r1, #33	; 0x21
 8004450:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004452:	f7fd fd4d 	bl	8001ef0 <HAL_GetTick>
 8004456:	0003      	movs	r3, r0
 8004458:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1dba      	adds	r2, r7, #6
 800445e:	2154      	movs	r1, #84	; 0x54
 8004460:	8812      	ldrh	r2, [r2, #0]
 8004462:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	1dba      	adds	r2, r7, #6
 8004468:	2156      	movs	r1, #86	; 0x56
 800446a:	8812      	ldrh	r2, [r2, #0]
 800446c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	015b      	lsls	r3, r3, #5
 8004476:	429a      	cmp	r2, r3
 8004478:	d108      	bne.n	800448c <HAL_UART_Transmit+0x98>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d104      	bne.n	800448c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	61bb      	str	r3, [r7, #24]
 800448a:	e003      	b.n	8004494 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004490:	2300      	movs	r3, #0
 8004492:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004494:	e02c      	b.n	80044f0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	0013      	movs	r3, r2
 80044a0:	2200      	movs	r2, #0
 80044a2:	2180      	movs	r1, #128	; 0x80
 80044a4:	f000 fc9a 	bl	8004ddc <UART_WaitOnFlagUntilTimeout>
 80044a8:	1e03      	subs	r3, r0, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e039      	b.n	8004524 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10b      	bne.n	80044ce <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	001a      	movs	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	05d2      	lsls	r2, r2, #23
 80044c2:	0dd2      	lsrs	r2, r2, #23
 80044c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	3302      	adds	r3, #2
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	e007      	b.n	80044de <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	781a      	ldrb	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	3301      	adds	r3, #1
 80044dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2256      	movs	r2, #86	; 0x56
 80044e2:	5a9b      	ldrh	r3, [r3, r2]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b299      	uxth	r1, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2256      	movs	r2, #86	; 0x56
 80044ee:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2256      	movs	r2, #86	; 0x56
 80044f4:	5a9b      	ldrh	r3, [r3, r2]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1cc      	bne.n	8004496 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	0013      	movs	r3, r2
 8004506:	2200      	movs	r2, #0
 8004508:	2140      	movs	r1, #64	; 0x40
 800450a:	f000 fc67 	bl	8004ddc <UART_WaitOnFlagUntilTimeout>
 800450e:	1e03      	subs	r3, r0, #0
 8004510:	d001      	beq.n	8004516 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e006      	b.n	8004524 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2288      	movs	r2, #136	; 0x88
 800451a:	2120      	movs	r1, #32
 800451c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e000      	b.n	8004524 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004522:	2302      	movs	r3, #2
  }
}
 8004524:	0018      	movs	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	b008      	add	sp, #32
 800452a:	bd80      	pop	{r7, pc}

0800452c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800452c:	b5b0      	push	{r4, r5, r7, lr}
 800452e:	b090      	sub	sp, #64	; 0x40
 8004530:	af00      	add	r7, sp, #0
 8004532:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004534:	231a      	movs	r3, #26
 8004536:	2220      	movs	r2, #32
 8004538:	189b      	adds	r3, r3, r2
 800453a:	19db      	adds	r3, r3, r7
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	431a      	orrs	r2, r3
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	431a      	orrs	r2, r3
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	4313      	orrs	r3, r2
 8004556:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4ac1      	ldr	r2, [pc, #772]	; (8004864 <UART_SetConfig+0x338>)
 8004560:	4013      	ands	r3, r2
 8004562:	0019      	movs	r1, r3
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456a:	430b      	orrs	r3, r1
 800456c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	4abc      	ldr	r2, [pc, #752]	; (8004868 <UART_SetConfig+0x33c>)
 8004576:	4013      	ands	r3, r2
 8004578:	0018      	movs	r0, r3
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	68d9      	ldr	r1, [r3, #12]
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	0003      	movs	r3, r0
 8004584:	430b      	orrs	r3, r1
 8004586:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4ab6      	ldr	r2, [pc, #728]	; (800486c <UART_SetConfig+0x340>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d009      	beq.n	80045ac <UART_SetConfig+0x80>
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4ab4      	ldr	r2, [pc, #720]	; (8004870 <UART_SetConfig+0x344>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d004      	beq.n	80045ac <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045a8:	4313      	orrs	r3, r2
 80045aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	4ab0      	ldr	r2, [pc, #704]	; (8004874 <UART_SetConfig+0x348>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	0019      	movs	r1, r3
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045be:	430b      	orrs	r3, r1
 80045c0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	220f      	movs	r2, #15
 80045ca:	4393      	bics	r3, r2
 80045cc:	0018      	movs	r0, r3
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	0003      	movs	r3, r0
 80045d8:	430b      	orrs	r3, r1
 80045da:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4aa5      	ldr	r2, [pc, #660]	; (8004878 <UART_SetConfig+0x34c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d131      	bne.n	800464a <UART_SetConfig+0x11e>
 80045e6:	4ba5      	ldr	r3, [pc, #660]	; (800487c <UART_SetConfig+0x350>)
 80045e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ea:	2203      	movs	r2, #3
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d01d      	beq.n	800462e <UART_SetConfig+0x102>
 80045f2:	d823      	bhi.n	800463c <UART_SetConfig+0x110>
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d00c      	beq.n	8004612 <UART_SetConfig+0xe6>
 80045f8:	d820      	bhi.n	800463c <UART_SetConfig+0x110>
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <UART_SetConfig+0xd8>
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d00e      	beq.n	8004620 <UART_SetConfig+0xf4>
 8004602:	e01b      	b.n	800463c <UART_SetConfig+0x110>
 8004604:	231b      	movs	r3, #27
 8004606:	2220      	movs	r2, #32
 8004608:	189b      	adds	r3, r3, r2
 800460a:	19db      	adds	r3, r3, r7
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	e154      	b.n	80048bc <UART_SetConfig+0x390>
 8004612:	231b      	movs	r3, #27
 8004614:	2220      	movs	r2, #32
 8004616:	189b      	adds	r3, r3, r2
 8004618:	19db      	adds	r3, r3, r7
 800461a:	2202      	movs	r2, #2
 800461c:	701a      	strb	r2, [r3, #0]
 800461e:	e14d      	b.n	80048bc <UART_SetConfig+0x390>
 8004620:	231b      	movs	r3, #27
 8004622:	2220      	movs	r2, #32
 8004624:	189b      	adds	r3, r3, r2
 8004626:	19db      	adds	r3, r3, r7
 8004628:	2204      	movs	r2, #4
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	e146      	b.n	80048bc <UART_SetConfig+0x390>
 800462e:	231b      	movs	r3, #27
 8004630:	2220      	movs	r2, #32
 8004632:	189b      	adds	r3, r3, r2
 8004634:	19db      	adds	r3, r3, r7
 8004636:	2208      	movs	r2, #8
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	e13f      	b.n	80048bc <UART_SetConfig+0x390>
 800463c:	231b      	movs	r3, #27
 800463e:	2220      	movs	r2, #32
 8004640:	189b      	adds	r3, r3, r2
 8004642:	19db      	adds	r3, r3, r7
 8004644:	2210      	movs	r2, #16
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	e138      	b.n	80048bc <UART_SetConfig+0x390>
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a8c      	ldr	r2, [pc, #560]	; (8004880 <UART_SetConfig+0x354>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d131      	bne.n	80046b8 <UART_SetConfig+0x18c>
 8004654:	4b89      	ldr	r3, [pc, #548]	; (800487c <UART_SetConfig+0x350>)
 8004656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004658:	220c      	movs	r2, #12
 800465a:	4013      	ands	r3, r2
 800465c:	2b0c      	cmp	r3, #12
 800465e:	d01d      	beq.n	800469c <UART_SetConfig+0x170>
 8004660:	d823      	bhi.n	80046aa <UART_SetConfig+0x17e>
 8004662:	2b08      	cmp	r3, #8
 8004664:	d00c      	beq.n	8004680 <UART_SetConfig+0x154>
 8004666:	d820      	bhi.n	80046aa <UART_SetConfig+0x17e>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <UART_SetConfig+0x146>
 800466c:	2b04      	cmp	r3, #4
 800466e:	d00e      	beq.n	800468e <UART_SetConfig+0x162>
 8004670:	e01b      	b.n	80046aa <UART_SetConfig+0x17e>
 8004672:	231b      	movs	r3, #27
 8004674:	2220      	movs	r2, #32
 8004676:	189b      	adds	r3, r3, r2
 8004678:	19db      	adds	r3, r3, r7
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	e11d      	b.n	80048bc <UART_SetConfig+0x390>
 8004680:	231b      	movs	r3, #27
 8004682:	2220      	movs	r2, #32
 8004684:	189b      	adds	r3, r3, r2
 8004686:	19db      	adds	r3, r3, r7
 8004688:	2202      	movs	r2, #2
 800468a:	701a      	strb	r2, [r3, #0]
 800468c:	e116      	b.n	80048bc <UART_SetConfig+0x390>
 800468e:	231b      	movs	r3, #27
 8004690:	2220      	movs	r2, #32
 8004692:	189b      	adds	r3, r3, r2
 8004694:	19db      	adds	r3, r3, r7
 8004696:	2204      	movs	r2, #4
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	e10f      	b.n	80048bc <UART_SetConfig+0x390>
 800469c:	231b      	movs	r3, #27
 800469e:	2220      	movs	r2, #32
 80046a0:	189b      	adds	r3, r3, r2
 80046a2:	19db      	adds	r3, r3, r7
 80046a4:	2208      	movs	r2, #8
 80046a6:	701a      	strb	r2, [r3, #0]
 80046a8:	e108      	b.n	80048bc <UART_SetConfig+0x390>
 80046aa:	231b      	movs	r3, #27
 80046ac:	2220      	movs	r2, #32
 80046ae:	189b      	adds	r3, r3, r2
 80046b0:	19db      	adds	r3, r3, r7
 80046b2:	2210      	movs	r2, #16
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	e101      	b.n	80048bc <UART_SetConfig+0x390>
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a71      	ldr	r2, [pc, #452]	; (8004884 <UART_SetConfig+0x358>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d131      	bne.n	8004726 <UART_SetConfig+0x1fa>
 80046c2:	4b6e      	ldr	r3, [pc, #440]	; (800487c <UART_SetConfig+0x350>)
 80046c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c6:	2230      	movs	r2, #48	; 0x30
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b30      	cmp	r3, #48	; 0x30
 80046cc:	d01d      	beq.n	800470a <UART_SetConfig+0x1de>
 80046ce:	d823      	bhi.n	8004718 <UART_SetConfig+0x1ec>
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d00c      	beq.n	80046ee <UART_SetConfig+0x1c2>
 80046d4:	d820      	bhi.n	8004718 <UART_SetConfig+0x1ec>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <UART_SetConfig+0x1b4>
 80046da:	2b10      	cmp	r3, #16
 80046dc:	d00e      	beq.n	80046fc <UART_SetConfig+0x1d0>
 80046de:	e01b      	b.n	8004718 <UART_SetConfig+0x1ec>
 80046e0:	231b      	movs	r3, #27
 80046e2:	2220      	movs	r2, #32
 80046e4:	189b      	adds	r3, r3, r2
 80046e6:	19db      	adds	r3, r3, r7
 80046e8:	2200      	movs	r2, #0
 80046ea:	701a      	strb	r2, [r3, #0]
 80046ec:	e0e6      	b.n	80048bc <UART_SetConfig+0x390>
 80046ee:	231b      	movs	r3, #27
 80046f0:	2220      	movs	r2, #32
 80046f2:	189b      	adds	r3, r3, r2
 80046f4:	19db      	adds	r3, r3, r7
 80046f6:	2202      	movs	r2, #2
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	e0df      	b.n	80048bc <UART_SetConfig+0x390>
 80046fc:	231b      	movs	r3, #27
 80046fe:	2220      	movs	r2, #32
 8004700:	189b      	adds	r3, r3, r2
 8004702:	19db      	adds	r3, r3, r7
 8004704:	2204      	movs	r2, #4
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	e0d8      	b.n	80048bc <UART_SetConfig+0x390>
 800470a:	231b      	movs	r3, #27
 800470c:	2220      	movs	r2, #32
 800470e:	189b      	adds	r3, r3, r2
 8004710:	19db      	adds	r3, r3, r7
 8004712:	2208      	movs	r2, #8
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	e0d1      	b.n	80048bc <UART_SetConfig+0x390>
 8004718:	231b      	movs	r3, #27
 800471a:	2220      	movs	r2, #32
 800471c:	189b      	adds	r3, r3, r2
 800471e:	19db      	adds	r3, r3, r7
 8004720:	2210      	movs	r2, #16
 8004722:	701a      	strb	r2, [r3, #0]
 8004724:	e0ca      	b.n	80048bc <UART_SetConfig+0x390>
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a57      	ldr	r2, [pc, #348]	; (8004888 <UART_SetConfig+0x35c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d106      	bne.n	800473e <UART_SetConfig+0x212>
 8004730:	231b      	movs	r3, #27
 8004732:	2220      	movs	r2, #32
 8004734:	189b      	adds	r3, r3, r2
 8004736:	19db      	adds	r3, r3, r7
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]
 800473c:	e0be      	b.n	80048bc <UART_SetConfig+0x390>
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a52      	ldr	r2, [pc, #328]	; (800488c <UART_SetConfig+0x360>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d106      	bne.n	8004756 <UART_SetConfig+0x22a>
 8004748:	231b      	movs	r3, #27
 800474a:	2220      	movs	r2, #32
 800474c:	189b      	adds	r3, r3, r2
 800474e:	19db      	adds	r3, r3, r7
 8004750:	2200      	movs	r2, #0
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	e0b2      	b.n	80048bc <UART_SetConfig+0x390>
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a4d      	ldr	r2, [pc, #308]	; (8004890 <UART_SetConfig+0x364>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d106      	bne.n	800476e <UART_SetConfig+0x242>
 8004760:	231b      	movs	r3, #27
 8004762:	2220      	movs	r2, #32
 8004764:	189b      	adds	r3, r3, r2
 8004766:	19db      	adds	r3, r3, r7
 8004768:	2200      	movs	r2, #0
 800476a:	701a      	strb	r2, [r3, #0]
 800476c:	e0a6      	b.n	80048bc <UART_SetConfig+0x390>
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a3e      	ldr	r2, [pc, #248]	; (800486c <UART_SetConfig+0x340>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d13e      	bne.n	80047f6 <UART_SetConfig+0x2ca>
 8004778:	4b40      	ldr	r3, [pc, #256]	; (800487c <UART_SetConfig+0x350>)
 800477a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800477c:	23c0      	movs	r3, #192	; 0xc0
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	4013      	ands	r3, r2
 8004782:	22c0      	movs	r2, #192	; 0xc0
 8004784:	0112      	lsls	r2, r2, #4
 8004786:	4293      	cmp	r3, r2
 8004788:	d027      	beq.n	80047da <UART_SetConfig+0x2ae>
 800478a:	22c0      	movs	r2, #192	; 0xc0
 800478c:	0112      	lsls	r2, r2, #4
 800478e:	4293      	cmp	r3, r2
 8004790:	d82a      	bhi.n	80047e8 <UART_SetConfig+0x2bc>
 8004792:	2280      	movs	r2, #128	; 0x80
 8004794:	0112      	lsls	r2, r2, #4
 8004796:	4293      	cmp	r3, r2
 8004798:	d011      	beq.n	80047be <UART_SetConfig+0x292>
 800479a:	2280      	movs	r2, #128	; 0x80
 800479c:	0112      	lsls	r2, r2, #4
 800479e:	4293      	cmp	r3, r2
 80047a0:	d822      	bhi.n	80047e8 <UART_SetConfig+0x2bc>
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d004      	beq.n	80047b0 <UART_SetConfig+0x284>
 80047a6:	2280      	movs	r2, #128	; 0x80
 80047a8:	00d2      	lsls	r2, r2, #3
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00e      	beq.n	80047cc <UART_SetConfig+0x2a0>
 80047ae:	e01b      	b.n	80047e8 <UART_SetConfig+0x2bc>
 80047b0:	231b      	movs	r3, #27
 80047b2:	2220      	movs	r2, #32
 80047b4:	189b      	adds	r3, r3, r2
 80047b6:	19db      	adds	r3, r3, r7
 80047b8:	2200      	movs	r2, #0
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	e07e      	b.n	80048bc <UART_SetConfig+0x390>
 80047be:	231b      	movs	r3, #27
 80047c0:	2220      	movs	r2, #32
 80047c2:	189b      	adds	r3, r3, r2
 80047c4:	19db      	adds	r3, r3, r7
 80047c6:	2202      	movs	r2, #2
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	e077      	b.n	80048bc <UART_SetConfig+0x390>
 80047cc:	231b      	movs	r3, #27
 80047ce:	2220      	movs	r2, #32
 80047d0:	189b      	adds	r3, r3, r2
 80047d2:	19db      	adds	r3, r3, r7
 80047d4:	2204      	movs	r2, #4
 80047d6:	701a      	strb	r2, [r3, #0]
 80047d8:	e070      	b.n	80048bc <UART_SetConfig+0x390>
 80047da:	231b      	movs	r3, #27
 80047dc:	2220      	movs	r2, #32
 80047de:	189b      	adds	r3, r3, r2
 80047e0:	19db      	adds	r3, r3, r7
 80047e2:	2208      	movs	r2, #8
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	e069      	b.n	80048bc <UART_SetConfig+0x390>
 80047e8:	231b      	movs	r3, #27
 80047ea:	2220      	movs	r2, #32
 80047ec:	189b      	adds	r3, r3, r2
 80047ee:	19db      	adds	r3, r3, r7
 80047f0:	2210      	movs	r2, #16
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	e062      	b.n	80048bc <UART_SetConfig+0x390>
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a1d      	ldr	r2, [pc, #116]	; (8004870 <UART_SetConfig+0x344>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d157      	bne.n	80048b0 <UART_SetConfig+0x384>
 8004800:	4b1e      	ldr	r3, [pc, #120]	; (800487c <UART_SetConfig+0x350>)
 8004802:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004804:	23c0      	movs	r3, #192	; 0xc0
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4013      	ands	r3, r2
 800480a:	22c0      	movs	r2, #192	; 0xc0
 800480c:	0092      	lsls	r2, r2, #2
 800480e:	4293      	cmp	r3, r2
 8004810:	d040      	beq.n	8004894 <UART_SetConfig+0x368>
 8004812:	22c0      	movs	r2, #192	; 0xc0
 8004814:	0092      	lsls	r2, r2, #2
 8004816:	4293      	cmp	r3, r2
 8004818:	d843      	bhi.n	80048a2 <UART_SetConfig+0x376>
 800481a:	2280      	movs	r2, #128	; 0x80
 800481c:	0092      	lsls	r2, r2, #2
 800481e:	4293      	cmp	r3, r2
 8004820:	d011      	beq.n	8004846 <UART_SetConfig+0x31a>
 8004822:	2280      	movs	r2, #128	; 0x80
 8004824:	0092      	lsls	r2, r2, #2
 8004826:	4293      	cmp	r3, r2
 8004828:	d83b      	bhi.n	80048a2 <UART_SetConfig+0x376>
 800482a:	2b00      	cmp	r3, #0
 800482c:	d004      	beq.n	8004838 <UART_SetConfig+0x30c>
 800482e:	2280      	movs	r2, #128	; 0x80
 8004830:	0052      	lsls	r2, r2, #1
 8004832:	4293      	cmp	r3, r2
 8004834:	d00e      	beq.n	8004854 <UART_SetConfig+0x328>
 8004836:	e034      	b.n	80048a2 <UART_SetConfig+0x376>
 8004838:	231b      	movs	r3, #27
 800483a:	2220      	movs	r2, #32
 800483c:	189b      	adds	r3, r3, r2
 800483e:	19db      	adds	r3, r3, r7
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
 8004844:	e03a      	b.n	80048bc <UART_SetConfig+0x390>
 8004846:	231b      	movs	r3, #27
 8004848:	2220      	movs	r2, #32
 800484a:	189b      	adds	r3, r3, r2
 800484c:	19db      	adds	r3, r3, r7
 800484e:	2202      	movs	r2, #2
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	e033      	b.n	80048bc <UART_SetConfig+0x390>
 8004854:	231b      	movs	r3, #27
 8004856:	2220      	movs	r2, #32
 8004858:	189b      	adds	r3, r3, r2
 800485a:	19db      	adds	r3, r3, r7
 800485c:	2204      	movs	r2, #4
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	e02c      	b.n	80048bc <UART_SetConfig+0x390>
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	cfff69f3 	.word	0xcfff69f3
 8004868:	ffffcfff 	.word	0xffffcfff
 800486c:	40008000 	.word	0x40008000
 8004870:	40008400 	.word	0x40008400
 8004874:	11fff4ff 	.word	0x11fff4ff
 8004878:	40013800 	.word	0x40013800
 800487c:	40021000 	.word	0x40021000
 8004880:	40004400 	.word	0x40004400
 8004884:	40004800 	.word	0x40004800
 8004888:	40004c00 	.word	0x40004c00
 800488c:	40005000 	.word	0x40005000
 8004890:	40013c00 	.word	0x40013c00
 8004894:	231b      	movs	r3, #27
 8004896:	2220      	movs	r2, #32
 8004898:	189b      	adds	r3, r3, r2
 800489a:	19db      	adds	r3, r3, r7
 800489c:	2208      	movs	r2, #8
 800489e:	701a      	strb	r2, [r3, #0]
 80048a0:	e00c      	b.n	80048bc <UART_SetConfig+0x390>
 80048a2:	231b      	movs	r3, #27
 80048a4:	2220      	movs	r2, #32
 80048a6:	189b      	adds	r3, r3, r2
 80048a8:	19db      	adds	r3, r3, r7
 80048aa:	2210      	movs	r2, #16
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	e005      	b.n	80048bc <UART_SetConfig+0x390>
 80048b0:	231b      	movs	r3, #27
 80048b2:	2220      	movs	r2, #32
 80048b4:	189b      	adds	r3, r3, r2
 80048b6:	19db      	adds	r3, r3, r7
 80048b8:	2210      	movs	r2, #16
 80048ba:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4ac1      	ldr	r2, [pc, #772]	; (8004bc8 <UART_SetConfig+0x69c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d005      	beq.n	80048d2 <UART_SetConfig+0x3a6>
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4ac0      	ldr	r2, [pc, #768]	; (8004bcc <UART_SetConfig+0x6a0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d000      	beq.n	80048d2 <UART_SetConfig+0x3a6>
 80048d0:	e093      	b.n	80049fa <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048d2:	231b      	movs	r3, #27
 80048d4:	2220      	movs	r2, #32
 80048d6:	189b      	adds	r3, r3, r2
 80048d8:	19db      	adds	r3, r3, r7
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d015      	beq.n	800490c <UART_SetConfig+0x3e0>
 80048e0:	dc18      	bgt.n	8004914 <UART_SetConfig+0x3e8>
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d00d      	beq.n	8004902 <UART_SetConfig+0x3d6>
 80048e6:	dc15      	bgt.n	8004914 <UART_SetConfig+0x3e8>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <UART_SetConfig+0x3c6>
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d005      	beq.n	80048fc <UART_SetConfig+0x3d0>
 80048f0:	e010      	b.n	8004914 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f2:	f7fe fec3 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 80048f6:	0003      	movs	r3, r0
 80048f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048fa:	e014      	b.n	8004926 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048fc:	4bb4      	ldr	r3, [pc, #720]	; (8004bd0 <UART_SetConfig+0x6a4>)
 80048fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004900:	e011      	b.n	8004926 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004902:	f7fe fe2f 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 8004906:	0003      	movs	r3, r0
 8004908:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800490a:	e00c      	b.n	8004926 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490c:	2380      	movs	r3, #128	; 0x80
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004912:	e008      	b.n	8004926 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004918:	231a      	movs	r3, #26
 800491a:	2220      	movs	r2, #32
 800491c:	189b      	adds	r3, r3, r2
 800491e:	19db      	adds	r3, r3, r7
 8004920:	2201      	movs	r2, #1
 8004922:	701a      	strb	r2, [r3, #0]
        break;
 8004924:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004928:	2b00      	cmp	r3, #0
 800492a:	d100      	bne.n	800492e <UART_SetConfig+0x402>
 800492c:	e135      	b.n	8004b9a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004932:	4ba8      	ldr	r3, [pc, #672]	; (8004bd4 <UART_SetConfig+0x6a8>)
 8004934:	0052      	lsls	r2, r2, #1
 8004936:	5ad3      	ldrh	r3, [r2, r3]
 8004938:	0019      	movs	r1, r3
 800493a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800493c:	f7fb fbf6 	bl	800012c <__udivsi3>
 8004940:	0003      	movs	r3, r0
 8004942:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	0013      	movs	r3, r2
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	189b      	adds	r3, r3, r2
 800494e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004950:	429a      	cmp	r2, r3
 8004952:	d305      	bcc.n	8004960 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800495a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800495c:	429a      	cmp	r2, r3
 800495e:	d906      	bls.n	800496e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8004960:	231a      	movs	r3, #26
 8004962:	2220      	movs	r2, #32
 8004964:	189b      	adds	r3, r3, r2
 8004966:	19db      	adds	r3, r3, r7
 8004968:	2201      	movs	r2, #1
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	e044      	b.n	80049f8 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800496e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800497a:	4b96      	ldr	r3, [pc, #600]	; (8004bd4 <UART_SetConfig+0x6a8>)
 800497c:	0052      	lsls	r2, r2, #1
 800497e:	5ad3      	ldrh	r3, [r2, r3]
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	69b8      	ldr	r0, [r7, #24]
 800498c:	69f9      	ldr	r1, [r7, #28]
 800498e:	f7fb fd43 	bl	8000418 <__aeabi_uldivmod>
 8004992:	0002      	movs	r2, r0
 8004994:	000b      	movs	r3, r1
 8004996:	0e11      	lsrs	r1, r2, #24
 8004998:	021d      	lsls	r5, r3, #8
 800499a:	430d      	orrs	r5, r1
 800499c:	0214      	lsls	r4, r2, #8
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	085b      	lsrs	r3, r3, #1
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	68b8      	ldr	r0, [r7, #8]
 80049ac:	68f9      	ldr	r1, [r7, #12]
 80049ae:	1900      	adds	r0, r0, r4
 80049b0:	4169      	adcs	r1, r5
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	2300      	movs	r3, #0
 80049ba:	607b      	str	r3, [r7, #4]
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f7fb fd2a 	bl	8000418 <__aeabi_uldivmod>
 80049c4:	0002      	movs	r2, r0
 80049c6:	000b      	movs	r3, r1
 80049c8:	0013      	movs	r3, r2
 80049ca:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ce:	23c0      	movs	r3, #192	; 0xc0
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d309      	bcc.n	80049ea <UART_SetConfig+0x4be>
 80049d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049d8:	2380      	movs	r3, #128	; 0x80
 80049da:	035b      	lsls	r3, r3, #13
 80049dc:	429a      	cmp	r2, r3
 80049de:	d204      	bcs.n	80049ea <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049e6:	60da      	str	r2, [r3, #12]
 80049e8:	e006      	b.n	80049f8 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80049ea:	231a      	movs	r3, #26
 80049ec:	2220      	movs	r2, #32
 80049ee:	189b      	adds	r3, r3, r2
 80049f0:	19db      	adds	r3, r3, r7
 80049f2:	2201      	movs	r2, #1
 80049f4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80049f6:	e0d0      	b.n	8004b9a <UART_SetConfig+0x66e>
 80049f8:	e0cf      	b.n	8004b9a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	69da      	ldr	r2, [r3, #28]
 80049fe:	2380      	movs	r3, #128	; 0x80
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d000      	beq.n	8004a08 <UART_SetConfig+0x4dc>
 8004a06:	e070      	b.n	8004aea <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8004a08:	231b      	movs	r3, #27
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	189b      	adds	r3, r3, r2
 8004a0e:	19db      	adds	r3, r3, r7
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d015      	beq.n	8004a42 <UART_SetConfig+0x516>
 8004a16:	dc18      	bgt.n	8004a4a <UART_SetConfig+0x51e>
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d00d      	beq.n	8004a38 <UART_SetConfig+0x50c>
 8004a1c:	dc15      	bgt.n	8004a4a <UART_SetConfig+0x51e>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <UART_SetConfig+0x4fc>
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d005      	beq.n	8004a32 <UART_SetConfig+0x506>
 8004a26:	e010      	b.n	8004a4a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a28:	f7fe fe28 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 8004a2c:	0003      	movs	r3, r0
 8004a2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a30:	e014      	b.n	8004a5c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a32:	4b67      	ldr	r3, [pc, #412]	; (8004bd0 <UART_SetConfig+0x6a4>)
 8004a34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a36:	e011      	b.n	8004a5c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a38:	f7fe fd94 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 8004a3c:	0003      	movs	r3, r0
 8004a3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a40:	e00c      	b.n	8004a5c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a42:	2380      	movs	r3, #128	; 0x80
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a48:	e008      	b.n	8004a5c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004a4e:	231a      	movs	r3, #26
 8004a50:	2220      	movs	r2, #32
 8004a52:	189b      	adds	r3, r3, r2
 8004a54:	19db      	adds	r3, r3, r7
 8004a56:	2201      	movs	r2, #1
 8004a58:	701a      	strb	r2, [r3, #0]
        break;
 8004a5a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d100      	bne.n	8004a64 <UART_SetConfig+0x538>
 8004a62:	e09a      	b.n	8004b9a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a68:	4b5a      	ldr	r3, [pc, #360]	; (8004bd4 <UART_SetConfig+0x6a8>)
 8004a6a:	0052      	lsls	r2, r2, #1
 8004a6c:	5ad3      	ldrh	r3, [r2, r3]
 8004a6e:	0019      	movs	r1, r3
 8004a70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a72:	f7fb fb5b 	bl	800012c <__udivsi3>
 8004a76:	0003      	movs	r3, r0
 8004a78:	005a      	lsls	r2, r3, #1
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	085b      	lsrs	r3, r3, #1
 8004a80:	18d2      	adds	r2, r2, r3
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	0019      	movs	r1, r3
 8004a88:	0010      	movs	r0, r2
 8004a8a:	f7fb fb4f 	bl	800012c <__udivsi3>
 8004a8e:	0003      	movs	r3, r0
 8004a90:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	2b0f      	cmp	r3, #15
 8004a96:	d921      	bls.n	8004adc <UART_SetConfig+0x5b0>
 8004a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a9a:	2380      	movs	r3, #128	; 0x80
 8004a9c:	025b      	lsls	r3, r3, #9
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d21c      	bcs.n	8004adc <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	200e      	movs	r0, #14
 8004aa8:	2420      	movs	r4, #32
 8004aaa:	1903      	adds	r3, r0, r4
 8004aac:	19db      	adds	r3, r3, r7
 8004aae:	210f      	movs	r1, #15
 8004ab0:	438a      	bics	r2, r1
 8004ab2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	2207      	movs	r2, #7
 8004abc:	4013      	ands	r3, r2
 8004abe:	b299      	uxth	r1, r3
 8004ac0:	1903      	adds	r3, r0, r4
 8004ac2:	19db      	adds	r3, r3, r7
 8004ac4:	1902      	adds	r2, r0, r4
 8004ac6:	19d2      	adds	r2, r2, r7
 8004ac8:	8812      	ldrh	r2, [r2, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	1902      	adds	r2, r0, r4
 8004ad4:	19d2      	adds	r2, r2, r7
 8004ad6:	8812      	ldrh	r2, [r2, #0]
 8004ad8:	60da      	str	r2, [r3, #12]
 8004ada:	e05e      	b.n	8004b9a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004adc:	231a      	movs	r3, #26
 8004ade:	2220      	movs	r2, #32
 8004ae0:	189b      	adds	r3, r3, r2
 8004ae2:	19db      	adds	r3, r3, r7
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	701a      	strb	r2, [r3, #0]
 8004ae8:	e057      	b.n	8004b9a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aea:	231b      	movs	r3, #27
 8004aec:	2220      	movs	r2, #32
 8004aee:	189b      	adds	r3, r3, r2
 8004af0:	19db      	adds	r3, r3, r7
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d015      	beq.n	8004b24 <UART_SetConfig+0x5f8>
 8004af8:	dc18      	bgt.n	8004b2c <UART_SetConfig+0x600>
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d00d      	beq.n	8004b1a <UART_SetConfig+0x5ee>
 8004afe:	dc15      	bgt.n	8004b2c <UART_SetConfig+0x600>
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <UART_SetConfig+0x5de>
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d005      	beq.n	8004b14 <UART_SetConfig+0x5e8>
 8004b08:	e010      	b.n	8004b2c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b0a:	f7fe fdb7 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b12:	e014      	b.n	8004b3e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b14:	4b2e      	ldr	r3, [pc, #184]	; (8004bd0 <UART_SetConfig+0x6a4>)
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b18:	e011      	b.n	8004b3e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b1a:	f7fe fd23 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 8004b1e:	0003      	movs	r3, r0
 8004b20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b22:	e00c      	b.n	8004b3e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b2a:	e008      	b.n	8004b3e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004b30:	231a      	movs	r3, #26
 8004b32:	2220      	movs	r2, #32
 8004b34:	189b      	adds	r3, r3, r2
 8004b36:	19db      	adds	r3, r3, r7
 8004b38:	2201      	movs	r2, #1
 8004b3a:	701a      	strb	r2, [r3, #0]
        break;
 8004b3c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d02a      	beq.n	8004b9a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b48:	4b22      	ldr	r3, [pc, #136]	; (8004bd4 <UART_SetConfig+0x6a8>)
 8004b4a:	0052      	lsls	r2, r2, #1
 8004b4c:	5ad3      	ldrh	r3, [r2, r3]
 8004b4e:	0019      	movs	r1, r3
 8004b50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004b52:	f7fb faeb 	bl	800012c <__udivsi3>
 8004b56:	0003      	movs	r3, r0
 8004b58:	001a      	movs	r2, r3
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	085b      	lsrs	r3, r3, #1
 8004b60:	18d2      	adds	r2, r2, r3
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	0019      	movs	r1, r3
 8004b68:	0010      	movs	r0, r2
 8004b6a:	f7fb fadf 	bl	800012c <__udivsi3>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	2b0f      	cmp	r3, #15
 8004b76:	d90a      	bls.n	8004b8e <UART_SetConfig+0x662>
 8004b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b7a:	2380      	movs	r3, #128	; 0x80
 8004b7c:	025b      	lsls	r3, r3, #9
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d205      	bcs.n	8004b8e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60da      	str	r2, [r3, #12]
 8004b8c:	e005      	b.n	8004b9a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004b8e:	231a      	movs	r3, #26
 8004b90:	2220      	movs	r2, #32
 8004b92:	189b      	adds	r3, r3, r2
 8004b94:	19db      	adds	r3, r3, r7
 8004b96:	2201      	movs	r2, #1
 8004b98:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	226a      	movs	r2, #106	; 0x6a
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	2268      	movs	r2, #104	; 0x68
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	2200      	movs	r2, #0
 8004bae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004bb6:	231a      	movs	r3, #26
 8004bb8:	2220      	movs	r2, #32
 8004bba:	189b      	adds	r3, r3, r2
 8004bbc:	19db      	adds	r3, r3, r7
 8004bbe:	781b      	ldrb	r3, [r3, #0]
}
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b010      	add	sp, #64	; 0x40
 8004bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8004bc8:	40008000 	.word	0x40008000
 8004bcc:	40008400 	.word	0x40008400
 8004bd0:	00f42400 	.word	0x00f42400
 8004bd4:	080076ac 	.word	0x080076ac

08004bd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	2201      	movs	r2, #1
 8004be6:	4013      	ands	r3, r2
 8004be8:	d00b      	beq.n	8004c02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	4a4a      	ldr	r2, [pc, #296]	; (8004d1c <UART_AdvFeatureConfig+0x144>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	0019      	movs	r1, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c06:	2202      	movs	r2, #2
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d00b      	beq.n	8004c24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	4a43      	ldr	r2, [pc, #268]	; (8004d20 <UART_AdvFeatureConfig+0x148>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	0019      	movs	r1, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	2204      	movs	r2, #4
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d00b      	beq.n	8004c46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a3b      	ldr	r2, [pc, #236]	; (8004d24 <UART_AdvFeatureConfig+0x14c>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	0019      	movs	r1, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	2208      	movs	r2, #8
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d00b      	beq.n	8004c68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	4a34      	ldr	r2, [pc, #208]	; (8004d28 <UART_AdvFeatureConfig+0x150>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	0019      	movs	r1, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6c:	2210      	movs	r2, #16
 8004c6e:	4013      	ands	r3, r2
 8004c70:	d00b      	beq.n	8004c8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	4a2c      	ldr	r2, [pc, #176]	; (8004d2c <UART_AdvFeatureConfig+0x154>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	0019      	movs	r1, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	2220      	movs	r2, #32
 8004c90:	4013      	ands	r3, r2
 8004c92:	d00b      	beq.n	8004cac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	4a25      	ldr	r2, [pc, #148]	; (8004d30 <UART_AdvFeatureConfig+0x158>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	0019      	movs	r1, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	2240      	movs	r2, #64	; 0x40
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d01d      	beq.n	8004cf2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	4a1d      	ldr	r2, [pc, #116]	; (8004d34 <UART_AdvFeatureConfig+0x15c>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	0019      	movs	r1, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cd2:	2380      	movs	r3, #128	; 0x80
 8004cd4:	035b      	lsls	r3, r3, #13
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d10b      	bne.n	8004cf2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <UART_AdvFeatureConfig+0x160>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	0019      	movs	r1, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	2280      	movs	r2, #128	; 0x80
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	d00b      	beq.n	8004d14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	4a0e      	ldr	r2, [pc, #56]	; (8004d3c <UART_AdvFeatureConfig+0x164>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	0019      	movs	r1, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	605a      	str	r2, [r3, #4]
  }
}
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b002      	add	sp, #8
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	fffdffff 	.word	0xfffdffff
 8004d20:	fffeffff 	.word	0xfffeffff
 8004d24:	fffbffff 	.word	0xfffbffff
 8004d28:	ffff7fff 	.word	0xffff7fff
 8004d2c:	ffffefff 	.word	0xffffefff
 8004d30:	ffffdfff 	.word	0xffffdfff
 8004d34:	ffefffff 	.word	0xffefffff
 8004d38:	ff9fffff 	.word	0xff9fffff
 8004d3c:	fff7ffff 	.word	0xfff7ffff

08004d40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2290      	movs	r2, #144	; 0x90
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d50:	f7fd f8ce 	bl	8001ef0 <HAL_GetTick>
 8004d54:	0003      	movs	r3, r0
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2208      	movs	r2, #8
 8004d60:	4013      	ands	r3, r2
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d10c      	bne.n	8004d80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2280      	movs	r2, #128	; 0x80
 8004d6a:	0391      	lsls	r1, r2, #14
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	4a1a      	ldr	r2, [pc, #104]	; (8004dd8 <UART_CheckIdleState+0x98>)
 8004d70:	9200      	str	r2, [sp, #0]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f000 f832 	bl	8004ddc <UART_WaitOnFlagUntilTimeout>
 8004d78:	1e03      	subs	r3, r0, #0
 8004d7a:	d001      	beq.n	8004d80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e026      	b.n	8004dce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2204      	movs	r2, #4
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d10c      	bne.n	8004da8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2280      	movs	r2, #128	; 0x80
 8004d92:	03d1      	lsls	r1, r2, #15
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	4a10      	ldr	r2, [pc, #64]	; (8004dd8 <UART_CheckIdleState+0x98>)
 8004d98:	9200      	str	r2, [sp, #0]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f000 f81e 	bl	8004ddc <UART_WaitOnFlagUntilTimeout>
 8004da0:	1e03      	subs	r3, r0, #0
 8004da2:	d001      	beq.n	8004da8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e012      	b.n	8004dce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2288      	movs	r2, #136	; 0x88
 8004dac:	2120      	movs	r1, #32
 8004dae:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	228c      	movs	r2, #140	; 0x8c
 8004db4:	2120      	movs	r1, #32
 8004db6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2284      	movs	r2, #132	; 0x84
 8004dc8:	2100      	movs	r1, #0
 8004dca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	0018      	movs	r0, r3
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	b004      	add	sp, #16
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	01ffffff 	.word	0x01ffffff

08004ddc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b094      	sub	sp, #80	; 0x50
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	1dfb      	adds	r3, r7, #7
 8004dea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dec:	e0a7      	b.n	8004f3e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004df0:	3301      	adds	r3, #1
 8004df2:	d100      	bne.n	8004df6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004df4:	e0a3      	b.n	8004f3e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df6:	f7fd f87b 	bl	8001ef0 <HAL_GetTick>
 8004dfa:	0002      	movs	r2, r0
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d302      	bcc.n	8004e0c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d13f      	bne.n	8004e8c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e10:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e14:	647b      	str	r3, [r7, #68]	; 0x44
 8004e16:	2301      	movs	r3, #1
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1c:	f383 8810 	msr	PRIMASK, r3
}
 8004e20:	46c0      	nop			; (mov r8, r8)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	494e      	ldr	r1, [pc, #312]	; (8004f68 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004e2e:	400a      	ands	r2, r1
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e34:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e38:	f383 8810 	msr	PRIMASK, r3
}
 8004e3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e42:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e46:	643b      	str	r3, [r7, #64]	; 0x40
 8004e48:	2301      	movs	r3, #1
 8004e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	f383 8810 	msr	PRIMASK, r3
}
 8004e52:	46c0      	nop			; (mov r8, r8)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2101      	movs	r1, #1
 8004e60:	438a      	bics	r2, r1
 8004e62:	609a      	str	r2, [r3, #8]
 8004e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e6a:	f383 8810 	msr	PRIMASK, r3
}
 8004e6e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2288      	movs	r2, #136	; 0x88
 8004e74:	2120      	movs	r1, #32
 8004e76:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	228c      	movs	r2, #140	; 0x8c
 8004e7c:	2120      	movs	r1, #32
 8004e7e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2284      	movs	r2, #132	; 0x84
 8004e84:	2100      	movs	r1, #0
 8004e86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e069      	b.n	8004f60 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2204      	movs	r2, #4
 8004e94:	4013      	ands	r3, r2
 8004e96:	d052      	beq.n	8004f3e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	69da      	ldr	r2, [r3, #28]
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	401a      	ands	r2, r3
 8004ea4:	2380      	movs	r3, #128	; 0x80
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d148      	bne.n	8004f3e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2280      	movs	r2, #128	; 0x80
 8004eb2:	0112      	lsls	r2, r2, #4
 8004eb4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eba:	613b      	str	r3, [r7, #16]
  return(result);
 8004ebc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f383 8810 	msr	PRIMASK, r3
}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4924      	ldr	r1, [pc, #144]	; (8004f68 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004ed8:	400a      	ands	r2, r1
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ede:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	f383 8810 	msr	PRIMASK, r3
}
 8004ee6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8004eec:	61fb      	str	r3, [r7, #28]
  return(result);
 8004eee:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	f383 8810 	msr	PRIMASK, r3
}
 8004efc:	46c0      	nop			; (mov r8, r8)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2101      	movs	r1, #1
 8004f0a:	438a      	bics	r2, r1
 8004f0c:	609a      	str	r2, [r3, #8]
 8004f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	f383 8810 	msr	PRIMASK, r3
}
 8004f18:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2288      	movs	r2, #136	; 0x88
 8004f1e:	2120      	movs	r1, #32
 8004f20:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	228c      	movs	r2, #140	; 0x8c
 8004f26:	2120      	movs	r1, #32
 8004f28:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2290      	movs	r2, #144	; 0x90
 8004f2e:	2120      	movs	r1, #32
 8004f30:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2284      	movs	r2, #132	; 0x84
 8004f36:	2100      	movs	r1, #0
 8004f38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e010      	b.n	8004f60 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	4013      	ands	r3, r2
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	425a      	negs	r2, r3
 8004f4e:	4153      	adcs	r3, r2
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	001a      	movs	r2, r3
 8004f54:	1dfb      	adds	r3, r7, #7
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d100      	bne.n	8004f5e <UART_WaitOnFlagUntilTimeout+0x182>
 8004f5c:	e747      	b.n	8004dee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	0018      	movs	r0, r3
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b014      	add	sp, #80	; 0x50
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	fffffe5f 	.word	0xfffffe5f

08004f6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2284      	movs	r2, #132	; 0x84
 8004f78:	5c9b      	ldrb	r3, [r3, r2]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_UARTEx_DisableFifoMode+0x16>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e027      	b.n	8004fd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2284      	movs	r2, #132	; 0x84
 8004f86:	2101      	movs	r1, #1
 8004f88:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2288      	movs	r2, #136	; 0x88
 8004f8e:	2124      	movs	r1, #36	; 0x24
 8004f90:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	438a      	bics	r2, r1
 8004fa8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4a0b      	ldr	r2, [pc, #44]	; (8004fdc <HAL_UARTEx_DisableFifoMode+0x70>)
 8004fae:	4013      	ands	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2288      	movs	r2, #136	; 0x88
 8004fc4:	2120      	movs	r1, #32
 8004fc6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2284      	movs	r2, #132	; 0x84
 8004fcc:	2100      	movs	r1, #0
 8004fce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	b004      	add	sp, #16
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	dfffffff 	.word	0xdfffffff

08004fe0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2284      	movs	r2, #132	; 0x84
 8004fee:	5c9b      	ldrb	r3, [r3, r2]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e02e      	b.n	8005056 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2284      	movs	r2, #132	; 0x84
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2288      	movs	r2, #136	; 0x88
 8005004:	2124      	movs	r1, #36	; 0x24
 8005006:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2101      	movs	r1, #1
 800501c:	438a      	bics	r2, r1
 800501e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	08d9      	lsrs	r1, r3, #3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	0018      	movs	r0, r3
 8005038:	f000 f854 	bl	80050e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2288      	movs	r2, #136	; 0x88
 8005048:	2120      	movs	r1, #32
 800504a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2284      	movs	r2, #132	; 0x84
 8005050:	2100      	movs	r1, #0
 8005052:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	0018      	movs	r0, r3
 8005058:	46bd      	mov	sp, r7
 800505a:	b004      	add	sp, #16
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2284      	movs	r2, #132	; 0x84
 800506e:	5c9b      	ldrb	r3, [r3, r2]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005074:	2302      	movs	r3, #2
 8005076:	e02f      	b.n	80050d8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2284      	movs	r2, #132	; 0x84
 800507c:	2101      	movs	r1, #1
 800507e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2288      	movs	r2, #136	; 0x88
 8005084:	2124      	movs	r1, #36	; 0x24
 8005086:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2101      	movs	r1, #1
 800509c:	438a      	bics	r2, r1
 800509e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	4a0e      	ldr	r2, [pc, #56]	; (80050e0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	0019      	movs	r1, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f000 f813 	bl	80050e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2288      	movs	r2, #136	; 0x88
 80050ca:	2120      	movs	r1, #32
 80050cc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2284      	movs	r2, #132	; 0x84
 80050d2:	2100      	movs	r1, #0
 80050d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	0018      	movs	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	b004      	add	sp, #16
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	f1ffffff 	.word	0xf1ffffff

080050e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80050e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d108      	bne.n	8005106 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	226a      	movs	r2, #106	; 0x6a
 80050f8:	2101      	movs	r1, #1
 80050fa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2268      	movs	r2, #104	; 0x68
 8005100:	2101      	movs	r1, #1
 8005102:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005104:	e043      	b.n	800518e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005106:	260f      	movs	r6, #15
 8005108:	19bb      	adds	r3, r7, r6
 800510a:	2208      	movs	r2, #8
 800510c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800510e:	200e      	movs	r0, #14
 8005110:	183b      	adds	r3, r7, r0
 8005112:	2208      	movs	r2, #8
 8005114:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	0e5b      	lsrs	r3, r3, #25
 800511e:	b2da      	uxtb	r2, r3
 8005120:	240d      	movs	r4, #13
 8005122:	193b      	adds	r3, r7, r4
 8005124:	2107      	movs	r1, #7
 8005126:	400a      	ands	r2, r1
 8005128:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	0f5b      	lsrs	r3, r3, #29
 8005132:	b2da      	uxtb	r2, r3
 8005134:	250c      	movs	r5, #12
 8005136:	197b      	adds	r3, r7, r5
 8005138:	2107      	movs	r1, #7
 800513a:	400a      	ands	r2, r1
 800513c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800513e:	183b      	adds	r3, r7, r0
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	197a      	adds	r2, r7, r5
 8005144:	7812      	ldrb	r2, [r2, #0]
 8005146:	4914      	ldr	r1, [pc, #80]	; (8005198 <UARTEx_SetNbDataToProcess+0xb4>)
 8005148:	5c8a      	ldrb	r2, [r1, r2]
 800514a:	435a      	muls	r2, r3
 800514c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800514e:	197b      	adds	r3, r7, r5
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	4a12      	ldr	r2, [pc, #72]	; (800519c <UARTEx_SetNbDataToProcess+0xb8>)
 8005154:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005156:	0019      	movs	r1, r3
 8005158:	f7fb f872 	bl	8000240 <__divsi3>
 800515c:	0003      	movs	r3, r0
 800515e:	b299      	uxth	r1, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	226a      	movs	r2, #106	; 0x6a
 8005164:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005166:	19bb      	adds	r3, r7, r6
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	193a      	adds	r2, r7, r4
 800516c:	7812      	ldrb	r2, [r2, #0]
 800516e:	490a      	ldr	r1, [pc, #40]	; (8005198 <UARTEx_SetNbDataToProcess+0xb4>)
 8005170:	5c8a      	ldrb	r2, [r1, r2]
 8005172:	435a      	muls	r2, r3
 8005174:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005176:	193b      	adds	r3, r7, r4
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	4a08      	ldr	r2, [pc, #32]	; (800519c <UARTEx_SetNbDataToProcess+0xb8>)
 800517c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800517e:	0019      	movs	r1, r3
 8005180:	f7fb f85e 	bl	8000240 <__divsi3>
 8005184:	0003      	movs	r3, r0
 8005186:	b299      	uxth	r1, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2268      	movs	r2, #104	; 0x68
 800518c:	5299      	strh	r1, [r3, r2]
}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	46bd      	mov	sp, r7
 8005192:	b005      	add	sp, #20
 8005194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	080076c4 	.word	0x080076c4
 800519c:	080076cc 	.word	0x080076cc

080051a0 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80051a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051a2:	b08d      	sub	sp, #52	; 0x34
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	0004      	movs	r4, r0
 80051a8:	0008      	movs	r0, r1
 80051aa:	0011      	movs	r1, r2
 80051ac:	603b      	str	r3, [r7, #0]
 80051ae:	1dfb      	adds	r3, r7, #7
 80051b0:	1c22      	adds	r2, r4, #0
 80051b2:	701a      	strb	r2, [r3, #0]
 80051b4:	1dbb      	adds	r3, r7, #6
 80051b6:	1c02      	adds	r2, r0, #0
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	1d7b      	adds	r3, r7, #5
 80051bc:	1c0a      	adds	r2, r1, #0
 80051be:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80051c0:	2514      	movs	r5, #20
 80051c2:	197b      	adds	r3, r7, r5
 80051c4:	1dfa      	adds	r2, r7, #7
 80051c6:	7812      	ldrb	r2, [r2, #0]
 80051c8:	701a      	strb	r2, [r3, #0]
  cp.privacy_enabled = privacy_enabled;
 80051ca:	197b      	adds	r3, r7, r5
 80051cc:	1dba      	adds	r2, r7, #6
 80051ce:	7812      	ldrb	r2, [r2, #0]
 80051d0:	705a      	strb	r2, [r3, #1]
  cp.device_name_char_len = device_name_char_len;
 80051d2:	197b      	adds	r3, r7, r5
 80051d4:	1d7a      	adds	r2, r7, #5
 80051d6:	7812      	ldrb	r2, [r2, #0]
 80051d8:	709a      	strb	r2, [r3, #2]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80051da:	260c      	movs	r6, #12
 80051dc:	19bb      	adds	r3, r7, r6
 80051de:	2207      	movs	r2, #7
 80051e0:	2100      	movs	r1, #0
 80051e2:	0018      	movs	r0, r3
 80051e4:	f001 fa82 	bl	80066ec <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80051e8:	2418      	movs	r4, #24
 80051ea:	193b      	adds	r3, r7, r4
 80051ec:	2218      	movs	r2, #24
 80051ee:	2100      	movs	r1, #0
 80051f0:	0018      	movs	r0, r3
 80051f2:	f001 fa7b 	bl	80066ec <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80051f6:	0021      	movs	r1, r4
 80051f8:	187b      	adds	r3, r7, r1
 80051fa:	223f      	movs	r2, #63	; 0x3f
 80051fc:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GAP_INIT;
 80051fe:	187b      	adds	r3, r7, r1
 8005200:	228a      	movs	r2, #138	; 0x8a
 8005202:	805a      	strh	r2, [r3, #2]
  rq.cparam = &cp;
 8005204:	187b      	adds	r3, r7, r1
 8005206:	197a      	adds	r2, r7, r5
 8005208:	609a      	str	r2, [r3, #8]
  rq.clen = sizeof(cp);
 800520a:	187b      	adds	r3, r7, r1
 800520c:	2203      	movs	r2, #3
 800520e:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 8005210:	187b      	adds	r3, r7, r1
 8005212:	19ba      	adds	r2, r7, r6
 8005214:	611a      	str	r2, [r3, #16]
  rq.rlen = GAP_INIT_RP_SIZE;
 8005216:	187b      	adds	r3, r7, r1
 8005218:	2207      	movs	r2, #7
 800521a:	615a      	str	r2, [r3, #20]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800521c:	187b      	adds	r3, r7, r1
 800521e:	2100      	movs	r1, #0
 8005220:	0018      	movs	r0, r3
 8005222:	f000 fd83 	bl	8005d2c <hci_send_req>
 8005226:	1e03      	subs	r3, r0, #0
 8005228:	da01      	bge.n	800522e <aci_gap_init_IDB05A1+0x8e>
    return BLE_STATUS_TIMEOUT;
 800522a:	23ff      	movs	r3, #255	; 0xff
 800522c:	e01f      	b.n	800526e <aci_gap_init_IDB05A1+0xce>
  
  if (resp.status) {
 800522e:	220c      	movs	r2, #12
 8005230:	18bb      	adds	r3, r7, r2
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <aci_gap_init_IDB05A1+0x9e>
    return resp.status;
 8005238:	18bb      	adds	r3, r7, r2
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	e017      	b.n	800526e <aci_gap_init_IDB05A1+0xce>
  }
  
  *service_handle = btohs(resp.service_handle);
 800523e:	210c      	movs	r1, #12
 8005240:	187b      	adds	r3, r7, r1
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	021b      	lsls	r3, r3, #8
 8005246:	0c1b      	lsrs	r3, r3, #16
 8005248:	b29a      	uxth	r2, r3
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800524e:	187b      	adds	r3, r7, r1
 8005250:	78da      	ldrb	r2, [r3, #3]
 8005252:	791b      	ldrb	r3, [r3, #4]
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	4313      	orrs	r3, r2
 8005258:	b29a      	uxth	r2, r3
 800525a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800525c:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800525e:	187b      	adds	r3, r7, r1
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	0c1b      	lsrs	r3, r3, #16
 8005266:	b29a      	uxth	r2, r3
 8005268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800526c:	2300      	movs	r3, #0
}
 800526e:	0018      	movs	r0, r3
 8005270:	46bd      	mov	sp, r7
 8005272:	b00d      	add	sp, #52	; 0x34
 8005274:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005276 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8005276:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005278:	b095      	sub	sp, #84	; 0x54
 800527a:	af00      	add	r7, sp, #0
 800527c:	0005      	movs	r5, r0
 800527e:	000c      	movs	r4, r1
 8005280:	0010      	movs	r0, r2
 8005282:	0019      	movs	r1, r3
 8005284:	1dfb      	adds	r3, r7, #7
 8005286:	1c2a      	adds	r2, r5, #0
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	1d3b      	adds	r3, r7, #4
 800528c:	1c22      	adds	r2, r4, #0
 800528e:	801a      	strh	r2, [r3, #0]
 8005290:	1cbb      	adds	r3, r7, #2
 8005292:	1c02      	adds	r2, r0, #0
 8005294:	801a      	strh	r2, [r3, #0]
 8005296:	1dbb      	adds	r3, r7, #6
 8005298:	1c0a      	adds	r2, r1, #0
 800529a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800529c:	234f      	movs	r3, #79	; 0x4f
 800529e:	18fb      	adds	r3, r7, r3
 80052a0:	2200      	movs	r2, #0
 80052a2:	701a      	strb	r2, [r3, #0]
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80052a4:	2364      	movs	r3, #100	; 0x64
 80052a6:	2108      	movs	r1, #8
 80052a8:	185b      	adds	r3, r3, r1
 80052aa:	19db      	adds	r3, r3, r7
 80052ac:	781a      	ldrb	r2, [r3, #0]
 80052ae:	236c      	movs	r3, #108	; 0x6c
 80052b0:	185b      	adds	r3, r3, r1
 80052b2:	19db      	adds	r3, r3, r7
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	18d3      	adds	r3, r2, r3
 80052b8:	330e      	adds	r3, #14
 80052ba:	2b28      	cmp	r3, #40	; 0x28
 80052bc:	d901      	bls.n	80052c2 <aci_gap_set_discoverable+0x4c>
    return BLE_STATUS_INVALID_PARAMS;
 80052be:	2342      	movs	r3, #66	; 0x42
 80052c0:	e0f0      	b.n	80054a4 <aci_gap_set_discoverable+0x22e>

  buffer[indx] = AdvType;
 80052c2:	204f      	movs	r0, #79	; 0x4f
 80052c4:	183b      	adds	r3, r7, r0
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2508      	movs	r5, #8
 80052ca:	197a      	adds	r2, r7, r5
 80052cc:	1df9      	adds	r1, r7, #7
 80052ce:	7809      	ldrb	r1, [r1, #0]
 80052d0:	54d1      	strb	r1, [r2, r3]
  indx++;
 80052d2:	0001      	movs	r1, r0
 80052d4:	187b      	adds	r3, r7, r1
 80052d6:	781a      	ldrb	r2, [r3, #0]
 80052d8:	187b      	adds	r3, r7, r1
 80052da:	3201      	adds	r2, #1
 80052dc:	701a      	strb	r2, [r3, #0]
  
  AdvIntervMin = htobs(AdvIntervMin);
 80052de:	1d3b      	adds	r3, r7, #4
 80052e0:	881a      	ldrh	r2, [r3, #0]
 80052e2:	1d3b      	adds	r3, r7, #4
 80052e4:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 80052e6:	000c      	movs	r4, r1
 80052e8:	187b      	adds	r3, r7, r1
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	197a      	adds	r2, r7, r5
 80052ee:	18d3      	adds	r3, r2, r3
 80052f0:	1d39      	adds	r1, r7, #4
 80052f2:	2202      	movs	r2, #2
 80052f4:	0018      	movs	r0, r3
 80052f6:	f001 f9f0 	bl	80066da <memcpy>
  indx +=  2;
 80052fa:	0021      	movs	r1, r4
 80052fc:	187b      	adds	r3, r7, r1
 80052fe:	187a      	adds	r2, r7, r1
 8005300:	7812      	ldrb	r2, [r2, #0]
 8005302:	3202      	adds	r2, #2
 8005304:	701a      	strb	r2, [r3, #0]
    
  AdvIntervMax = htobs(AdvIntervMax);
 8005306:	1cbb      	adds	r3, r7, #2
 8005308:	881a      	ldrh	r2, [r3, #0]
 800530a:	1cbb      	adds	r3, r7, #2
 800530c:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800530e:	000c      	movs	r4, r1
 8005310:	187b      	adds	r3, r7, r1
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	197a      	adds	r2, r7, r5
 8005316:	18d3      	adds	r3, r2, r3
 8005318:	1cb9      	adds	r1, r7, #2
 800531a:	2202      	movs	r2, #2
 800531c:	0018      	movs	r0, r3
 800531e:	f001 f9dc 	bl	80066da <memcpy>
  indx +=  2;
 8005322:	193b      	adds	r3, r7, r4
 8005324:	193a      	adds	r2, r7, r4
 8005326:	7812      	ldrb	r2, [r2, #0]
 8005328:	3202      	adds	r2, #2
 800532a:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = OwnAddrType;
 800532c:	193b      	adds	r3, r7, r4
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	197a      	adds	r2, r7, r5
 8005332:	1db9      	adds	r1, r7, #6
 8005334:	7809      	ldrb	r1, [r1, #0]
 8005336:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005338:	193b      	adds	r3, r7, r4
 800533a:	781a      	ldrb	r2, [r3, #0]
 800533c:	193b      	adds	r3, r7, r4
 800533e:	3201      	adds	r2, #1
 8005340:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = AdvFilterPolicy;
 8005342:	193b      	adds	r3, r7, r4
 8005344:	781a      	ldrb	r2, [r3, #0]
 8005346:	1979      	adds	r1, r7, r5
 8005348:	2360      	movs	r3, #96	; 0x60
 800534a:	2008      	movs	r0, #8
 800534c:	181b      	adds	r3, r3, r0
 800534e:	19db      	adds	r3, r3, r7
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	548b      	strb	r3, [r1, r2]
  indx++;
 8005354:	193b      	adds	r3, r7, r4
 8005356:	781a      	ldrb	r2, [r3, #0]
 8005358:	193b      	adds	r3, r7, r4
 800535a:	3201      	adds	r2, #1
 800535c:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = LocalNameLen;
 800535e:	193b      	adds	r3, r7, r4
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	197a      	adds	r2, r7, r5
 8005364:	2664      	movs	r6, #100	; 0x64
 8005366:	1831      	adds	r1, r6, r0
 8005368:	19c9      	adds	r1, r1, r7
 800536a:	7809      	ldrb	r1, [r1, #0]
 800536c:	54d1      	strb	r1, [r2, r3]
  indx++;
 800536e:	193b      	adds	r3, r7, r4
 8005370:	781a      	ldrb	r2, [r3, #0]
 8005372:	193b      	adds	r3, r7, r4
 8005374:	3201      	adds	r2, #1
 8005376:	701a      	strb	r2, [r3, #0]
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8005378:	193b      	adds	r3, r7, r4
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	197a      	adds	r2, r7, r5
 800537e:	18d0      	adds	r0, r2, r3
 8005380:	2308      	movs	r3, #8
 8005382:	18f2      	adds	r2, r6, r3
 8005384:	19d3      	adds	r3, r2, r7
 8005386:	781a      	ldrb	r2, [r3, #0]
 8005388:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800538a:	0019      	movs	r1, r3
 800538c:	f001 f9a5 	bl	80066da <memcpy>
  indx +=  LocalNameLen;
 8005390:	193b      	adds	r3, r7, r4
 8005392:	1939      	adds	r1, r7, r4
 8005394:	2008      	movs	r0, #8
 8005396:	1832      	adds	r2, r6, r0
 8005398:	19d2      	adds	r2, r2, r7
 800539a:	7809      	ldrb	r1, [r1, #0]
 800539c:	7812      	ldrb	r2, [r2, #0]
 800539e:	188a      	adds	r2, r1, r2
 80053a0:	701a      	strb	r2, [r3, #0]
  
  buffer[indx] = ServiceUUIDLen;
 80053a2:	193b      	adds	r3, r7, r4
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	197a      	adds	r2, r7, r5
 80053a8:	266c      	movs	r6, #108	; 0x6c
 80053aa:	1831      	adds	r1, r6, r0
 80053ac:	19c9      	adds	r1, r1, r7
 80053ae:	7809      	ldrb	r1, [r1, #0]
 80053b0:	54d1      	strb	r1, [r2, r3]
  indx++;
 80053b2:	193b      	adds	r3, r7, r4
 80053b4:	781a      	ldrb	r2, [r3, #0]
 80053b6:	193b      	adds	r3, r7, r4
 80053b8:	3201      	adds	r2, #1
 80053ba:	701a      	strb	r2, [r3, #0]

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80053bc:	193b      	adds	r3, r7, r4
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	197a      	adds	r2, r7, r5
 80053c2:	18d0      	adds	r0, r2, r3
 80053c4:	2308      	movs	r3, #8
 80053c6:	18f2      	adds	r2, r6, r3
 80053c8:	19d3      	adds	r3, r2, r7
 80053ca:	781a      	ldrb	r2, [r3, #0]
 80053cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ce:	0019      	movs	r1, r3
 80053d0:	f001 f983 	bl	80066da <memcpy>
  indx +=  ServiceUUIDLen;  
 80053d4:	0020      	movs	r0, r4
 80053d6:	183b      	adds	r3, r7, r0
 80053d8:	1839      	adds	r1, r7, r0
 80053da:	2408      	movs	r4, #8
 80053dc:	1932      	adds	r2, r6, r4
 80053de:	19d2      	adds	r2, r2, r7
 80053e0:	7809      	ldrb	r1, [r1, #0]
 80053e2:	7812      	ldrb	r2, [r2, #0]
 80053e4:	188a      	adds	r2, r1, r2
 80053e6:	701a      	strb	r2, [r3, #0]

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 80053e8:	2174      	movs	r1, #116	; 0x74
 80053ea:	0026      	movs	r6, r4
 80053ec:	198b      	adds	r3, r1, r6
 80053ee:	19db      	adds	r3, r3, r7
 80053f0:	881a      	ldrh	r2, [r3, #0]
 80053f2:	198b      	adds	r3, r1, r6
 80053f4:	19db      	adds	r3, r3, r7
 80053f6:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80053f8:	0004      	movs	r4, r0
 80053fa:	183b      	adds	r3, r7, r0
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	197a      	adds	r2, r7, r5
 8005400:	18d3      	adds	r3, r2, r3
 8005402:	198a      	adds	r2, r1, r6
 8005404:	19d1      	adds	r1, r2, r7
 8005406:	2202      	movs	r2, #2
 8005408:	0018      	movs	r0, r3
 800540a:	f001 f966 	bl	80066da <memcpy>
  indx +=  2;
 800540e:	0020      	movs	r0, r4
 8005410:	183b      	adds	r3, r7, r0
 8005412:	183a      	adds	r2, r7, r0
 8005414:	7812      	ldrb	r2, [r2, #0]
 8005416:	3202      	adds	r2, #2
 8005418:	701a      	strb	r2, [r3, #0]
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800541a:	2178      	movs	r1, #120	; 0x78
 800541c:	198b      	adds	r3, r1, r6
 800541e:	19db      	adds	r3, r3, r7
 8005420:	881a      	ldrh	r2, [r3, #0]
 8005422:	198b      	adds	r3, r1, r6
 8005424:	19db      	adds	r3, r3, r7
 8005426:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8005428:	0004      	movs	r4, r0
 800542a:	193b      	adds	r3, r7, r4
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	197a      	adds	r2, r7, r5
 8005430:	18d3      	adds	r3, r2, r3
 8005432:	198a      	adds	r2, r1, r6
 8005434:	19d1      	adds	r1, r2, r7
 8005436:	2202      	movs	r2, #2
 8005438:	0018      	movs	r0, r3
 800543a:	f001 f94e 	bl	80066da <memcpy>
  indx +=  2;    
 800543e:	193b      	adds	r3, r7, r4
 8005440:	193a      	adds	r2, r7, r4
 8005442:	7812      	ldrb	r2, [r2, #0]
 8005444:	3202      	adds	r2, #2
 8005446:	701a      	strb	r2, [r3, #0]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005448:	2634      	movs	r6, #52	; 0x34
 800544a:	19bb      	adds	r3, r7, r6
 800544c:	2218      	movs	r2, #24
 800544e:	2100      	movs	r1, #0
 8005450:	0018      	movs	r0, r3
 8005452:	f001 f94b 	bl	80066ec <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005456:	0031      	movs	r1, r6
 8005458:	187b      	adds	r3, r7, r1
 800545a:	223f      	movs	r2, #63	; 0x3f
 800545c:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800545e:	187b      	adds	r3, r7, r1
 8005460:	2283      	movs	r2, #131	; 0x83
 8005462:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 8005464:	187b      	adds	r3, r7, r1
 8005466:	197a      	adds	r2, r7, r5
 8005468:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 800546a:	193b      	adds	r3, r7, r4
 800546c:	781a      	ldrb	r2, [r3, #0]
 800546e:	187b      	adds	r3, r7, r1
 8005470:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8005472:	187b      	adds	r3, r7, r1
 8005474:	2233      	movs	r2, #51	; 0x33
 8005476:	18ba      	adds	r2, r7, r2
 8005478:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800547a:	187b      	adds	r3, r7, r1
 800547c:	2201      	movs	r2, #1
 800547e:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8005480:	187b      	adds	r3, r7, r1
 8005482:	2100      	movs	r1, #0
 8005484:	0018      	movs	r0, r3
 8005486:	f000 fc51 	bl	8005d2c <hci_send_req>
 800548a:	1e03      	subs	r3, r0, #0
 800548c:	da01      	bge.n	8005492 <aci_gap_set_discoverable+0x21c>
    return BLE_STATUS_TIMEOUT;
 800548e:	23ff      	movs	r3, #255	; 0xff
 8005490:	e008      	b.n	80054a4 <aci_gap_set_discoverable+0x22e>

  if (status) {
 8005492:	2233      	movs	r2, #51	; 0x33
 8005494:	18bb      	adds	r3, r7, r2
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <aci_gap_set_discoverable+0x22c>
    return status;
 800549c:	18bb      	adds	r3, r7, r2
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	e000      	b.n	80054a4 <aci_gap_set_discoverable+0x22e>
  }

  return 0;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	0018      	movs	r0, r3
 80054a6:	46bd      	mov	sp, r7
 80054a8:	b015      	add	sp, #84	; 0x54
 80054aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054ac <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80054ac:	b590      	push	{r4, r7, lr}
 80054ae:	b089      	sub	sp, #36	; 0x24
 80054b0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80054b2:	2408      	movs	r4, #8
 80054b4:	193b      	adds	r3, r7, r4
 80054b6:	2218      	movs	r2, #24
 80054b8:	2100      	movs	r1, #0
 80054ba:	0018      	movs	r0, r3
 80054bc:	f001 f916 	bl	80066ec <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80054c0:	0021      	movs	r1, r4
 80054c2:	187b      	adds	r3, r7, r1
 80054c4:	223f      	movs	r2, #63	; 0x3f
 80054c6:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_INIT;
 80054c8:	187b      	adds	r3, r7, r1
 80054ca:	2202      	movs	r2, #2
 80054cc:	32ff      	adds	r2, #255	; 0xff
 80054ce:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 80054d0:	187b      	adds	r3, r7, r1
 80054d2:	1dfa      	adds	r2, r7, #7
 80054d4:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 80054d6:	187b      	adds	r3, r7, r1
 80054d8:	2201      	movs	r2, #1
 80054da:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 80054dc:	187b      	adds	r3, r7, r1
 80054de:	2100      	movs	r1, #0
 80054e0:	0018      	movs	r0, r3
 80054e2:	f000 fc23 	bl	8005d2c <hci_send_req>
 80054e6:	1e03      	subs	r3, r0, #0
 80054e8:	da01      	bge.n	80054ee <aci_gatt_init+0x42>
    return BLE_STATUS_TIMEOUT;
 80054ea:	23ff      	movs	r3, #255	; 0xff
 80054ec:	e001      	b.n	80054f2 <aci_gatt_init+0x46>

  return status;
 80054ee:	1dfb      	adds	r3, r7, #7
 80054f0:	781b      	ldrb	r3, [r3, #0]
}
 80054f2:	0018      	movs	r0, r3
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b009      	add	sp, #36	; 0x24
 80054f8:	bd90      	pop	{r4, r7, pc}

080054fa <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80054fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054fc:	b091      	sub	sp, #68	; 0x44
 80054fe:	af00      	add	r7, sp, #0
 8005500:	0004      	movs	r4, r0
 8005502:	6039      	str	r1, [r7, #0]
 8005504:	0010      	movs	r0, r2
 8005506:	0019      	movs	r1, r3
 8005508:	1dfb      	adds	r3, r7, #7
 800550a:	1c22      	adds	r2, r4, #0
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	1dbb      	adds	r3, r7, #6
 8005510:	1c02      	adds	r2, r0, #0
 8005512:	701a      	strb	r2, [r3, #0]
 8005514:	1d7b      	adds	r3, r7, #5
 8005516:	1c0a      	adds	r2, r1, #0
 8005518:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800551a:	203e      	movs	r0, #62	; 0x3e
 800551c:	183b      	adds	r3, r7, r0
 800551e:	2200      	movs	r2, #0
 8005520:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = service_uuid_type;
 8005522:	183b      	adds	r3, r7, r0
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	220c      	movs	r2, #12
 8005528:	18ba      	adds	r2, r7, r2
 800552a:	1df9      	adds	r1, r7, #7
 800552c:	7809      	ldrb	r1, [r1, #0]
 800552e:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005530:	183b      	adds	r3, r7, r0
 8005532:	781a      	ldrb	r2, [r3, #0]
 8005534:	183b      	adds	r3, r7, r0
 8005536:	3201      	adds	r2, #1
 8005538:	701a      	strb	r2, [r3, #0]
    
  if(service_uuid_type == UUID_TYPE_16){
 800553a:	1dfb      	adds	r3, r7, #7
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d104      	bne.n	800554c <aci_gatt_add_serv+0x52>
    uuid_len = 2;
 8005542:	233f      	movs	r3, #63	; 0x3f
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	2202      	movs	r2, #2
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	e003      	b.n	8005554 <aci_gatt_add_serv+0x5a>
  }
  else {
    uuid_len = 16;
 800554c:	233f      	movs	r3, #63	; 0x3f
 800554e:	18fb      	adds	r3, r7, r3
 8005550:	2210      	movs	r2, #16
 8005552:	701a      	strb	r2, [r3, #0]
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8005554:	243e      	movs	r4, #62	; 0x3e
 8005556:	193b      	adds	r3, r7, r4
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	260c      	movs	r6, #12
 800555c:	19ba      	adds	r2, r7, r6
 800555e:	18d0      	adds	r0, r2, r3
 8005560:	253f      	movs	r5, #63	; 0x3f
 8005562:	197b      	adds	r3, r7, r5
 8005564:	781a      	ldrb	r2, [r3, #0]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	0019      	movs	r1, r3
 800556a:	f001 f8b6 	bl	80066da <memcpy>
  indx +=  uuid_len;
 800556e:	0020      	movs	r0, r4
 8005570:	183b      	adds	r3, r7, r0
 8005572:	1839      	adds	r1, r7, r0
 8005574:	197a      	adds	r2, r7, r5
 8005576:	7809      	ldrb	r1, [r1, #0]
 8005578:	7812      	ldrb	r2, [r2, #0]
 800557a:	188a      	adds	r2, r1, r2
 800557c:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = service_type;
 800557e:	183b      	adds	r3, r7, r0
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	19ba      	adds	r2, r7, r6
 8005584:	1db9      	adds	r1, r7, #6
 8005586:	7809      	ldrb	r1, [r1, #0]
 8005588:	54d1      	strb	r1, [r2, r3]
  indx++;
 800558a:	183b      	adds	r3, r7, r0
 800558c:	781a      	ldrb	r2, [r3, #0]
 800558e:	0004      	movs	r4, r0
 8005590:	183b      	adds	r3, r7, r0
 8005592:	3201      	adds	r2, #1
 8005594:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = max_attr_records;
 8005596:	193b      	adds	r3, r7, r4
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	19ba      	adds	r2, r7, r6
 800559c:	1d79      	adds	r1, r7, #5
 800559e:	7809      	ldrb	r1, [r1, #0]
 80055a0:	54d1      	strb	r1, [r2, r3]
  indx++;
 80055a2:	193b      	adds	r3, r7, r4
 80055a4:	781a      	ldrb	r2, [r3, #0]
 80055a6:	193b      	adds	r3, r7, r4
 80055a8:	3201      	adds	r2, #1
 80055aa:	701a      	strb	r2, [r3, #0]
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80055ac:	2320      	movs	r3, #32
 80055ae:	18fb      	adds	r3, r7, r3
 80055b0:	2203      	movs	r2, #3
 80055b2:	2100      	movs	r1, #0
 80055b4:	0018      	movs	r0, r3
 80055b6:	f001 f899 	bl	80066ec <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80055ba:	2524      	movs	r5, #36	; 0x24
 80055bc:	197b      	adds	r3, r7, r5
 80055be:	2218      	movs	r2, #24
 80055c0:	2100      	movs	r1, #0
 80055c2:	0018      	movs	r0, r3
 80055c4:	f001 f892 	bl	80066ec <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80055c8:	0029      	movs	r1, r5
 80055ca:	187b      	adds	r3, r7, r1
 80055cc:	223f      	movs	r2, #63	; 0x3f
 80055ce:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_ADD_SERV;
 80055d0:	187b      	adds	r3, r7, r1
 80055d2:	2281      	movs	r2, #129	; 0x81
 80055d4:	0052      	lsls	r2, r2, #1
 80055d6:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 80055d8:	187b      	adds	r3, r7, r1
 80055da:	19ba      	adds	r2, r7, r6
 80055dc:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 80055de:	193b      	adds	r3, r7, r4
 80055e0:	781a      	ldrb	r2, [r3, #0]
 80055e2:	187b      	adds	r3, r7, r1
 80055e4:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 80055e6:	187b      	adds	r3, r7, r1
 80055e8:	2220      	movs	r2, #32
 80055ea:	18ba      	adds	r2, r7, r2
 80055ec:	611a      	str	r2, [r3, #16]
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80055ee:	187b      	adds	r3, r7, r1
 80055f0:	2203      	movs	r2, #3
 80055f2:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 80055f4:	187b      	adds	r3, r7, r1
 80055f6:	2100      	movs	r1, #0
 80055f8:	0018      	movs	r0, r3
 80055fa:	f000 fb97 	bl	8005d2c <hci_send_req>
 80055fe:	1e03      	subs	r3, r0, #0
 8005600:	da01      	bge.n	8005606 <aci_gatt_add_serv+0x10c>
    return BLE_STATUS_TIMEOUT;
 8005602:	23ff      	movs	r3, #255	; 0xff
 8005604:	e010      	b.n	8005628 <aci_gatt_add_serv+0x12e>

  if (resp.status) {
 8005606:	2220      	movs	r2, #32
 8005608:	18bb      	adds	r3, r7, r2
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <aci_gatt_add_serv+0x11c>
    return resp.status;
 8005610:	18bb      	adds	r3, r7, r2
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	e008      	b.n	8005628 <aci_gatt_add_serv+0x12e>
  }
    
  *serviceHandle = btohs(resp.handle);
 8005616:	2320      	movs	r3, #32
 8005618:	18fb      	adds	r3, r7, r3
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	021b      	lsls	r3, r3, #8
 800561e:	0c1b      	lsrs	r3, r3, #16
 8005620:	b29a      	uxth	r2, r3
 8005622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005624:	801a      	strh	r2, [r3, #0]

  return 0;
 8005626:	2300      	movs	r3, #0
}
 8005628:	0018      	movs	r0, r3
 800562a:	46bd      	mov	sp, r7
 800562c:	b011      	add	sp, #68	; 0x44
 800562e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005630 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8005630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005632:	b093      	sub	sp, #76	; 0x4c
 8005634:	af00      	add	r7, sp, #0
 8005636:	0004      	movs	r4, r0
 8005638:	0008      	movs	r0, r1
 800563a:	603a      	str	r2, [r7, #0]
 800563c:	0019      	movs	r1, r3
 800563e:	1dbb      	adds	r3, r7, #6
 8005640:	1c22      	adds	r2, r4, #0
 8005642:	801a      	strh	r2, [r3, #0]
 8005644:	1d7b      	adds	r3, r7, #5
 8005646:	1c02      	adds	r2, r0, #0
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	1d3b      	adds	r3, r7, #4
 800564c:	1c0a      	adds	r2, r1, #0
 800564e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8005650:	2146      	movs	r1, #70	; 0x46
 8005652:	187b      	adds	r3, r7, r1
 8005654:	2200      	movs	r2, #0
 8005656:	701a      	strb	r2, [r3, #0]
    
  serviceHandle = htobs(serviceHandle);
 8005658:	1dbb      	adds	r3, r7, #6
 800565a:	881a      	ldrh	r2, [r3, #0]
 800565c:	1dbb      	adds	r3, r7, #6
 800565e:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8005660:	000c      	movs	r4, r1
 8005662:	187b      	adds	r3, r7, r1
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	250c      	movs	r5, #12
 8005668:	197a      	adds	r2, r7, r5
 800566a:	18d3      	adds	r3, r2, r3
 800566c:	1db9      	adds	r1, r7, #6
 800566e:	2202      	movs	r2, #2
 8005670:	0018      	movs	r0, r3
 8005672:	f001 f832 	bl	80066da <memcpy>
  indx += 2;
 8005676:	0020      	movs	r0, r4
 8005678:	183b      	adds	r3, r7, r0
 800567a:	183a      	adds	r2, r7, r0
 800567c:	7812      	ldrb	r2, [r2, #0]
 800567e:	3202      	adds	r2, #2
 8005680:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charUuidType;
 8005682:	183b      	adds	r3, r7, r0
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	197a      	adds	r2, r7, r5
 8005688:	1d79      	adds	r1, r7, #5
 800568a:	7809      	ldrb	r1, [r1, #0]
 800568c:	54d1      	strb	r1, [r2, r3]
  indx++;
 800568e:	183b      	adds	r3, r7, r0
 8005690:	781a      	ldrb	r2, [r3, #0]
 8005692:	183b      	adds	r3, r7, r0
 8005694:	3201      	adds	r2, #1
 8005696:	701a      	strb	r2, [r3, #0]
    
  if(charUuidType == UUID_TYPE_16){
 8005698:	1d7b      	adds	r3, r7, #5
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d104      	bne.n	80056aa <aci_gatt_add_char+0x7a>
    uuid_len = 2;
 80056a0:	2347      	movs	r3, #71	; 0x47
 80056a2:	18fb      	adds	r3, r7, r3
 80056a4:	2202      	movs	r2, #2
 80056a6:	701a      	strb	r2, [r3, #0]
 80056a8:	e003      	b.n	80056b2 <aci_gatt_add_char+0x82>
  }
  else {
    uuid_len = 16;
 80056aa:	2347      	movs	r3, #71	; 0x47
 80056ac:	18fb      	adds	r3, r7, r3
 80056ae:	2210      	movs	r2, #16
 80056b0:	701a      	strb	r2, [r3, #0]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80056b2:	2446      	movs	r4, #70	; 0x46
 80056b4:	193b      	adds	r3, r7, r4
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	250c      	movs	r5, #12
 80056ba:	197a      	adds	r2, r7, r5
 80056bc:	18d0      	adds	r0, r2, r3
 80056be:	2647      	movs	r6, #71	; 0x47
 80056c0:	19bb      	adds	r3, r7, r6
 80056c2:	781a      	ldrb	r2, [r3, #0]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	0019      	movs	r1, r3
 80056c8:	f001 f807 	bl	80066da <memcpy>
  indx +=  uuid_len;
 80056cc:	0020      	movs	r0, r4
 80056ce:	183b      	adds	r3, r7, r0
 80056d0:	1839      	adds	r1, r7, r0
 80056d2:	19ba      	adds	r2, r7, r6
 80056d4:	7809      	ldrb	r1, [r1, #0]
 80056d6:	7812      	ldrb	r2, [r2, #0]
 80056d8:	188a      	adds	r2, r1, r2
 80056da:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charValueLen;
 80056dc:	183b      	adds	r3, r7, r0
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	197a      	adds	r2, r7, r5
 80056e2:	1d39      	adds	r1, r7, #4
 80056e4:	7809      	ldrb	r1, [r1, #0]
 80056e6:	54d1      	strb	r1, [r2, r3]
  indx++;
 80056e8:	183b      	adds	r3, r7, r0
 80056ea:	781a      	ldrb	r2, [r3, #0]
 80056ec:	0004      	movs	r4, r0
 80056ee:	183b      	adds	r3, r7, r0
 80056f0:	3201      	adds	r2, #1
 80056f2:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charProperties;
 80056f4:	193b      	adds	r3, r7, r4
 80056f6:	781a      	ldrb	r2, [r3, #0]
 80056f8:	1979      	adds	r1, r7, r5
 80056fa:	2358      	movs	r3, #88	; 0x58
 80056fc:	2008      	movs	r0, #8
 80056fe:	181b      	adds	r3, r3, r0
 8005700:	19db      	adds	r3, r3, r7
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	548b      	strb	r3, [r1, r2]
  indx++;
 8005706:	193b      	adds	r3, r7, r4
 8005708:	781a      	ldrb	r2, [r3, #0]
 800570a:	193b      	adds	r3, r7, r4
 800570c:	3201      	adds	r2, #1
 800570e:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = secPermissions;
 8005710:	193b      	adds	r3, r7, r4
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	197a      	adds	r2, r7, r5
 8005716:	215c      	movs	r1, #92	; 0x5c
 8005718:	1809      	adds	r1, r1, r0
 800571a:	19c9      	adds	r1, r1, r7
 800571c:	7809      	ldrb	r1, [r1, #0]
 800571e:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005720:	193b      	adds	r3, r7, r4
 8005722:	781a      	ldrb	r2, [r3, #0]
 8005724:	193b      	adds	r3, r7, r4
 8005726:	3201      	adds	r2, #1
 8005728:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = gattEvtMask;
 800572a:	193b      	adds	r3, r7, r4
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	197a      	adds	r2, r7, r5
 8005730:	2160      	movs	r1, #96	; 0x60
 8005732:	1809      	adds	r1, r1, r0
 8005734:	19c9      	adds	r1, r1, r7
 8005736:	7809      	ldrb	r1, [r1, #0]
 8005738:	54d1      	strb	r1, [r2, r3]
  indx++;
 800573a:	193b      	adds	r3, r7, r4
 800573c:	781a      	ldrb	r2, [r3, #0]
 800573e:	193b      	adds	r3, r7, r4
 8005740:	3201      	adds	r2, #1
 8005742:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = encryKeySize;
 8005744:	193b      	adds	r3, r7, r4
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	197a      	adds	r2, r7, r5
 800574a:	2164      	movs	r1, #100	; 0x64
 800574c:	1809      	adds	r1, r1, r0
 800574e:	19c9      	adds	r1, r1, r7
 8005750:	7809      	ldrb	r1, [r1, #0]
 8005752:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005754:	193b      	adds	r3, r7, r4
 8005756:	781a      	ldrb	r2, [r3, #0]
 8005758:	193b      	adds	r3, r7, r4
 800575a:	3201      	adds	r2, #1
 800575c:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = isVariable;
 800575e:	193b      	adds	r3, r7, r4
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	197a      	adds	r2, r7, r5
 8005764:	2168      	movs	r1, #104	; 0x68
 8005766:	1809      	adds	r1, r1, r0
 8005768:	19c9      	adds	r1, r1, r7
 800576a:	7809      	ldrb	r1, [r1, #0]
 800576c:	54d1      	strb	r1, [r2, r3]
  indx++;
 800576e:	193b      	adds	r3, r7, r4
 8005770:	781a      	ldrb	r2, [r3, #0]
 8005772:	193b      	adds	r3, r7, r4
 8005774:	3201      	adds	r2, #1
 8005776:	701a      	strb	r2, [r3, #0]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005778:	2328      	movs	r3, #40	; 0x28
 800577a:	18fb      	adds	r3, r7, r3
 800577c:	2203      	movs	r2, #3
 800577e:	2100      	movs	r1, #0
 8005780:	0018      	movs	r0, r3
 8005782:	f000 ffb3 	bl	80066ec <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005786:	262c      	movs	r6, #44	; 0x2c
 8005788:	19bb      	adds	r3, r7, r6
 800578a:	2218      	movs	r2, #24
 800578c:	2100      	movs	r1, #0
 800578e:	0018      	movs	r0, r3
 8005790:	f000 ffac 	bl	80066ec <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005794:	0031      	movs	r1, r6
 8005796:	187b      	adds	r3, r7, r1
 8005798:	223f      	movs	r2, #63	; 0x3f
 800579a:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_ADD_CHAR;
 800579c:	187b      	adds	r3, r7, r1
 800579e:	2282      	movs	r2, #130	; 0x82
 80057a0:	0052      	lsls	r2, r2, #1
 80057a2:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 80057a4:	187b      	adds	r3, r7, r1
 80057a6:	197a      	adds	r2, r7, r5
 80057a8:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 80057aa:	193b      	adds	r3, r7, r4
 80057ac:	781a      	ldrb	r2, [r3, #0]
 80057ae:	187b      	adds	r3, r7, r1
 80057b0:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 80057b2:	187b      	adds	r3, r7, r1
 80057b4:	2228      	movs	r2, #40	; 0x28
 80057b6:	18ba      	adds	r2, r7, r2
 80057b8:	611a      	str	r2, [r3, #16]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 80057ba:	187b      	adds	r3, r7, r1
 80057bc:	2203      	movs	r2, #3
 80057be:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 80057c0:	187b      	adds	r3, r7, r1
 80057c2:	2100      	movs	r1, #0
 80057c4:	0018      	movs	r0, r3
 80057c6:	f000 fab1 	bl	8005d2c <hci_send_req>
 80057ca:	1e03      	subs	r3, r0, #0
 80057cc:	da01      	bge.n	80057d2 <aci_gatt_add_char+0x1a2>
    return BLE_STATUS_TIMEOUT;
 80057ce:	23ff      	movs	r3, #255	; 0xff
 80057d0:	e010      	b.n	80057f4 <aci_gatt_add_char+0x1c4>

  if (resp.status) {
 80057d2:	2228      	movs	r2, #40	; 0x28
 80057d4:	18bb      	adds	r3, r7, r2
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <aci_gatt_add_char+0x1b2>
    return resp.status;
 80057dc:	18bb      	adds	r3, r7, r2
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	e008      	b.n	80057f4 <aci_gatt_add_char+0x1c4>
  }
    
  *charHandle = btohs(resp.handle);
 80057e2:	2328      	movs	r3, #40	; 0x28
 80057e4:	18fb      	adds	r3, r7, r3
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	021b      	lsls	r3, r3, #8
 80057ea:	0c1b      	lsrs	r3, r3, #16
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057f0:	801a      	strh	r2, [r3, #0]

  return 0;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	0018      	movs	r0, r3
 80057f6:	46bd      	mov	sp, r7
 80057f8:	b013      	add	sp, #76	; 0x4c
 80057fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057fc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 80057fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057fe:	b0ab      	sub	sp, #172	; 0xac
 8005800:	af00      	add	r7, sp, #0
 8005802:	0005      	movs	r5, r0
 8005804:	000c      	movs	r4, r1
 8005806:	0010      	movs	r0, r2
 8005808:	0019      	movs	r1, r3
 800580a:	1dbb      	adds	r3, r7, #6
 800580c:	1c2a      	adds	r2, r5, #0
 800580e:	801a      	strh	r2, [r3, #0]
 8005810:	1d3b      	adds	r3, r7, #4
 8005812:	1c22      	adds	r2, r4, #0
 8005814:	801a      	strh	r2, [r3, #0]
 8005816:	1cfb      	adds	r3, r7, #3
 8005818:	1c02      	adds	r2, r0, #0
 800581a:	701a      	strb	r2, [r3, #0]
 800581c:	1cbb      	adds	r3, r7, #2
 800581e:	1c0a      	adds	r2, r1, #0
 8005820:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8005822:	23a7      	movs	r3, #167	; 0xa7
 8005824:	18fb      	adds	r3, r7, r3
 8005826:	2200      	movs	r2, #0
 8005828:	701a      	strb	r2, [r3, #0]
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800582a:	1cbb      	adds	r3, r7, #2
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b7a      	cmp	r3, #122	; 0x7a
 8005830:	d901      	bls.n	8005836 <aci_gatt_update_char_value+0x3a>
    return BLE_STATUS_INVALID_PARAMS;
 8005832:	2342      	movs	r3, #66	; 0x42
 8005834:	e082      	b.n	800593c <aci_gatt_update_char_value+0x140>

  servHandle = htobs(servHandle);
 8005836:	1dbb      	adds	r3, r7, #6
 8005838:	881a      	ldrh	r2, [r3, #0]
 800583a:	1dbb      	adds	r3, r7, #6
 800583c:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800583e:	24a7      	movs	r4, #167	; 0xa7
 8005840:	193b      	adds	r3, r7, r4
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2508      	movs	r5, #8
 8005846:	197a      	adds	r2, r7, r5
 8005848:	18d3      	adds	r3, r2, r3
 800584a:	1db9      	adds	r1, r7, #6
 800584c:	2202      	movs	r2, #2
 800584e:	0018      	movs	r0, r3
 8005850:	f000 ff43 	bl	80066da <memcpy>
  indx += 2;
 8005854:	0021      	movs	r1, r4
 8005856:	187b      	adds	r3, r7, r1
 8005858:	187a      	adds	r2, r7, r1
 800585a:	7812      	ldrb	r2, [r2, #0]
 800585c:	3202      	adds	r2, #2
 800585e:	701a      	strb	r2, [r3, #0]
    
  charHandle = htobs(charHandle);
 8005860:	1d3b      	adds	r3, r7, #4
 8005862:	881a      	ldrh	r2, [r3, #0]
 8005864:	1d3b      	adds	r3, r7, #4
 8005866:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8005868:	000c      	movs	r4, r1
 800586a:	187b      	adds	r3, r7, r1
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	002e      	movs	r6, r5
 8005870:	19ba      	adds	r2, r7, r6
 8005872:	18d3      	adds	r3, r2, r3
 8005874:	1d39      	adds	r1, r7, #4
 8005876:	2202      	movs	r2, #2
 8005878:	0018      	movs	r0, r3
 800587a:	f000 ff2e 	bl	80066da <memcpy>
  indx += 2;
 800587e:	193b      	adds	r3, r7, r4
 8005880:	193a      	adds	r2, r7, r4
 8005882:	7812      	ldrb	r2, [r2, #0]
 8005884:	3202      	adds	r2, #2
 8005886:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charValOffset;
 8005888:	193b      	adds	r3, r7, r4
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	19ba      	adds	r2, r7, r6
 800588e:	1cf9      	adds	r1, r7, #3
 8005890:	7809      	ldrb	r1, [r1, #0]
 8005892:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005894:	193b      	adds	r3, r7, r4
 8005896:	781a      	ldrb	r2, [r3, #0]
 8005898:	193b      	adds	r3, r7, r4
 800589a:	3201      	adds	r2, #1
 800589c:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charValueLen;
 800589e:	193b      	adds	r3, r7, r4
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	19ba      	adds	r2, r7, r6
 80058a4:	1cb9      	adds	r1, r7, #2
 80058a6:	7809      	ldrb	r1, [r1, #0]
 80058a8:	54d1      	strb	r1, [r2, r3]
  indx++;
 80058aa:	193b      	adds	r3, r7, r4
 80058ac:	781a      	ldrb	r2, [r3, #0]
 80058ae:	193b      	adds	r3, r7, r4
 80058b0:	3201      	adds	r2, #1
 80058b2:	701a      	strb	r2, [r3, #0]
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 80058b4:	193b      	adds	r3, r7, r4
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	19ba      	adds	r2, r7, r6
 80058ba:	18d0      	adds	r0, r2, r3
 80058bc:	1cbb      	adds	r3, r7, #2
 80058be:	781a      	ldrb	r2, [r3, #0]
 80058c0:	23b8      	movs	r3, #184	; 0xb8
 80058c2:	2108      	movs	r1, #8
 80058c4:	185b      	adds	r3, r3, r1
 80058c6:	19db      	adds	r3, r3, r7
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	0019      	movs	r1, r3
 80058cc:	f000 ff05 	bl	80066da <memcpy>
  indx +=  charValueLen;
 80058d0:	193b      	adds	r3, r7, r4
 80058d2:	1939      	adds	r1, r7, r4
 80058d4:	1cba      	adds	r2, r7, #2
 80058d6:	7809      	ldrb	r1, [r1, #0]
 80058d8:	7812      	ldrb	r2, [r2, #0]
 80058da:	188a      	adds	r2, r1, r2
 80058dc:	701a      	strb	r2, [r3, #0]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80058de:	258c      	movs	r5, #140	; 0x8c
 80058e0:	197b      	adds	r3, r7, r5
 80058e2:	2218      	movs	r2, #24
 80058e4:	2100      	movs	r1, #0
 80058e6:	0018      	movs	r0, r3
 80058e8:	f000 ff00 	bl	80066ec <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80058ec:	0029      	movs	r1, r5
 80058ee:	187b      	adds	r3, r7, r1
 80058f0:	223f      	movs	r2, #63	; 0x3f
 80058f2:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 80058f4:	187b      	adds	r3, r7, r1
 80058f6:	2283      	movs	r2, #131	; 0x83
 80058f8:	0052      	lsls	r2, r2, #1
 80058fa:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 80058fc:	187b      	adds	r3, r7, r1
 80058fe:	19ba      	adds	r2, r7, r6
 8005900:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 8005902:	193b      	adds	r3, r7, r4
 8005904:	781a      	ldrb	r2, [r3, #0]
 8005906:	187b      	adds	r3, r7, r1
 8005908:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 800590a:	187b      	adds	r3, r7, r1
 800590c:	228b      	movs	r2, #139	; 0x8b
 800590e:	18ba      	adds	r2, r7, r2
 8005910:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8005912:	187b      	adds	r3, r7, r1
 8005914:	2201      	movs	r2, #1
 8005916:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8005918:	187b      	adds	r3, r7, r1
 800591a:	2100      	movs	r1, #0
 800591c:	0018      	movs	r0, r3
 800591e:	f000 fa05 	bl	8005d2c <hci_send_req>
 8005922:	1e03      	subs	r3, r0, #0
 8005924:	da01      	bge.n	800592a <aci_gatt_update_char_value+0x12e>
    return BLE_STATUS_TIMEOUT;
 8005926:	23ff      	movs	r3, #255	; 0xff
 8005928:	e008      	b.n	800593c <aci_gatt_update_char_value+0x140>

  if (status) {
 800592a:	228b      	movs	r2, #139	; 0x8b
 800592c:	18bb      	adds	r3, r7, r2
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <aci_gatt_update_char_value+0x13e>
    return status;
 8005934:	18bb      	adds	r3, r7, r2
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	e000      	b.n	800593c <aci_gatt_update_char_value+0x140>
  }

  return 0;
 800593a:	2300      	movs	r3, #0
}
 800593c:	0018      	movs	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	b02b      	add	sp, #172	; 0xac
 8005942:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005944 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8005944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005946:	b0ab      	sub	sp, #172	; 0xac
 8005948:	af00      	add	r7, sp, #0
 800594a:	603a      	str	r2, [r7, #0]
 800594c:	1dfb      	adds	r3, r7, #7
 800594e:	1c02      	adds	r2, r0, #0
 8005950:	701a      	strb	r2, [r3, #0]
 8005952:	1dbb      	adds	r3, r7, #6
 8005954:	1c0a      	adds	r2, r1, #0
 8005956:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8005958:	23a7      	movs	r3, #167	; 0xa7
 800595a:	18fb      	adds	r3, r7, r3
 800595c:	2200      	movs	r2, #0
 800595e:	701a      	strb	r2, [r3, #0]
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8005960:	1dbb      	adds	r3, r7, #6
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b7e      	cmp	r3, #126	; 0x7e
 8005966:	d901      	bls.n	800596c <aci_hal_write_config_data+0x28>
    return BLE_STATUS_INVALID_PARAMS;
 8005968:	2342      	movs	r3, #66	; 0x42
 800596a:	e050      	b.n	8005a0e <aci_hal_write_config_data+0xca>

  buffer[indx] = offset;
 800596c:	24a7      	movs	r4, #167	; 0xa7
 800596e:	193b      	adds	r3, r7, r4
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2608      	movs	r6, #8
 8005974:	19ba      	adds	r2, r7, r6
 8005976:	1df9      	adds	r1, r7, #7
 8005978:	7809      	ldrb	r1, [r1, #0]
 800597a:	54d1      	strb	r1, [r2, r3]
  indx++;
 800597c:	193b      	adds	r3, r7, r4
 800597e:	781a      	ldrb	r2, [r3, #0]
 8005980:	193b      	adds	r3, r7, r4
 8005982:	3201      	adds	r2, #1
 8005984:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = len;
 8005986:	193b      	adds	r3, r7, r4
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	19ba      	adds	r2, r7, r6
 800598c:	1db9      	adds	r1, r7, #6
 800598e:	7809      	ldrb	r1, [r1, #0]
 8005990:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005992:	193b      	adds	r3, r7, r4
 8005994:	781a      	ldrb	r2, [r3, #0]
 8005996:	193b      	adds	r3, r7, r4
 8005998:	3201      	adds	r2, #1
 800599a:	701a      	strb	r2, [r3, #0]
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800599c:	193b      	adds	r3, r7, r4
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	19ba      	adds	r2, r7, r6
 80059a2:	18d0      	adds	r0, r2, r3
 80059a4:	1dbb      	adds	r3, r7, #6
 80059a6:	781a      	ldrb	r2, [r3, #0]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	0019      	movs	r1, r3
 80059ac:	f000 fe95 	bl	80066da <memcpy>
  indx +=  len;
 80059b0:	193b      	adds	r3, r7, r4
 80059b2:	1939      	adds	r1, r7, r4
 80059b4:	1dba      	adds	r2, r7, #6
 80059b6:	7809      	ldrb	r1, [r1, #0]
 80059b8:	7812      	ldrb	r2, [r2, #0]
 80059ba:	188a      	adds	r2, r1, r2
 80059bc:	701a      	strb	r2, [r3, #0]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80059be:	258c      	movs	r5, #140	; 0x8c
 80059c0:	197b      	adds	r3, r7, r5
 80059c2:	2218      	movs	r2, #24
 80059c4:	2100      	movs	r1, #0
 80059c6:	0018      	movs	r0, r3
 80059c8:	f000 fe90 	bl	80066ec <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80059cc:	0029      	movs	r1, r5
 80059ce:	187b      	adds	r3, r7, r1
 80059d0:	223f      	movs	r2, #63	; 0x3f
 80059d2:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 80059d4:	187b      	adds	r3, r7, r1
 80059d6:	220c      	movs	r2, #12
 80059d8:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 80059da:	187b      	adds	r3, r7, r1
 80059dc:	19ba      	adds	r2, r7, r6
 80059de:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 80059e0:	193b      	adds	r3, r7, r4
 80059e2:	781a      	ldrb	r2, [r3, #0]
 80059e4:	187b      	adds	r3, r7, r1
 80059e6:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 80059e8:	187b      	adds	r3, r7, r1
 80059ea:	228b      	movs	r2, #139	; 0x8b
 80059ec:	18ba      	adds	r2, r7, r2
 80059ee:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 80059f0:	187b      	adds	r3, r7, r1
 80059f2:	2201      	movs	r2, #1
 80059f4:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 80059f6:	187b      	adds	r3, r7, r1
 80059f8:	2100      	movs	r1, #0
 80059fa:	0018      	movs	r0, r3
 80059fc:	f000 f996 	bl	8005d2c <hci_send_req>
 8005a00:	1e03      	subs	r3, r0, #0
 8005a02:	da01      	bge.n	8005a08 <aci_hal_write_config_data+0xc4>
    return BLE_STATUS_TIMEOUT;
 8005a04:	23ff      	movs	r3, #255	; 0xff
 8005a06:	e002      	b.n	8005a0e <aci_hal_write_config_data+0xca>

  return status;
 8005a08:	238b      	movs	r3, #139	; 0x8b
 8005a0a:	18fb      	adds	r3, r7, r3
 8005a0c:	781b      	ldrb	r3, [r3, #0]
}
 8005a0e:	0018      	movs	r0, r3
 8005a10:	46bd      	mov	sp, r7
 8005a12:	b02b      	add	sp, #172	; 0xac
 8005a14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a16 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8005a16:	b590      	push	{r4, r7, lr}
 8005a18:	b089      	sub	sp, #36	; 0x24
 8005a1a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005a1c:	2408      	movs	r4, #8
 8005a1e:	193b      	adds	r3, r7, r4
 8005a20:	2218      	movs	r2, #24
 8005a22:	2100      	movs	r1, #0
 8005a24:	0018      	movs	r0, r3
 8005a26:	f000 fe61 	bl	80066ec <memset>
  rq.ogf = OGF_HOST_CTL;
 8005a2a:	0021      	movs	r1, r4
 8005a2c:	187b      	adds	r3, r7, r1
 8005a2e:	2203      	movs	r2, #3
 8005a30:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_RESET;
 8005a32:	187b      	adds	r3, r7, r1
 8005a34:	2203      	movs	r2, #3
 8005a36:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 8005a38:	187b      	adds	r3, r7, r1
 8005a3a:	1dfa      	adds	r2, r7, #7
 8005a3c:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8005a3e:	187b      	adds	r3, r7, r1
 8005a40:	2201      	movs	r2, #1
 8005a42:	615a      	str	r2, [r3, #20]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005a44:	187b      	adds	r3, r7, r1
 8005a46:	2100      	movs	r1, #0
 8005a48:	0018      	movs	r0, r3
 8005a4a:	f000 f96f 	bl	8005d2c <hci_send_req>
 8005a4e:	1e03      	subs	r3, r0, #0
 8005a50:	da01      	bge.n	8005a56 <hci_reset+0x40>
    return BLE_STATUS_TIMEOUT;
 8005a52:	23ff      	movs	r3, #255	; 0xff
 8005a54:	e001      	b.n	8005a5a <hci_reset+0x44>
  
  return status;  
 8005a56:	1dfb      	adds	r3, r7, #7
 8005a58:	781b      	ldrb	r3, [r3, #0]
}
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	b009      	add	sp, #36	; 0x24
 8005a60:	bd90      	pop	{r4, r7, pc}

08005a62 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8005a62:	b5b0      	push	{r4, r5, r7, lr}
 8005a64:	b092      	sub	sp, #72	; 0x48
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	0002      	movs	r2, r0
 8005a6a:	6039      	str	r1, [r7, #0]
 8005a6c:	1dfb      	adds	r3, r7, #7
 8005a6e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8005a70:	2410      	movs	r4, #16
 8005a72:	193b      	adds	r3, r7, r4
 8005a74:	2220      	movs	r2, #32
 8005a76:	2100      	movs	r1, #0
 8005a78:	0018      	movs	r0, r3
 8005a7a:	f000 fe37 	bl	80066ec <memset>
  scan_resp_cp.length = length;
 8005a7e:	193b      	adds	r3, r7, r4
 8005a80:	1dfa      	adds	r2, r7, #7
 8005a82:	7812      	ldrb	r2, [r2, #0]
 8005a84:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8005a86:	1dfb      	adds	r3, r7, #7
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	2a1f      	cmp	r2, #31
 8005a8e:	d900      	bls.n	8005a92 <hci_le_set_scan_resp_data+0x30>
 8005a90:	231f      	movs	r3, #31
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	001a      	movs	r2, r3
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	2510      	movs	r5, #16
 8005a9a:	197b      	adds	r3, r7, r5
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	f000 fe1b 	bl	80066da <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005aa4:	2430      	movs	r4, #48	; 0x30
 8005aa6:	193b      	adds	r3, r7, r4
 8005aa8:	2218      	movs	r2, #24
 8005aaa:	2100      	movs	r1, #0
 8005aac:	0018      	movs	r0, r3
 8005aae:	f000 fe1d 	bl	80066ec <memset>
  rq.ogf = OGF_LE_CTL;
 8005ab2:	0021      	movs	r1, r4
 8005ab4:	187b      	adds	r3, r7, r1
 8005ab6:	2208      	movs	r2, #8
 8005ab8:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8005aba:	187b      	adds	r3, r7, r1
 8005abc:	2209      	movs	r2, #9
 8005abe:	805a      	strh	r2, [r3, #2]
  rq.cparam = &scan_resp_cp;
 8005ac0:	187b      	adds	r3, r7, r1
 8005ac2:	197a      	adds	r2, r7, r5
 8005ac4:	609a      	str	r2, [r3, #8]
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8005ac6:	187b      	adds	r3, r7, r1
 8005ac8:	2220      	movs	r2, #32
 8005aca:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8005acc:	187b      	adds	r3, r7, r1
 8005ace:	220f      	movs	r2, #15
 8005ad0:	18ba      	adds	r2, r7, r2
 8005ad2:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8005ad4:	187b      	adds	r3, r7, r1
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	615a      	str	r2, [r3, #20]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005ada:	187b      	adds	r3, r7, r1
 8005adc:	2100      	movs	r1, #0
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f000 f924 	bl	8005d2c <hci_send_req>
 8005ae4:	1e03      	subs	r3, r0, #0
 8005ae6:	da01      	bge.n	8005aec <hci_le_set_scan_resp_data+0x8a>
    return BLE_STATUS_TIMEOUT;
 8005ae8:	23ff      	movs	r3, #255	; 0xff
 8005aea:	e002      	b.n	8005af2 <hci_le_set_scan_resp_data+0x90>
  
  return status;
 8005aec:	230f      	movs	r3, #15
 8005aee:	18fb      	adds	r3, r7, r3
 8005af0:	781b      	ldrb	r3, [r3, #0]
}
 8005af2:	0018      	movs	r0, r3
 8005af4:	46bd      	mov	sp, r7
 8005af6:	b012      	add	sp, #72	; 0x48
 8005af8:	bdb0      	pop	{r4, r5, r7, pc}

08005afa <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3308      	adds	r3, #8
 8005b06:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	d001      	beq.n	8005b14 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8005b10:	2301      	movs	r3, #1
 8005b12:	e00c      	b.n	8005b2e <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	3302      	adds	r3, #2
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	0019      	movs	r1, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2288      	movs	r2, #136	; 0x88
 8005b20:	5c9b      	ldrb	r3, [r3, r2]
 8005b22:	3b03      	subs	r3, #3
 8005b24:	4299      	cmp	r1, r3
 8005b26:	d001      	beq.n	8005b2c <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e000      	b.n	8005b2e <verify_packet+0x34>
  
  return 0;      
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	0018      	movs	r0, r3
 8005b30:	46bd      	mov	sp, r7
 8005b32:	b004      	add	sp, #16
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8005b38:	b5b0      	push	{r4, r5, r7, lr}
 8005b3a:	b0a6      	sub	sp, #152	; 0x98
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	0004      	movs	r4, r0
 8005b40:	0008      	movs	r0, r1
 8005b42:	0011      	movs	r1, r2
 8005b44:	607b      	str	r3, [r7, #4]
 8005b46:	250e      	movs	r5, #14
 8005b48:	197b      	adds	r3, r7, r5
 8005b4a:	1c22      	adds	r2, r4, #0
 8005b4c:	801a      	strh	r2, [r3, #0]
 8005b4e:	240c      	movs	r4, #12
 8005b50:	193b      	adds	r3, r7, r4
 8005b52:	1c02      	adds	r2, r0, #0
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	200b      	movs	r0, #11
 8005b58:	183b      	adds	r3, r7, r0
 8005b5a:	1c0a      	adds	r2, r1, #0
 8005b5c:	701a      	strb	r2, [r3, #0]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8005b5e:	193b      	adds	r3, r7, r4
 8005b60:	2200      	movs	r2, #0
 8005b62:	5e9b      	ldrsh	r3, [r3, r2]
 8005b64:	059b      	lsls	r3, r3, #22
 8005b66:	0d9b      	lsrs	r3, r3, #22
 8005b68:	b21a      	sxth	r2, r3
 8005b6a:	197b      	adds	r3, r7, r5
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	029b      	lsls	r3, r3, #10
 8005b70:	b21b      	sxth	r3, r3
 8005b72:	4313      	orrs	r3, r2
 8005b74:	b21b      	sxth	r3, r3
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	2114      	movs	r1, #20
 8005b7a:	187b      	adds	r3, r7, r1
 8005b7c:	801a      	strh	r2, [r3, #0]
  hc.plen = plen;
 8005b7e:	187b      	adds	r3, r7, r1
 8005b80:	0004      	movs	r4, r0
 8005b82:	183a      	adds	r2, r7, r0
 8005b84:	7812      	ldrb	r2, [r2, #0]
 8005b86:	709a      	strb	r2, [r3, #2]

  payload[0] = HCI_COMMAND_PKT;
 8005b88:	2518      	movs	r5, #24
 8005b8a:	197b      	adds	r3, r7, r5
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8005b90:	197b      	adds	r3, r7, r5
 8005b92:	3301      	adds	r3, #1
 8005b94:	187a      	adds	r2, r7, r1
 8005b96:	0018      	movs	r0, r3
 8005b98:	0011      	movs	r1, r2
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	001a      	movs	r2, r3
 8005b9e:	f000 fd9c 	bl	80066da <memcpy>
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8005ba2:	197b      	adds	r3, r7, r5
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	193a      	adds	r2, r7, r4
 8005ba8:	7812      	ldrb	r2, [r2, #0]
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f000 fd94 	bl	80066da <memcpy>
  
  if (hciContext.io.Send)
 8005bb2:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <send_cmd+0xa0>)
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <send_cmd+0x96>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8005bba:	4b07      	ldr	r3, [pc, #28]	; (8005bd8 <send_cmd+0xa0>)
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	193a      	adds	r2, r7, r4
 8005bc0:	7812      	ldrb	r2, [r2, #0]
 8005bc2:	b292      	uxth	r2, r2
 8005bc4:	3204      	adds	r2, #4
 8005bc6:	b291      	uxth	r1, r2
 8005bc8:	197a      	adds	r2, r7, r5
 8005bca:	0010      	movs	r0, r2
 8005bcc:	4798      	blx	r3
  }
}
 8005bce:	46c0      	nop			; (mov r8, r8)
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	b026      	add	sp, #152	; 0x98
 8005bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8005bd6:	46c0      	nop			; (mov r8, r8)
 8005bd8:	20000b68 	.word	0x20000b68

08005bdc <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8005be6:	e00c      	b.n	8005c02 <move_list+0x26>
  {
    list_remove_tail(src_list, &tmp_node);
 8005be8:	230c      	movs	r3, #12
 8005bea:	18fa      	adds	r2, r7, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	0011      	movs	r1, r2
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f000 fb13 	bl	800621c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	0011      	movs	r1, r2
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f000 fa7f 	bl	8006100 <list_insert_head>
  while (!list_is_empty(src_list))
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	0018      	movs	r0, r3
 8005c06:	f000 fa55 	bl	80060b4 <list_is_empty>
 8005c0a:	1e03      	subs	r3, r0, #0
 8005c0c:	d0ec      	beq.n	8005be8 <move_list+0xc>
  }
}
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	46c0      	nop			; (mov r8, r8)
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b004      	add	sp, #16
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005c1e:	e00b      	b.n	8005c38 <free_event_list+0x20>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8005c20:	1d3a      	adds	r2, r7, #4
 8005c22:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <free_event_list+0x38>)
 8005c24:	0011      	movs	r1, r2
 8005c26:	0018      	movs	r0, r3
 8005c28:	f000 fad1 	bl	80061ce <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	4b09      	ldr	r3, [pc, #36]	; (8005c54 <free_event_list+0x3c>)
 8005c30:	0011      	movs	r1, r2
 8005c32:	0018      	movs	r0, r3
 8005c34:	f000 fa88 	bl	8006148 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005c38:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <free_event_list+0x3c>)
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	f000 fb15 	bl	800626a <list_get_size>
 8005c40:	0003      	movs	r3, r0
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	ddec      	ble.n	8005c20 <free_event_list+0x8>
  }
}
 8005c46:	46c0      	nop			; (mov r8, r8)
 8005c48:	46c0      	nop			; (mov r8, r8)
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	b002      	add	sp, #8
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	200008a4 	.word	0x200008a4
 8005c54:	2000089c 	.word	0x2000089c

08005c58 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005c58:	b590      	push	{r4, r7, lr}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8005c68:	4b1d      	ldr	r3, [pc, #116]	; (8005ce0 <hci_init+0x88>)
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	61da      	str	r2, [r3, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8005c6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ce4 <hci_init+0x8c>)
 8005c70:	0018      	movs	r0, r3
 8005c72:	f000 fa11 	bl	8006098 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8005c76:	4b1c      	ldr	r3, [pc, #112]	; (8005ce8 <hci_init+0x90>)
 8005c78:	0018      	movs	r0, r3
 8005c7a:	f000 fa0d 	bl	8006098 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8005c7e:	f7fa fe59 	bl	8000934 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005c82:	230f      	movs	r3, #15
 8005c84:	18fb      	adds	r3, r7, r3
 8005c86:	2200      	movs	r2, #0
 8005c88:	701a      	strb	r2, [r3, #0]
 8005c8a:	e010      	b.n	8005cae <hci_init+0x56>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8005c8c:	240f      	movs	r4, #15
 8005c8e:	193b      	adds	r3, r7, r4
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	228c      	movs	r2, #140	; 0x8c
 8005c94:	435a      	muls	r2, r3
 8005c96:	4b15      	ldr	r3, [pc, #84]	; (8005cec <hci_init+0x94>)
 8005c98:	18d2      	adds	r2, r2, r3
 8005c9a:	4b12      	ldr	r3, [pc, #72]	; (8005ce4 <hci_init+0x8c>)
 8005c9c:	0011      	movs	r1, r2
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f000 fa52 	bl	8006148 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005ca4:	193b      	adds	r3, r7, r4
 8005ca6:	781a      	ldrb	r2, [r3, #0]
 8005ca8:	193b      	adds	r3, r7, r4
 8005caa:	3201      	adds	r2, #1
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	230f      	movs	r3, #15
 8005cb0:	18fb      	adds	r3, r7, r3
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d9e9      	bls.n	8005c8c <hci_init+0x34>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <hci_init+0x88>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <hci_init+0x70>
 8005cc0:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <hci_init+0x88>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8005cc8:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <hci_init+0x88>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <hci_init+0x7e>
 8005cd0:	4b03      	ldr	r3, [pc, #12]	; (8005ce0 <hci_init+0x88>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	4798      	blx	r3
}
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	b005      	add	sp, #20
 8005cdc:	bd90      	pop	{r4, r7, pc}
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	20000b68 	.word	0x20000b68
 8005ce4:	2000089c 	.word	0x2000089c
 8005ce8:	200008a4 	.word	0x200008a4
 8005cec:	200008ac 	.word	0x200008ac

08005cf0 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4b0a      	ldr	r3, [pc, #40]	; (8005d28 <hci_register_io_bus+0x38>)
 8005cfe:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	4b08      	ldr	r3, [pc, #32]	; (8005d28 <hci_register_io_bus+0x38>)
 8005d06:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <hci_register_io_bus+0x38>)
 8005d0e:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	699a      	ldr	r2, [r3, #24]
 8005d14:	4b04      	ldr	r3, [pc, #16]	; (8005d28 <hci_register_io_bus+0x38>)
 8005d16:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	4b02      	ldr	r3, [pc, #8]	; (8005d28 <hci_register_io_bus+0x38>)
 8005d1e:	609a      	str	r2, [r3, #8]
}
 8005d20:	46c0      	nop			; (mov r8, r8)
 8005d22:	46bd      	mov	sp, r7
 8005d24:	b002      	add	sp, #8
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20000b68 	.word	0x20000b68

08005d2c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08e      	sub	sp, #56	; 0x38
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	000a      	movs	r2, r1
 8005d36:	1cfb      	adds	r3, r7, #3
 8005d38:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	885b      	ldrh	r3, [r3, #2]
 8005d3e:	b21b      	sxth	r3, r3
 8005d40:	059b      	lsls	r3, r3, #22
 8005d42:	0d9b      	lsrs	r3, r3, #22
 8005d44:	b21a      	sxth	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	029b      	lsls	r3, r3, #10
 8005d4c:	b21b      	sxth	r3, r3
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	b21a      	sxth	r2, r3
 8005d52:	2336      	movs	r3, #54	; 0x36
 8005d54:	18fb      	adds	r3, r7, r3
 8005d56:	801a      	strh	r2, [r3, #0]
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8005d5c:	2308      	movs	r3, #8
 8005d5e:	18fb      	adds	r3, r7, r3
 8005d60:	0018      	movs	r0, r3
 8005d62:	f000 f999 	bl	8006098 <list_init_head>

  free_event_list();
 8005d66:	f7ff ff57 	bl	8005c18 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	8818      	ldrh	r0, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	8859      	ldrh	r1, [r3, #2]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f7ff fedc 	bl	8005b38 <send_cmd>
  
  if (async)
 8005d80:	1cfb      	adds	r3, r7, #3
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <hci_send_req+0x60>
  {
    return 0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	e0f8      	b.n	8005f7e <hci_send_req+0x252>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8005d8c:	f7fc f8b0 	bl	8001ef0 <HAL_GetTick>
 8005d90:	0003      	movs	r3, r0
 8005d92:	633b      	str	r3, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8005d94:	f7fc f8ac 	bl	8001ef0 <HAL_GetTick>
 8005d98:	0002      	movs	r2, r0
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	1ad2      	subs	r2, r2, r3
 8005d9e:	23fa      	movs	r3, #250	; 0xfa
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d900      	bls.n	8005da8 <hci_send_req+0x7c>
 8005da6:	e0c2      	b.n	8005f2e <hci_send_req+0x202>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8005da8:	4b77      	ldr	r3, [pc, #476]	; (8005f88 <hci_send_req+0x25c>)
 8005daa:	0018      	movs	r0, r3
 8005dac:	f000 f982 	bl	80060b4 <list_is_empty>
 8005db0:	1e03      	subs	r3, r0, #0
 8005db2:	d000      	beq.n	8005db6 <hci_send_req+0x8a>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8005db4:	e7ee      	b.n	8005d94 <hci_send_req+0x68>
      {
        break;
 8005db6:	46c0      	nop			; (mov r8, r8)
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8005db8:	2310      	movs	r3, #16
 8005dba:	18fa      	adds	r2, r7, r3
 8005dbc:	4b72      	ldr	r3, [pc, #456]	; (8005f88 <hci_send_req+0x25c>)
 8005dbe:	0011      	movs	r1, r2
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	f000 fa04 	bl	80061ce <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	3308      	adds	r3, #8
 8005dca:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8005dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	d000      	beq.n	8005dd6 <hci_send_req+0xaa>
 8005dd4:	e085      	b.n	8005ee2 <hci_send_req+0x1b6>
    {
      event_pckt = (void *)(hci_hdr->data);
 8005dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd8:	3301      	adds	r3, #1
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	3308      	adds	r3, #8
 8005de0:	3303      	adds	r3, #3
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2288      	movs	r2, #136	; 0x88
 8005de8:	5c9b      	ldrb	r3, [r3, r2]
 8005dea:	3b03      	subs	r3, #3
 8005dec:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b3e      	cmp	r3, #62	; 0x3e
 8005df4:	d057      	beq.n	8005ea6 <hci_send_req+0x17a>
 8005df6:	dd00      	ble.n	8005dfa <hci_send_req+0xce>
 8005df8:	e075      	b.n	8005ee6 <hci_send_req+0x1ba>
 8005dfa:	2b10      	cmp	r3, #16
 8005dfc:	d100      	bne.n	8005e00 <hci_send_req+0xd4>
 8005dfe:	e098      	b.n	8005f32 <hci_send_req+0x206>
 8005e00:	dd00      	ble.n	8005e04 <hci_send_req+0xd8>
 8005e02:	e070      	b.n	8005ee6 <hci_send_req+0x1ba>
 8005e04:	2b0e      	cmp	r3, #14
 8005e06:	d02a      	beq.n	8005e5e <hci_send_req+0x132>
 8005e08:	2b0f      	cmp	r3, #15
 8005e0a:	d000      	beq.n	8005e0e <hci_send_req+0xe2>
 8005e0c:	e06b      	b.n	8005ee6 <hci_send_req+0x1ba>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	789a      	ldrb	r2, [r3, #2]
 8005e16:	78db      	ldrb	r3, [r3, #3]
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2236      	movs	r2, #54	; 0x36
 8005e20:	18ba      	adds	r2, r7, r2
 8005e22:	8812      	ldrh	r2, [r2, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d000      	beq.n	8005e2a <hci_send_req+0xfe>
 8005e28:	e085      	b.n	8005f36 <hci_send_req+0x20a>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b0f      	cmp	r3, #15
 8005e30:	d004      	beq.n	8005e3c <hci_send_req+0x110>
          if (cs->status) {
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d057      	beq.n	8005eea <hci_send_req+0x1be>
            goto failed;
 8005e3a:	e07f      	b.n	8005f3c <hci_send_req+0x210>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	695a      	ldr	r2, [r3, #20]
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d900      	bls.n	8005e48 <hci_send_req+0x11c>
 8005e46:	0013      	movs	r3, r2
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6918      	ldr	r0, [r3, #16]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	695a      	ldr	r2, [r3, #20]
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	0019      	movs	r1, r3
 8005e58:	f000 fc3f 	bl	80066da <memcpy>
        goto done;
 8005e5c:	e081      	b.n	8005f62 <hci_send_req+0x236>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	785a      	ldrb	r2, [r3, #1]
 8005e66:	789b      	ldrb	r3, [r3, #2]
 8005e68:	021b      	lsls	r3, r3, #8
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2236      	movs	r2, #54	; 0x36
 8005e70:	18ba      	adds	r2, r7, r2
 8005e72:	8812      	ldrh	r2, [r2, #0]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d160      	bne.n	8005f3a <hci_send_req+0x20e>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	3303      	adds	r3, #3
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	3b03      	subs	r3, #3
 8005e82:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	695a      	ldr	r2, [r3, #20]
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d900      	bls.n	8005e90 <hci_send_req+0x164>
 8005e8e:	0013      	movs	r3, r2
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6918      	ldr	r0, [r3, #16]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	695a      	ldr	r2, [r3, #20]
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	0019      	movs	r1, r3
 8005ea0:	f000 fc1b 	bl	80066da <memcpy>
        goto done;
 8005ea4:	e05d      	b.n	8005f62 <hci_send_req+0x236>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	001a      	movs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d11a      	bne.n	8005eee <hci_send_req+0x1c2>
          break;
      
        len -= 1;
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	695a      	ldr	r2, [r3, #20]
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d900      	bls.n	8005eca <hci_send_req+0x19e>
 8005ec8:	0013      	movs	r3, r2
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6918      	ldr	r0, [r3, #16]
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	1c59      	adds	r1, r3, #1
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	001a      	movs	r2, r3
 8005edc:	f000 fbfd 	bl	80066da <memcpy>
        goto done;
 8005ee0:	e03f      	b.n	8005f62 <hci_send_req+0x236>
        goto failed;
      
      default:      
        break;
      }
    }
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	e004      	b.n	8005ef0 <hci_send_req+0x1c4>
        break;
 8005ee6:	46c0      	nop			; (mov r8, r8)
 8005ee8:	e002      	b.n	8005ef0 <hci_send_req+0x1c4>
          break;
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	e000      	b.n	8005ef0 <hci_send_req+0x1c4>
          break;
 8005eee:	46c0      	nop			; (mov r8, r8)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8005ef0:	4b26      	ldr	r3, [pc, #152]	; (8005f8c <hci_send_req+0x260>)
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f000 f8de 	bl	80060b4 <list_is_empty>
 8005ef8:	1e03      	subs	r3, r0, #0
 8005efa:	d00e      	beq.n	8005f1a <hci_send_req+0x1ee>
 8005efc:	4b22      	ldr	r3, [pc, #136]	; (8005f88 <hci_send_req+0x25c>)
 8005efe:	0018      	movs	r0, r3
 8005f00:	f000 f8d8 	bl	80060b4 <list_is_empty>
 8005f04:	1e03      	subs	r3, r0, #0
 8005f06:	d008      	beq.n	8005f1a <hci_send_req+0x1ee>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4b20      	ldr	r3, [pc, #128]	; (8005f8c <hci_send_req+0x260>)
 8005f0c:	0011      	movs	r1, r2
 8005f0e:	0018      	movs	r0, r3
 8005f10:	f000 f91a 	bl	8006148 <list_insert_tail>
      hciReadPacket=NULL;
 8005f14:	2300      	movs	r3, #0
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	e008      	b.n	8005f2c <hci_send_req+0x200>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	2308      	movs	r3, #8
 8005f1e:	18fb      	adds	r3, r7, r3
 8005f20:	0011      	movs	r1, r2
 8005f22:	0018      	movs	r0, r3
 8005f24:	f000 f910 	bl	8006148 <list_insert_tail>
      hciReadPacket=NULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	613b      	str	r3, [r7, #16]
  {
 8005f2c:	e72e      	b.n	8005d8c <hci_send_req+0x60>
        goto failed;
 8005f2e:	46c0      	nop			; (mov r8, r8)
 8005f30:	e004      	b.n	8005f3c <hci_send_req+0x210>
        goto failed;
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	e002      	b.n	8005f3c <hci_send_req+0x210>
          goto failed;
 8005f36:	46c0      	nop			; (mov r8, r8)
 8005f38:	e000      	b.n	8005f3c <hci_send_req+0x210>
          goto failed;
 8005f3a:	46c0      	nop			; (mov r8, r8)
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d005      	beq.n	8005f4e <hci_send_req+0x222>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4b11      	ldr	r3, [pc, #68]	; (8005f8c <hci_send_req+0x260>)
 8005f46:	0011      	movs	r1, r2
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f000 f8d9 	bl	8006100 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8005f4e:	2308      	movs	r3, #8
 8005f50:	18fa      	adds	r2, r7, r3
 8005f52:	4b0d      	ldr	r3, [pc, #52]	; (8005f88 <hci_send_req+0x25c>)
 8005f54:	0011      	movs	r1, r2
 8005f56:	0018      	movs	r0, r3
 8005f58:	f7ff fe40 	bl	8005bdc <move_list>

  return -1;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	425b      	negs	r3, r3
 8005f60:	e00d      	b.n	8005f7e <hci_send_req+0x252>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <hci_send_req+0x260>)
 8005f66:	0011      	movs	r1, r2
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f000 f8c9 	bl	8006100 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8005f6e:	2308      	movs	r3, #8
 8005f70:	18fa      	adds	r2, r7, r3
 8005f72:	4b05      	ldr	r3, [pc, #20]	; (8005f88 <hci_send_req+0x25c>)
 8005f74:	0011      	movs	r1, r2
 8005f76:	0018      	movs	r0, r3
 8005f78:	f7ff fe30 	bl	8005bdc <move_list>

  return 0;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	0018      	movs	r0, r3
 8005f80:	46bd      	mov	sp, r7
 8005f82:	b00e      	add	sp, #56	; 0x38
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	200008a4 	.word	0x200008a4
 8005f8c:	2000089c 	.word	0x2000089c

08005f90 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8005f9a:	e015      	b.n	8005fc8 <hci_user_evt_proc+0x38>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8005f9c:	1d3a      	adds	r2, r7, #4
 8005f9e:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <hci_user_evt_proc+0x50>)
 8005fa0:	0011      	movs	r1, r2
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f000 f913 	bl	80061ce <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8005fa8:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <hci_user_evt_proc+0x54>)
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d005      	beq.n	8005fbc <hci_user_evt_proc+0x2c>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8005fb0:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <hci_user_evt_proc+0x54>)
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	3208      	adds	r2, #8
 8005fb8:	0010      	movs	r0, r2
 8005fba:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <hci_user_evt_proc+0x58>)
 8005fc0:	0011      	movs	r1, r2
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f000 f8c0 	bl	8006148 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8005fc8:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <hci_user_evt_proc+0x50>)
 8005fca:	0018      	movs	r0, r3
 8005fcc:	f000 f872 	bl	80060b4 <list_is_empty>
 8005fd0:	1e03      	subs	r3, r0, #0
 8005fd2:	d0e3      	beq.n	8005f9c <hci_user_evt_proc+0xc>
  }
}
 8005fd4:	46c0      	nop			; (mov r8, r8)
 8005fd6:	46c0      	nop			; (mov r8, r8)
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	b002      	add	sp, #8
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	46c0      	nop			; (mov r8, r8)
 8005fe0:	200008a4 	.word	0x200008a4
 8005fe4:	20000b68 	.word	0x20000b68
 8005fe8:	2000089c 	.word	0x2000089c

08005fec <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8005ffc:	4b23      	ldr	r3, [pc, #140]	; (800608c <hci_notify_asynch_evt+0xa0>)
 8005ffe:	0018      	movs	r0, r3
 8006000:	f000 f858 	bl	80060b4 <list_is_empty>
 8006004:	1e03      	subs	r3, r0, #0
 8006006:	d13a      	bne.n	800607e <hci_notify_asynch_evt+0x92>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8006008:	230c      	movs	r3, #12
 800600a:	18fa      	adds	r2, r7, r3
 800600c:	4b1f      	ldr	r3, [pc, #124]	; (800608c <hci_notify_asynch_evt+0xa0>)
 800600e:	0011      	movs	r1, r2
 8006010:	0018      	movs	r0, r3
 8006012:	f000 f8dc 	bl	80061ce <list_remove_head>
    
    if (hciContext.io.Receive)
 8006016:	4b1e      	ldr	r3, [pc, #120]	; (8006090 <hci_notify_asynch_evt+0xa4>)
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d031      	beq.n	8006082 <hci_notify_asynch_evt+0x96>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800601e:	4b1c      	ldr	r3, [pc, #112]	; (8006090 <hci_notify_asynch_evt+0xa4>)
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	3208      	adds	r2, #8
 8006026:	2180      	movs	r1, #128	; 0x80
 8006028:	0010      	movs	r0, r2
 800602a:	4798      	blx	r3
 800602c:	0002      	movs	r2, r0
 800602e:	2113      	movs	r1, #19
 8006030:	187b      	adds	r3, r7, r1
 8006032:	701a      	strb	r2, [r3, #0]
      if (data_len > 0)
 8006034:	000a      	movs	r2, r1
 8006036:	18bb      	adds	r3, r7, r2
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d018      	beq.n	8006070 <hci_notify_asynch_evt+0x84>
      {                    
        hciReadPacket->data_len = data_len;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	18ba      	adds	r2, r7, r2
 8006042:	2188      	movs	r1, #136	; 0x88
 8006044:	7812      	ldrb	r2, [r2, #0]
 8006046:	545a      	strb	r2, [r3, r1]
        if (verify_packet(hciReadPacket) == 0)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	0018      	movs	r0, r3
 800604c:	f7ff fd55 	bl	8005afa <verify_packet>
 8006050:	1e03      	subs	r3, r0, #0
 8006052:	d106      	bne.n	8006062 <hci_notify_asynch_evt+0x76>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4b0f      	ldr	r3, [pc, #60]	; (8006094 <hci_notify_asynch_evt+0xa8>)
 8006058:	0011      	movs	r1, r2
 800605a:	0018      	movs	r0, r3
 800605c:	f000 f874 	bl	8006148 <list_insert_tail>
 8006060:	e00f      	b.n	8006082 <hci_notify_asynch_evt+0x96>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4b09      	ldr	r3, [pc, #36]	; (800608c <hci_notify_asynch_evt+0xa0>)
 8006066:	0011      	movs	r1, r2
 8006068:	0018      	movs	r0, r3
 800606a:	f000 f849 	bl	8006100 <list_insert_head>
 800606e:	e008      	b.n	8006082 <hci_notify_asynch_evt+0x96>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4b06      	ldr	r3, [pc, #24]	; (800608c <hci_notify_asynch_evt+0xa0>)
 8006074:	0011      	movs	r1, r2
 8006076:	0018      	movs	r0, r3
 8006078:	f000 f842 	bl	8006100 <list_insert_head>
 800607c:	e001      	b.n	8006082 <hci_notify_asynch_evt+0x96>
      }
    }
  }
  else 
  {
    ret = 1;
 800607e:	2301      	movs	r3, #1
 8006080:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8006082:	697b      	ldr	r3, [r7, #20]

}
 8006084:	0018      	movs	r0, r3
 8006086:	46bd      	mov	sp, r7
 8006088:	b006      	add	sp, #24
 800608a:	bd80      	pop	{r7, pc}
 800608c:	2000089c 	.word	0x2000089c
 8006090:	20000b68 	.word	0x20000b68
 8006094:	200008a4 	.word	0x200008a4

08006098 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	605a      	str	r2, [r3, #4]
}
 80060ac:	46c0      	nop			; (mov r8, r8)
 80060ae:	46bd      	mov	sp, r7
 80060b0:	b002      	add	sp, #8
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060bc:	f3ef 8310 	mrs	r3, PRIMASK
 80060c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80060c2:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80060c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80060c6:	b672      	cpsid	i
}
 80060c8:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d104      	bne.n	80060de <list_is_empty+0x2a>
  {
    return_value = 1;
 80060d4:	2317      	movs	r3, #23
 80060d6:	18fb      	adds	r3, r7, r3
 80060d8:	2201      	movs	r2, #1
 80060da:	701a      	strb	r2, [r3, #0]
 80060dc:	e003      	b.n	80060e6 <list_is_empty+0x32>
  }
  else
  {
    return_value = 0;
 80060de:	2317      	movs	r3, #23
 80060e0:	18fb      	adds	r3, r7, r3
 80060e2:	2200      	movs	r2, #0
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f383 8810 	msr	PRIMASK, r3
}
 80060f0:	46c0      	nop			; (mov r8, r8)
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80060f2:	2317      	movs	r3, #23
 80060f4:	18fb      	adds	r3, r7, r3
 80060f6:	781b      	ldrb	r3, [r3, #0]
}
 80060f8:	0018      	movs	r0, r3
 80060fa:	46bd      	mov	sp, r7
 80060fc:	b006      	add	sp, #24
 80060fe:	bd80      	pop	{r7, pc}

08006100 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800610a:	f3ef 8310 	mrs	r3, PRIMASK
 800610e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006110:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006112:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006114:	b672      	cpsid	i
}
 8006116:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	605a      	str	r2, [r3, #4]
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f383 8810 	msr	PRIMASK, r3
}
 800613e:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006140:	46c0      	nop			; (mov r8, r8)
 8006142:	46bd      	mov	sp, r7
 8006144:	b006      	add	sp, #24
 8006146:	bd80      	pop	{r7, pc}

08006148 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006152:	f3ef 8310 	mrs	r3, PRIMASK
 8006156:	60fb      	str	r3, [r7, #12]
  return(result);
 8006158:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800615a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800615c:	b672      	cpsid	i
}
 800615e:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f383 8810 	msr	PRIMASK, r3
}
 8006186:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006188:	46c0      	nop			; (mov r8, r8)
 800618a:	46bd      	mov	sp, r7
 800618c:	b006      	add	sp, #24
 800618e:	bd80      	pop	{r7, pc}

08006190 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006198:	f3ef 8310 	mrs	r3, PRIMASK
 800619c:	60fb      	str	r3, [r7, #12]
  return(result);
 800619e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80061a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80061a2:	b672      	cpsid	i
}
 80061a4:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6812      	ldr	r2, [r2, #0]
 80061ae:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6852      	ldr	r2, [r2, #4]
 80061b8:	605a      	str	r2, [r3, #4]
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f383 8810 	msr	PRIMASK, r3
}
 80061c4:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	46bd      	mov	sp, r7
 80061ca:	b006      	add	sp, #24
 80061cc:	bd80      	pop	{r7, pc}

080061ce <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b086      	sub	sp, #24
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061d8:	f3ef 8310 	mrs	r3, PRIMASK
 80061dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80061de:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80061e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80061e2:	b672      	cpsid	i
}
 80061e4:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	0018      	movs	r0, r3
 80061f4:	f7ff ffcc 	bl	8006190 <list_remove_node>
  (*node)->next = NULL;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2200      	movs	r2, #0
 80061fe:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2200      	movs	r2, #0
 8006206:	605a      	str	r2, [r3, #4]
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f383 8810 	msr	PRIMASK, r3
}
 8006212:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006214:	46c0      	nop			; (mov r8, r8)
 8006216:	46bd      	mov	sp, r7
 8006218:	b006      	add	sp, #24
 800621a:	bd80      	pop	{r7, pc}

0800621c <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006226:	f3ef 8310 	mrs	r3, PRIMASK
 800622a:	60fb      	str	r3, [r7, #12]
  return(result);
 800622c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800622e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006230:	b672      	cpsid	i
}
 8006232:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	0018      	movs	r0, r3
 8006242:	f7ff ffa5 	bl	8006190 <list_remove_node>
  (*node)->next = NULL;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2200      	movs	r2, #0
 8006254:	605a      	str	r2, [r3, #4]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f383 8810 	msr	PRIMASK, r3
}
 8006260:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006262:	46c0      	nop			; (mov r8, r8)
 8006264:	46bd      	mov	sp, r7
 8006266:	b006      	add	sp, #24
 8006268:	bd80      	pop	{r7, pc}

0800626a <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b088      	sub	sp, #32
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  int size = 0;
 8006272:	2300      	movs	r3, #0
 8006274:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006276:	f3ef 8310 	mrs	r3, PRIMASK
 800627a:	613b      	str	r3, [r7, #16]
  return(result);
 800627c:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800627e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006280:	b672      	cpsid	i
}
 8006282:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800628a:	e005      	b.n	8006298 <list_get_size+0x2e>
  {
    size++;
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	3301      	adds	r3, #1
 8006290:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	429a      	cmp	r2, r3
 800629e:	d1f5      	bne.n	800628c <list_get_size+0x22>
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f383 8810 	msr	PRIMASK, r3
}
 80062aa:	46c0      	nop			; (mov r8, r8)
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80062ac:	69fb      	ldr	r3, [r7, #28]
}
 80062ae:	0018      	movs	r0, r3
 80062b0:	46bd      	mov	sp, r7
 80062b2:	b008      	add	sp, #32
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <__errno>:
 80062b8:	4b01      	ldr	r3, [pc, #4]	; (80062c0 <__errno+0x8>)
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	4770      	bx	lr
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	20000050 	.word	0x20000050

080062c4 <__sflush_r>:
 80062c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062c6:	898b      	ldrh	r3, [r1, #12]
 80062c8:	0005      	movs	r5, r0
 80062ca:	000c      	movs	r4, r1
 80062cc:	071a      	lsls	r2, r3, #28
 80062ce:	d45f      	bmi.n	8006390 <__sflush_r+0xcc>
 80062d0:	684a      	ldr	r2, [r1, #4]
 80062d2:	2a00      	cmp	r2, #0
 80062d4:	dc04      	bgt.n	80062e0 <__sflush_r+0x1c>
 80062d6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80062d8:	2a00      	cmp	r2, #0
 80062da:	dc01      	bgt.n	80062e0 <__sflush_r+0x1c>
 80062dc:	2000      	movs	r0, #0
 80062de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80062e2:	2f00      	cmp	r7, #0
 80062e4:	d0fa      	beq.n	80062dc <__sflush_r+0x18>
 80062e6:	2200      	movs	r2, #0
 80062e8:	2180      	movs	r1, #128	; 0x80
 80062ea:	682e      	ldr	r6, [r5, #0]
 80062ec:	602a      	str	r2, [r5, #0]
 80062ee:	001a      	movs	r2, r3
 80062f0:	0149      	lsls	r1, r1, #5
 80062f2:	400a      	ands	r2, r1
 80062f4:	420b      	tst	r3, r1
 80062f6:	d034      	beq.n	8006362 <__sflush_r+0x9e>
 80062f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	075b      	lsls	r3, r3, #29
 80062fe:	d506      	bpl.n	800630e <__sflush_r+0x4a>
 8006300:	6863      	ldr	r3, [r4, #4]
 8006302:	1ac0      	subs	r0, r0, r3
 8006304:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <__sflush_r+0x4a>
 800630a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800630c:	1ac0      	subs	r0, r0, r3
 800630e:	0002      	movs	r2, r0
 8006310:	6a21      	ldr	r1, [r4, #32]
 8006312:	2300      	movs	r3, #0
 8006314:	0028      	movs	r0, r5
 8006316:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006318:	47b8      	blx	r7
 800631a:	89a1      	ldrh	r1, [r4, #12]
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	d106      	bne.n	800632e <__sflush_r+0x6a>
 8006320:	682b      	ldr	r3, [r5, #0]
 8006322:	2b1d      	cmp	r3, #29
 8006324:	d831      	bhi.n	800638a <__sflush_r+0xc6>
 8006326:	4a2c      	ldr	r2, [pc, #176]	; (80063d8 <__sflush_r+0x114>)
 8006328:	40da      	lsrs	r2, r3
 800632a:	07d3      	lsls	r3, r2, #31
 800632c:	d52d      	bpl.n	800638a <__sflush_r+0xc6>
 800632e:	2300      	movs	r3, #0
 8006330:	6063      	str	r3, [r4, #4]
 8006332:	6923      	ldr	r3, [r4, #16]
 8006334:	6023      	str	r3, [r4, #0]
 8006336:	04cb      	lsls	r3, r1, #19
 8006338:	d505      	bpl.n	8006346 <__sflush_r+0x82>
 800633a:	1c43      	adds	r3, r0, #1
 800633c:	d102      	bne.n	8006344 <__sflush_r+0x80>
 800633e:	682b      	ldr	r3, [r5, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d100      	bne.n	8006346 <__sflush_r+0x82>
 8006344:	6560      	str	r0, [r4, #84]	; 0x54
 8006346:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006348:	602e      	str	r6, [r5, #0]
 800634a:	2900      	cmp	r1, #0
 800634c:	d0c6      	beq.n	80062dc <__sflush_r+0x18>
 800634e:	0023      	movs	r3, r4
 8006350:	3344      	adds	r3, #68	; 0x44
 8006352:	4299      	cmp	r1, r3
 8006354:	d002      	beq.n	800635c <__sflush_r+0x98>
 8006356:	0028      	movs	r0, r5
 8006358:	f000 f9d0 	bl	80066fc <_free_r>
 800635c:	2000      	movs	r0, #0
 800635e:	6360      	str	r0, [r4, #52]	; 0x34
 8006360:	e7bd      	b.n	80062de <__sflush_r+0x1a>
 8006362:	2301      	movs	r3, #1
 8006364:	0028      	movs	r0, r5
 8006366:	6a21      	ldr	r1, [r4, #32]
 8006368:	47b8      	blx	r7
 800636a:	1c43      	adds	r3, r0, #1
 800636c:	d1c5      	bne.n	80062fa <__sflush_r+0x36>
 800636e:	682b      	ldr	r3, [r5, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0c2      	beq.n	80062fa <__sflush_r+0x36>
 8006374:	2b1d      	cmp	r3, #29
 8006376:	d001      	beq.n	800637c <__sflush_r+0xb8>
 8006378:	2b16      	cmp	r3, #22
 800637a:	d101      	bne.n	8006380 <__sflush_r+0xbc>
 800637c:	602e      	str	r6, [r5, #0]
 800637e:	e7ad      	b.n	80062dc <__sflush_r+0x18>
 8006380:	2340      	movs	r3, #64	; 0x40
 8006382:	89a2      	ldrh	r2, [r4, #12]
 8006384:	4313      	orrs	r3, r2
 8006386:	81a3      	strh	r3, [r4, #12]
 8006388:	e7a9      	b.n	80062de <__sflush_r+0x1a>
 800638a:	2340      	movs	r3, #64	; 0x40
 800638c:	430b      	orrs	r3, r1
 800638e:	e7fa      	b.n	8006386 <__sflush_r+0xc2>
 8006390:	690f      	ldr	r7, [r1, #16]
 8006392:	2f00      	cmp	r7, #0
 8006394:	d0a2      	beq.n	80062dc <__sflush_r+0x18>
 8006396:	680a      	ldr	r2, [r1, #0]
 8006398:	600f      	str	r7, [r1, #0]
 800639a:	1bd2      	subs	r2, r2, r7
 800639c:	9201      	str	r2, [sp, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	079b      	lsls	r3, r3, #30
 80063a2:	d100      	bne.n	80063a6 <__sflush_r+0xe2>
 80063a4:	694a      	ldr	r2, [r1, #20]
 80063a6:	60a2      	str	r2, [r4, #8]
 80063a8:	9b01      	ldr	r3, [sp, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	dc00      	bgt.n	80063b0 <__sflush_r+0xec>
 80063ae:	e795      	b.n	80062dc <__sflush_r+0x18>
 80063b0:	003a      	movs	r2, r7
 80063b2:	0028      	movs	r0, r5
 80063b4:	9b01      	ldr	r3, [sp, #4]
 80063b6:	6a21      	ldr	r1, [r4, #32]
 80063b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063ba:	47b0      	blx	r6
 80063bc:	2800      	cmp	r0, #0
 80063be:	dc06      	bgt.n	80063ce <__sflush_r+0x10a>
 80063c0:	2340      	movs	r3, #64	; 0x40
 80063c2:	2001      	movs	r0, #1
 80063c4:	89a2      	ldrh	r2, [r4, #12]
 80063c6:	4240      	negs	r0, r0
 80063c8:	4313      	orrs	r3, r2
 80063ca:	81a3      	strh	r3, [r4, #12]
 80063cc:	e787      	b.n	80062de <__sflush_r+0x1a>
 80063ce:	9b01      	ldr	r3, [sp, #4]
 80063d0:	183f      	adds	r7, r7, r0
 80063d2:	1a1b      	subs	r3, r3, r0
 80063d4:	9301      	str	r3, [sp, #4]
 80063d6:	e7e7      	b.n	80063a8 <__sflush_r+0xe4>
 80063d8:	20400001 	.word	0x20400001

080063dc <_fflush_r>:
 80063dc:	690b      	ldr	r3, [r1, #16]
 80063de:	b570      	push	{r4, r5, r6, lr}
 80063e0:	0005      	movs	r5, r0
 80063e2:	000c      	movs	r4, r1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d102      	bne.n	80063ee <_fflush_r+0x12>
 80063e8:	2500      	movs	r5, #0
 80063ea:	0028      	movs	r0, r5
 80063ec:	bd70      	pop	{r4, r5, r6, pc}
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d004      	beq.n	80063fc <_fflush_r+0x20>
 80063f2:	6983      	ldr	r3, [r0, #24]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <_fflush_r+0x20>
 80063f8:	f000 f8a8 	bl	800654c <__sinit>
 80063fc:	4b14      	ldr	r3, [pc, #80]	; (8006450 <_fflush_r+0x74>)
 80063fe:	429c      	cmp	r4, r3
 8006400:	d11b      	bne.n	800643a <_fflush_r+0x5e>
 8006402:	686c      	ldr	r4, [r5, #4]
 8006404:	220c      	movs	r2, #12
 8006406:	5ea3      	ldrsh	r3, [r4, r2]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d0ed      	beq.n	80063e8 <_fflush_r+0xc>
 800640c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800640e:	07d2      	lsls	r2, r2, #31
 8006410:	d404      	bmi.n	800641c <_fflush_r+0x40>
 8006412:	059b      	lsls	r3, r3, #22
 8006414:	d402      	bmi.n	800641c <_fflush_r+0x40>
 8006416:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006418:	f000 f95d 	bl	80066d6 <__retarget_lock_acquire_recursive>
 800641c:	0028      	movs	r0, r5
 800641e:	0021      	movs	r1, r4
 8006420:	f7ff ff50 	bl	80062c4 <__sflush_r>
 8006424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006426:	0005      	movs	r5, r0
 8006428:	07db      	lsls	r3, r3, #31
 800642a:	d4de      	bmi.n	80063ea <_fflush_r+0xe>
 800642c:	89a3      	ldrh	r3, [r4, #12]
 800642e:	059b      	lsls	r3, r3, #22
 8006430:	d4db      	bmi.n	80063ea <_fflush_r+0xe>
 8006432:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006434:	f000 f950 	bl	80066d8 <__retarget_lock_release_recursive>
 8006438:	e7d7      	b.n	80063ea <_fflush_r+0xe>
 800643a:	4b06      	ldr	r3, [pc, #24]	; (8006454 <_fflush_r+0x78>)
 800643c:	429c      	cmp	r4, r3
 800643e:	d101      	bne.n	8006444 <_fflush_r+0x68>
 8006440:	68ac      	ldr	r4, [r5, #8]
 8006442:	e7df      	b.n	8006404 <_fflush_r+0x28>
 8006444:	4b04      	ldr	r3, [pc, #16]	; (8006458 <_fflush_r+0x7c>)
 8006446:	429c      	cmp	r4, r3
 8006448:	d1dc      	bne.n	8006404 <_fflush_r+0x28>
 800644a:	68ec      	ldr	r4, [r5, #12]
 800644c:	e7da      	b.n	8006404 <_fflush_r+0x28>
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	080076f4 	.word	0x080076f4
 8006454:	08007714 	.word	0x08007714
 8006458:	080076d4 	.word	0x080076d4

0800645c <fflush>:
 800645c:	0001      	movs	r1, r0
 800645e:	b510      	push	{r4, lr}
 8006460:	2800      	cmp	r0, #0
 8006462:	d105      	bne.n	8006470 <fflush+0x14>
 8006464:	4b05      	ldr	r3, [pc, #20]	; (800647c <fflush+0x20>)
 8006466:	4906      	ldr	r1, [pc, #24]	; (8006480 <fflush+0x24>)
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	f000 f8ef 	bl	800664c <_fwalk_reent>
 800646e:	bd10      	pop	{r4, pc}
 8006470:	4b04      	ldr	r3, [pc, #16]	; (8006484 <fflush+0x28>)
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	f7ff ffb2 	bl	80063dc <_fflush_r>
 8006478:	e7f9      	b.n	800646e <fflush+0x12>
 800647a:	46c0      	nop			; (mov r8, r8)
 800647c:	08007734 	.word	0x08007734
 8006480:	080063dd 	.word	0x080063dd
 8006484:	20000050 	.word	0x20000050

08006488 <std>:
 8006488:	2300      	movs	r3, #0
 800648a:	b510      	push	{r4, lr}
 800648c:	0004      	movs	r4, r0
 800648e:	6003      	str	r3, [r0, #0]
 8006490:	6043      	str	r3, [r0, #4]
 8006492:	6083      	str	r3, [r0, #8]
 8006494:	8181      	strh	r1, [r0, #12]
 8006496:	6643      	str	r3, [r0, #100]	; 0x64
 8006498:	0019      	movs	r1, r3
 800649a:	81c2      	strh	r2, [r0, #14]
 800649c:	6103      	str	r3, [r0, #16]
 800649e:	6143      	str	r3, [r0, #20]
 80064a0:	6183      	str	r3, [r0, #24]
 80064a2:	2208      	movs	r2, #8
 80064a4:	305c      	adds	r0, #92	; 0x5c
 80064a6:	f000 f921 	bl	80066ec <memset>
 80064aa:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <std+0x38>)
 80064ac:	6224      	str	r4, [r4, #32]
 80064ae:	6263      	str	r3, [r4, #36]	; 0x24
 80064b0:	4b04      	ldr	r3, [pc, #16]	; (80064c4 <std+0x3c>)
 80064b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80064b4:	4b04      	ldr	r3, [pc, #16]	; (80064c8 <std+0x40>)
 80064b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064b8:	4b04      	ldr	r3, [pc, #16]	; (80064cc <std+0x44>)
 80064ba:	6323      	str	r3, [r4, #48]	; 0x30
 80064bc:	bd10      	pop	{r4, pc}
 80064be:	46c0      	nop			; (mov r8, r8)
 80064c0:	08006919 	.word	0x08006919
 80064c4:	08006941 	.word	0x08006941
 80064c8:	08006979 	.word	0x08006979
 80064cc:	080069a5 	.word	0x080069a5

080064d0 <_cleanup_r>:
 80064d0:	b510      	push	{r4, lr}
 80064d2:	4902      	ldr	r1, [pc, #8]	; (80064dc <_cleanup_r+0xc>)
 80064d4:	f000 f8ba 	bl	800664c <_fwalk_reent>
 80064d8:	bd10      	pop	{r4, pc}
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	080063dd 	.word	0x080063dd

080064e0 <__sfmoreglue>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	2568      	movs	r5, #104	; 0x68
 80064e4:	1e4a      	subs	r2, r1, #1
 80064e6:	4355      	muls	r5, r2
 80064e8:	000e      	movs	r6, r1
 80064ea:	0029      	movs	r1, r5
 80064ec:	3174      	adds	r1, #116	; 0x74
 80064ee:	f000 f971 	bl	80067d4 <_malloc_r>
 80064f2:	1e04      	subs	r4, r0, #0
 80064f4:	d008      	beq.n	8006508 <__sfmoreglue+0x28>
 80064f6:	2100      	movs	r1, #0
 80064f8:	002a      	movs	r2, r5
 80064fa:	6001      	str	r1, [r0, #0]
 80064fc:	6046      	str	r6, [r0, #4]
 80064fe:	300c      	adds	r0, #12
 8006500:	60a0      	str	r0, [r4, #8]
 8006502:	3268      	adds	r2, #104	; 0x68
 8006504:	f000 f8f2 	bl	80066ec <memset>
 8006508:	0020      	movs	r0, r4
 800650a:	bd70      	pop	{r4, r5, r6, pc}

0800650c <__sfp_lock_acquire>:
 800650c:	b510      	push	{r4, lr}
 800650e:	4802      	ldr	r0, [pc, #8]	; (8006518 <__sfp_lock_acquire+0xc>)
 8006510:	f000 f8e1 	bl	80066d6 <__retarget_lock_acquire_recursive>
 8006514:	bd10      	pop	{r4, pc}
 8006516:	46c0      	nop			; (mov r8, r8)
 8006518:	20000b89 	.word	0x20000b89

0800651c <__sfp_lock_release>:
 800651c:	b510      	push	{r4, lr}
 800651e:	4802      	ldr	r0, [pc, #8]	; (8006528 <__sfp_lock_release+0xc>)
 8006520:	f000 f8da 	bl	80066d8 <__retarget_lock_release_recursive>
 8006524:	bd10      	pop	{r4, pc}
 8006526:	46c0      	nop			; (mov r8, r8)
 8006528:	20000b89 	.word	0x20000b89

0800652c <__sinit_lock_acquire>:
 800652c:	b510      	push	{r4, lr}
 800652e:	4802      	ldr	r0, [pc, #8]	; (8006538 <__sinit_lock_acquire+0xc>)
 8006530:	f000 f8d1 	bl	80066d6 <__retarget_lock_acquire_recursive>
 8006534:	bd10      	pop	{r4, pc}
 8006536:	46c0      	nop			; (mov r8, r8)
 8006538:	20000b8a 	.word	0x20000b8a

0800653c <__sinit_lock_release>:
 800653c:	b510      	push	{r4, lr}
 800653e:	4802      	ldr	r0, [pc, #8]	; (8006548 <__sinit_lock_release+0xc>)
 8006540:	f000 f8ca 	bl	80066d8 <__retarget_lock_release_recursive>
 8006544:	bd10      	pop	{r4, pc}
 8006546:	46c0      	nop			; (mov r8, r8)
 8006548:	20000b8a 	.word	0x20000b8a

0800654c <__sinit>:
 800654c:	b513      	push	{r0, r1, r4, lr}
 800654e:	0004      	movs	r4, r0
 8006550:	f7ff ffec 	bl	800652c <__sinit_lock_acquire>
 8006554:	69a3      	ldr	r3, [r4, #24]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <__sinit+0x14>
 800655a:	f7ff ffef 	bl	800653c <__sinit_lock_release>
 800655e:	bd13      	pop	{r0, r1, r4, pc}
 8006560:	64a3      	str	r3, [r4, #72]	; 0x48
 8006562:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006564:	6523      	str	r3, [r4, #80]	; 0x50
 8006566:	4b13      	ldr	r3, [pc, #76]	; (80065b4 <__sinit+0x68>)
 8006568:	4a13      	ldr	r2, [pc, #76]	; (80065b8 <__sinit+0x6c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	62a2      	str	r2, [r4, #40]	; 0x28
 800656e:	9301      	str	r3, [sp, #4]
 8006570:	42a3      	cmp	r3, r4
 8006572:	d101      	bne.n	8006578 <__sinit+0x2c>
 8006574:	2301      	movs	r3, #1
 8006576:	61a3      	str	r3, [r4, #24]
 8006578:	0020      	movs	r0, r4
 800657a:	f000 f81f 	bl	80065bc <__sfp>
 800657e:	6060      	str	r0, [r4, #4]
 8006580:	0020      	movs	r0, r4
 8006582:	f000 f81b 	bl	80065bc <__sfp>
 8006586:	60a0      	str	r0, [r4, #8]
 8006588:	0020      	movs	r0, r4
 800658a:	f000 f817 	bl	80065bc <__sfp>
 800658e:	2200      	movs	r2, #0
 8006590:	2104      	movs	r1, #4
 8006592:	60e0      	str	r0, [r4, #12]
 8006594:	6860      	ldr	r0, [r4, #4]
 8006596:	f7ff ff77 	bl	8006488 <std>
 800659a:	2201      	movs	r2, #1
 800659c:	2109      	movs	r1, #9
 800659e:	68a0      	ldr	r0, [r4, #8]
 80065a0:	f7ff ff72 	bl	8006488 <std>
 80065a4:	2202      	movs	r2, #2
 80065a6:	2112      	movs	r1, #18
 80065a8:	68e0      	ldr	r0, [r4, #12]
 80065aa:	f7ff ff6d 	bl	8006488 <std>
 80065ae:	2301      	movs	r3, #1
 80065b0:	61a3      	str	r3, [r4, #24]
 80065b2:	e7d2      	b.n	800655a <__sinit+0xe>
 80065b4:	08007734 	.word	0x08007734
 80065b8:	080064d1 	.word	0x080064d1

080065bc <__sfp>:
 80065bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065be:	0007      	movs	r7, r0
 80065c0:	f7ff ffa4 	bl	800650c <__sfp_lock_acquire>
 80065c4:	4b1f      	ldr	r3, [pc, #124]	; (8006644 <__sfp+0x88>)
 80065c6:	681e      	ldr	r6, [r3, #0]
 80065c8:	69b3      	ldr	r3, [r6, #24]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d102      	bne.n	80065d4 <__sfp+0x18>
 80065ce:	0030      	movs	r0, r6
 80065d0:	f7ff ffbc 	bl	800654c <__sinit>
 80065d4:	3648      	adds	r6, #72	; 0x48
 80065d6:	68b4      	ldr	r4, [r6, #8]
 80065d8:	6873      	ldr	r3, [r6, #4]
 80065da:	3b01      	subs	r3, #1
 80065dc:	d504      	bpl.n	80065e8 <__sfp+0x2c>
 80065de:	6833      	ldr	r3, [r6, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d022      	beq.n	800662a <__sfp+0x6e>
 80065e4:	6836      	ldr	r6, [r6, #0]
 80065e6:	e7f6      	b.n	80065d6 <__sfp+0x1a>
 80065e8:	220c      	movs	r2, #12
 80065ea:	5ea5      	ldrsh	r5, [r4, r2]
 80065ec:	2d00      	cmp	r5, #0
 80065ee:	d11a      	bne.n	8006626 <__sfp+0x6a>
 80065f0:	0020      	movs	r0, r4
 80065f2:	4b15      	ldr	r3, [pc, #84]	; (8006648 <__sfp+0x8c>)
 80065f4:	3058      	adds	r0, #88	; 0x58
 80065f6:	60e3      	str	r3, [r4, #12]
 80065f8:	6665      	str	r5, [r4, #100]	; 0x64
 80065fa:	f000 f86b 	bl	80066d4 <__retarget_lock_init_recursive>
 80065fe:	f7ff ff8d 	bl	800651c <__sfp_lock_release>
 8006602:	0020      	movs	r0, r4
 8006604:	2208      	movs	r2, #8
 8006606:	0029      	movs	r1, r5
 8006608:	6025      	str	r5, [r4, #0]
 800660a:	60a5      	str	r5, [r4, #8]
 800660c:	6065      	str	r5, [r4, #4]
 800660e:	6125      	str	r5, [r4, #16]
 8006610:	6165      	str	r5, [r4, #20]
 8006612:	61a5      	str	r5, [r4, #24]
 8006614:	305c      	adds	r0, #92	; 0x5c
 8006616:	f000 f869 	bl	80066ec <memset>
 800661a:	6365      	str	r5, [r4, #52]	; 0x34
 800661c:	63a5      	str	r5, [r4, #56]	; 0x38
 800661e:	64a5      	str	r5, [r4, #72]	; 0x48
 8006620:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006622:	0020      	movs	r0, r4
 8006624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006626:	3468      	adds	r4, #104	; 0x68
 8006628:	e7d7      	b.n	80065da <__sfp+0x1e>
 800662a:	2104      	movs	r1, #4
 800662c:	0038      	movs	r0, r7
 800662e:	f7ff ff57 	bl	80064e0 <__sfmoreglue>
 8006632:	1e04      	subs	r4, r0, #0
 8006634:	6030      	str	r0, [r6, #0]
 8006636:	d1d5      	bne.n	80065e4 <__sfp+0x28>
 8006638:	f7ff ff70 	bl	800651c <__sfp_lock_release>
 800663c:	230c      	movs	r3, #12
 800663e:	603b      	str	r3, [r7, #0]
 8006640:	e7ef      	b.n	8006622 <__sfp+0x66>
 8006642:	46c0      	nop			; (mov r8, r8)
 8006644:	08007734 	.word	0x08007734
 8006648:	ffff0001 	.word	0xffff0001

0800664c <_fwalk_reent>:
 800664c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800664e:	0004      	movs	r4, r0
 8006650:	0006      	movs	r6, r0
 8006652:	2700      	movs	r7, #0
 8006654:	9101      	str	r1, [sp, #4]
 8006656:	3448      	adds	r4, #72	; 0x48
 8006658:	6863      	ldr	r3, [r4, #4]
 800665a:	68a5      	ldr	r5, [r4, #8]
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	9b00      	ldr	r3, [sp, #0]
 8006660:	3b01      	subs	r3, #1
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	d504      	bpl.n	8006670 <_fwalk_reent+0x24>
 8006666:	6824      	ldr	r4, [r4, #0]
 8006668:	2c00      	cmp	r4, #0
 800666a:	d1f5      	bne.n	8006658 <_fwalk_reent+0xc>
 800666c:	0038      	movs	r0, r7
 800666e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006670:	89ab      	ldrh	r3, [r5, #12]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d908      	bls.n	8006688 <_fwalk_reent+0x3c>
 8006676:	220e      	movs	r2, #14
 8006678:	5eab      	ldrsh	r3, [r5, r2]
 800667a:	3301      	adds	r3, #1
 800667c:	d004      	beq.n	8006688 <_fwalk_reent+0x3c>
 800667e:	0029      	movs	r1, r5
 8006680:	0030      	movs	r0, r6
 8006682:	9b01      	ldr	r3, [sp, #4]
 8006684:	4798      	blx	r3
 8006686:	4307      	orrs	r7, r0
 8006688:	3568      	adds	r5, #104	; 0x68
 800668a:	e7e8      	b.n	800665e <_fwalk_reent+0x12>

0800668c <__libc_init_array>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	2600      	movs	r6, #0
 8006690:	4d0c      	ldr	r5, [pc, #48]	; (80066c4 <__libc_init_array+0x38>)
 8006692:	4c0d      	ldr	r4, [pc, #52]	; (80066c8 <__libc_init_array+0x3c>)
 8006694:	1b64      	subs	r4, r4, r5
 8006696:	10a4      	asrs	r4, r4, #2
 8006698:	42a6      	cmp	r6, r4
 800669a:	d109      	bne.n	80066b0 <__libc_init_array+0x24>
 800669c:	2600      	movs	r6, #0
 800669e:	f000 fe33 	bl	8007308 <_init>
 80066a2:	4d0a      	ldr	r5, [pc, #40]	; (80066cc <__libc_init_array+0x40>)
 80066a4:	4c0a      	ldr	r4, [pc, #40]	; (80066d0 <__libc_init_array+0x44>)
 80066a6:	1b64      	subs	r4, r4, r5
 80066a8:	10a4      	asrs	r4, r4, #2
 80066aa:	42a6      	cmp	r6, r4
 80066ac:	d105      	bne.n	80066ba <__libc_init_array+0x2e>
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
 80066b0:	00b3      	lsls	r3, r6, #2
 80066b2:	58eb      	ldr	r3, [r5, r3]
 80066b4:	4798      	blx	r3
 80066b6:	3601      	adds	r6, #1
 80066b8:	e7ee      	b.n	8006698 <__libc_init_array+0xc>
 80066ba:	00b3      	lsls	r3, r6, #2
 80066bc:	58eb      	ldr	r3, [r5, r3]
 80066be:	4798      	blx	r3
 80066c0:	3601      	adds	r6, #1
 80066c2:	e7f2      	b.n	80066aa <__libc_init_array+0x1e>
 80066c4:	08007774 	.word	0x08007774
 80066c8:	08007774 	.word	0x08007774
 80066cc:	08007774 	.word	0x08007774
 80066d0:	08007778 	.word	0x08007778

080066d4 <__retarget_lock_init_recursive>:
 80066d4:	4770      	bx	lr

080066d6 <__retarget_lock_acquire_recursive>:
 80066d6:	4770      	bx	lr

080066d8 <__retarget_lock_release_recursive>:
 80066d8:	4770      	bx	lr

080066da <memcpy>:
 80066da:	2300      	movs	r3, #0
 80066dc:	b510      	push	{r4, lr}
 80066de:	429a      	cmp	r2, r3
 80066e0:	d100      	bne.n	80066e4 <memcpy+0xa>
 80066e2:	bd10      	pop	{r4, pc}
 80066e4:	5ccc      	ldrb	r4, [r1, r3]
 80066e6:	54c4      	strb	r4, [r0, r3]
 80066e8:	3301      	adds	r3, #1
 80066ea:	e7f8      	b.n	80066de <memcpy+0x4>

080066ec <memset>:
 80066ec:	0003      	movs	r3, r0
 80066ee:	1882      	adds	r2, r0, r2
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d100      	bne.n	80066f6 <memset+0xa>
 80066f4:	4770      	bx	lr
 80066f6:	7019      	strb	r1, [r3, #0]
 80066f8:	3301      	adds	r3, #1
 80066fa:	e7f9      	b.n	80066f0 <memset+0x4>

080066fc <_free_r>:
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	0005      	movs	r5, r0
 8006700:	2900      	cmp	r1, #0
 8006702:	d010      	beq.n	8006726 <_free_r+0x2a>
 8006704:	1f0c      	subs	r4, r1, #4
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	da00      	bge.n	800670e <_free_r+0x12>
 800670c:	18e4      	adds	r4, r4, r3
 800670e:	0028      	movs	r0, r5
 8006710:	f000 f988 	bl	8006a24 <__malloc_lock>
 8006714:	4a1d      	ldr	r2, [pc, #116]	; (800678c <_free_r+0x90>)
 8006716:	6813      	ldr	r3, [r2, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d105      	bne.n	8006728 <_free_r+0x2c>
 800671c:	6063      	str	r3, [r4, #4]
 800671e:	6014      	str	r4, [r2, #0]
 8006720:	0028      	movs	r0, r5
 8006722:	f000 f987 	bl	8006a34 <__malloc_unlock>
 8006726:	bd70      	pop	{r4, r5, r6, pc}
 8006728:	42a3      	cmp	r3, r4
 800672a:	d908      	bls.n	800673e <_free_r+0x42>
 800672c:	6821      	ldr	r1, [r4, #0]
 800672e:	1860      	adds	r0, r4, r1
 8006730:	4283      	cmp	r3, r0
 8006732:	d1f3      	bne.n	800671c <_free_r+0x20>
 8006734:	6818      	ldr	r0, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	1841      	adds	r1, r0, r1
 800673a:	6021      	str	r1, [r4, #0]
 800673c:	e7ee      	b.n	800671c <_free_r+0x20>
 800673e:	001a      	movs	r2, r3
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <_free_r+0x4e>
 8006746:	42a3      	cmp	r3, r4
 8006748:	d9f9      	bls.n	800673e <_free_r+0x42>
 800674a:	6811      	ldr	r1, [r2, #0]
 800674c:	1850      	adds	r0, r2, r1
 800674e:	42a0      	cmp	r0, r4
 8006750:	d10b      	bne.n	800676a <_free_r+0x6e>
 8006752:	6820      	ldr	r0, [r4, #0]
 8006754:	1809      	adds	r1, r1, r0
 8006756:	1850      	adds	r0, r2, r1
 8006758:	6011      	str	r1, [r2, #0]
 800675a:	4283      	cmp	r3, r0
 800675c:	d1e0      	bne.n	8006720 <_free_r+0x24>
 800675e:	6818      	ldr	r0, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	1841      	adds	r1, r0, r1
 8006764:	6011      	str	r1, [r2, #0]
 8006766:	6053      	str	r3, [r2, #4]
 8006768:	e7da      	b.n	8006720 <_free_r+0x24>
 800676a:	42a0      	cmp	r0, r4
 800676c:	d902      	bls.n	8006774 <_free_r+0x78>
 800676e:	230c      	movs	r3, #12
 8006770:	602b      	str	r3, [r5, #0]
 8006772:	e7d5      	b.n	8006720 <_free_r+0x24>
 8006774:	6821      	ldr	r1, [r4, #0]
 8006776:	1860      	adds	r0, r4, r1
 8006778:	4283      	cmp	r3, r0
 800677a:	d103      	bne.n	8006784 <_free_r+0x88>
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	1841      	adds	r1, r0, r1
 8006782:	6021      	str	r1, [r4, #0]
 8006784:	6063      	str	r3, [r4, #4]
 8006786:	6054      	str	r4, [r2, #4]
 8006788:	e7ca      	b.n	8006720 <_free_r+0x24>
 800678a:	46c0      	nop			; (mov r8, r8)
 800678c:	20000b8c 	.word	0x20000b8c

08006790 <sbrk_aligned>:
 8006790:	b570      	push	{r4, r5, r6, lr}
 8006792:	4e0f      	ldr	r6, [pc, #60]	; (80067d0 <sbrk_aligned+0x40>)
 8006794:	000d      	movs	r5, r1
 8006796:	6831      	ldr	r1, [r6, #0]
 8006798:	0004      	movs	r4, r0
 800679a:	2900      	cmp	r1, #0
 800679c:	d102      	bne.n	80067a4 <sbrk_aligned+0x14>
 800679e:	f000 f8a9 	bl	80068f4 <_sbrk_r>
 80067a2:	6030      	str	r0, [r6, #0]
 80067a4:	0029      	movs	r1, r5
 80067a6:	0020      	movs	r0, r4
 80067a8:	f000 f8a4 	bl	80068f4 <_sbrk_r>
 80067ac:	1c43      	adds	r3, r0, #1
 80067ae:	d00a      	beq.n	80067c6 <sbrk_aligned+0x36>
 80067b0:	2303      	movs	r3, #3
 80067b2:	1cc5      	adds	r5, r0, #3
 80067b4:	439d      	bics	r5, r3
 80067b6:	42a8      	cmp	r0, r5
 80067b8:	d007      	beq.n	80067ca <sbrk_aligned+0x3a>
 80067ba:	1a29      	subs	r1, r5, r0
 80067bc:	0020      	movs	r0, r4
 80067be:	f000 f899 	bl	80068f4 <_sbrk_r>
 80067c2:	1c43      	adds	r3, r0, #1
 80067c4:	d101      	bne.n	80067ca <sbrk_aligned+0x3a>
 80067c6:	2501      	movs	r5, #1
 80067c8:	426d      	negs	r5, r5
 80067ca:	0028      	movs	r0, r5
 80067cc:	bd70      	pop	{r4, r5, r6, pc}
 80067ce:	46c0      	nop			; (mov r8, r8)
 80067d0:	20000b90 	.word	0x20000b90

080067d4 <_malloc_r>:
 80067d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067d6:	2203      	movs	r2, #3
 80067d8:	1ccb      	adds	r3, r1, #3
 80067da:	4393      	bics	r3, r2
 80067dc:	3308      	adds	r3, #8
 80067de:	0006      	movs	r6, r0
 80067e0:	001f      	movs	r7, r3
 80067e2:	2b0c      	cmp	r3, #12
 80067e4:	d232      	bcs.n	800684c <_malloc_r+0x78>
 80067e6:	270c      	movs	r7, #12
 80067e8:	42b9      	cmp	r1, r7
 80067ea:	d831      	bhi.n	8006850 <_malloc_r+0x7c>
 80067ec:	0030      	movs	r0, r6
 80067ee:	f000 f919 	bl	8006a24 <__malloc_lock>
 80067f2:	4d32      	ldr	r5, [pc, #200]	; (80068bc <_malloc_r+0xe8>)
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	001c      	movs	r4, r3
 80067f8:	2c00      	cmp	r4, #0
 80067fa:	d12e      	bne.n	800685a <_malloc_r+0x86>
 80067fc:	0039      	movs	r1, r7
 80067fe:	0030      	movs	r0, r6
 8006800:	f7ff ffc6 	bl	8006790 <sbrk_aligned>
 8006804:	0004      	movs	r4, r0
 8006806:	1c43      	adds	r3, r0, #1
 8006808:	d11e      	bne.n	8006848 <_malloc_r+0x74>
 800680a:	682c      	ldr	r4, [r5, #0]
 800680c:	0025      	movs	r5, r4
 800680e:	2d00      	cmp	r5, #0
 8006810:	d14a      	bne.n	80068a8 <_malloc_r+0xd4>
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	0029      	movs	r1, r5
 8006816:	18e3      	adds	r3, r4, r3
 8006818:	0030      	movs	r0, r6
 800681a:	9301      	str	r3, [sp, #4]
 800681c:	f000 f86a 	bl	80068f4 <_sbrk_r>
 8006820:	9b01      	ldr	r3, [sp, #4]
 8006822:	4283      	cmp	r3, r0
 8006824:	d143      	bne.n	80068ae <_malloc_r+0xda>
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	3703      	adds	r7, #3
 800682a:	1aff      	subs	r7, r7, r3
 800682c:	2303      	movs	r3, #3
 800682e:	439f      	bics	r7, r3
 8006830:	3708      	adds	r7, #8
 8006832:	2f0c      	cmp	r7, #12
 8006834:	d200      	bcs.n	8006838 <_malloc_r+0x64>
 8006836:	270c      	movs	r7, #12
 8006838:	0039      	movs	r1, r7
 800683a:	0030      	movs	r0, r6
 800683c:	f7ff ffa8 	bl	8006790 <sbrk_aligned>
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	d034      	beq.n	80068ae <_malloc_r+0xda>
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	19df      	adds	r7, r3, r7
 8006848:	6027      	str	r7, [r4, #0]
 800684a:	e013      	b.n	8006874 <_malloc_r+0xa0>
 800684c:	2b00      	cmp	r3, #0
 800684e:	dacb      	bge.n	80067e8 <_malloc_r+0x14>
 8006850:	230c      	movs	r3, #12
 8006852:	2500      	movs	r5, #0
 8006854:	6033      	str	r3, [r6, #0]
 8006856:	0028      	movs	r0, r5
 8006858:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800685a:	6822      	ldr	r2, [r4, #0]
 800685c:	1bd1      	subs	r1, r2, r7
 800685e:	d420      	bmi.n	80068a2 <_malloc_r+0xce>
 8006860:	290b      	cmp	r1, #11
 8006862:	d917      	bls.n	8006894 <_malloc_r+0xc0>
 8006864:	19e2      	adds	r2, r4, r7
 8006866:	6027      	str	r7, [r4, #0]
 8006868:	42a3      	cmp	r3, r4
 800686a:	d111      	bne.n	8006890 <_malloc_r+0xbc>
 800686c:	602a      	str	r2, [r5, #0]
 800686e:	6863      	ldr	r3, [r4, #4]
 8006870:	6011      	str	r1, [r2, #0]
 8006872:	6053      	str	r3, [r2, #4]
 8006874:	0030      	movs	r0, r6
 8006876:	0025      	movs	r5, r4
 8006878:	f000 f8dc 	bl	8006a34 <__malloc_unlock>
 800687c:	2207      	movs	r2, #7
 800687e:	350b      	adds	r5, #11
 8006880:	1d23      	adds	r3, r4, #4
 8006882:	4395      	bics	r5, r2
 8006884:	1aea      	subs	r2, r5, r3
 8006886:	429d      	cmp	r5, r3
 8006888:	d0e5      	beq.n	8006856 <_malloc_r+0x82>
 800688a:	1b5b      	subs	r3, r3, r5
 800688c:	50a3      	str	r3, [r4, r2]
 800688e:	e7e2      	b.n	8006856 <_malloc_r+0x82>
 8006890:	605a      	str	r2, [r3, #4]
 8006892:	e7ec      	b.n	800686e <_malloc_r+0x9a>
 8006894:	6862      	ldr	r2, [r4, #4]
 8006896:	42a3      	cmp	r3, r4
 8006898:	d101      	bne.n	800689e <_malloc_r+0xca>
 800689a:	602a      	str	r2, [r5, #0]
 800689c:	e7ea      	b.n	8006874 <_malloc_r+0xa0>
 800689e:	605a      	str	r2, [r3, #4]
 80068a0:	e7e8      	b.n	8006874 <_malloc_r+0xa0>
 80068a2:	0023      	movs	r3, r4
 80068a4:	6864      	ldr	r4, [r4, #4]
 80068a6:	e7a7      	b.n	80067f8 <_malloc_r+0x24>
 80068a8:	002c      	movs	r4, r5
 80068aa:	686d      	ldr	r5, [r5, #4]
 80068ac:	e7af      	b.n	800680e <_malloc_r+0x3a>
 80068ae:	230c      	movs	r3, #12
 80068b0:	0030      	movs	r0, r6
 80068b2:	6033      	str	r3, [r6, #0]
 80068b4:	f000 f8be 	bl	8006a34 <__malloc_unlock>
 80068b8:	e7cd      	b.n	8006856 <_malloc_r+0x82>
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	20000b8c 	.word	0x20000b8c

080068c0 <iprintf>:
 80068c0:	b40f      	push	{r0, r1, r2, r3}
 80068c2:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <iprintf+0x30>)
 80068c4:	b513      	push	{r0, r1, r4, lr}
 80068c6:	681c      	ldr	r4, [r3, #0]
 80068c8:	2c00      	cmp	r4, #0
 80068ca:	d005      	beq.n	80068d8 <iprintf+0x18>
 80068cc:	69a3      	ldr	r3, [r4, #24]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d102      	bne.n	80068d8 <iprintf+0x18>
 80068d2:	0020      	movs	r0, r4
 80068d4:	f7ff fe3a 	bl	800654c <__sinit>
 80068d8:	ab05      	add	r3, sp, #20
 80068da:	0020      	movs	r0, r4
 80068dc:	9a04      	ldr	r2, [sp, #16]
 80068de:	68a1      	ldr	r1, [r4, #8]
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	f000 f8d7 	bl	8006a94 <_vfiprintf_r>
 80068e6:	bc16      	pop	{r1, r2, r4}
 80068e8:	bc08      	pop	{r3}
 80068ea:	b004      	add	sp, #16
 80068ec:	4718      	bx	r3
 80068ee:	46c0      	nop			; (mov r8, r8)
 80068f0:	20000050 	.word	0x20000050

080068f4 <_sbrk_r>:
 80068f4:	2300      	movs	r3, #0
 80068f6:	b570      	push	{r4, r5, r6, lr}
 80068f8:	4d06      	ldr	r5, [pc, #24]	; (8006914 <_sbrk_r+0x20>)
 80068fa:	0004      	movs	r4, r0
 80068fc:	0008      	movs	r0, r1
 80068fe:	602b      	str	r3, [r5, #0]
 8006900:	f7fb f93a 	bl	8001b78 <_sbrk>
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d103      	bne.n	8006910 <_sbrk_r+0x1c>
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d000      	beq.n	8006910 <_sbrk_r+0x1c>
 800690e:	6023      	str	r3, [r4, #0]
 8006910:	bd70      	pop	{r4, r5, r6, pc}
 8006912:	46c0      	nop			; (mov r8, r8)
 8006914:	20000b94 	.word	0x20000b94

08006918 <__sread>:
 8006918:	b570      	push	{r4, r5, r6, lr}
 800691a:	000c      	movs	r4, r1
 800691c:	250e      	movs	r5, #14
 800691e:	5f49      	ldrsh	r1, [r1, r5]
 8006920:	f000 fb74 	bl	800700c <_read_r>
 8006924:	2800      	cmp	r0, #0
 8006926:	db03      	blt.n	8006930 <__sread+0x18>
 8006928:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800692a:	181b      	adds	r3, r3, r0
 800692c:	6563      	str	r3, [r4, #84]	; 0x54
 800692e:	bd70      	pop	{r4, r5, r6, pc}
 8006930:	89a3      	ldrh	r3, [r4, #12]
 8006932:	4a02      	ldr	r2, [pc, #8]	; (800693c <__sread+0x24>)
 8006934:	4013      	ands	r3, r2
 8006936:	81a3      	strh	r3, [r4, #12]
 8006938:	e7f9      	b.n	800692e <__sread+0x16>
 800693a:	46c0      	nop			; (mov r8, r8)
 800693c:	ffffefff 	.word	0xffffefff

08006940 <__swrite>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	001f      	movs	r7, r3
 8006944:	898b      	ldrh	r3, [r1, #12]
 8006946:	0005      	movs	r5, r0
 8006948:	000c      	movs	r4, r1
 800694a:	0016      	movs	r6, r2
 800694c:	05db      	lsls	r3, r3, #23
 800694e:	d505      	bpl.n	800695c <__swrite+0x1c>
 8006950:	230e      	movs	r3, #14
 8006952:	5ec9      	ldrsh	r1, [r1, r3]
 8006954:	2200      	movs	r2, #0
 8006956:	2302      	movs	r3, #2
 8006958:	f000 f850 	bl	80069fc <_lseek_r>
 800695c:	89a3      	ldrh	r3, [r4, #12]
 800695e:	4a05      	ldr	r2, [pc, #20]	; (8006974 <__swrite+0x34>)
 8006960:	0028      	movs	r0, r5
 8006962:	4013      	ands	r3, r2
 8006964:	81a3      	strh	r3, [r4, #12]
 8006966:	0032      	movs	r2, r6
 8006968:	230e      	movs	r3, #14
 800696a:	5ee1      	ldrsh	r1, [r4, r3]
 800696c:	003b      	movs	r3, r7
 800696e:	f000 f81f 	bl	80069b0 <_write_r>
 8006972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006974:	ffffefff 	.word	0xffffefff

08006978 <__sseek>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	000c      	movs	r4, r1
 800697c:	250e      	movs	r5, #14
 800697e:	5f49      	ldrsh	r1, [r1, r5]
 8006980:	f000 f83c 	bl	80069fc <_lseek_r>
 8006984:	89a3      	ldrh	r3, [r4, #12]
 8006986:	1c42      	adds	r2, r0, #1
 8006988:	d103      	bne.n	8006992 <__sseek+0x1a>
 800698a:	4a05      	ldr	r2, [pc, #20]	; (80069a0 <__sseek+0x28>)
 800698c:	4013      	ands	r3, r2
 800698e:	81a3      	strh	r3, [r4, #12]
 8006990:	bd70      	pop	{r4, r5, r6, pc}
 8006992:	2280      	movs	r2, #128	; 0x80
 8006994:	0152      	lsls	r2, r2, #5
 8006996:	4313      	orrs	r3, r2
 8006998:	81a3      	strh	r3, [r4, #12]
 800699a:	6560      	str	r0, [r4, #84]	; 0x54
 800699c:	e7f8      	b.n	8006990 <__sseek+0x18>
 800699e:	46c0      	nop			; (mov r8, r8)
 80069a0:	ffffefff 	.word	0xffffefff

080069a4 <__sclose>:
 80069a4:	b510      	push	{r4, lr}
 80069a6:	230e      	movs	r3, #14
 80069a8:	5ec9      	ldrsh	r1, [r1, r3]
 80069aa:	f000 f815 	bl	80069d8 <_close_r>
 80069ae:	bd10      	pop	{r4, pc}

080069b0 <_write_r>:
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	0004      	movs	r4, r0
 80069b4:	0008      	movs	r0, r1
 80069b6:	0011      	movs	r1, r2
 80069b8:	001a      	movs	r2, r3
 80069ba:	2300      	movs	r3, #0
 80069bc:	4d05      	ldr	r5, [pc, #20]	; (80069d4 <_write_r+0x24>)
 80069be:	602b      	str	r3, [r5, #0]
 80069c0:	f7fb f891 	bl	8001ae6 <_write>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d103      	bne.n	80069d0 <_write_r+0x20>
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d000      	beq.n	80069d0 <_write_r+0x20>
 80069ce:	6023      	str	r3, [r4, #0]
 80069d0:	bd70      	pop	{r4, r5, r6, pc}
 80069d2:	46c0      	nop			; (mov r8, r8)
 80069d4:	20000b94 	.word	0x20000b94

080069d8 <_close_r>:
 80069d8:	2300      	movs	r3, #0
 80069da:	b570      	push	{r4, r5, r6, lr}
 80069dc:	4d06      	ldr	r5, [pc, #24]	; (80069f8 <_close_r+0x20>)
 80069de:	0004      	movs	r4, r0
 80069e0:	0008      	movs	r0, r1
 80069e2:	602b      	str	r3, [r5, #0]
 80069e4:	f7fb f89b 	bl	8001b1e <_close>
 80069e8:	1c43      	adds	r3, r0, #1
 80069ea:	d103      	bne.n	80069f4 <_close_r+0x1c>
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d000      	beq.n	80069f4 <_close_r+0x1c>
 80069f2:	6023      	str	r3, [r4, #0]
 80069f4:	bd70      	pop	{r4, r5, r6, pc}
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	20000b94 	.word	0x20000b94

080069fc <_lseek_r>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	0004      	movs	r4, r0
 8006a00:	0008      	movs	r0, r1
 8006a02:	0011      	movs	r1, r2
 8006a04:	001a      	movs	r2, r3
 8006a06:	2300      	movs	r3, #0
 8006a08:	4d05      	ldr	r5, [pc, #20]	; (8006a20 <_lseek_r+0x24>)
 8006a0a:	602b      	str	r3, [r5, #0]
 8006a0c:	f7fb f8a8 	bl	8001b60 <_lseek>
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	d103      	bne.n	8006a1c <_lseek_r+0x20>
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d000      	beq.n	8006a1c <_lseek_r+0x20>
 8006a1a:	6023      	str	r3, [r4, #0]
 8006a1c:	bd70      	pop	{r4, r5, r6, pc}
 8006a1e:	46c0      	nop			; (mov r8, r8)
 8006a20:	20000b94 	.word	0x20000b94

08006a24 <__malloc_lock>:
 8006a24:	b510      	push	{r4, lr}
 8006a26:	4802      	ldr	r0, [pc, #8]	; (8006a30 <__malloc_lock+0xc>)
 8006a28:	f7ff fe55 	bl	80066d6 <__retarget_lock_acquire_recursive>
 8006a2c:	bd10      	pop	{r4, pc}
 8006a2e:	46c0      	nop			; (mov r8, r8)
 8006a30:	20000b88 	.word	0x20000b88

08006a34 <__malloc_unlock>:
 8006a34:	b510      	push	{r4, lr}
 8006a36:	4802      	ldr	r0, [pc, #8]	; (8006a40 <__malloc_unlock+0xc>)
 8006a38:	f7ff fe4e 	bl	80066d8 <__retarget_lock_release_recursive>
 8006a3c:	bd10      	pop	{r4, pc}
 8006a3e:	46c0      	nop			; (mov r8, r8)
 8006a40:	20000b88 	.word	0x20000b88

08006a44 <__sfputc_r>:
 8006a44:	6893      	ldr	r3, [r2, #8]
 8006a46:	b510      	push	{r4, lr}
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	6093      	str	r3, [r2, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	da04      	bge.n	8006a5a <__sfputc_r+0x16>
 8006a50:	6994      	ldr	r4, [r2, #24]
 8006a52:	42a3      	cmp	r3, r4
 8006a54:	db07      	blt.n	8006a66 <__sfputc_r+0x22>
 8006a56:	290a      	cmp	r1, #10
 8006a58:	d005      	beq.n	8006a66 <__sfputc_r+0x22>
 8006a5a:	6813      	ldr	r3, [r2, #0]
 8006a5c:	1c58      	adds	r0, r3, #1
 8006a5e:	6010      	str	r0, [r2, #0]
 8006a60:	7019      	strb	r1, [r3, #0]
 8006a62:	0008      	movs	r0, r1
 8006a64:	bd10      	pop	{r4, pc}
 8006a66:	f000 fae5 	bl	8007034 <__swbuf_r>
 8006a6a:	0001      	movs	r1, r0
 8006a6c:	e7f9      	b.n	8006a62 <__sfputc_r+0x1e>

08006a6e <__sfputs_r>:
 8006a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a70:	0006      	movs	r6, r0
 8006a72:	000f      	movs	r7, r1
 8006a74:	0014      	movs	r4, r2
 8006a76:	18d5      	adds	r5, r2, r3
 8006a78:	42ac      	cmp	r4, r5
 8006a7a:	d101      	bne.n	8006a80 <__sfputs_r+0x12>
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	e007      	b.n	8006a90 <__sfputs_r+0x22>
 8006a80:	7821      	ldrb	r1, [r4, #0]
 8006a82:	003a      	movs	r2, r7
 8006a84:	0030      	movs	r0, r6
 8006a86:	f7ff ffdd 	bl	8006a44 <__sfputc_r>
 8006a8a:	3401      	adds	r4, #1
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d1f3      	bne.n	8006a78 <__sfputs_r+0xa>
 8006a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a94 <_vfiprintf_r>:
 8006a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a96:	b0a1      	sub	sp, #132	; 0x84
 8006a98:	0006      	movs	r6, r0
 8006a9a:	000c      	movs	r4, r1
 8006a9c:	001f      	movs	r7, r3
 8006a9e:	9203      	str	r2, [sp, #12]
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d004      	beq.n	8006aae <_vfiprintf_r+0x1a>
 8006aa4:	6983      	ldr	r3, [r0, #24]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <_vfiprintf_r+0x1a>
 8006aaa:	f7ff fd4f 	bl	800654c <__sinit>
 8006aae:	4b8e      	ldr	r3, [pc, #568]	; (8006ce8 <_vfiprintf_r+0x254>)
 8006ab0:	429c      	cmp	r4, r3
 8006ab2:	d11c      	bne.n	8006aee <_vfiprintf_r+0x5a>
 8006ab4:	6874      	ldr	r4, [r6, #4]
 8006ab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ab8:	07db      	lsls	r3, r3, #31
 8006aba:	d405      	bmi.n	8006ac8 <_vfiprintf_r+0x34>
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	059b      	lsls	r3, r3, #22
 8006ac0:	d402      	bmi.n	8006ac8 <_vfiprintf_r+0x34>
 8006ac2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ac4:	f7ff fe07 	bl	80066d6 <__retarget_lock_acquire_recursive>
 8006ac8:	89a3      	ldrh	r3, [r4, #12]
 8006aca:	071b      	lsls	r3, r3, #28
 8006acc:	d502      	bpl.n	8006ad4 <_vfiprintf_r+0x40>
 8006ace:	6923      	ldr	r3, [r4, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d11d      	bne.n	8006b10 <_vfiprintf_r+0x7c>
 8006ad4:	0021      	movs	r1, r4
 8006ad6:	0030      	movs	r0, r6
 8006ad8:	f000 fb02 	bl	80070e0 <__swsetup_r>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d017      	beq.n	8006b10 <_vfiprintf_r+0x7c>
 8006ae0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ae2:	07db      	lsls	r3, r3, #31
 8006ae4:	d50d      	bpl.n	8006b02 <_vfiprintf_r+0x6e>
 8006ae6:	2001      	movs	r0, #1
 8006ae8:	4240      	negs	r0, r0
 8006aea:	b021      	add	sp, #132	; 0x84
 8006aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aee:	4b7f      	ldr	r3, [pc, #508]	; (8006cec <_vfiprintf_r+0x258>)
 8006af0:	429c      	cmp	r4, r3
 8006af2:	d101      	bne.n	8006af8 <_vfiprintf_r+0x64>
 8006af4:	68b4      	ldr	r4, [r6, #8]
 8006af6:	e7de      	b.n	8006ab6 <_vfiprintf_r+0x22>
 8006af8:	4b7d      	ldr	r3, [pc, #500]	; (8006cf0 <_vfiprintf_r+0x25c>)
 8006afa:	429c      	cmp	r4, r3
 8006afc:	d1db      	bne.n	8006ab6 <_vfiprintf_r+0x22>
 8006afe:	68f4      	ldr	r4, [r6, #12]
 8006b00:	e7d9      	b.n	8006ab6 <_vfiprintf_r+0x22>
 8006b02:	89a3      	ldrh	r3, [r4, #12]
 8006b04:	059b      	lsls	r3, r3, #22
 8006b06:	d4ee      	bmi.n	8006ae6 <_vfiprintf_r+0x52>
 8006b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b0a:	f7ff fde5 	bl	80066d8 <__retarget_lock_release_recursive>
 8006b0e:	e7ea      	b.n	8006ae6 <_vfiprintf_r+0x52>
 8006b10:	2300      	movs	r3, #0
 8006b12:	ad08      	add	r5, sp, #32
 8006b14:	616b      	str	r3, [r5, #20]
 8006b16:	3320      	adds	r3, #32
 8006b18:	766b      	strb	r3, [r5, #25]
 8006b1a:	3310      	adds	r3, #16
 8006b1c:	76ab      	strb	r3, [r5, #26]
 8006b1e:	9707      	str	r7, [sp, #28]
 8006b20:	9f03      	ldr	r7, [sp, #12]
 8006b22:	783b      	ldrb	r3, [r7, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <_vfiprintf_r+0x98>
 8006b28:	2b25      	cmp	r3, #37	; 0x25
 8006b2a:	d14e      	bne.n	8006bca <_vfiprintf_r+0x136>
 8006b2c:	9b03      	ldr	r3, [sp, #12]
 8006b2e:	1afb      	subs	r3, r7, r3
 8006b30:	9305      	str	r3, [sp, #20]
 8006b32:	9b03      	ldr	r3, [sp, #12]
 8006b34:	429f      	cmp	r7, r3
 8006b36:	d00d      	beq.n	8006b54 <_vfiprintf_r+0xc0>
 8006b38:	9b05      	ldr	r3, [sp, #20]
 8006b3a:	0021      	movs	r1, r4
 8006b3c:	0030      	movs	r0, r6
 8006b3e:	9a03      	ldr	r2, [sp, #12]
 8006b40:	f7ff ff95 	bl	8006a6e <__sfputs_r>
 8006b44:	1c43      	adds	r3, r0, #1
 8006b46:	d100      	bne.n	8006b4a <_vfiprintf_r+0xb6>
 8006b48:	e0b5      	b.n	8006cb6 <_vfiprintf_r+0x222>
 8006b4a:	696a      	ldr	r2, [r5, #20]
 8006b4c:	9b05      	ldr	r3, [sp, #20]
 8006b4e:	4694      	mov	ip, r2
 8006b50:	4463      	add	r3, ip
 8006b52:	616b      	str	r3, [r5, #20]
 8006b54:	783b      	ldrb	r3, [r7, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d100      	bne.n	8006b5c <_vfiprintf_r+0xc8>
 8006b5a:	e0ac      	b.n	8006cb6 <_vfiprintf_r+0x222>
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	1c7b      	adds	r3, r7, #1
 8006b60:	9303      	str	r3, [sp, #12]
 8006b62:	2300      	movs	r3, #0
 8006b64:	4252      	negs	r2, r2
 8006b66:	606a      	str	r2, [r5, #4]
 8006b68:	a904      	add	r1, sp, #16
 8006b6a:	3254      	adds	r2, #84	; 0x54
 8006b6c:	1852      	adds	r2, r2, r1
 8006b6e:	602b      	str	r3, [r5, #0]
 8006b70:	60eb      	str	r3, [r5, #12]
 8006b72:	60ab      	str	r3, [r5, #8]
 8006b74:	7013      	strb	r3, [r2, #0]
 8006b76:	65ab      	str	r3, [r5, #88]	; 0x58
 8006b78:	9b03      	ldr	r3, [sp, #12]
 8006b7a:	2205      	movs	r2, #5
 8006b7c:	7819      	ldrb	r1, [r3, #0]
 8006b7e:	485d      	ldr	r0, [pc, #372]	; (8006cf4 <_vfiprintf_r+0x260>)
 8006b80:	f000 fb92 	bl	80072a8 <memchr>
 8006b84:	9b03      	ldr	r3, [sp, #12]
 8006b86:	1c5f      	adds	r7, r3, #1
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	d120      	bne.n	8006bce <_vfiprintf_r+0x13a>
 8006b8c:	682a      	ldr	r2, [r5, #0]
 8006b8e:	06d3      	lsls	r3, r2, #27
 8006b90:	d504      	bpl.n	8006b9c <_vfiprintf_r+0x108>
 8006b92:	2353      	movs	r3, #83	; 0x53
 8006b94:	a904      	add	r1, sp, #16
 8006b96:	185b      	adds	r3, r3, r1
 8006b98:	2120      	movs	r1, #32
 8006b9a:	7019      	strb	r1, [r3, #0]
 8006b9c:	0713      	lsls	r3, r2, #28
 8006b9e:	d504      	bpl.n	8006baa <_vfiprintf_r+0x116>
 8006ba0:	2353      	movs	r3, #83	; 0x53
 8006ba2:	a904      	add	r1, sp, #16
 8006ba4:	185b      	adds	r3, r3, r1
 8006ba6:	212b      	movs	r1, #43	; 0x2b
 8006ba8:	7019      	strb	r1, [r3, #0]
 8006baa:	9b03      	ldr	r3, [sp, #12]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	2b2a      	cmp	r3, #42	; 0x2a
 8006bb0:	d016      	beq.n	8006be0 <_vfiprintf_r+0x14c>
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	68eb      	ldr	r3, [r5, #12]
 8006bb6:	9f03      	ldr	r7, [sp, #12]
 8006bb8:	783a      	ldrb	r2, [r7, #0]
 8006bba:	1c78      	adds	r0, r7, #1
 8006bbc:	3a30      	subs	r2, #48	; 0x30
 8006bbe:	4684      	mov	ip, r0
 8006bc0:	2a09      	cmp	r2, #9
 8006bc2:	d94f      	bls.n	8006c64 <_vfiprintf_r+0x1d0>
 8006bc4:	2900      	cmp	r1, #0
 8006bc6:	d111      	bne.n	8006bec <_vfiprintf_r+0x158>
 8006bc8:	e017      	b.n	8006bfa <_vfiprintf_r+0x166>
 8006bca:	3701      	adds	r7, #1
 8006bcc:	e7a9      	b.n	8006b22 <_vfiprintf_r+0x8e>
 8006bce:	4b49      	ldr	r3, [pc, #292]	; (8006cf4 <_vfiprintf_r+0x260>)
 8006bd0:	682a      	ldr	r2, [r5, #0]
 8006bd2:	1ac0      	subs	r0, r0, r3
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	4083      	lsls	r3, r0
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	602b      	str	r3, [r5, #0]
 8006bdc:	9703      	str	r7, [sp, #12]
 8006bde:	e7cb      	b.n	8006b78 <_vfiprintf_r+0xe4>
 8006be0:	9b07      	ldr	r3, [sp, #28]
 8006be2:	1d19      	adds	r1, r3, #4
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	9107      	str	r1, [sp, #28]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	db01      	blt.n	8006bf0 <_vfiprintf_r+0x15c>
 8006bec:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bee:	e004      	b.n	8006bfa <_vfiprintf_r+0x166>
 8006bf0:	425b      	negs	r3, r3
 8006bf2:	60eb      	str	r3, [r5, #12]
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	602b      	str	r3, [r5, #0]
 8006bfa:	783b      	ldrb	r3, [r7, #0]
 8006bfc:	2b2e      	cmp	r3, #46	; 0x2e
 8006bfe:	d10a      	bne.n	8006c16 <_vfiprintf_r+0x182>
 8006c00:	787b      	ldrb	r3, [r7, #1]
 8006c02:	2b2a      	cmp	r3, #42	; 0x2a
 8006c04:	d137      	bne.n	8006c76 <_vfiprintf_r+0x1e2>
 8006c06:	9b07      	ldr	r3, [sp, #28]
 8006c08:	3702      	adds	r7, #2
 8006c0a:	1d1a      	adds	r2, r3, #4
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	9207      	str	r2, [sp, #28]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	db2d      	blt.n	8006c70 <_vfiprintf_r+0x1dc>
 8006c14:	9309      	str	r3, [sp, #36]	; 0x24
 8006c16:	2203      	movs	r2, #3
 8006c18:	7839      	ldrb	r1, [r7, #0]
 8006c1a:	4837      	ldr	r0, [pc, #220]	; (8006cf8 <_vfiprintf_r+0x264>)
 8006c1c:	f000 fb44 	bl	80072a8 <memchr>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d007      	beq.n	8006c34 <_vfiprintf_r+0x1a0>
 8006c24:	4b34      	ldr	r3, [pc, #208]	; (8006cf8 <_vfiprintf_r+0x264>)
 8006c26:	682a      	ldr	r2, [r5, #0]
 8006c28:	1ac0      	subs	r0, r0, r3
 8006c2a:	2340      	movs	r3, #64	; 0x40
 8006c2c:	4083      	lsls	r3, r0
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	3701      	adds	r7, #1
 8006c32:	602b      	str	r3, [r5, #0]
 8006c34:	7839      	ldrb	r1, [r7, #0]
 8006c36:	1c7b      	adds	r3, r7, #1
 8006c38:	2206      	movs	r2, #6
 8006c3a:	4830      	ldr	r0, [pc, #192]	; (8006cfc <_vfiprintf_r+0x268>)
 8006c3c:	9303      	str	r3, [sp, #12]
 8006c3e:	7629      	strb	r1, [r5, #24]
 8006c40:	f000 fb32 	bl	80072a8 <memchr>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d045      	beq.n	8006cd4 <_vfiprintf_r+0x240>
 8006c48:	4b2d      	ldr	r3, [pc, #180]	; (8006d00 <_vfiprintf_r+0x26c>)
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d127      	bne.n	8006c9e <_vfiprintf_r+0x20a>
 8006c4e:	2207      	movs	r2, #7
 8006c50:	9b07      	ldr	r3, [sp, #28]
 8006c52:	3307      	adds	r3, #7
 8006c54:	4393      	bics	r3, r2
 8006c56:	3308      	adds	r3, #8
 8006c58:	9307      	str	r3, [sp, #28]
 8006c5a:	696b      	ldr	r3, [r5, #20]
 8006c5c:	9a04      	ldr	r2, [sp, #16]
 8006c5e:	189b      	adds	r3, r3, r2
 8006c60:	616b      	str	r3, [r5, #20]
 8006c62:	e75d      	b.n	8006b20 <_vfiprintf_r+0x8c>
 8006c64:	210a      	movs	r1, #10
 8006c66:	434b      	muls	r3, r1
 8006c68:	4667      	mov	r7, ip
 8006c6a:	189b      	adds	r3, r3, r2
 8006c6c:	3909      	subs	r1, #9
 8006c6e:	e7a3      	b.n	8006bb8 <_vfiprintf_r+0x124>
 8006c70:	2301      	movs	r3, #1
 8006c72:	425b      	negs	r3, r3
 8006c74:	e7ce      	b.n	8006c14 <_vfiprintf_r+0x180>
 8006c76:	2300      	movs	r3, #0
 8006c78:	001a      	movs	r2, r3
 8006c7a:	3701      	adds	r7, #1
 8006c7c:	606b      	str	r3, [r5, #4]
 8006c7e:	7839      	ldrb	r1, [r7, #0]
 8006c80:	1c78      	adds	r0, r7, #1
 8006c82:	3930      	subs	r1, #48	; 0x30
 8006c84:	4684      	mov	ip, r0
 8006c86:	2909      	cmp	r1, #9
 8006c88:	d903      	bls.n	8006c92 <_vfiprintf_r+0x1fe>
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d0c3      	beq.n	8006c16 <_vfiprintf_r+0x182>
 8006c8e:	9209      	str	r2, [sp, #36]	; 0x24
 8006c90:	e7c1      	b.n	8006c16 <_vfiprintf_r+0x182>
 8006c92:	230a      	movs	r3, #10
 8006c94:	435a      	muls	r2, r3
 8006c96:	4667      	mov	r7, ip
 8006c98:	1852      	adds	r2, r2, r1
 8006c9a:	3b09      	subs	r3, #9
 8006c9c:	e7ef      	b.n	8006c7e <_vfiprintf_r+0x1ea>
 8006c9e:	ab07      	add	r3, sp, #28
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	0022      	movs	r2, r4
 8006ca4:	0029      	movs	r1, r5
 8006ca6:	0030      	movs	r0, r6
 8006ca8:	4b16      	ldr	r3, [pc, #88]	; (8006d04 <_vfiprintf_r+0x270>)
 8006caa:	e000      	b.n	8006cae <_vfiprintf_r+0x21a>
 8006cac:	bf00      	nop
 8006cae:	9004      	str	r0, [sp, #16]
 8006cb0:	9b04      	ldr	r3, [sp, #16]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	d1d1      	bne.n	8006c5a <_vfiprintf_r+0x1c6>
 8006cb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cb8:	07db      	lsls	r3, r3, #31
 8006cba:	d405      	bmi.n	8006cc8 <_vfiprintf_r+0x234>
 8006cbc:	89a3      	ldrh	r3, [r4, #12]
 8006cbe:	059b      	lsls	r3, r3, #22
 8006cc0:	d402      	bmi.n	8006cc8 <_vfiprintf_r+0x234>
 8006cc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cc4:	f7ff fd08 	bl	80066d8 <__retarget_lock_release_recursive>
 8006cc8:	89a3      	ldrh	r3, [r4, #12]
 8006cca:	065b      	lsls	r3, r3, #25
 8006ccc:	d500      	bpl.n	8006cd0 <_vfiprintf_r+0x23c>
 8006cce:	e70a      	b.n	8006ae6 <_vfiprintf_r+0x52>
 8006cd0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006cd2:	e70a      	b.n	8006aea <_vfiprintf_r+0x56>
 8006cd4:	ab07      	add	r3, sp, #28
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	0022      	movs	r2, r4
 8006cda:	0029      	movs	r1, r5
 8006cdc:	0030      	movs	r0, r6
 8006cde:	4b09      	ldr	r3, [pc, #36]	; (8006d04 <_vfiprintf_r+0x270>)
 8006ce0:	f000 f882 	bl	8006de8 <_printf_i>
 8006ce4:	e7e3      	b.n	8006cae <_vfiprintf_r+0x21a>
 8006ce6:	46c0      	nop			; (mov r8, r8)
 8006ce8:	080076f4 	.word	0x080076f4
 8006cec:	08007714 	.word	0x08007714
 8006cf0:	080076d4 	.word	0x080076d4
 8006cf4:	08007738 	.word	0x08007738
 8006cf8:	0800773e 	.word	0x0800773e
 8006cfc:	08007742 	.word	0x08007742
 8006d00:	00000000 	.word	0x00000000
 8006d04:	08006a6f 	.word	0x08006a6f

08006d08 <_printf_common>:
 8006d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d0a:	0015      	movs	r5, r2
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	688a      	ldr	r2, [r1, #8]
 8006d10:	690b      	ldr	r3, [r1, #16]
 8006d12:	000c      	movs	r4, r1
 8006d14:	9000      	str	r0, [sp, #0]
 8006d16:	4293      	cmp	r3, r2
 8006d18:	da00      	bge.n	8006d1c <_printf_common+0x14>
 8006d1a:	0013      	movs	r3, r2
 8006d1c:	0022      	movs	r2, r4
 8006d1e:	602b      	str	r3, [r5, #0]
 8006d20:	3243      	adds	r2, #67	; 0x43
 8006d22:	7812      	ldrb	r2, [r2, #0]
 8006d24:	2a00      	cmp	r2, #0
 8006d26:	d001      	beq.n	8006d2c <_printf_common+0x24>
 8006d28:	3301      	adds	r3, #1
 8006d2a:	602b      	str	r3, [r5, #0]
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	069b      	lsls	r3, r3, #26
 8006d30:	d502      	bpl.n	8006d38 <_printf_common+0x30>
 8006d32:	682b      	ldr	r3, [r5, #0]
 8006d34:	3302      	adds	r3, #2
 8006d36:	602b      	str	r3, [r5, #0]
 8006d38:	6822      	ldr	r2, [r4, #0]
 8006d3a:	2306      	movs	r3, #6
 8006d3c:	0017      	movs	r7, r2
 8006d3e:	401f      	ands	r7, r3
 8006d40:	421a      	tst	r2, r3
 8006d42:	d027      	beq.n	8006d94 <_printf_common+0x8c>
 8006d44:	0023      	movs	r3, r4
 8006d46:	3343      	adds	r3, #67	; 0x43
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	1e5a      	subs	r2, r3, #1
 8006d4c:	4193      	sbcs	r3, r2
 8006d4e:	6822      	ldr	r2, [r4, #0]
 8006d50:	0692      	lsls	r2, r2, #26
 8006d52:	d430      	bmi.n	8006db6 <_printf_common+0xae>
 8006d54:	0022      	movs	r2, r4
 8006d56:	9901      	ldr	r1, [sp, #4]
 8006d58:	9800      	ldr	r0, [sp, #0]
 8006d5a:	9e08      	ldr	r6, [sp, #32]
 8006d5c:	3243      	adds	r2, #67	; 0x43
 8006d5e:	47b0      	blx	r6
 8006d60:	1c43      	adds	r3, r0, #1
 8006d62:	d025      	beq.n	8006db0 <_printf_common+0xa8>
 8006d64:	2306      	movs	r3, #6
 8006d66:	6820      	ldr	r0, [r4, #0]
 8006d68:	682a      	ldr	r2, [r5, #0]
 8006d6a:	68e1      	ldr	r1, [r4, #12]
 8006d6c:	2500      	movs	r5, #0
 8006d6e:	4003      	ands	r3, r0
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	d103      	bne.n	8006d7c <_printf_common+0x74>
 8006d74:	1a8d      	subs	r5, r1, r2
 8006d76:	43eb      	mvns	r3, r5
 8006d78:	17db      	asrs	r3, r3, #31
 8006d7a:	401d      	ands	r5, r3
 8006d7c:	68a3      	ldr	r3, [r4, #8]
 8006d7e:	6922      	ldr	r2, [r4, #16]
 8006d80:	4293      	cmp	r3, r2
 8006d82:	dd01      	ble.n	8006d88 <_printf_common+0x80>
 8006d84:	1a9b      	subs	r3, r3, r2
 8006d86:	18ed      	adds	r5, r5, r3
 8006d88:	2700      	movs	r7, #0
 8006d8a:	42bd      	cmp	r5, r7
 8006d8c:	d120      	bne.n	8006dd0 <_printf_common+0xc8>
 8006d8e:	2000      	movs	r0, #0
 8006d90:	e010      	b.n	8006db4 <_printf_common+0xac>
 8006d92:	3701      	adds	r7, #1
 8006d94:	68e3      	ldr	r3, [r4, #12]
 8006d96:	682a      	ldr	r2, [r5, #0]
 8006d98:	1a9b      	subs	r3, r3, r2
 8006d9a:	42bb      	cmp	r3, r7
 8006d9c:	ddd2      	ble.n	8006d44 <_printf_common+0x3c>
 8006d9e:	0022      	movs	r2, r4
 8006da0:	2301      	movs	r3, #1
 8006da2:	9901      	ldr	r1, [sp, #4]
 8006da4:	9800      	ldr	r0, [sp, #0]
 8006da6:	9e08      	ldr	r6, [sp, #32]
 8006da8:	3219      	adds	r2, #25
 8006daa:	47b0      	blx	r6
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	d1f0      	bne.n	8006d92 <_printf_common+0x8a>
 8006db0:	2001      	movs	r0, #1
 8006db2:	4240      	negs	r0, r0
 8006db4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006db6:	2030      	movs	r0, #48	; 0x30
 8006db8:	18e1      	adds	r1, r4, r3
 8006dba:	3143      	adds	r1, #67	; 0x43
 8006dbc:	7008      	strb	r0, [r1, #0]
 8006dbe:	0021      	movs	r1, r4
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	3145      	adds	r1, #69	; 0x45
 8006dc4:	7809      	ldrb	r1, [r1, #0]
 8006dc6:	18a2      	adds	r2, r4, r2
 8006dc8:	3243      	adds	r2, #67	; 0x43
 8006dca:	3302      	adds	r3, #2
 8006dcc:	7011      	strb	r1, [r2, #0]
 8006dce:	e7c1      	b.n	8006d54 <_printf_common+0x4c>
 8006dd0:	0022      	movs	r2, r4
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	9901      	ldr	r1, [sp, #4]
 8006dd6:	9800      	ldr	r0, [sp, #0]
 8006dd8:	9e08      	ldr	r6, [sp, #32]
 8006dda:	321a      	adds	r2, #26
 8006ddc:	47b0      	blx	r6
 8006dde:	1c43      	adds	r3, r0, #1
 8006de0:	d0e6      	beq.n	8006db0 <_printf_common+0xa8>
 8006de2:	3701      	adds	r7, #1
 8006de4:	e7d1      	b.n	8006d8a <_printf_common+0x82>
	...

08006de8 <_printf_i>:
 8006de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dea:	b08b      	sub	sp, #44	; 0x2c
 8006dec:	9206      	str	r2, [sp, #24]
 8006dee:	000a      	movs	r2, r1
 8006df0:	3243      	adds	r2, #67	; 0x43
 8006df2:	9307      	str	r3, [sp, #28]
 8006df4:	9005      	str	r0, [sp, #20]
 8006df6:	9204      	str	r2, [sp, #16]
 8006df8:	7e0a      	ldrb	r2, [r1, #24]
 8006dfa:	000c      	movs	r4, r1
 8006dfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006dfe:	2a78      	cmp	r2, #120	; 0x78
 8006e00:	d807      	bhi.n	8006e12 <_printf_i+0x2a>
 8006e02:	2a62      	cmp	r2, #98	; 0x62
 8006e04:	d809      	bhi.n	8006e1a <_printf_i+0x32>
 8006e06:	2a00      	cmp	r2, #0
 8006e08:	d100      	bne.n	8006e0c <_printf_i+0x24>
 8006e0a:	e0c1      	b.n	8006f90 <_printf_i+0x1a8>
 8006e0c:	2a58      	cmp	r2, #88	; 0x58
 8006e0e:	d100      	bne.n	8006e12 <_printf_i+0x2a>
 8006e10:	e08c      	b.n	8006f2c <_printf_i+0x144>
 8006e12:	0026      	movs	r6, r4
 8006e14:	3642      	adds	r6, #66	; 0x42
 8006e16:	7032      	strb	r2, [r6, #0]
 8006e18:	e022      	b.n	8006e60 <_printf_i+0x78>
 8006e1a:	0010      	movs	r0, r2
 8006e1c:	3863      	subs	r0, #99	; 0x63
 8006e1e:	2815      	cmp	r0, #21
 8006e20:	d8f7      	bhi.n	8006e12 <_printf_i+0x2a>
 8006e22:	f7f9 f979 	bl	8000118 <__gnu_thumb1_case_shi>
 8006e26:	0016      	.short	0x0016
 8006e28:	fff6001f 	.word	0xfff6001f
 8006e2c:	fff6fff6 	.word	0xfff6fff6
 8006e30:	001ffff6 	.word	0x001ffff6
 8006e34:	fff6fff6 	.word	0xfff6fff6
 8006e38:	fff6fff6 	.word	0xfff6fff6
 8006e3c:	003600a8 	.word	0x003600a8
 8006e40:	fff6009a 	.word	0xfff6009a
 8006e44:	00b9fff6 	.word	0x00b9fff6
 8006e48:	0036fff6 	.word	0x0036fff6
 8006e4c:	fff6fff6 	.word	0xfff6fff6
 8006e50:	009e      	.short	0x009e
 8006e52:	0026      	movs	r6, r4
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	3642      	adds	r6, #66	; 0x42
 8006e58:	1d11      	adds	r1, r2, #4
 8006e5a:	6019      	str	r1, [r3, #0]
 8006e5c:	6813      	ldr	r3, [r2, #0]
 8006e5e:	7033      	strb	r3, [r6, #0]
 8006e60:	2301      	movs	r3, #1
 8006e62:	e0a7      	b.n	8006fb4 <_printf_i+0x1cc>
 8006e64:	6808      	ldr	r0, [r1, #0]
 8006e66:	6819      	ldr	r1, [r3, #0]
 8006e68:	1d0a      	adds	r2, r1, #4
 8006e6a:	0605      	lsls	r5, r0, #24
 8006e6c:	d50b      	bpl.n	8006e86 <_printf_i+0x9e>
 8006e6e:	680d      	ldr	r5, [r1, #0]
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	2d00      	cmp	r5, #0
 8006e74:	da03      	bge.n	8006e7e <_printf_i+0x96>
 8006e76:	232d      	movs	r3, #45	; 0x2d
 8006e78:	9a04      	ldr	r2, [sp, #16]
 8006e7a:	426d      	negs	r5, r5
 8006e7c:	7013      	strb	r3, [r2, #0]
 8006e7e:	4b61      	ldr	r3, [pc, #388]	; (8007004 <_printf_i+0x21c>)
 8006e80:	270a      	movs	r7, #10
 8006e82:	9303      	str	r3, [sp, #12]
 8006e84:	e01b      	b.n	8006ebe <_printf_i+0xd6>
 8006e86:	680d      	ldr	r5, [r1, #0]
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	0641      	lsls	r1, r0, #25
 8006e8c:	d5f1      	bpl.n	8006e72 <_printf_i+0x8a>
 8006e8e:	b22d      	sxth	r5, r5
 8006e90:	e7ef      	b.n	8006e72 <_printf_i+0x8a>
 8006e92:	680d      	ldr	r5, [r1, #0]
 8006e94:	6819      	ldr	r1, [r3, #0]
 8006e96:	1d08      	adds	r0, r1, #4
 8006e98:	6018      	str	r0, [r3, #0]
 8006e9a:	062e      	lsls	r6, r5, #24
 8006e9c:	d501      	bpl.n	8006ea2 <_printf_i+0xba>
 8006e9e:	680d      	ldr	r5, [r1, #0]
 8006ea0:	e003      	b.n	8006eaa <_printf_i+0xc2>
 8006ea2:	066d      	lsls	r5, r5, #25
 8006ea4:	d5fb      	bpl.n	8006e9e <_printf_i+0xb6>
 8006ea6:	680d      	ldr	r5, [r1, #0]
 8006ea8:	b2ad      	uxth	r5, r5
 8006eaa:	4b56      	ldr	r3, [pc, #344]	; (8007004 <_printf_i+0x21c>)
 8006eac:	2708      	movs	r7, #8
 8006eae:	9303      	str	r3, [sp, #12]
 8006eb0:	2a6f      	cmp	r2, #111	; 0x6f
 8006eb2:	d000      	beq.n	8006eb6 <_printf_i+0xce>
 8006eb4:	3702      	adds	r7, #2
 8006eb6:	0023      	movs	r3, r4
 8006eb8:	2200      	movs	r2, #0
 8006eba:	3343      	adds	r3, #67	; 0x43
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	6863      	ldr	r3, [r4, #4]
 8006ec0:	60a3      	str	r3, [r4, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	db03      	blt.n	8006ece <_printf_i+0xe6>
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	6821      	ldr	r1, [r4, #0]
 8006eca:	4391      	bics	r1, r2
 8006ecc:	6021      	str	r1, [r4, #0]
 8006ece:	2d00      	cmp	r5, #0
 8006ed0:	d102      	bne.n	8006ed8 <_printf_i+0xf0>
 8006ed2:	9e04      	ldr	r6, [sp, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00c      	beq.n	8006ef2 <_printf_i+0x10a>
 8006ed8:	9e04      	ldr	r6, [sp, #16]
 8006eda:	0028      	movs	r0, r5
 8006edc:	0039      	movs	r1, r7
 8006ede:	f7f9 f9ab 	bl	8000238 <__aeabi_uidivmod>
 8006ee2:	9b03      	ldr	r3, [sp, #12]
 8006ee4:	3e01      	subs	r6, #1
 8006ee6:	5c5b      	ldrb	r3, [r3, r1]
 8006ee8:	7033      	strb	r3, [r6, #0]
 8006eea:	002b      	movs	r3, r5
 8006eec:	0005      	movs	r5, r0
 8006eee:	429f      	cmp	r7, r3
 8006ef0:	d9f3      	bls.n	8006eda <_printf_i+0xf2>
 8006ef2:	2f08      	cmp	r7, #8
 8006ef4:	d109      	bne.n	8006f0a <_printf_i+0x122>
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	07db      	lsls	r3, r3, #31
 8006efa:	d506      	bpl.n	8006f0a <_printf_i+0x122>
 8006efc:	6863      	ldr	r3, [r4, #4]
 8006efe:	6922      	ldr	r2, [r4, #16]
 8006f00:	4293      	cmp	r3, r2
 8006f02:	dc02      	bgt.n	8006f0a <_printf_i+0x122>
 8006f04:	2330      	movs	r3, #48	; 0x30
 8006f06:	3e01      	subs	r6, #1
 8006f08:	7033      	strb	r3, [r6, #0]
 8006f0a:	9b04      	ldr	r3, [sp, #16]
 8006f0c:	1b9b      	subs	r3, r3, r6
 8006f0e:	6123      	str	r3, [r4, #16]
 8006f10:	9b07      	ldr	r3, [sp, #28]
 8006f12:	0021      	movs	r1, r4
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	9805      	ldr	r0, [sp, #20]
 8006f18:	9b06      	ldr	r3, [sp, #24]
 8006f1a:	aa09      	add	r2, sp, #36	; 0x24
 8006f1c:	f7ff fef4 	bl	8006d08 <_printf_common>
 8006f20:	1c43      	adds	r3, r0, #1
 8006f22:	d14c      	bne.n	8006fbe <_printf_i+0x1d6>
 8006f24:	2001      	movs	r0, #1
 8006f26:	4240      	negs	r0, r0
 8006f28:	b00b      	add	sp, #44	; 0x2c
 8006f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f2c:	3145      	adds	r1, #69	; 0x45
 8006f2e:	700a      	strb	r2, [r1, #0]
 8006f30:	4a34      	ldr	r2, [pc, #208]	; (8007004 <_printf_i+0x21c>)
 8006f32:	9203      	str	r2, [sp, #12]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	6821      	ldr	r1, [r4, #0]
 8006f38:	ca20      	ldmia	r2!, {r5}
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	0608      	lsls	r0, r1, #24
 8006f3e:	d516      	bpl.n	8006f6e <_printf_i+0x186>
 8006f40:	07cb      	lsls	r3, r1, #31
 8006f42:	d502      	bpl.n	8006f4a <_printf_i+0x162>
 8006f44:	2320      	movs	r3, #32
 8006f46:	4319      	orrs	r1, r3
 8006f48:	6021      	str	r1, [r4, #0]
 8006f4a:	2710      	movs	r7, #16
 8006f4c:	2d00      	cmp	r5, #0
 8006f4e:	d1b2      	bne.n	8006eb6 <_printf_i+0xce>
 8006f50:	2320      	movs	r3, #32
 8006f52:	6822      	ldr	r2, [r4, #0]
 8006f54:	439a      	bics	r2, r3
 8006f56:	6022      	str	r2, [r4, #0]
 8006f58:	e7ad      	b.n	8006eb6 <_printf_i+0xce>
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	6809      	ldr	r1, [r1, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	6022      	str	r2, [r4, #0]
 8006f62:	0022      	movs	r2, r4
 8006f64:	2178      	movs	r1, #120	; 0x78
 8006f66:	3245      	adds	r2, #69	; 0x45
 8006f68:	7011      	strb	r1, [r2, #0]
 8006f6a:	4a27      	ldr	r2, [pc, #156]	; (8007008 <_printf_i+0x220>)
 8006f6c:	e7e1      	b.n	8006f32 <_printf_i+0x14a>
 8006f6e:	0648      	lsls	r0, r1, #25
 8006f70:	d5e6      	bpl.n	8006f40 <_printf_i+0x158>
 8006f72:	b2ad      	uxth	r5, r5
 8006f74:	e7e4      	b.n	8006f40 <_printf_i+0x158>
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	680d      	ldr	r5, [r1, #0]
 8006f7a:	1d10      	adds	r0, r2, #4
 8006f7c:	6949      	ldr	r1, [r1, #20]
 8006f7e:	6018      	str	r0, [r3, #0]
 8006f80:	6813      	ldr	r3, [r2, #0]
 8006f82:	062e      	lsls	r6, r5, #24
 8006f84:	d501      	bpl.n	8006f8a <_printf_i+0x1a2>
 8006f86:	6019      	str	r1, [r3, #0]
 8006f88:	e002      	b.n	8006f90 <_printf_i+0x1a8>
 8006f8a:	066d      	lsls	r5, r5, #25
 8006f8c:	d5fb      	bpl.n	8006f86 <_printf_i+0x19e>
 8006f8e:	8019      	strh	r1, [r3, #0]
 8006f90:	2300      	movs	r3, #0
 8006f92:	9e04      	ldr	r6, [sp, #16]
 8006f94:	6123      	str	r3, [r4, #16]
 8006f96:	e7bb      	b.n	8006f10 <_printf_i+0x128>
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	1d11      	adds	r1, r2, #4
 8006f9c:	6019      	str	r1, [r3, #0]
 8006f9e:	6816      	ldr	r6, [r2, #0]
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	0030      	movs	r0, r6
 8006fa4:	6862      	ldr	r2, [r4, #4]
 8006fa6:	f000 f97f 	bl	80072a8 <memchr>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	d001      	beq.n	8006fb2 <_printf_i+0x1ca>
 8006fae:	1b80      	subs	r0, r0, r6
 8006fb0:	6060      	str	r0, [r4, #4]
 8006fb2:	6863      	ldr	r3, [r4, #4]
 8006fb4:	6123      	str	r3, [r4, #16]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	9a04      	ldr	r2, [sp, #16]
 8006fba:	7013      	strb	r3, [r2, #0]
 8006fbc:	e7a8      	b.n	8006f10 <_printf_i+0x128>
 8006fbe:	6923      	ldr	r3, [r4, #16]
 8006fc0:	0032      	movs	r2, r6
 8006fc2:	9906      	ldr	r1, [sp, #24]
 8006fc4:	9805      	ldr	r0, [sp, #20]
 8006fc6:	9d07      	ldr	r5, [sp, #28]
 8006fc8:	47a8      	blx	r5
 8006fca:	1c43      	adds	r3, r0, #1
 8006fcc:	d0aa      	beq.n	8006f24 <_printf_i+0x13c>
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	079b      	lsls	r3, r3, #30
 8006fd2:	d415      	bmi.n	8007000 <_printf_i+0x218>
 8006fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd6:	68e0      	ldr	r0, [r4, #12]
 8006fd8:	4298      	cmp	r0, r3
 8006fda:	daa5      	bge.n	8006f28 <_printf_i+0x140>
 8006fdc:	0018      	movs	r0, r3
 8006fde:	e7a3      	b.n	8006f28 <_printf_i+0x140>
 8006fe0:	0022      	movs	r2, r4
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	9906      	ldr	r1, [sp, #24]
 8006fe6:	9805      	ldr	r0, [sp, #20]
 8006fe8:	9e07      	ldr	r6, [sp, #28]
 8006fea:	3219      	adds	r2, #25
 8006fec:	47b0      	blx	r6
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	d098      	beq.n	8006f24 <_printf_i+0x13c>
 8006ff2:	3501      	adds	r5, #1
 8006ff4:	68e3      	ldr	r3, [r4, #12]
 8006ff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ff8:	1a9b      	subs	r3, r3, r2
 8006ffa:	42ab      	cmp	r3, r5
 8006ffc:	dcf0      	bgt.n	8006fe0 <_printf_i+0x1f8>
 8006ffe:	e7e9      	b.n	8006fd4 <_printf_i+0x1ec>
 8007000:	2500      	movs	r5, #0
 8007002:	e7f7      	b.n	8006ff4 <_printf_i+0x20c>
 8007004:	08007749 	.word	0x08007749
 8007008:	0800775a 	.word	0x0800775a

0800700c <_read_r>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	0004      	movs	r4, r0
 8007010:	0008      	movs	r0, r1
 8007012:	0011      	movs	r1, r2
 8007014:	001a      	movs	r2, r3
 8007016:	2300      	movs	r3, #0
 8007018:	4d05      	ldr	r5, [pc, #20]	; (8007030 <_read_r+0x24>)
 800701a:	602b      	str	r3, [r5, #0]
 800701c:	f7fa fd46 	bl	8001aac <_read>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d103      	bne.n	800702c <_read_r+0x20>
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d000      	beq.n	800702c <_read_r+0x20>
 800702a:	6023      	str	r3, [r4, #0]
 800702c:	bd70      	pop	{r4, r5, r6, pc}
 800702e:	46c0      	nop			; (mov r8, r8)
 8007030:	20000b94 	.word	0x20000b94

08007034 <__swbuf_r>:
 8007034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007036:	0005      	movs	r5, r0
 8007038:	000e      	movs	r6, r1
 800703a:	0014      	movs	r4, r2
 800703c:	2800      	cmp	r0, #0
 800703e:	d004      	beq.n	800704a <__swbuf_r+0x16>
 8007040:	6983      	ldr	r3, [r0, #24]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <__swbuf_r+0x16>
 8007046:	f7ff fa81 	bl	800654c <__sinit>
 800704a:	4b22      	ldr	r3, [pc, #136]	; (80070d4 <__swbuf_r+0xa0>)
 800704c:	429c      	cmp	r4, r3
 800704e:	d12e      	bne.n	80070ae <__swbuf_r+0x7a>
 8007050:	686c      	ldr	r4, [r5, #4]
 8007052:	69a3      	ldr	r3, [r4, #24]
 8007054:	60a3      	str	r3, [r4, #8]
 8007056:	89a3      	ldrh	r3, [r4, #12]
 8007058:	071b      	lsls	r3, r3, #28
 800705a:	d532      	bpl.n	80070c2 <__swbuf_r+0x8e>
 800705c:	6923      	ldr	r3, [r4, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d02f      	beq.n	80070c2 <__swbuf_r+0x8e>
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	6922      	ldr	r2, [r4, #16]
 8007066:	b2f7      	uxtb	r7, r6
 8007068:	1a98      	subs	r0, r3, r2
 800706a:	6963      	ldr	r3, [r4, #20]
 800706c:	b2f6      	uxtb	r6, r6
 800706e:	4283      	cmp	r3, r0
 8007070:	dc05      	bgt.n	800707e <__swbuf_r+0x4a>
 8007072:	0021      	movs	r1, r4
 8007074:	0028      	movs	r0, r5
 8007076:	f7ff f9b1 	bl	80063dc <_fflush_r>
 800707a:	2800      	cmp	r0, #0
 800707c:	d127      	bne.n	80070ce <__swbuf_r+0x9a>
 800707e:	68a3      	ldr	r3, [r4, #8]
 8007080:	3001      	adds	r0, #1
 8007082:	3b01      	subs	r3, #1
 8007084:	60a3      	str	r3, [r4, #8]
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	6022      	str	r2, [r4, #0]
 800708c:	701f      	strb	r7, [r3, #0]
 800708e:	6963      	ldr	r3, [r4, #20]
 8007090:	4283      	cmp	r3, r0
 8007092:	d004      	beq.n	800709e <__swbuf_r+0x6a>
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	07db      	lsls	r3, r3, #31
 8007098:	d507      	bpl.n	80070aa <__swbuf_r+0x76>
 800709a:	2e0a      	cmp	r6, #10
 800709c:	d105      	bne.n	80070aa <__swbuf_r+0x76>
 800709e:	0021      	movs	r1, r4
 80070a0:	0028      	movs	r0, r5
 80070a2:	f7ff f99b 	bl	80063dc <_fflush_r>
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d111      	bne.n	80070ce <__swbuf_r+0x9a>
 80070aa:	0030      	movs	r0, r6
 80070ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ae:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <__swbuf_r+0xa4>)
 80070b0:	429c      	cmp	r4, r3
 80070b2:	d101      	bne.n	80070b8 <__swbuf_r+0x84>
 80070b4:	68ac      	ldr	r4, [r5, #8]
 80070b6:	e7cc      	b.n	8007052 <__swbuf_r+0x1e>
 80070b8:	4b08      	ldr	r3, [pc, #32]	; (80070dc <__swbuf_r+0xa8>)
 80070ba:	429c      	cmp	r4, r3
 80070bc:	d1c9      	bne.n	8007052 <__swbuf_r+0x1e>
 80070be:	68ec      	ldr	r4, [r5, #12]
 80070c0:	e7c7      	b.n	8007052 <__swbuf_r+0x1e>
 80070c2:	0021      	movs	r1, r4
 80070c4:	0028      	movs	r0, r5
 80070c6:	f000 f80b 	bl	80070e0 <__swsetup_r>
 80070ca:	2800      	cmp	r0, #0
 80070cc:	d0c9      	beq.n	8007062 <__swbuf_r+0x2e>
 80070ce:	2601      	movs	r6, #1
 80070d0:	4276      	negs	r6, r6
 80070d2:	e7ea      	b.n	80070aa <__swbuf_r+0x76>
 80070d4:	080076f4 	.word	0x080076f4
 80070d8:	08007714 	.word	0x08007714
 80070dc:	080076d4 	.word	0x080076d4

080070e0 <__swsetup_r>:
 80070e0:	4b37      	ldr	r3, [pc, #220]	; (80071c0 <__swsetup_r+0xe0>)
 80070e2:	b570      	push	{r4, r5, r6, lr}
 80070e4:	681d      	ldr	r5, [r3, #0]
 80070e6:	0006      	movs	r6, r0
 80070e8:	000c      	movs	r4, r1
 80070ea:	2d00      	cmp	r5, #0
 80070ec:	d005      	beq.n	80070fa <__swsetup_r+0x1a>
 80070ee:	69ab      	ldr	r3, [r5, #24]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d102      	bne.n	80070fa <__swsetup_r+0x1a>
 80070f4:	0028      	movs	r0, r5
 80070f6:	f7ff fa29 	bl	800654c <__sinit>
 80070fa:	4b32      	ldr	r3, [pc, #200]	; (80071c4 <__swsetup_r+0xe4>)
 80070fc:	429c      	cmp	r4, r3
 80070fe:	d10f      	bne.n	8007120 <__swsetup_r+0x40>
 8007100:	686c      	ldr	r4, [r5, #4]
 8007102:	230c      	movs	r3, #12
 8007104:	5ee2      	ldrsh	r2, [r4, r3]
 8007106:	b293      	uxth	r3, r2
 8007108:	0711      	lsls	r1, r2, #28
 800710a:	d42d      	bmi.n	8007168 <__swsetup_r+0x88>
 800710c:	06d9      	lsls	r1, r3, #27
 800710e:	d411      	bmi.n	8007134 <__swsetup_r+0x54>
 8007110:	2309      	movs	r3, #9
 8007112:	2001      	movs	r0, #1
 8007114:	6033      	str	r3, [r6, #0]
 8007116:	3337      	adds	r3, #55	; 0x37
 8007118:	4313      	orrs	r3, r2
 800711a:	81a3      	strh	r3, [r4, #12]
 800711c:	4240      	negs	r0, r0
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	4b29      	ldr	r3, [pc, #164]	; (80071c8 <__swsetup_r+0xe8>)
 8007122:	429c      	cmp	r4, r3
 8007124:	d101      	bne.n	800712a <__swsetup_r+0x4a>
 8007126:	68ac      	ldr	r4, [r5, #8]
 8007128:	e7eb      	b.n	8007102 <__swsetup_r+0x22>
 800712a:	4b28      	ldr	r3, [pc, #160]	; (80071cc <__swsetup_r+0xec>)
 800712c:	429c      	cmp	r4, r3
 800712e:	d1e8      	bne.n	8007102 <__swsetup_r+0x22>
 8007130:	68ec      	ldr	r4, [r5, #12]
 8007132:	e7e6      	b.n	8007102 <__swsetup_r+0x22>
 8007134:	075b      	lsls	r3, r3, #29
 8007136:	d513      	bpl.n	8007160 <__swsetup_r+0x80>
 8007138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800713a:	2900      	cmp	r1, #0
 800713c:	d008      	beq.n	8007150 <__swsetup_r+0x70>
 800713e:	0023      	movs	r3, r4
 8007140:	3344      	adds	r3, #68	; 0x44
 8007142:	4299      	cmp	r1, r3
 8007144:	d002      	beq.n	800714c <__swsetup_r+0x6c>
 8007146:	0030      	movs	r0, r6
 8007148:	f7ff fad8 	bl	80066fc <_free_r>
 800714c:	2300      	movs	r3, #0
 800714e:	6363      	str	r3, [r4, #52]	; 0x34
 8007150:	2224      	movs	r2, #36	; 0x24
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	4393      	bics	r3, r2
 8007156:	81a3      	strh	r3, [r4, #12]
 8007158:	2300      	movs	r3, #0
 800715a:	6063      	str	r3, [r4, #4]
 800715c:	6923      	ldr	r3, [r4, #16]
 800715e:	6023      	str	r3, [r4, #0]
 8007160:	2308      	movs	r3, #8
 8007162:	89a2      	ldrh	r2, [r4, #12]
 8007164:	4313      	orrs	r3, r2
 8007166:	81a3      	strh	r3, [r4, #12]
 8007168:	6923      	ldr	r3, [r4, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10b      	bne.n	8007186 <__swsetup_r+0xa6>
 800716e:	21a0      	movs	r1, #160	; 0xa0
 8007170:	2280      	movs	r2, #128	; 0x80
 8007172:	89a3      	ldrh	r3, [r4, #12]
 8007174:	0089      	lsls	r1, r1, #2
 8007176:	0092      	lsls	r2, r2, #2
 8007178:	400b      	ands	r3, r1
 800717a:	4293      	cmp	r3, r2
 800717c:	d003      	beq.n	8007186 <__swsetup_r+0xa6>
 800717e:	0021      	movs	r1, r4
 8007180:	0030      	movs	r0, r6
 8007182:	f000 f84d 	bl	8007220 <__smakebuf_r>
 8007186:	220c      	movs	r2, #12
 8007188:	5ea3      	ldrsh	r3, [r4, r2]
 800718a:	2001      	movs	r0, #1
 800718c:	001a      	movs	r2, r3
 800718e:	b299      	uxth	r1, r3
 8007190:	4002      	ands	r2, r0
 8007192:	4203      	tst	r3, r0
 8007194:	d00f      	beq.n	80071b6 <__swsetup_r+0xd6>
 8007196:	2200      	movs	r2, #0
 8007198:	60a2      	str	r2, [r4, #8]
 800719a:	6962      	ldr	r2, [r4, #20]
 800719c:	4252      	negs	r2, r2
 800719e:	61a2      	str	r2, [r4, #24]
 80071a0:	2000      	movs	r0, #0
 80071a2:	6922      	ldr	r2, [r4, #16]
 80071a4:	4282      	cmp	r2, r0
 80071a6:	d1ba      	bne.n	800711e <__swsetup_r+0x3e>
 80071a8:	060a      	lsls	r2, r1, #24
 80071aa:	d5b8      	bpl.n	800711e <__swsetup_r+0x3e>
 80071ac:	2240      	movs	r2, #64	; 0x40
 80071ae:	4313      	orrs	r3, r2
 80071b0:	81a3      	strh	r3, [r4, #12]
 80071b2:	3801      	subs	r0, #1
 80071b4:	e7b3      	b.n	800711e <__swsetup_r+0x3e>
 80071b6:	0788      	lsls	r0, r1, #30
 80071b8:	d400      	bmi.n	80071bc <__swsetup_r+0xdc>
 80071ba:	6962      	ldr	r2, [r4, #20]
 80071bc:	60a2      	str	r2, [r4, #8]
 80071be:	e7ef      	b.n	80071a0 <__swsetup_r+0xc0>
 80071c0:	20000050 	.word	0x20000050
 80071c4:	080076f4 	.word	0x080076f4
 80071c8:	08007714 	.word	0x08007714
 80071cc:	080076d4 	.word	0x080076d4

080071d0 <__swhatbuf_r>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	000e      	movs	r6, r1
 80071d4:	001d      	movs	r5, r3
 80071d6:	230e      	movs	r3, #14
 80071d8:	5ec9      	ldrsh	r1, [r1, r3]
 80071da:	0014      	movs	r4, r2
 80071dc:	b096      	sub	sp, #88	; 0x58
 80071de:	2900      	cmp	r1, #0
 80071e0:	da08      	bge.n	80071f4 <__swhatbuf_r+0x24>
 80071e2:	220c      	movs	r2, #12
 80071e4:	5eb3      	ldrsh	r3, [r6, r2]
 80071e6:	2200      	movs	r2, #0
 80071e8:	602a      	str	r2, [r5, #0]
 80071ea:	061b      	lsls	r3, r3, #24
 80071ec:	d411      	bmi.n	8007212 <__swhatbuf_r+0x42>
 80071ee:	2380      	movs	r3, #128	; 0x80
 80071f0:	00db      	lsls	r3, r3, #3
 80071f2:	e00f      	b.n	8007214 <__swhatbuf_r+0x44>
 80071f4:	466a      	mov	r2, sp
 80071f6:	f000 f863 	bl	80072c0 <_fstat_r>
 80071fa:	2800      	cmp	r0, #0
 80071fc:	dbf1      	blt.n	80071e2 <__swhatbuf_r+0x12>
 80071fe:	23f0      	movs	r3, #240	; 0xf0
 8007200:	9901      	ldr	r1, [sp, #4]
 8007202:	021b      	lsls	r3, r3, #8
 8007204:	4019      	ands	r1, r3
 8007206:	4b05      	ldr	r3, [pc, #20]	; (800721c <__swhatbuf_r+0x4c>)
 8007208:	18c9      	adds	r1, r1, r3
 800720a:	424b      	negs	r3, r1
 800720c:	4159      	adcs	r1, r3
 800720e:	6029      	str	r1, [r5, #0]
 8007210:	e7ed      	b.n	80071ee <__swhatbuf_r+0x1e>
 8007212:	2340      	movs	r3, #64	; 0x40
 8007214:	2000      	movs	r0, #0
 8007216:	6023      	str	r3, [r4, #0]
 8007218:	b016      	add	sp, #88	; 0x58
 800721a:	bd70      	pop	{r4, r5, r6, pc}
 800721c:	ffffe000 	.word	0xffffe000

08007220 <__smakebuf_r>:
 8007220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007222:	2602      	movs	r6, #2
 8007224:	898b      	ldrh	r3, [r1, #12]
 8007226:	0005      	movs	r5, r0
 8007228:	000c      	movs	r4, r1
 800722a:	4233      	tst	r3, r6
 800722c:	d006      	beq.n	800723c <__smakebuf_r+0x1c>
 800722e:	0023      	movs	r3, r4
 8007230:	3347      	adds	r3, #71	; 0x47
 8007232:	6023      	str	r3, [r4, #0]
 8007234:	6123      	str	r3, [r4, #16]
 8007236:	2301      	movs	r3, #1
 8007238:	6163      	str	r3, [r4, #20]
 800723a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800723c:	466a      	mov	r2, sp
 800723e:	ab01      	add	r3, sp, #4
 8007240:	f7ff ffc6 	bl	80071d0 <__swhatbuf_r>
 8007244:	9900      	ldr	r1, [sp, #0]
 8007246:	0007      	movs	r7, r0
 8007248:	0028      	movs	r0, r5
 800724a:	f7ff fac3 	bl	80067d4 <_malloc_r>
 800724e:	2800      	cmp	r0, #0
 8007250:	d108      	bne.n	8007264 <__smakebuf_r+0x44>
 8007252:	220c      	movs	r2, #12
 8007254:	5ea3      	ldrsh	r3, [r4, r2]
 8007256:	059a      	lsls	r2, r3, #22
 8007258:	d4ef      	bmi.n	800723a <__smakebuf_r+0x1a>
 800725a:	2203      	movs	r2, #3
 800725c:	4393      	bics	r3, r2
 800725e:	431e      	orrs	r6, r3
 8007260:	81a6      	strh	r6, [r4, #12]
 8007262:	e7e4      	b.n	800722e <__smakebuf_r+0xe>
 8007264:	4b0f      	ldr	r3, [pc, #60]	; (80072a4 <__smakebuf_r+0x84>)
 8007266:	62ab      	str	r3, [r5, #40]	; 0x28
 8007268:	2380      	movs	r3, #128	; 0x80
 800726a:	89a2      	ldrh	r2, [r4, #12]
 800726c:	6020      	str	r0, [r4, #0]
 800726e:	4313      	orrs	r3, r2
 8007270:	81a3      	strh	r3, [r4, #12]
 8007272:	9b00      	ldr	r3, [sp, #0]
 8007274:	6120      	str	r0, [r4, #16]
 8007276:	6163      	str	r3, [r4, #20]
 8007278:	9b01      	ldr	r3, [sp, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00d      	beq.n	800729a <__smakebuf_r+0x7a>
 800727e:	0028      	movs	r0, r5
 8007280:	230e      	movs	r3, #14
 8007282:	5ee1      	ldrsh	r1, [r4, r3]
 8007284:	f000 f82e 	bl	80072e4 <_isatty_r>
 8007288:	2800      	cmp	r0, #0
 800728a:	d006      	beq.n	800729a <__smakebuf_r+0x7a>
 800728c:	2203      	movs	r2, #3
 800728e:	89a3      	ldrh	r3, [r4, #12]
 8007290:	4393      	bics	r3, r2
 8007292:	001a      	movs	r2, r3
 8007294:	2301      	movs	r3, #1
 8007296:	4313      	orrs	r3, r2
 8007298:	81a3      	strh	r3, [r4, #12]
 800729a:	89a0      	ldrh	r0, [r4, #12]
 800729c:	4307      	orrs	r7, r0
 800729e:	81a7      	strh	r7, [r4, #12]
 80072a0:	e7cb      	b.n	800723a <__smakebuf_r+0x1a>
 80072a2:	46c0      	nop			; (mov r8, r8)
 80072a4:	080064d1 	.word	0x080064d1

080072a8 <memchr>:
 80072a8:	b2c9      	uxtb	r1, r1
 80072aa:	1882      	adds	r2, r0, r2
 80072ac:	4290      	cmp	r0, r2
 80072ae:	d101      	bne.n	80072b4 <memchr+0xc>
 80072b0:	2000      	movs	r0, #0
 80072b2:	4770      	bx	lr
 80072b4:	7803      	ldrb	r3, [r0, #0]
 80072b6:	428b      	cmp	r3, r1
 80072b8:	d0fb      	beq.n	80072b2 <memchr+0xa>
 80072ba:	3001      	adds	r0, #1
 80072bc:	e7f6      	b.n	80072ac <memchr+0x4>
	...

080072c0 <_fstat_r>:
 80072c0:	2300      	movs	r3, #0
 80072c2:	b570      	push	{r4, r5, r6, lr}
 80072c4:	4d06      	ldr	r5, [pc, #24]	; (80072e0 <_fstat_r+0x20>)
 80072c6:	0004      	movs	r4, r0
 80072c8:	0008      	movs	r0, r1
 80072ca:	0011      	movs	r1, r2
 80072cc:	602b      	str	r3, [r5, #0]
 80072ce:	f7fa fc30 	bl	8001b32 <_fstat>
 80072d2:	1c43      	adds	r3, r0, #1
 80072d4:	d103      	bne.n	80072de <_fstat_r+0x1e>
 80072d6:	682b      	ldr	r3, [r5, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d000      	beq.n	80072de <_fstat_r+0x1e>
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	bd70      	pop	{r4, r5, r6, pc}
 80072e0:	20000b94 	.word	0x20000b94

080072e4 <_isatty_r>:
 80072e4:	2300      	movs	r3, #0
 80072e6:	b570      	push	{r4, r5, r6, lr}
 80072e8:	4d06      	ldr	r5, [pc, #24]	; (8007304 <_isatty_r+0x20>)
 80072ea:	0004      	movs	r4, r0
 80072ec:	0008      	movs	r0, r1
 80072ee:	602b      	str	r3, [r5, #0]
 80072f0:	f7fa fc2d 	bl	8001b4e <_isatty>
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	d103      	bne.n	8007300 <_isatty_r+0x1c>
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d000      	beq.n	8007300 <_isatty_r+0x1c>
 80072fe:	6023      	str	r3, [r4, #0]
 8007300:	bd70      	pop	{r4, r5, r6, pc}
 8007302:	46c0      	nop			; (mov r8, r8)
 8007304:	20000b94 	.word	0x20000b94

08007308 <_init>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	46c0      	nop			; (mov r8, r8)
 800730c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730e:	bc08      	pop	{r3}
 8007310:	469e      	mov	lr, r3
 8007312:	4770      	bx	lr

08007314 <_fini>:
 8007314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007316:	46c0      	nop			; (mov r8, r8)
 8007318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800731a:	bc08      	pop	{r3}
 800731c:	469e      	mov	lr, r3
 800731e:	4770      	bx	lr

08007320 <__FLASH_Program_Fast_veneer>:
 8007320:	b401      	push	{r0}
 8007322:	4802      	ldr	r0, [pc, #8]	; (800732c <__FLASH_Program_Fast_veneer+0xc>)
 8007324:	4684      	mov	ip, r0
 8007326:	bc01      	pop	{r0}
 8007328:	4760      	bx	ip
 800732a:	bf00      	nop
 800732c:	200000b5 	.word	0x200000b5

Disassembly of section .data:

20000000 <SERVER_BDADDRR>:
20000000:	04030201 00000605                       ........

20000008 <StartPageAddress>:
20000008:	08040000                                ....

2000000c <consd>:
2000000c:	                                         ..

2000000e <next_ack>:
2000000e:	                                         ..

20000010 <CHAT_SERVICE_UUID>:
20000010:	2b987b88 9d89fc6b b8ae48f4 984f3988     .{.+k....H...9O.

20000020 <RX_CHAR_UUID>:
20000020:	2b987b88 9d89fc6b b8ae49f4 984f3988     .{.+k....I...9O.

20000030 <TX_CHAR_UUID>:
20000030:	2b987b88 9d89fc6b b8ae4af4 984f3988     .{.+k....J...9O.

20000040 <set_connectable>:
20000040:	00000001                                ....

20000044 <SystemCoreClock>:
20000044:	00f42400                                .$..

20000048 <uwTickPrio>:
20000048:	00000004                                ....

2000004c <uwTickFreq>:
2000004c:	00000001                                ....

20000050 <_impure_ptr>:
20000050:	20000054                                T.. 

20000054 <impure_data>:
20000054:	00000000 080076f4 08007714 080076d4     .....v...w...v..
	...

200000b4 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200000b4:	b580      	push	{r7, lr}
200000b6:	b088      	sub	sp, #32
200000b8:	af00      	add	r7, sp, #0
200000ba:	6078      	str	r0, [r7, #4]
200000bc:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200000be:	231f      	movs	r3, #31
200000c0:	18fb      	adds	r3, r7, r3
200000c2:	2200      	movs	r2, #0
200000c4:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200000c6:	687b      	ldr	r3, [r7, #4]
200000c8:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200000ca:	683b      	ldr	r3, [r7, #0]
200000cc:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200000ce:	4b1a      	ldr	r3, [pc, #104]	; (20000138 <FLASH_Program_Fast+0x84>)
200000d0:	695a      	ldr	r2, [r3, #20]
200000d2:	4b19      	ldr	r3, [pc, #100]	; (20000138 <FLASH_Program_Fast+0x84>)
200000d4:	2180      	movs	r1, #128	; 0x80
200000d6:	02c9      	lsls	r1, r1, #11
200000d8:	430a      	orrs	r2, r1
200000da:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000dc:	f3ef 8310 	mrs	r3, PRIMASK
200000e0:	60fb      	str	r3, [r7, #12]
  return(result);
200000e2:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000e6:	b672      	cpsid	i
}
200000e8:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000ea:	e00f      	b.n	2000010c <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000ec:	697a      	ldr	r2, [r7, #20]
200000ee:	69bb      	ldr	r3, [r7, #24]
200000f0:	6812      	ldr	r2, [r2, #0]
200000f2:	601a      	str	r2, [r3, #0]
    src += 4U;
200000f4:	697b      	ldr	r3, [r7, #20]
200000f6:	3304      	adds	r3, #4
200000f8:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000fa:	69bb      	ldr	r3, [r7, #24]
200000fc:	3304      	adds	r3, #4
200000fe:	61bb      	str	r3, [r7, #24]
    index++;
20000100:	211f      	movs	r1, #31
20000102:	187b      	adds	r3, r7, r1
20000104:	781a      	ldrb	r2, [r3, #0]
20000106:	187b      	adds	r3, r7, r1
20000108:	3201      	adds	r2, #1
2000010a:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
2000010c:	231f      	movs	r3, #31
2000010e:	18fb      	adds	r3, r7, r3
20000110:	781b      	ldrb	r3, [r3, #0]
20000112:	2b3f      	cmp	r3, #63	; 0x3f
20000114:	d9ea      	bls.n	200000ec <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
20000116:	46c0      	nop			; (mov r8, r8)
20000118:	4b07      	ldr	r3, [pc, #28]	; (20000138 <FLASH_Program_Fast+0x84>)
2000011a:	691a      	ldr	r2, [r3, #16]
2000011c:	23c0      	movs	r3, #192	; 0xc0
2000011e:	029b      	lsls	r3, r3, #10
20000120:	4013      	ands	r3, r2
20000122:	d1f9      	bne.n	20000118 <FLASH_Program_Fast+0x64>
20000124:	693b      	ldr	r3, [r7, #16]
20000126:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000128:	68bb      	ldr	r3, [r7, #8]
2000012a:	f383 8810 	msr	PRIMASK, r3
}
2000012e:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000130:	46c0      	nop			; (mov r8, r8)
20000132:	46bd      	mov	sp, r7
20000134:	b008      	add	sp, #32
20000136:	bd80      	pop	{r7, pc}
20000138:	40022000 	.word	0x40022000
