
BLE_FW_Update.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab58  080000c0  080000c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b00  0800ac18  0800ac18  0001ac18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 CMOX_CTA_PROTECTED_DATA 00000500  0800b718  0800b718  0001b718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800bc18  0800bc18  00020148  2**0
                  CONTENTS
  5 .ARM          00000008  0800bc18  0800bc18  0001bc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800bc20  0800bc20  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800bc20  0800bc20  0001bc20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800bc24  0800bc24  0001bc24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000148  20000000  0800bc28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
 10 .bss          000006dc  20000148  0800bd70  00020148  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000824  0800bd70  00020824  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 13 .debug_info   000239b6  00000000  00000000  00020176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050fb  00000000  00000000  00043b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b10  00000000  00000000  00048c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001900  00000000  00000000  0004a738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f8e  00000000  00000000  0004c038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026144  00000000  00000000  00070fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce10b  00000000  00000000  0009710a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00165215  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000030  00000000  00000000  00165268  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00006aa4  00000000  00000000  00165298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000148 	.word	0x20000148
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800abec 	.word	0x0800abec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000014c 	.word	0x2000014c
 8000104:	0800abec 	.word	0x0800abec

08000108 <cmox_aead_encrypt>:
 8000108:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800010a:	b08c      	sub	sp, #48	; 0x30
 800010c:	001f      	movs	r7, r3
 800010e:	4b1d      	ldr	r3, [pc, #116]	; (8000184 <cmox_aead_encrypt+0x7c>)
 8000110:	2800      	cmp	r0, #0
 8000112:	d020      	beq.n	8000156 <cmox_aead_encrypt+0x4e>
 8000114:	6840      	ldr	r0, [r0, #4]
 8000116:	283a      	cmp	r0, #58	; 0x3a
 8000118:	d001      	beq.n	800011e <cmox_aead_encrypt+0x16>
 800011a:	1e58      	subs	r0, r3, #1
 800011c:	e030      	b.n	8000180 <cmox_aead_encrypt+0x78>
 800011e:	9109      	str	r1, [sp, #36]	; 0x24
 8000120:	9208      	str	r2, [sp, #32]
 8000122:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8000124:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000126:	2800      	cmp	r0, #0
 8000128:	d102      	bne.n	8000130 <cmox_aead_encrypt+0x28>
 800012a:	2a00      	cmp	r2, #0
 800012c:	d002      	beq.n	8000134 <cmox_aead_encrypt+0x2c>
 800012e:	e012      	b.n	8000156 <cmox_aead_encrypt+0x4e>
 8000130:	2e00      	cmp	r6, #0
 8000132:	d010      	beq.n	8000156 <cmox_aead_encrypt+0x4e>
 8000134:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000136:	2a00      	cmp	r2, #0
 8000138:	d00d      	beq.n	8000156 <cmox_aead_encrypt+0x4e>
 800013a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800013c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800013e:	2800      	cmp	r0, #0
 8000140:	d101      	bne.n	8000146 <cmox_aead_encrypt+0x3e>
 8000142:	2900      	cmp	r1, #0
 8000144:	d107      	bne.n	8000156 <cmox_aead_encrypt+0x4e>
 8000146:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8000148:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800014a:	2c00      	cmp	r4, #0
 800014c:	d101      	bne.n	8000152 <cmox_aead_encrypt+0x4a>
 800014e:	2d00      	cmp	r5, #0
 8000150:	d101      	bne.n	8000156 <cmox_aead_encrypt+0x4e>
 8000152:	2e00      	cmp	r6, #0
 8000154:	d101      	bne.n	800015a <cmox_aead_encrypt+0x52>
 8000156:	0018      	movs	r0, r3
 8000158:	e012      	b.n	8000180 <cmox_aead_encrypt+0x78>
 800015a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800015c:	970a      	str	r7, [sp, #40]	; 0x28
 800015e:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8000160:	9707      	str	r7, [sp, #28]
 8000162:	9606      	str	r6, [sp, #24]
 8000164:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8000166:	9705      	str	r7, [sp, #20]
 8000168:	9f08      	ldr	r7, [sp, #32]
 800016a:	19f6      	adds	r6, r6, r7
 800016c:	9604      	str	r6, [sp, #16]
 800016e:	9503      	str	r5, [sp, #12]
 8000170:	9402      	str	r4, [sp, #8]
 8000172:	9101      	str	r1, [sp, #4]
 8000174:	9000      	str	r0, [sp, #0]
 8000176:	9908      	ldr	r1, [sp, #32]
 8000178:	9809      	ldr	r0, [sp, #36]	; 0x24
 800017a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800017c:	6824      	ldr	r4, [r4, #0]
 800017e:	47a0      	blx	r4
 8000180:	b00d      	add	sp, #52	; 0x34
 8000182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000184:	00010003 	.word	0x00010003

08000188 <cmox_aead_decrypt>:
 8000188:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800018a:	b08a      	sub	sp, #40	; 0x28
 800018c:	0010      	movs	r0, r2
 800018e:	001f      	movs	r7, r3
 8000190:	4b1f      	ldr	r3, [pc, #124]	; (8000210 <cmox_aead_decrypt+0x88>)
 8000192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000194:	2a00      	cmp	r2, #0
 8000196:	d020      	beq.n	80001da <cmox_aead_decrypt+0x52>
 8000198:	6852      	ldr	r2, [r2, #4]
 800019a:	243a      	movs	r4, #58	; 0x3a
 800019c:	43e4      	mvns	r4, r4
 800019e:	42a2      	cmp	r2, r4
 80001a0:	d001      	beq.n	80001a6 <cmox_aead_decrypt+0x1e>
 80001a2:	1e58      	subs	r0, r3, #1
 80001a4:	e032      	b.n	800020c <cmox_aead_decrypt+0x84>
 80001a6:	9109      	str	r1, [sp, #36]	; 0x24
 80001a8:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80001aa:	2900      	cmp	r1, #0
 80001ac:	d102      	bne.n	80001b4 <cmox_aead_decrypt+0x2c>
 80001ae:	2800      	cmp	r0, #0
 80001b0:	d002      	beq.n	80001b8 <cmox_aead_decrypt+0x30>
 80001b2:	e012      	b.n	80001da <cmox_aead_decrypt+0x52>
 80001b4:	2e00      	cmp	r6, #0
 80001b6:	d010      	beq.n	80001da <cmox_aead_decrypt+0x52>
 80001b8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80001ba:	2900      	cmp	r1, #0
 80001bc:	d00d      	beq.n	80001da <cmox_aead_decrypt+0x52>
 80001be:	9912      	ldr	r1, [sp, #72]	; 0x48
 80001c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80001c2:	2900      	cmp	r1, #0
 80001c4:	d101      	bne.n	80001ca <cmox_aead_decrypt+0x42>
 80001c6:	2a00      	cmp	r2, #0
 80001c8:	d107      	bne.n	80001da <cmox_aead_decrypt+0x52>
 80001ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80001cc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80001ce:	2c00      	cmp	r4, #0
 80001d0:	d101      	bne.n	80001d6 <cmox_aead_decrypt+0x4e>
 80001d2:	2d00      	cmp	r5, #0
 80001d4:	d101      	bne.n	80001da <cmox_aead_decrypt+0x52>
 80001d6:	2e00      	cmp	r6, #0
 80001d8:	d101      	bne.n	80001de <cmox_aead_decrypt+0x56>
 80001da:	0018      	movs	r0, r3
 80001dc:	e016      	b.n	800020c <cmox_aead_decrypt+0x84>
 80001de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80001e0:	9708      	str	r7, [sp, #32]
 80001e2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80001e4:	9707      	str	r7, [sp, #28]
 80001e6:	9606      	str	r6, [sp, #24]
 80001e8:	9e08      	ldr	r6, [sp, #32]
 80001ea:	9605      	str	r6, [sp, #20]
 80001ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80001ee:	9f08      	ldr	r7, [sp, #32]
 80001f0:	1bc7      	subs	r7, r0, r7
 80001f2:	19f6      	adds	r6, r6, r7
 80001f4:	9604      	str	r6, [sp, #16]
 80001f6:	9503      	str	r5, [sp, #12]
 80001f8:	9402      	str	r4, [sp, #8]
 80001fa:	9201      	str	r2, [sp, #4]
 80001fc:	9100      	str	r1, [sp, #0]
 80001fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8000200:	9908      	ldr	r1, [sp, #32]
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000206:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8000208:	6824      	ldr	r4, [r4, #0]
 800020a:	47a0      	blx	r4
 800020c:	b00b      	add	sp, #44	; 0x2c
 800020e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000210:	00010003 	.word	0x00010003

08000214 <cmox_aead_innerCommon>:
 8000214:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	0004      	movs	r4, r0
 800021a:	0017      	movs	r7, r2
 800021c:	001e      	movs	r6, r3
 800021e:	6821      	ldr	r1, [r4, #0]
 8000220:	6849      	ldr	r1, [r1, #4]
 8000222:	4788      	blx	r1
 8000224:	2580      	movs	r5, #128	; 0x80
 8000226:	026d      	lsls	r5, r5, #9
 8000228:	42a8      	cmp	r0, r5
 800022a:	d13d      	bne.n	80002a8 <cmox_aead_innerCommon+0x94>
 800022c:	9a08      	ldr	r2, [sp, #32]
 800022e:	0031      	movs	r1, r6
 8000230:	0020      	movs	r0, r4
 8000232:	6823      	ldr	r3, [r4, #0]
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	4798      	blx	r3
 8000238:	42a8      	cmp	r0, r5
 800023a:	d135      	bne.n	80002a8 <cmox_aead_innerCommon+0x94>
 800023c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800023e:	0020      	movs	r0, r4
 8000240:	6822      	ldr	r2, [r4, #0]
 8000242:	6912      	ldr	r2, [r2, #16]
 8000244:	4790      	blx	r2
 8000246:	42a8      	cmp	r0, r5
 8000248:	d12e      	bne.n	80002a8 <cmox_aead_innerCommon+0x94>
 800024a:	0039      	movs	r1, r7
 800024c:	0020      	movs	r0, r4
 800024e:	6822      	ldr	r2, [r4, #0]
 8000250:	6952      	ldr	r2, [r2, #20]
 8000252:	4790      	blx	r2
 8000254:	42a8      	cmp	r0, r5
 8000256:	d127      	bne.n	80002a8 <cmox_aead_innerCommon+0x94>
 8000258:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800025a:	0031      	movs	r1, r6
 800025c:	0020      	movs	r0, r4
 800025e:	6822      	ldr	r2, [r4, #0]
 8000260:	6992      	ldr	r2, [r2, #24]
 8000262:	4790      	blx	r2
 8000264:	42a8      	cmp	r0, r5
 8000266:	d11f      	bne.n	80002a8 <cmox_aead_innerCommon+0x94>
 8000268:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800026a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800026c:	0020      	movs	r0, r4
 800026e:	6823      	ldr	r3, [r4, #0]
 8000270:	68db      	ldr	r3, [r3, #12]
 8000272:	4798      	blx	r3
 8000274:	42a8      	cmp	r0, r5
 8000276:	d117      	bne.n	80002a8 <cmox_aead_innerCommon+0x94>
 8000278:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800027a:	0032      	movs	r2, r6
 800027c:	0020      	movs	r0, r4
 800027e:	6823      	ldr	r3, [r4, #0]
 8000280:	69db      	ldr	r3, [r3, #28]
 8000282:	4798      	blx	r3
 8000284:	42a8      	cmp	r0, r5
 8000286:	d10f      	bne.n	80002a8 <cmox_aead_innerCommon+0x94>
 8000288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800028a:	9902      	ldr	r1, [sp, #8]
 800028c:	a801      	add	r0, sp, #4
 800028e:	9000      	str	r0, [sp, #0]
 8000290:	003a      	movs	r2, r7
 8000292:	0020      	movs	r0, r4
 8000294:	6824      	ldr	r4, [r4, #0]
 8000296:	6a24      	ldr	r4, [r4, #32]
 8000298:	47a0      	blx	r4
 800029a:	42a8      	cmp	r0, r5
 800029c:	d104      	bne.n	80002a8 <cmox_aead_innerCommon+0x94>
 800029e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80002a0:	2900      	cmp	r1, #0
 80002a2:	d001      	beq.n	80002a8 <cmox_aead_innerCommon+0x94>
 80002a4:	9a01      	ldr	r2, [sp, #4]
 80002a6:	600a      	str	r2, [r1, #0]
 80002a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080002aa <cmox_aead_innerEncrypt>:
 80002aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ac:	b089      	sub	sp, #36	; 0x24
 80002ae:	0004      	movs	r4, r0
 80002b0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80002b2:	9507      	str	r5, [sp, #28]
 80002b4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80002b6:	9006      	str	r0, [sp, #24]
 80002b8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80002ba:	9005      	str	r0, [sp, #20]
 80002bc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80002be:	9004      	str	r0, [sp, #16]
 80002c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80002c2:	9003      	str	r0, [sp, #12]
 80002c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80002c6:	9002      	str	r0, [sp, #8]
 80002c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80002ca:	9001      	str	r0, [sp, #4]
 80002cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80002ce:	9000      	str	r0, [sp, #0]
 80002d0:	0020      	movs	r0, r4
 80002d2:	f7ff ff9f 	bl	8000214 <cmox_aead_innerCommon>
 80002d6:	0006      	movs	r6, r0
 80002d8:	2780      	movs	r7, #128	; 0x80
 80002da:	027f      	lsls	r7, r7, #9
 80002dc:	42be      	cmp	r6, r7
 80002de:	d10e      	bne.n	80002fe <cmox_aead_innerEncrypt+0x54>
 80002e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80002e2:	aa08      	add	r2, sp, #32
 80002e4:	0020      	movs	r0, r4
 80002e6:	6823      	ldr	r3, [r4, #0]
 80002e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ea:	4798      	blx	r3
 80002ec:	0006      	movs	r6, r0
 80002ee:	42be      	cmp	r6, r7
 80002f0:	d105      	bne.n	80002fe <cmox_aead_innerEncrypt+0x54>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d003      	beq.n	80002fe <cmox_aead_innerEncrypt+0x54>
 80002f6:	6828      	ldr	r0, [r5, #0]
 80002f8:	9908      	ldr	r1, [sp, #32]
 80002fa:	1840      	adds	r0, r0, r1
 80002fc:	6028      	str	r0, [r5, #0]
 80002fe:	0020      	movs	r0, r4
 8000300:	6821      	ldr	r1, [r4, #0]
 8000302:	6809      	ldr	r1, [r1, #0]
 8000304:	4788      	blx	r1
 8000306:	0030      	movs	r0, r6
 8000308:	b009      	add	sp, #36	; 0x24
 800030a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800030c <cmox_aead_innerDecrypt>:
 800030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030e:	b088      	sub	sp, #32
 8000310:	0005      	movs	r5, r0
 8000312:	0017      	movs	r7, r2
 8000314:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8000316:	9816      	ldr	r0, [sp, #88]	; 0x58
 8000318:	9007      	str	r0, [sp, #28]
 800031a:	9606      	str	r6, [sp, #24]
 800031c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800031e:	9005      	str	r0, [sp, #20]
 8000320:	9812      	ldr	r0, [sp, #72]	; 0x48
 8000322:	9004      	str	r0, [sp, #16]
 8000324:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000326:	9003      	str	r0, [sp, #12]
 8000328:	9810      	ldr	r0, [sp, #64]	; 0x40
 800032a:	9002      	str	r0, [sp, #8]
 800032c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800032e:	9001      	str	r0, [sp, #4]
 8000330:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000332:	9000      	str	r0, [sp, #0]
 8000334:	0028      	movs	r0, r5
 8000336:	f7ff ff6d 	bl	8000214 <cmox_aead_innerCommon>
 800033a:	0004      	movs	r4, r0
 800033c:	2080      	movs	r0, #128	; 0x80
 800033e:	0240      	lsls	r0, r0, #9
 8000340:	4284      	cmp	r4, r0
 8000342:	d10d      	bne.n	8000360 <cmox_aead_innerDecrypt+0x54>
 8000344:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8000346:	2200      	movs	r2, #0
 8000348:	0028      	movs	r0, r5
 800034a:	682b      	ldr	r3, [r5, #0]
 800034c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800034e:	4798      	blx	r3
 8000350:	0004      	movs	r4, r0
 8000352:	4807      	ldr	r0, [pc, #28]	; (8000370 <cmox_aead_innerDecrypt+0x64>)
 8000354:	4284      	cmp	r4, r0
 8000356:	d003      	beq.n	8000360 <cmox_aead_innerDecrypt+0x54>
 8000358:	0039      	movs	r1, r7
 800035a:	0030      	movs	r0, r6
 800035c:	f009 f9c9 	bl	80096f2 <__aeabi_memclr>
 8000360:	0028      	movs	r0, r5
 8000362:	6829      	ldr	r1, [r5, #0]
 8000364:	6809      	ldr	r1, [r1, #0]
 8000366:	4788      	blx	r1
 8000368:	0020      	movs	r0, r4
 800036a:	b009      	add	sp, #36	; 0x24
 800036c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036e:	bf00      	nop
 8000370:	0001c726 	.word	0x0001c726

08000374 <CMOX_GCMFAST_DEC_AESFAST_IMPL>:
 8000374:	08000a65 0800b580                       e.......

0800037c <cmox_gcmFast_decrypt>:
 800037c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800037e:	4c1a      	ldr	r4, [pc, #104]	; (80003e8 <cmox_gcmFast_decrypt+0x6c>)
 8000380:	44a5      	add	sp, r4
 8000382:	0006      	movs	r6, r0
 8000384:	000c      	movs	r4, r1
 8000386:	0017      	movs	r7, r2
 8000388:	001d      	movs	r5, r3
 800038a:	4918      	ldr	r1, [pc, #96]	; (80003ec <cmox_gcmFast_decrypt+0x70>)
 800038c:	a809      	add	r0, sp, #36	; 0x24
 800038e:	f000 fade 	bl	800094e <cmox_gcmFast_construct>
 8000392:	4917      	ldr	r1, [pc, #92]	; (80003f0 <cmox_gcmFast_decrypt+0x74>)
 8000394:	4469      	add	r1, sp
 8000396:	6809      	ldr	r1, [r1, #0]
 8000398:	9108      	str	r1, [sp, #32]
 800039a:	4916      	ldr	r1, [pc, #88]	; (80003f4 <cmox_gcmFast_decrypt+0x78>)
 800039c:	4469      	add	r1, sp
 800039e:	6809      	ldr	r1, [r1, #0]
 80003a0:	9107      	str	r1, [sp, #28]
 80003a2:	4915      	ldr	r1, [pc, #84]	; (80003f8 <cmox_gcmFast_decrypt+0x7c>)
 80003a4:	4469      	add	r1, sp
 80003a6:	6809      	ldr	r1, [r1, #0]
 80003a8:	9106      	str	r1, [sp, #24]
 80003aa:	2198      	movs	r1, #152	; 0x98
 80003ac:	0109      	lsls	r1, r1, #4
 80003ae:	4469      	add	r1, sp
 80003b0:	6809      	ldr	r1, [r1, #0]
 80003b2:	9105      	str	r1, [sp, #20]
 80003b4:	4911      	ldr	r1, [pc, #68]	; (80003fc <cmox_gcmFast_decrypt+0x80>)
 80003b6:	4469      	add	r1, sp
 80003b8:	6809      	ldr	r1, [r1, #0]
 80003ba:	9104      	str	r1, [sp, #16]
 80003bc:	4910      	ldr	r1, [pc, #64]	; (8000400 <cmox_gcmFast_decrypt+0x84>)
 80003be:	4469      	add	r1, sp
 80003c0:	6809      	ldr	r1, [r1, #0]
 80003c2:	9103      	str	r1, [sp, #12]
 80003c4:	490f      	ldr	r1, [pc, #60]	; (8000404 <cmox_gcmFast_decrypt+0x88>)
 80003c6:	4469      	add	r1, sp
 80003c8:	6809      	ldr	r1, [r1, #0]
 80003ca:	9102      	str	r1, [sp, #8]
 80003cc:	2197      	movs	r1, #151	; 0x97
 80003ce:	0109      	lsls	r1, r1, #4
 80003d0:	4469      	add	r1, sp
 80003d2:	6809      	ldr	r1, [r1, #0]
 80003d4:	9101      	str	r1, [sp, #4]
 80003d6:	9500      	str	r5, [sp, #0]
 80003d8:	003b      	movs	r3, r7
 80003da:	0022      	movs	r2, r4
 80003dc:	0031      	movs	r1, r6
 80003de:	f7ff ff95 	bl	800030c <cmox_aead_innerDecrypt>
 80003e2:	4909      	ldr	r1, [pc, #36]	; (8000408 <cmox_gcmFast_decrypt+0x8c>)
 80003e4:	448d      	add	sp, r1
 80003e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003e8:	fffff6a4 	.word	0xfffff6a4
 80003ec:	08000374 	.word	0x08000374
 80003f0:	0000098c 	.word	0x0000098c
 80003f4:	00000988 	.word	0x00000988
 80003f8:	00000984 	.word	0x00000984
 80003fc:	0000097c 	.word	0x0000097c
 8000400:	00000978 	.word	0x00000978
 8000404:	00000974 	.word	0x00000974
 8000408:	0000095c 	.word	0x0000095c

0800040c <CMOX_GCMFAST_ENC_AESFAST_IMPL>:
 800040c:	08000b7d 0800b580                       }.......

08000414 <cmox_gcmFast_encrypt>:
 8000414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000416:	4c1a      	ldr	r4, [pc, #104]	; (8000480 <cmox_gcmFast_encrypt+0x6c>)
 8000418:	44a5      	add	sp, r4
 800041a:	0006      	movs	r6, r0
 800041c:	000c      	movs	r4, r1
 800041e:	0017      	movs	r7, r2
 8000420:	001d      	movs	r5, r3
 8000422:	4918      	ldr	r1, [pc, #96]	; (8000484 <cmox_gcmFast_encrypt+0x70>)
 8000424:	a809      	add	r0, sp, #36	; 0x24
 8000426:	f000 fa92 	bl	800094e <cmox_gcmFast_construct>
 800042a:	4917      	ldr	r1, [pc, #92]	; (8000488 <cmox_gcmFast_encrypt+0x74>)
 800042c:	4469      	add	r1, sp
 800042e:	6809      	ldr	r1, [r1, #0]
 8000430:	9108      	str	r1, [sp, #32]
 8000432:	4916      	ldr	r1, [pc, #88]	; (800048c <cmox_gcmFast_encrypt+0x78>)
 8000434:	4469      	add	r1, sp
 8000436:	6809      	ldr	r1, [r1, #0]
 8000438:	9107      	str	r1, [sp, #28]
 800043a:	4915      	ldr	r1, [pc, #84]	; (8000490 <cmox_gcmFast_encrypt+0x7c>)
 800043c:	4469      	add	r1, sp
 800043e:	6809      	ldr	r1, [r1, #0]
 8000440:	9106      	str	r1, [sp, #24]
 8000442:	2198      	movs	r1, #152	; 0x98
 8000444:	0109      	lsls	r1, r1, #4
 8000446:	4469      	add	r1, sp
 8000448:	6809      	ldr	r1, [r1, #0]
 800044a:	9105      	str	r1, [sp, #20]
 800044c:	4911      	ldr	r1, [pc, #68]	; (8000494 <cmox_gcmFast_encrypt+0x80>)
 800044e:	4469      	add	r1, sp
 8000450:	6809      	ldr	r1, [r1, #0]
 8000452:	9104      	str	r1, [sp, #16]
 8000454:	4910      	ldr	r1, [pc, #64]	; (8000498 <cmox_gcmFast_encrypt+0x84>)
 8000456:	4469      	add	r1, sp
 8000458:	6809      	ldr	r1, [r1, #0]
 800045a:	9103      	str	r1, [sp, #12]
 800045c:	490f      	ldr	r1, [pc, #60]	; (800049c <cmox_gcmFast_encrypt+0x88>)
 800045e:	4469      	add	r1, sp
 8000460:	6809      	ldr	r1, [r1, #0]
 8000462:	9102      	str	r1, [sp, #8]
 8000464:	2197      	movs	r1, #151	; 0x97
 8000466:	0109      	lsls	r1, r1, #4
 8000468:	4469      	add	r1, sp
 800046a:	6809      	ldr	r1, [r1, #0]
 800046c:	9101      	str	r1, [sp, #4]
 800046e:	9500      	str	r5, [sp, #0]
 8000470:	003b      	movs	r3, r7
 8000472:	0022      	movs	r2, r4
 8000474:	0031      	movs	r1, r6
 8000476:	f7ff ff18 	bl	80002aa <cmox_aead_innerEncrypt>
 800047a:	4909      	ldr	r1, [pc, #36]	; (80004a0 <cmox_gcmFast_encrypt+0x8c>)
 800047c:	448d      	add	sp, r1
 800047e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000480:	fffff6a4 	.word	0xfffff6a4
 8000484:	0800040c 	.word	0x0800040c
 8000488:	0000098c 	.word	0x0000098c
 800048c:	00000988 	.word	0x00000988
 8000490:	00000984 	.word	0x00000984
 8000494:	0000097c 	.word	0x0000097c
 8000498:	00000978 	.word	0x00000978
 800049c:	00000974 	.word	0x00000974
 80004a0:	0000095c 	.word	0x0000095c

080004a4 <gfmulFast>:
 80004a4:	b5f4      	push	{r2, r4, r5, r6, r7, lr}
 80004a6:	b092      	sub	sp, #72	; 0x48
 80004a8:	2200      	movs	r2, #0
 80004aa:	9202      	str	r2, [sp, #8]
 80004ac:	9203      	str	r2, [sp, #12]
 80004ae:	9204      	str	r2, [sp, #16]
 80004b0:	9205      	str	r2, [sp, #20]
 80004b2:	9206      	str	r2, [sp, #24]
 80004b4:	9207      	str	r2, [sp, #28]
 80004b6:	9208      	str	r2, [sp, #32]
 80004b8:	9209      	str	r2, [sp, #36]	; 0x24
 80004ba:	920a      	str	r2, [sp, #40]	; 0x28
 80004bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80004be:	920c      	str	r2, [sp, #48]	; 0x30
 80004c0:	920d      	str	r2, [sp, #52]	; 0x34
 80004c2:	920e      	str	r2, [sp, #56]	; 0x38
 80004c4:	920f      	str	r2, [sp, #60]	; 0x3c
 80004c6:	9210      	str	r2, [sp, #64]	; 0x40
 80004c8:	9211      	str	r2, [sp, #68]	; 0x44
 80004ca:	2204      	movs	r2, #4
 80004cc:	ac02      	add	r4, sp, #8
 80004ce:	0006      	movs	r6, r0
 80004d0:	000d      	movs	r5, r1
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	6830      	ldr	r0, [r6, #0]
 80004d6:	0e00      	lsrs	r0, r0, #24
 80004d8:	9001      	str	r0, [sp, #4]
 80004da:	2080      	movs	r0, #128	; 0x80
 80004dc:	00c0      	lsls	r0, r0, #3
 80004de:	182f      	adds	r7, r5, r0
 80004e0:	aa02      	add	r2, sp, #8
 80004e2:	9801      	ldr	r0, [sp, #4]
 80004e4:	0700      	lsls	r0, r0, #28
 80004e6:	0e00      	lsrs	r0, r0, #24
 80004e8:	1839      	adds	r1, r7, r0
 80004ea:	a802      	add	r0, sp, #8
 80004ec:	f000 feca 	bl	8001284 <poly_xor>
 80004f0:	aa02      	add	r2, sp, #8
 80004f2:	9801      	ldr	r0, [sp, #4]
 80004f4:	210f      	movs	r1, #15
 80004f6:	4388      	bics	r0, r1
 80004f8:	1829      	adds	r1, r5, r0
 80004fa:	a802      	add	r0, sp, #8
 80004fc:	f000 fec2 	bl	8001284 <poly_xor>
 8000500:	6830      	ldr	r0, [r6, #0]
 8000502:	0200      	lsls	r0, r0, #8
 8000504:	0e00      	lsrs	r0, r0, #24
 8000506:	9001      	str	r0, [sp, #4]
 8000508:	0022      	movs	r2, r4
 800050a:	3210      	adds	r2, #16
 800050c:	0700      	lsls	r0, r0, #28
 800050e:	0e00      	lsrs	r0, r0, #24
 8000510:	1839      	adds	r1, r7, r0
 8000512:	0020      	movs	r0, r4
 8000514:	3010      	adds	r0, #16
 8000516:	f000 feb5 	bl	8001284 <poly_xor>
 800051a:	0022      	movs	r2, r4
 800051c:	3210      	adds	r2, #16
 800051e:	9801      	ldr	r0, [sp, #4]
 8000520:	210f      	movs	r1, #15
 8000522:	4388      	bics	r0, r1
 8000524:	1829      	adds	r1, r5, r0
 8000526:	0020      	movs	r0, r4
 8000528:	3010      	adds	r0, #16
 800052a:	f000 feab 	bl	8001284 <poly_xor>
 800052e:	6830      	ldr	r0, [r6, #0]
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	0e00      	lsrs	r0, r0, #24
 8000534:	9001      	str	r0, [sp, #4]
 8000536:	0022      	movs	r2, r4
 8000538:	3220      	adds	r2, #32
 800053a:	0700      	lsls	r0, r0, #28
 800053c:	0e00      	lsrs	r0, r0, #24
 800053e:	1839      	adds	r1, r7, r0
 8000540:	0020      	movs	r0, r4
 8000542:	3020      	adds	r0, #32
 8000544:	f000 fe9e 	bl	8001284 <poly_xor>
 8000548:	0022      	movs	r2, r4
 800054a:	3220      	adds	r2, #32
 800054c:	9801      	ldr	r0, [sp, #4]
 800054e:	210f      	movs	r1, #15
 8000550:	4388      	bics	r0, r1
 8000552:	1829      	adds	r1, r5, r0
 8000554:	0020      	movs	r0, r4
 8000556:	3020      	adds	r0, #32
 8000558:	f000 fe94 	bl	8001284 <poly_xor>
 800055c:	6830      	ldr	r0, [r6, #0]
 800055e:	b2c0      	uxtb	r0, r0
 8000560:	9001      	str	r0, [sp, #4]
 8000562:	0022      	movs	r2, r4
 8000564:	3230      	adds	r2, #48	; 0x30
 8000566:	0700      	lsls	r0, r0, #28
 8000568:	0e00      	lsrs	r0, r0, #24
 800056a:	1839      	adds	r1, r7, r0
 800056c:	0020      	movs	r0, r4
 800056e:	3030      	adds	r0, #48	; 0x30
 8000570:	f000 fe88 	bl	8001284 <poly_xor>
 8000574:	0022      	movs	r2, r4
 8000576:	3230      	adds	r2, #48	; 0x30
 8000578:	9801      	ldr	r0, [sp, #4]
 800057a:	210f      	movs	r1, #15
 800057c:	4388      	bics	r0, r1
 800057e:	1829      	adds	r1, r5, r0
 8000580:	0020      	movs	r0, r4
 8000582:	3030      	adds	r0, #48	; 0x30
 8000584:	f000 fe7e 	bl	8001284 <poly_xor>
 8000588:	2080      	movs	r0, #128	; 0x80
 800058a:	0040      	lsls	r0, r0, #1
 800058c:	182d      	adds	r5, r5, r0
 800058e:	1d36      	adds	r6, r6, #4
 8000590:	9800      	ldr	r0, [sp, #0]
 8000592:	1e40      	subs	r0, r0, #1
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	d19d      	bne.n	80004d4 <gfmulFast+0x30>
 8000598:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800059a:	4d31      	ldr	r5, [pc, #196]	; (8000660 <gfmulFast+0x1bc>)
 800059c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800059e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80005a0:	0a11      	lsrs	r1, r2, #8
 80005a2:	0603      	lsls	r3, r0, #24
 80005a4:	430b      	orrs	r3, r1
 80005a6:	9311      	str	r3, [sp, #68]	; 0x44
 80005a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80005aa:	0a00      	lsrs	r0, r0, #8
 80005ac:	060b      	lsls	r3, r1, #24
 80005ae:	4303      	orrs	r3, r0
 80005b0:	9310      	str	r3, [sp, #64]	; 0x40
 80005b2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80005b4:	0a09      	lsrs	r1, r1, #8
 80005b6:	0603      	lsls	r3, r0, #24
 80005b8:	430b      	orrs	r3, r1
 80005ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80005bc:	0a00      	lsrs	r0, r0, #8
 80005be:	0611      	lsls	r1, r2, #24
 80005c0:	0dc9      	lsrs	r1, r1, #23
 80005c2:	5a69      	ldrh	r1, [r5, r1]
 80005c4:	0409      	lsls	r1, r1, #16
 80005c6:	4041      	eors	r1, r0
 80005c8:	910e      	str	r1, [sp, #56]	; 0x38
 80005ca:	0022      	movs	r2, r4
 80005cc:	3220      	adds	r2, #32
 80005ce:	0021      	movs	r1, r4
 80005d0:	3130      	adds	r1, #48	; 0x30
 80005d2:	0020      	movs	r0, r4
 80005d4:	3020      	adds	r0, #32
 80005d6:	f000 fe55 	bl	8001284 <poly_xor>
 80005da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80005dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80005de:	0a11      	lsrs	r1, r2, #8
 80005e0:	0603      	lsls	r3, r0, #24
 80005e2:	430b      	orrs	r3, r1
 80005e4:	930d      	str	r3, [sp, #52]	; 0x34
 80005e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80005e8:	0a00      	lsrs	r0, r0, #8
 80005ea:	060b      	lsls	r3, r1, #24
 80005ec:	4303      	orrs	r3, r0
 80005ee:	930c      	str	r3, [sp, #48]	; 0x30
 80005f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80005f2:	0a09      	lsrs	r1, r1, #8
 80005f4:	0603      	lsls	r3, r0, #24
 80005f6:	430b      	orrs	r3, r1
 80005f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80005fa:	0a00      	lsrs	r0, r0, #8
 80005fc:	0611      	lsls	r1, r2, #24
 80005fe:	0dc9      	lsrs	r1, r1, #23
 8000600:	5a69      	ldrh	r1, [r5, r1]
 8000602:	0409      	lsls	r1, r1, #16
 8000604:	4041      	eors	r1, r0
 8000606:	910a      	str	r1, [sp, #40]	; 0x28
 8000608:	0022      	movs	r2, r4
 800060a:	3210      	adds	r2, #16
 800060c:	0021      	movs	r1, r4
 800060e:	3120      	adds	r1, #32
 8000610:	0020      	movs	r0, r4
 8000612:	3010      	adds	r0, #16
 8000614:	f000 fe36 	bl	8001284 <poly_xor>
 8000618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800061a:	9908      	ldr	r1, [sp, #32]
 800061c:	0a02      	lsrs	r2, r0, #8
 800061e:	060b      	lsls	r3, r1, #24
 8000620:	4313      	orrs	r3, r2
 8000622:	9309      	str	r3, [sp, #36]	; 0x24
 8000624:	9a07      	ldr	r2, [sp, #28]
 8000626:	0a09      	lsrs	r1, r1, #8
 8000628:	0613      	lsls	r3, r2, #24
 800062a:	430b      	orrs	r3, r1
 800062c:	9308      	str	r3, [sp, #32]
 800062e:	9906      	ldr	r1, [sp, #24]
 8000630:	0a12      	lsrs	r2, r2, #8
 8000632:	060b      	lsls	r3, r1, #24
 8000634:	4313      	orrs	r3, r2
 8000636:	9307      	str	r3, [sp, #28]
 8000638:	0a09      	lsrs	r1, r1, #8
 800063a:	0600      	lsls	r0, r0, #24
 800063c:	0dc0      	lsrs	r0, r0, #23
 800063e:	5a28      	ldrh	r0, [r5, r0]
 8000640:	0400      	lsls	r0, r0, #16
 8000642:	4048      	eors	r0, r1
 8000644:	9006      	str	r0, [sp, #24]
 8000646:	aa02      	add	r2, sp, #8
 8000648:	0021      	movs	r1, r4
 800064a:	3110      	adds	r1, #16
 800064c:	a802      	add	r0, sp, #8
 800064e:	f000 fe19 	bl	8001284 <poly_xor>
 8000652:	0031      	movs	r1, r6
 8000654:	a802      	add	r0, sp, #8
 8000656:	f000 fe27 	bl	80012a8 <poly_copy>
 800065a:	b013      	add	sp, #76	; 0x4c
 800065c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800065e:	bf00      	nop
 8000660:	0800b310 	.word	0x0800b310

08000664 <cmox_gcmFast_cleanup>:
 8000664:	b510      	push	{r4, lr}
 8000666:	2480      	movs	r4, #128	; 0x80
 8000668:	0264      	lsls	r4, r4, #9
 800066a:	6802      	ldr	r2, [r0, #0]
 800066c:	428a      	cmp	r2, r1
 800066e:	d101      	bne.n	8000674 <cmox_gcmFast_cleanup+0x10>
 8000670:	2800      	cmp	r0, #0
 8000672:	d101      	bne.n	8000678 <cmox_gcmFast_cleanup+0x14>
 8000674:	1ce4      	adds	r4, r4, #3
 8000676:	e002      	b.n	800067e <cmox_gcmFast_cleanup+0x1a>
 8000678:	4902      	ldr	r1, [pc, #8]	; (8000684 <cmox_gcmFast_cleanup+0x20>)
 800067a:	f009 f83a 	bl	80096f2 <__aeabi_memclr>
 800067e:	0020      	movs	r0, r4
 8000680:	bd10      	pop	{r4, pc}
 8000682:	bf00      	nop
 8000684:	00000934 	.word	0x00000934

08000688 <cmox_gcmFast_init>:
 8000688:	b500      	push	{lr}
 800068a:	b081      	sub	sp, #4
 800068c:	6802      	ldr	r2, [r0, #0]
 800068e:	428a      	cmp	r2, r1
 8000690:	d101      	bne.n	8000696 <cmox_gcmFast_init+0xe>
 8000692:	0001      	movs	r1, r0
 8000694:	d101      	bne.n	800069a <cmox_gcmFast_init+0x12>
 8000696:	4804      	ldr	r0, [pc, #16]	; (80006a8 <cmox_gcmFast_init+0x20>)
 8000698:	e004      	b.n	80006a4 <cmox_gcmFast_init+0x1c>
 800069a:	3108      	adds	r1, #8
 800069c:	f000 fe5a 	bl	8001354 <cmox_gcm_initCommon>
 80006a0:	2080      	movs	r0, #128	; 0x80
 80006a2:	0240      	lsls	r0, r0, #9
 80006a4:	b001      	add	sp, #4
 80006a6:	bd00      	pop	{pc}
 80006a8:	00010003 	.word	0x00010003

080006ac <cmox_gcmFast_setKey>:
 80006ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	6804      	ldr	r4, [r0, #0]
 80006b2:	429c      	cmp	r4, r3
 80006b4:	d101      	bne.n	80006ba <cmox_gcmFast_setKey+0xe>
 80006b6:	0004      	movs	r4, r0
 80006b8:	d102      	bne.n	80006c0 <cmox_gcmFast_setKey+0x14>
 80006ba:	4868      	ldr	r0, [pc, #416]	; (800085c <cmox_gcmFast_setKey+0x1b0>)
 80006bc:	9006      	str	r0, [sp, #24]
 80006be:	e0ca      	b.n	8000856 <cmox_gcmFast_setKey+0x1aa>
 80006c0:	3008      	adds	r0, #8
 80006c2:	f000 fbed 	bl	8000ea0 <cmox_cipherMode_setKey>
 80006c6:	9006      	str	r0, [sp, #24]
 80006c8:	2180      	movs	r1, #128	; 0x80
 80006ca:	0249      	lsls	r1, r1, #9
 80006cc:	4288      	cmp	r0, r1
 80006ce:	d000      	beq.n	80006d2 <cmox_gcmFast_setKey+0x26>
 80006d0:	e0c1      	b.n	8000856 <cmox_gcmFast_setKey+0x1aa>
 80006d2:	a802      	add	r0, sp, #8
 80006d4:	2100      	movs	r1, #0
 80006d6:	2200      	movs	r2, #0
 80006d8:	2300      	movs	r3, #0
 80006da:	2500      	movs	r5, #0
 80006dc:	c02e      	stmia	r0!, {r1, r2, r3, r5}
 80006de:	aa02      	add	r2, sp, #8
 80006e0:	a902      	add	r1, sp, #8
 80006e2:	0020      	movs	r0, r4
 80006e4:	3008      	adds	r0, #8
 80006e6:	68a3      	ldr	r3, [r4, #8]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4798      	blx	r3
 80006ec:	2504      	movs	r5, #4
 80006ee:	20da      	movs	r0, #218	; 0xda
 80006f0:	0040      	lsls	r0, r0, #1
 80006f2:	1821      	adds	r1, r4, r0
 80006f4:	a802      	add	r0, sp, #8
 80006f6:	f000 fdd7 	bl	80012a8 <poly_copy>
 80006fa:	209a      	movs	r0, #154	; 0x9a
 80006fc:	0040      	lsls	r0, r0, #1
 80006fe:	1820      	adds	r0, r4, r0
 8000700:	0129      	lsls	r1, r5, #4
 8000702:	1841      	adds	r1, r0, r1
 8000704:	016a      	lsls	r2, r5, #5
 8000706:	1880      	adds	r0, r0, r2
 8000708:	f000 fdd7 	bl	80012ba <gfmul_x>
 800070c:	086d      	lsrs	r5, r5, #1
 800070e:	d1f4      	bne.n	80006fa <cmox_gcmFast_setKey+0x4e>
 8000710:	2002      	movs	r0, #2
 8000712:	9401      	str	r4, [sp, #4]
 8000714:	9000      	str	r0, [sp, #0]
 8000716:	e001      	b.n	800071c <cmox_gcmFast_setKey+0x70>
 8000718:	2801      	cmp	r0, #1
 800071a:	d917      	bls.n	800074c <cmox_gcmFast_setKey+0xa0>
 800071c:	9800      	ldr	r0, [sp, #0]
 800071e:	0100      	lsls	r0, r0, #4
 8000720:	9901      	ldr	r1, [sp, #4]
 8000722:	1809      	adds	r1, r1, r0
 8000724:	22a2      	movs	r2, #162	; 0xa2
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	188e      	adds	r6, r1, r2
 800072a:	9901      	ldr	r1, [sp, #4]
 800072c:	188d      	adds	r5, r1, r2
 800072e:	9f00      	ldr	r7, [sp, #0]
 8000730:	1e7f      	subs	r7, r7, #1
 8000732:	3a10      	subs	r2, #16
 8000734:	188c      	adds	r4, r1, r2
 8000736:	1820      	adds	r0, r4, r0
 8000738:	9007      	str	r0, [sp, #28]
 800073a:	0032      	movs	r2, r6
 800073c:	0029      	movs	r1, r5
 800073e:	9807      	ldr	r0, [sp, #28]
 8000740:	f000 fda0 	bl	8001284 <poly_xor>
 8000744:	3510      	adds	r5, #16
 8000746:	3610      	adds	r6, #16
 8000748:	1e7f      	subs	r7, r7, #1
 800074a:	d1f6      	bne.n	800073a <cmox_gcmFast_setKey+0x8e>
 800074c:	9800      	ldr	r0, [sp, #0]
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	9000      	str	r0, [sp, #0]
 8000752:	2809      	cmp	r0, #9
 8000754:	d3e0      	bcc.n	8000718 <cmox_gcmFast_setKey+0x6c>
 8000756:	2000      	movs	r0, #0
 8000758:	6020      	str	r0, [r4, #0]
 800075a:	6060      	str	r0, [r4, #4]
 800075c:	60a0      	str	r0, [r4, #8]
 800075e:	60e0      	str	r0, [r4, #12]
 8000760:	2510      	movs	r5, #16
 8000762:	2080      	movs	r0, #128	; 0x80
 8000764:	00c0      	lsls	r0, r0, #3
 8000766:	1821      	adds	r1, r4, r0
 8000768:	0020      	movs	r0, r4
 800076a:	f000 fdc3 	bl	80012f4 <gfmul_x4>
 800076e:	3410      	adds	r4, #16
 8000770:	1e6d      	subs	r5, r5, #1
 8000772:	d1f6      	bne.n	8000762 <cmox_gcmFast_setKey+0xb6>
 8000774:	9801      	ldr	r0, [sp, #4]
 8000776:	218d      	movs	r1, #141	; 0x8d
 8000778:	0089      	lsls	r1, r1, #2
 800077a:	1845      	adds	r5, r0, r1
 800077c:	2003      	movs	r0, #3
 800077e:	9000      	str	r0, [sp, #0]
 8000780:	2400      	movs	r4, #0
 8000782:	20ff      	movs	r0, #255	; 0xff
 8000784:	43c0      	mvns	r0, r0
 8000786:	182e      	adds	r6, r5, r0
 8000788:	68f0      	ldr	r0, [r6, #12]
 800078a:	0603      	lsls	r3, r0, #24
 800078c:	0a01      	lsrs	r1, r0, #8
 800078e:	68b0      	ldr	r0, [r6, #8]
 8000790:	0600      	lsls	r0, r0, #24
 8000792:	4308      	orrs	r0, r1
 8000794:	60e8      	str	r0, [r5, #12]
 8000796:	68b1      	ldr	r1, [r6, #8]
 8000798:	0a0a      	lsrs	r2, r1, #8
 800079a:	6871      	ldr	r1, [r6, #4]
 800079c:	0609      	lsls	r1, r1, #24
 800079e:	4311      	orrs	r1, r2
 80007a0:	60a9      	str	r1, [r5, #8]
 80007a2:	6872      	ldr	r2, [r6, #4]
 80007a4:	0a17      	lsrs	r7, r2, #8
 80007a6:	6832      	ldr	r2, [r6, #0]
 80007a8:	0612      	lsls	r2, r2, #24
 80007aa:	433a      	orrs	r2, r7
 80007ac:	606a      	str	r2, [r5, #4]
 80007ae:	6836      	ldr	r6, [r6, #0]
 80007b0:	0a36      	lsrs	r6, r6, #8
 80007b2:	4f2b      	ldr	r7, [pc, #172]	; (8000860 <cmox_gcmFast_setKey+0x1b4>)
 80007b4:	0ddb      	lsrs	r3, r3, #23
 80007b6:	5afb      	ldrh	r3, [r7, r3]
 80007b8:	041b      	lsls	r3, r3, #16
 80007ba:	4073      	eors	r3, r6
 80007bc:	001e      	movs	r6, r3
 80007be:	602e      	str	r6, [r5, #0]
 80007c0:	0603      	lsls	r3, r0, #24
 80007c2:	0a07      	lsrs	r7, r0, #8
 80007c4:	0608      	lsls	r0, r1, #24
 80007c6:	4338      	orrs	r0, r7
 80007c8:	60e8      	str	r0, [r5, #12]
 80007ca:	0a0f      	lsrs	r7, r1, #8
 80007cc:	0611      	lsls	r1, r2, #24
 80007ce:	4339      	orrs	r1, r7
 80007d0:	60a9      	str	r1, [r5, #8]
 80007d2:	0a17      	lsrs	r7, r2, #8
 80007d4:	0632      	lsls	r2, r6, #24
 80007d6:	433a      	orrs	r2, r7
 80007d8:	606a      	str	r2, [r5, #4]
 80007da:	0a36      	lsrs	r6, r6, #8
 80007dc:	4f20      	ldr	r7, [pc, #128]	; (8000860 <cmox_gcmFast_setKey+0x1b4>)
 80007de:	0ddb      	lsrs	r3, r3, #23
 80007e0:	5afb      	ldrh	r3, [r7, r3]
 80007e2:	041b      	lsls	r3, r3, #16
 80007e4:	4073      	eors	r3, r6
 80007e6:	001e      	movs	r6, r3
 80007e8:	602e      	str	r6, [r5, #0]
 80007ea:	0603      	lsls	r3, r0, #24
 80007ec:	0a07      	lsrs	r7, r0, #8
 80007ee:	0608      	lsls	r0, r1, #24
 80007f0:	4338      	orrs	r0, r7
 80007f2:	60e8      	str	r0, [r5, #12]
 80007f4:	0a0f      	lsrs	r7, r1, #8
 80007f6:	0611      	lsls	r1, r2, #24
 80007f8:	4339      	orrs	r1, r7
 80007fa:	60a9      	str	r1, [r5, #8]
 80007fc:	0a17      	lsrs	r7, r2, #8
 80007fe:	0632      	lsls	r2, r6, #24
 8000800:	433a      	orrs	r2, r7
 8000802:	606a      	str	r2, [r5, #4]
 8000804:	0a36      	lsrs	r6, r6, #8
 8000806:	4f16      	ldr	r7, [pc, #88]	; (8000860 <cmox_gcmFast_setKey+0x1b4>)
 8000808:	0ddb      	lsrs	r3, r3, #23
 800080a:	5afb      	ldrh	r3, [r7, r3]
 800080c:	041b      	lsls	r3, r3, #16
 800080e:	4073      	eors	r3, r6
 8000810:	602b      	str	r3, [r5, #0]
 8000812:	0606      	lsls	r6, r0, #24
 8000814:	0a00      	lsrs	r0, r0, #8
 8000816:	060f      	lsls	r7, r1, #24
 8000818:	4307      	orrs	r7, r0
 800081a:	60ef      	str	r7, [r5, #12]
 800081c:	0a08      	lsrs	r0, r1, #8
 800081e:	0611      	lsls	r1, r2, #24
 8000820:	4301      	orrs	r1, r0
 8000822:	60a9      	str	r1, [r5, #8]
 8000824:	0a10      	lsrs	r0, r2, #8
 8000826:	0619      	lsls	r1, r3, #24
 8000828:	4301      	orrs	r1, r0
 800082a:	6069      	str	r1, [r5, #4]
 800082c:	0a18      	lsrs	r0, r3, #8
 800082e:	490c      	ldr	r1, [pc, #48]	; (8000860 <cmox_gcmFast_setKey+0x1b4>)
 8000830:	0df2      	lsrs	r2, r6, #23
 8000832:	5a89      	ldrh	r1, [r1, r2]
 8000834:	0409      	lsls	r1, r1, #16
 8000836:	4041      	eors	r1, r0
 8000838:	6029      	str	r1, [r5, #0]
 800083a:	2080      	movs	r0, #128	; 0x80
 800083c:	00c0      	lsls	r0, r0, #3
 800083e:	1829      	adds	r1, r5, r0
 8000840:	0028      	movs	r0, r5
 8000842:	f000 fd57 	bl	80012f4 <gfmul_x4>
 8000846:	1c64      	adds	r4, r4, #1
 8000848:	3510      	adds	r5, #16
 800084a:	2c10      	cmp	r4, #16
 800084c:	d399      	bcc.n	8000782 <cmox_gcmFast_setKey+0xd6>
 800084e:	9800      	ldr	r0, [sp, #0]
 8000850:	1e40      	subs	r0, r0, #1
 8000852:	9000      	str	r0, [sp, #0]
 8000854:	d194      	bne.n	8000780 <cmox_gcmFast_setKey+0xd4>
 8000856:	9806      	ldr	r0, [sp, #24]
 8000858:	b009      	add	sp, #36	; 0x24
 800085a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800085c:	00010003 	.word	0x00010003
 8000860:	0800b310 	.word	0x0800b310

08000864 <cmox_gcmFast_setIV>:
 8000864:	b410      	push	{r4}
 8000866:	2a0c      	cmp	r2, #12
 8000868:	d104      	bne.n	8000874 <cmox_gcmFast_setIV+0x10>
 800086a:	6802      	ldr	r2, [r0, #0]
 800086c:	429a      	cmp	r2, r3
 800086e:	d101      	bne.n	8000874 <cmox_gcmFast_setIV+0x10>
 8000870:	0002      	movs	r2, r0
 8000872:	d101      	bne.n	8000878 <cmox_gcmFast_setIV+0x14>
 8000874:	4816      	ldr	r0, [pc, #88]	; (80008d0 <cmox_gcmFast_setIV+0x6c>)
 8000876:	e029      	b.n	80008cc <cmox_gcmFast_setIV+0x68>
 8000878:	2382      	movs	r3, #130	; 0x82
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	18c2      	adds	r2, r0, r3
 800087e:	780b      	ldrb	r3, [r1, #0]
 8000880:	061b      	lsls	r3, r3, #24
 8000882:	784c      	ldrb	r4, [r1, #1]
 8000884:	0424      	lsls	r4, r4, #16
 8000886:	431c      	orrs	r4, r3
 8000888:	788b      	ldrb	r3, [r1, #2]
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	4323      	orrs	r3, r4
 800088e:	78cc      	ldrb	r4, [r1, #3]
 8000890:	431c      	orrs	r4, r3
 8000892:	6014      	str	r4, [r2, #0]
 8000894:	790b      	ldrb	r3, [r1, #4]
 8000896:	061b      	lsls	r3, r3, #24
 8000898:	794c      	ldrb	r4, [r1, #5]
 800089a:	0424      	lsls	r4, r4, #16
 800089c:	431c      	orrs	r4, r3
 800089e:	798b      	ldrb	r3, [r1, #6]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	4323      	orrs	r3, r4
 80008a4:	79cc      	ldrb	r4, [r1, #7]
 80008a6:	431c      	orrs	r4, r3
 80008a8:	6054      	str	r4, [r2, #4]
 80008aa:	7a0b      	ldrb	r3, [r1, #8]
 80008ac:	061b      	lsls	r3, r3, #24
 80008ae:	7a4c      	ldrb	r4, [r1, #9]
 80008b0:	0424      	lsls	r4, r4, #16
 80008b2:	431c      	orrs	r4, r3
 80008b4:	7a8b      	ldrb	r3, [r1, #10]
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	4323      	orrs	r3, r4
 80008ba:	7ac9      	ldrb	r1, [r1, #11]
 80008bc:	4319      	orrs	r1, r3
 80008be:	6091      	str	r1, [r2, #8]
 80008c0:	6841      	ldr	r1, [r0, #4]
 80008c2:	2201      	movs	r2, #1
 80008c4:	430a      	orrs	r2, r1
 80008c6:	6042      	str	r2, [r0, #4]
 80008c8:	2080      	movs	r0, #128	; 0x80
 80008ca:	0240      	lsls	r0, r0, #9
 80008cc:	bc10      	pop	{r4}
 80008ce:	4770      	bx	lr
 80008d0:	00010003 	.word	0x00010003

080008d4 <cmox_gcmFast_setTagLen>:
 80008d4:	2900      	cmp	r1, #0
 80008d6:	d006      	beq.n	80008e6 <cmox_gcmFast_setTagLen+0x12>
 80008d8:	2911      	cmp	r1, #17
 80008da:	d204      	bcs.n	80008e6 <cmox_gcmFast_setTagLen+0x12>
 80008dc:	6803      	ldr	r3, [r0, #0]
 80008de:	4293      	cmp	r3, r2
 80008e0:	d101      	bne.n	80008e6 <cmox_gcmFast_setTagLen+0x12>
 80008e2:	0002      	movs	r2, r0
 80008e4:	d101      	bne.n	80008ea <cmox_gcmFast_setTagLen+0x16>
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <cmox_gcmFast_setTagLen+0x2c>)
 80008e8:	4770      	bx	lr
 80008ea:	238a      	movs	r3, #138	; 0x8a
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	50c1      	str	r1, [r0, r3]
 80008f0:	6841      	ldr	r1, [r0, #4]
 80008f2:	2202      	movs	r2, #2
 80008f4:	430a      	orrs	r2, r1
 80008f6:	6042      	str	r2, [r0, #4]
 80008f8:	2080      	movs	r0, #128	; 0x80
 80008fa:	0240      	lsls	r0, r0, #9
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	00010003 	.word	0x00010003

08000904 <cmox_gcmFast_appendAD>:
 8000904:	b510      	push	{r4, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	6804      	ldr	r4, [r0, #0]
 800090a:	429c      	cmp	r4, r3
 800090c:	d101      	bne.n	8000912 <cmox_gcmFast_appendAD+0xe>
 800090e:	0004      	movs	r4, r0
 8000910:	d101      	bne.n	8000916 <cmox_gcmFast_appendAD+0x12>
 8000912:	480a      	ldr	r0, [pc, #40]	; (800093c <cmox_gcmFast_appendAD+0x38>)
 8000914:	e010      	b.n	8000938 <cmox_gcmFast_appendAD+0x34>
 8000916:	7903      	ldrb	r3, [r0, #4]
 8000918:	075b      	lsls	r3, r3, #29
 800091a:	d501      	bpl.n	8000920 <cmox_gcmFast_appendAD+0x1c>
 800091c:	4808      	ldr	r0, [pc, #32]	; (8000940 <cmox_gcmFast_appendAD+0x3c>)
 800091e:	e00b      	b.n	8000938 <cmox_gcmFast_appendAD+0x34>
 8000920:	239a      	movs	r3, #154	; 0x9a
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	18c3      	adds	r3, r0, r3
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	0013      	movs	r3, r2
 800092a:	000a      	movs	r2, r1
 800092c:	0001      	movs	r1, r0
 800092e:	3108      	adds	r1, #8
 8000930:	f000 fd24 	bl	800137c <cmox_gcm_appendAD_common>
 8000934:	2080      	movs	r0, #128	; 0x80
 8000936:	0240      	lsls	r0, r0, #9
 8000938:	b002      	add	sp, #8
 800093a:	bd10      	pop	{r4, pc}
 800093c:	00010003 	.word	0x00010003
 8000940:	00010004 	.word	0x00010004

08000944 <cmox_gcmFast_getByCipher>:
 8000944:	6802      	ldr	r2, [r0, #0]
 8000946:	428a      	cmp	r2, r1
 8000948:	d000      	beq.n	800094c <cmox_gcmFast_getByCipher+0x8>
 800094a:	2000      	movs	r0, #0
 800094c:	4770      	bx	lr

0800094e <cmox_gcmFast_construct>:
 800094e:	b500      	push	{lr}
 8000950:	b081      	sub	sp, #4
 8000952:	000a      	movs	r2, r1
 8000954:	2800      	cmp	r0, #0
 8000956:	d001      	beq.n	800095c <cmox_gcmFast_construct+0xe>
 8000958:	2a00      	cmp	r2, #0
 800095a:	d101      	bne.n	8000960 <cmox_gcmFast_construct+0x12>
 800095c:	2000      	movs	r0, #0
 800095e:	e003      	b.n	8000968 <cmox_gcmFast_construct+0x1a>
 8000960:	6851      	ldr	r1, [r2, #4]
 8000962:	6809      	ldr	r1, [r1, #0]
 8000964:	6812      	ldr	r2, [r2, #0]
 8000966:	4790      	blx	r2
 8000968:	b001      	add	sp, #4
 800096a:	bd00      	pop	{pc}

0800096c <gcmFast_decrypt_cleanup>:
 800096c:	b500      	push	{lr}
 800096e:	b081      	sub	sp, #4
 8000970:	4902      	ldr	r1, [pc, #8]	; (800097c <gcmFast_decrypt_cleanup+0x10>)
 8000972:	f7ff fe77 	bl	8000664 <cmox_gcmFast_cleanup>
 8000976:	b001      	add	sp, #4
 8000978:	bd00      	pop	{pc}
 800097a:	bf00      	nop
 800097c:	0800b518 	.word	0x0800b518

08000980 <gcmFast_decrypt_init>:
 8000980:	b500      	push	{lr}
 8000982:	b081      	sub	sp, #4
 8000984:	4902      	ldr	r1, [pc, #8]	; (8000990 <gcmFast_decrypt_init+0x10>)
 8000986:	f7ff fe7f 	bl	8000688 <cmox_gcmFast_init>
 800098a:	b001      	add	sp, #4
 800098c:	bd00      	pop	{pc}
 800098e:	bf00      	nop
 8000990:	0800b518 	.word	0x0800b518

08000994 <gcmFast_decrypt_setKey>:
 8000994:	b500      	push	{lr}
 8000996:	b081      	sub	sp, #4
 8000998:	4b02      	ldr	r3, [pc, #8]	; (80009a4 <gcmFast_decrypt_setKey+0x10>)
 800099a:	f7ff fe87 	bl	80006ac <cmox_gcmFast_setKey>
 800099e:	b001      	add	sp, #4
 80009a0:	bd00      	pop	{pc}
 80009a2:	bf00      	nop
 80009a4:	0800b518 	.word	0x0800b518

080009a8 <gcmFast_decrypt_setIV>:
 80009a8:	b500      	push	{lr}
 80009aa:	b081      	sub	sp, #4
 80009ac:	4b02      	ldr	r3, [pc, #8]	; (80009b8 <gcmFast_decrypt_setIV+0x10>)
 80009ae:	f7ff ff59 	bl	8000864 <cmox_gcmFast_setIV>
 80009b2:	b001      	add	sp, #4
 80009b4:	bd00      	pop	{pc}
 80009b6:	bf00      	nop
 80009b8:	0800b518 	.word	0x0800b518

080009bc <gcmFast_decrypt_setTagLen>:
 80009bc:	b500      	push	{lr}
 80009be:	b081      	sub	sp, #4
 80009c0:	4a02      	ldr	r2, [pc, #8]	; (80009cc <gcmFast_decrypt_setTagLen+0x10>)
 80009c2:	f7ff ff87 	bl	80008d4 <cmox_gcmFast_setTagLen>
 80009c6:	b001      	add	sp, #4
 80009c8:	bd00      	pop	{pc}
 80009ca:	bf00      	nop
 80009cc:	0800b518 	.word	0x0800b518

080009d0 <gcmFast_decrypt_appendAD>:
 80009d0:	b500      	push	{lr}
 80009d2:	b081      	sub	sp, #4
 80009d4:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <gcmFast_decrypt_appendAD+0x10>)
 80009d6:	f7ff ff95 	bl	8000904 <cmox_gcmFast_appendAD>
 80009da:	b001      	add	sp, #4
 80009dc:	bd00      	pop	{pc}
 80009de:	bf00      	nop
 80009e0:	0800b518 	.word	0x0800b518

080009e4 <cmox_gcmFast_decrypt>:
 80009e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009e6:	b085      	sub	sp, #20
 80009e8:	0007      	movs	r7, r0
 80009ea:	000e      	movs	r6, r1
 80009ec:	0014      	movs	r4, r2
 80009ee:	001d      	movs	r5, r3
 80009f0:	490b      	ldr	r1, [pc, #44]	; (8000a20 <cmox_gcmFast_decrypt+0x3c>)
 80009f2:	f7ff ffa7 	bl	8000944 <cmox_gcmFast_getByCipher>
 80009f6:	2800      	cmp	r0, #0
 80009f8:	d101      	bne.n	80009fe <cmox_gcmFast_decrypt+0x1a>
 80009fa:	480a      	ldr	r0, [pc, #40]	; (8000a24 <cmox_gcmFast_decrypt+0x40>)
 80009fc:	e00e      	b.n	8000a1c <cmox_gcmFast_decrypt+0x38>
 80009fe:	219a      	movs	r1, #154	; 0x9a
 8000a00:	0049      	lsls	r1, r1, #1
 8000a02:	1843      	adds	r3, r0, r1
 8000a04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000a06:	9103      	str	r1, [sp, #12]
 8000a08:	9502      	str	r5, [sp, #8]
 8000a0a:	9401      	str	r4, [sp, #4]
 8000a0c:	9600      	str	r6, [sp, #0]
 8000a0e:	0002      	movs	r2, r0
 8000a10:	3208      	adds	r2, #8
 8000a12:	0001      	movs	r1, r0
 8000a14:	3108      	adds	r1, #8
 8000a16:	0038      	movs	r0, r7
 8000a18:	f000 fef0 	bl	80017fc <cmox_gcm_decrypt_common>
 8000a1c:	b005      	add	sp, #20
 8000a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a20:	0800b518 	.word	0x0800b518
 8000a24:	00010003 	.word	0x00010003

08000a28 <gcmFast_decrypt_verifyTag>:
 8000a28:	b570      	push	{r4, r5, r6, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	0006      	movs	r6, r0
 8000a2e:	000c      	movs	r4, r1
 8000a30:	0015      	movs	r5, r2
 8000a32:	490a      	ldr	r1, [pc, #40]	; (8000a5c <gcmFast_decrypt_verifyTag+0x34>)
 8000a34:	f7ff ff86 	bl	8000944 <cmox_gcmFast_getByCipher>
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d101      	bne.n	8000a40 <gcmFast_decrypt_verifyTag+0x18>
 8000a3c:	4808      	ldr	r0, [pc, #32]	; (8000a60 <gcmFast_decrypt_verifyTag+0x38>)
 8000a3e:	e00b      	b.n	8000a58 <gcmFast_decrypt_verifyTag+0x30>
 8000a40:	219a      	movs	r1, #154	; 0x9a
 8000a42:	0049      	lsls	r1, r1, #1
 8000a44:	1843      	adds	r3, r0, r1
 8000a46:	9501      	str	r5, [sp, #4]
 8000a48:	9400      	str	r4, [sp, #0]
 8000a4a:	0002      	movs	r2, r0
 8000a4c:	3208      	adds	r2, #8
 8000a4e:	0001      	movs	r1, r0
 8000a50:	3108      	adds	r1, #8
 8000a52:	0030      	movs	r0, r6
 8000a54:	f000 fff4 	bl	8001a40 <cmox_gcm_decrypt_verify_common>
 8000a58:	b002      	add	sp, #8
 8000a5a:	bd70      	pop	{r4, r5, r6, pc}
 8000a5c:	0800b518 	.word	0x0800b518
 8000a60:	00010003 	.word	0x00010003

08000a64 <cmox_gcmFastDecrypt_construct>:
 8000a64:	2800      	cmp	r0, #0
 8000a66:	d007      	beq.n	8000a78 <cmox_gcmFastDecrypt_construct+0x14>
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <cmox_gcmFastDecrypt_construct+0x18>)
 8000a6a:	6002      	str	r2, [r0, #0]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <cmox_gcmFastDecrypt_construct+0x1c>)
 8000a6e:	6812      	ldr	r2, [r2, #0]
 8000a70:	2398      	movs	r3, #152	; 0x98
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	50c2      	str	r2, [r0, r3]
 8000a76:	6081      	str	r1, [r0, #8]
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	0800b518 	.word	0x0800b518
 8000a80:	0800b514 	.word	0x0800b514

08000a84 <gcmFast_encrypt_cleanup>:
 8000a84:	b500      	push	{lr}
 8000a86:	b081      	sub	sp, #4
 8000a88:	4902      	ldr	r1, [pc, #8]	; (8000a94 <gcmFast_encrypt_cleanup+0x10>)
 8000a8a:	f7ff fdeb 	bl	8000664 <cmox_gcmFast_cleanup>
 8000a8e:	b001      	add	sp, #4
 8000a90:	bd00      	pop	{pc}
 8000a92:	bf00      	nop
 8000a94:	0800b544 	.word	0x0800b544

08000a98 <gcmFast_encrypt_init>:
 8000a98:	b500      	push	{lr}
 8000a9a:	b081      	sub	sp, #4
 8000a9c:	4902      	ldr	r1, [pc, #8]	; (8000aa8 <gcmFast_encrypt_init+0x10>)
 8000a9e:	f7ff fdf3 	bl	8000688 <cmox_gcmFast_init>
 8000aa2:	b001      	add	sp, #4
 8000aa4:	bd00      	pop	{pc}
 8000aa6:	bf00      	nop
 8000aa8:	0800b544 	.word	0x0800b544

08000aac <gcmFast_encrypt_setKey>:
 8000aac:	b500      	push	{lr}
 8000aae:	b081      	sub	sp, #4
 8000ab0:	4b02      	ldr	r3, [pc, #8]	; (8000abc <gcmFast_encrypt_setKey+0x10>)
 8000ab2:	f7ff fdfb 	bl	80006ac <cmox_gcmFast_setKey>
 8000ab6:	b001      	add	sp, #4
 8000ab8:	bd00      	pop	{pc}
 8000aba:	bf00      	nop
 8000abc:	0800b544 	.word	0x0800b544

08000ac0 <gcmFast_encrypt_setIV>:
 8000ac0:	b500      	push	{lr}
 8000ac2:	b081      	sub	sp, #4
 8000ac4:	4b02      	ldr	r3, [pc, #8]	; (8000ad0 <gcmFast_encrypt_setIV+0x10>)
 8000ac6:	f7ff fecd 	bl	8000864 <cmox_gcmFast_setIV>
 8000aca:	b001      	add	sp, #4
 8000acc:	bd00      	pop	{pc}
 8000ace:	bf00      	nop
 8000ad0:	0800b544 	.word	0x0800b544

08000ad4 <gcmFast_encrypt_setTagLen>:
 8000ad4:	b500      	push	{lr}
 8000ad6:	b081      	sub	sp, #4
 8000ad8:	4a02      	ldr	r2, [pc, #8]	; (8000ae4 <gcmFast_encrypt_setTagLen+0x10>)
 8000ada:	f7ff fefb 	bl	80008d4 <cmox_gcmFast_setTagLen>
 8000ade:	b001      	add	sp, #4
 8000ae0:	bd00      	pop	{pc}
 8000ae2:	bf00      	nop
 8000ae4:	0800b544 	.word	0x0800b544

08000ae8 <gcmFast_encrypt_appendAD>:
 8000ae8:	b500      	push	{lr}
 8000aea:	b081      	sub	sp, #4
 8000aec:	4b02      	ldr	r3, [pc, #8]	; (8000af8 <gcmFast_encrypt_appendAD+0x10>)
 8000aee:	f7ff ff09 	bl	8000904 <cmox_gcmFast_appendAD>
 8000af2:	b001      	add	sp, #4
 8000af4:	bd00      	pop	{pc}
 8000af6:	bf00      	nop
 8000af8:	0800b544 	.word	0x0800b544

08000afc <cmox_gcmFast_encrypt>:
 8000afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afe:	b085      	sub	sp, #20
 8000b00:	0007      	movs	r7, r0
 8000b02:	000e      	movs	r6, r1
 8000b04:	0014      	movs	r4, r2
 8000b06:	001d      	movs	r5, r3
 8000b08:	490b      	ldr	r1, [pc, #44]	; (8000b38 <cmox_gcmFast_encrypt+0x3c>)
 8000b0a:	f7ff ff1b 	bl	8000944 <cmox_gcmFast_getByCipher>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	d101      	bne.n	8000b16 <cmox_gcmFast_encrypt+0x1a>
 8000b12:	480a      	ldr	r0, [pc, #40]	; (8000b3c <cmox_gcmFast_encrypt+0x40>)
 8000b14:	e00e      	b.n	8000b34 <cmox_gcmFast_encrypt+0x38>
 8000b16:	219a      	movs	r1, #154	; 0x9a
 8000b18:	0049      	lsls	r1, r1, #1
 8000b1a:	1843      	adds	r3, r0, r1
 8000b1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000b1e:	9103      	str	r1, [sp, #12]
 8000b20:	9502      	str	r5, [sp, #8]
 8000b22:	9401      	str	r4, [sp, #4]
 8000b24:	9600      	str	r6, [sp, #0]
 8000b26:	0002      	movs	r2, r0
 8000b28:	3208      	adds	r2, #8
 8000b2a:	0001      	movs	r1, r0
 8000b2c:	3108      	adds	r1, #8
 8000b2e:	0038      	movs	r0, r7
 8000b30:	f000 fcea 	bl	8001508 <cmox_gcm_encrypt_common>
 8000b34:	b005      	add	sp, #20
 8000b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b38:	0800b544 	.word	0x0800b544
 8000b3c:	00010003 	.word	0x00010003

08000b40 <gcmFast_encrypt_generateTag>:
 8000b40:	b570      	push	{r4, r5, r6, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	0006      	movs	r6, r0
 8000b46:	000c      	movs	r4, r1
 8000b48:	0015      	movs	r5, r2
 8000b4a:	490a      	ldr	r1, [pc, #40]	; (8000b74 <gcmFast_encrypt_generateTag+0x34>)
 8000b4c:	f7ff fefa 	bl	8000944 <cmox_gcmFast_getByCipher>
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d101      	bne.n	8000b58 <gcmFast_encrypt_generateTag+0x18>
 8000b54:	4808      	ldr	r0, [pc, #32]	; (8000b78 <gcmFast_encrypt_generateTag+0x38>)
 8000b56:	e00b      	b.n	8000b70 <gcmFast_encrypt_generateTag+0x30>
 8000b58:	219a      	movs	r1, #154	; 0x9a
 8000b5a:	0049      	lsls	r1, r1, #1
 8000b5c:	1843      	adds	r3, r0, r1
 8000b5e:	9501      	str	r5, [sp, #4]
 8000b60:	9400      	str	r4, [sp, #0]
 8000b62:	0002      	movs	r2, r0
 8000b64:	3208      	adds	r2, #8
 8000b66:	0001      	movs	r1, r0
 8000b68:	3108      	adds	r1, #8
 8000b6a:	0030      	movs	r0, r6
 8000b6c:	f000 fdf2 	bl	8001754 <cmox_gcm_generateTag_common>
 8000b70:	b002      	add	sp, #8
 8000b72:	bd70      	pop	{r4, r5, r6, pc}
 8000b74:	0800b544 	.word	0x0800b544
 8000b78:	00010003 	.word	0x00010003

08000b7c <cmox_gcmFastEncrypt_construct>:
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	d007      	beq.n	8000b90 <cmox_gcmFastEncrypt_construct+0x14>
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <cmox_gcmFastEncrypt_construct+0x18>)
 8000b82:	6002      	str	r2, [r0, #0]
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <cmox_gcmFastEncrypt_construct+0x1c>)
 8000b86:	6812      	ldr	r2, [r2, #0]
 8000b88:	2398      	movs	r3, #152	; 0x98
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	50c2      	str	r2, [r0, r3]
 8000b8e:	6081      	str	r1, [r0, #8]
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	0800b544 	.word	0x0800b544
 8000b98:	0800b514 	.word	0x0800b514

08000b9c <cmox_initialize>:
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d009      	beq.n	8000bb6 <cmox_initialize+0x1a>
 8000ba2:	6801      	ldr	r1, [r0, #0]
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	d005      	beq.n	8000bb4 <cmox_initialize+0x18>
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <cmox_initialize+0x20>)
 8000baa:	4291      	cmp	r1, r2
 8000bac:	d102      	bne.n	8000bb4 <cmox_initialize+0x18>
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <cmox_initialize+0x24>)
 8000bb2:	7011      	strb	r1, [r2, #0]
 8000bb4:	6840      	ldr	r0, [r0, #4]
 8000bb6:	f001 febb 	bl	8002930 <cmox_ll_init>
 8000bba:	bd02      	pop	{r1, pc}
 8000bbc:	48370000 	.word	0x48370000
 8000bc0:	20000164 	.word	0x20000164

08000bc4 <cmox_aesFast_encrypt>:
 8000bc4:	b4f4      	push	{r2, r4, r5, r6, r7}
 8000bc6:	b08d      	sub	sp, #52	; 0x34
 8000bc8:	0002      	movs	r2, r0
 8000bca:	0008      	movs	r0, r1
 8000bcc:	6851      	ldr	r1, [r2, #4]
 8000bce:	08ce      	lsrs	r6, r1, #3
 8000bd0:	1cf6      	adds	r6, r6, #3
 8000bd2:	0015      	movs	r5, r2
 8000bd4:	350c      	adds	r5, #12
 8000bd6:	6802      	ldr	r2, [r0, #0]
 8000bd8:	6829      	ldr	r1, [r5, #0]
 8000bda:	4051      	eors	r1, r2
 8000bdc:	6843      	ldr	r3, [r0, #4]
 8000bde:	686a      	ldr	r2, [r5, #4]
 8000be0:	405a      	eors	r2, r3
 8000be2:	6884      	ldr	r4, [r0, #8]
 8000be4:	68ab      	ldr	r3, [r5, #8]
 8000be6:	4063      	eors	r3, r4
 8000be8:	68c0      	ldr	r0, [r0, #12]
 8000bea:	68ec      	ldr	r4, [r5, #12]
 8000bec:	4044      	eors	r4, r0
 8000bee:	9601      	str	r6, [sp, #4]
 8000bf0:	0028      	movs	r0, r5
 8000bf2:	e059      	b.n	8000ca8 <cmox_aesFast_encrypt+0xe4>
 8000bf4:	4ca8      	ldr	r4, [pc, #672]	; (8000e98 <cmox_aesFast_encrypt+0x2d4>)
 8000bf6:	00be      	lsls	r6, r7, #2
 8000bf8:	59a6      	ldr	r6, [r4, r6]
 8000bfa:	2708      	movs	r7, #8
 8000bfc:	41fe      	rors	r6, r7
 8000bfe:	2710      	movs	r7, #16
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	58e3      	ldr	r3, [r4, r3]
 8000c04:	41fb      	rors	r3, r7
 8000c06:	2718      	movs	r7, #24
 8000c08:	00ad      	lsls	r5, r5, #2
 8000c0a:	5965      	ldr	r5, [r4, r5]
 8000c0c:	41fd      	rors	r5, r7
 8000c0e:	0089      	lsls	r1, r1, #2
 8000c10:	5861      	ldr	r1, [r4, r1]
 8000c12:	404e      	eors	r6, r1
 8000c14:	4073      	eors	r3, r6
 8000c16:	405d      	eors	r5, r3
 8000c18:	6801      	ldr	r1, [r0, #0]
 8000c1a:	4069      	eors	r1, r5
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000c20:	00ad      	lsls	r5, r5, #2
 8000c22:	5965      	ldr	r5, [r4, r5]
 8000c24:	41dd      	rors	r5, r3
 8000c26:	2310      	movs	r3, #16
 8000c28:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8000c2a:	00b6      	lsls	r6, r6, #2
 8000c2c:	59a6      	ldr	r6, [r4, r6]
 8000c2e:	41de      	rors	r6, r3
 8000c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	58e3      	ldr	r3, [r4, r3]
 8000c36:	41fb      	rors	r3, r7
 8000c38:	0092      	lsls	r2, r2, #2
 8000c3a:	58a2      	ldr	r2, [r4, r2]
 8000c3c:	4055      	eors	r5, r2
 8000c3e:	406e      	eors	r6, r5
 8000c40:	4073      	eors	r3, r6
 8000c42:	6842      	ldr	r2, [r0, #4]
 8000c44:	405a      	eors	r2, r3
 8000c46:	2508      	movs	r5, #8
 8000c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	58e3      	ldr	r3, [r4, r3]
 8000c4e:	41eb      	rors	r3, r5
 8000c50:	2510      	movs	r5, #16
 8000c52:	9e08      	ldr	r6, [sp, #32]
 8000c54:	00b6      	lsls	r6, r6, #2
 8000c56:	59a6      	ldr	r6, [r4, r6]
 8000c58:	41ee      	rors	r6, r5
 8000c5a:	9d07      	ldr	r5, [sp, #28]
 8000c5c:	00ad      	lsls	r5, r5, #2
 8000c5e:	5965      	ldr	r5, [r4, r5]
 8000c60:	41fd      	rors	r5, r7
 8000c62:	9f06      	ldr	r7, [sp, #24]
 8000c64:	00bf      	lsls	r7, r7, #2
 8000c66:	59e7      	ldr	r7, [r4, r7]
 8000c68:	407b      	eors	r3, r7
 8000c6a:	405e      	eors	r6, r3
 8000c6c:	4075      	eors	r5, r6
 8000c6e:	6883      	ldr	r3, [r0, #8]
 8000c70:	406b      	eors	r3, r5
 8000c72:	2508      	movs	r5, #8
 8000c74:	9e05      	ldr	r6, [sp, #20]
 8000c76:	00b6      	lsls	r6, r6, #2
 8000c78:	59a6      	ldr	r6, [r4, r6]
 8000c7a:	41ee      	rors	r6, r5
 8000c7c:	9605      	str	r6, [sp, #20]
 8000c7e:	2610      	movs	r6, #16
 8000c80:	9d04      	ldr	r5, [sp, #16]
 8000c82:	00ad      	lsls	r5, r5, #2
 8000c84:	5965      	ldr	r5, [r4, r5]
 8000c86:	41f5      	rors	r5, r6
 8000c88:	2618      	movs	r6, #24
 8000c8a:	9f03      	ldr	r7, [sp, #12]
 8000c8c:	00bf      	lsls	r7, r7, #2
 8000c8e:	59e7      	ldr	r7, [r4, r7]
 8000c90:	41f7      	rors	r7, r6
 8000c92:	9700      	str	r7, [sp, #0]
 8000c94:	9e02      	ldr	r6, [sp, #8]
 8000c96:	00b6      	lsls	r6, r6, #2
 8000c98:	59a4      	ldr	r4, [r4, r6]
 8000c9a:	9e05      	ldr	r6, [sp, #20]
 8000c9c:	4066      	eors	r6, r4
 8000c9e:	4075      	eors	r5, r6
 8000ca0:	463e      	mov	r6, r7
 8000ca2:	406e      	eors	r6, r5
 8000ca4:	68c4      	ldr	r4, [r0, #12]
 8000ca6:	4074      	eors	r4, r6
 8000ca8:	2608      	movs	r6, #8
 8000caa:	4d7b      	ldr	r5, [pc, #492]	; (8000e98 <cmox_aesFast_encrypt+0x2d4>)
 8000cac:	0217      	lsls	r7, r2, #8
 8000cae:	0e3f      	lsrs	r7, r7, #24
 8000cb0:	00bf      	lsls	r7, r7, #2
 8000cb2:	59ed      	ldr	r5, [r5, r7]
 8000cb4:	41f5      	rors	r5, r6
 8000cb6:	9502      	str	r5, [sp, #8]
 8000cb8:	2610      	movs	r6, #16
 8000cba:	4d77      	ldr	r5, [pc, #476]	; (8000e98 <cmox_aesFast_encrypt+0x2d4>)
 8000cbc:	041f      	lsls	r7, r3, #16
 8000cbe:	0e3f      	lsrs	r7, r7, #24
 8000cc0:	00bf      	lsls	r7, r7, #2
 8000cc2:	59ed      	ldr	r5, [r5, r7]
 8000cc4:	41f5      	rors	r5, r6
 8000cc6:	9500      	str	r5, [sp, #0]
 8000cc8:	2618      	movs	r6, #24
 8000cca:	4d73      	ldr	r5, [pc, #460]	; (8000e98 <cmox_aesFast_encrypt+0x2d4>)
 8000ccc:	0627      	lsls	r7, r4, #24
 8000cce:	0dbf      	lsrs	r7, r7, #22
 8000cd0:	59ed      	ldr	r5, [r5, r7]
 8000cd2:	41f5      	rors	r5, r6
 8000cd4:	4e70      	ldr	r6, [pc, #448]	; (8000e98 <cmox_aesFast_encrypt+0x2d4>)
 8000cd6:	0e0f      	lsrs	r7, r1, #24
 8000cd8:	00bf      	lsls	r7, r7, #2
 8000cda:	59f7      	ldr	r7, [r6, r7]
 8000cdc:	9e02      	ldr	r6, [sp, #8]
 8000cde:	407e      	eors	r6, r7
 8000ce0:	9f00      	ldr	r7, [sp, #0]
 8000ce2:	4077      	eors	r7, r6
 8000ce4:	407d      	eors	r5, r7
 8000ce6:	6906      	ldr	r6, [r0, #16]
 8000ce8:	406e      	eors	r6, r5
 8000cea:	9600      	str	r6, [sp, #0]
 8000cec:	2608      	movs	r6, #8
 8000cee:	4d6a      	ldr	r5, [pc, #424]	; (8000e98 <cmox_aesFast_encrypt+0x2d4>)
 8000cf0:	021f      	lsls	r7, r3, #8
 8000cf2:	0e3f      	lsrs	r7, r7, #24
 8000cf4:	00bf      	lsls	r7, r7, #2
 8000cf6:	59ed      	ldr	r5, [r5, r7]
 8000cf8:	41f5      	rors	r5, r6
 8000cfa:	4f67      	ldr	r7, [pc, #412]	; (8000e98 <cmox_aesFast_encrypt+0x2d4>)
 8000cfc:	0426      	lsls	r6, r4, #16
 8000cfe:	0e36      	lsrs	r6, r6, #24
 8000d00:	00b6      	lsls	r6, r6, #2
 8000d02:	59be      	ldr	r6, [r7, r6]
 8000d04:	2710      	movs	r7, #16
 8000d06:	41fe      	rors	r6, r7
 8000d08:	9603      	str	r6, [sp, #12]
 8000d0a:	4f63      	ldr	r7, [pc, #396]	; (8000e98 <cmox_aesFast_encrypt+0x2d4>)
 8000d0c:	060e      	lsls	r6, r1, #24
 8000d0e:	0db6      	lsrs	r6, r6, #22
 8000d10:	59be      	ldr	r6, [r7, r6]
 8000d12:	2718      	movs	r7, #24
 8000d14:	41fe      	rors	r6, r7
 8000d16:	9602      	str	r6, [sp, #8]
 8000d18:	4e5f      	ldr	r6, [pc, #380]	; (8000e98 <cmox_aesFast_encrypt+0x2d4>)
 8000d1a:	0e17      	lsrs	r7, r2, #24
 8000d1c:	00bf      	lsls	r7, r7, #2
 8000d1e:	59f6      	ldr	r6, [r6, r7]
 8000d20:	4075      	eors	r5, r6
 8000d22:	9e03      	ldr	r6, [sp, #12]
 8000d24:	406e      	eors	r6, r5
 8000d26:	9f02      	ldr	r7, [sp, #8]
 8000d28:	4077      	eors	r7, r6
 8000d2a:	6945      	ldr	r5, [r0, #20]
 8000d2c:	407d      	eors	r5, r7
 8000d2e:	4f5a      	ldr	r7, [pc, #360]	; (8000e98 <cmox_aesFast_encrypt+0x2d4>)
 8000d30:	0226      	lsls	r6, r4, #8
 8000d32:	0e36      	lsrs	r6, r6, #24
 8000d34:	00b6      	lsls	r6, r6, #2
 8000d36:	59be      	ldr	r6, [r7, r6]
 8000d38:	2708      	movs	r7, #8
 8000d3a:	41fe      	rors	r6, r7
 8000d3c:	9604      	str	r6, [sp, #16]
 8000d3e:	4f56      	ldr	r7, [pc, #344]	; (8000e98 <cmox_aesFast_encrypt+0x2d4>)
 8000d40:	040e      	lsls	r6, r1, #16
 8000d42:	0e36      	lsrs	r6, r6, #24
 8000d44:	00b6      	lsls	r6, r6, #2
 8000d46:	59be      	ldr	r6, [r7, r6]
 8000d48:	2710      	movs	r7, #16
 8000d4a:	41fe      	rors	r6, r7
 8000d4c:	9603      	str	r6, [sp, #12]
 8000d4e:	4f52      	ldr	r7, [pc, #328]	; (8000e98 <cmox_aesFast_encrypt+0x2d4>)
 8000d50:	0616      	lsls	r6, r2, #24
 8000d52:	0db6      	lsrs	r6, r6, #22
 8000d54:	59be      	ldr	r6, [r7, r6]
 8000d56:	2718      	movs	r7, #24
 8000d58:	41fe      	rors	r6, r7
 8000d5a:	9602      	str	r6, [sp, #8]
 8000d5c:	4e4e      	ldr	r6, [pc, #312]	; (8000e98 <cmox_aesFast_encrypt+0x2d4>)
 8000d5e:	0e1f      	lsrs	r7, r3, #24
 8000d60:	00bf      	lsls	r7, r7, #2
 8000d62:	59f6      	ldr	r6, [r6, r7]
 8000d64:	9f04      	ldr	r7, [sp, #16]
 8000d66:	4077      	eors	r7, r6
 8000d68:	9e03      	ldr	r6, [sp, #12]
 8000d6a:	407e      	eors	r6, r7
 8000d6c:	9f02      	ldr	r7, [sp, #8]
 8000d6e:	4077      	eors	r7, r6
 8000d70:	6986      	ldr	r6, [r0, #24]
 8000d72:	407e      	eors	r6, r7
 8000d74:	4f48      	ldr	r7, [pc, #288]	; (8000e98 <cmox_aesFast_encrypt+0x2d4>)
 8000d76:	0209      	lsls	r1, r1, #8
 8000d78:	0e09      	lsrs	r1, r1, #24
 8000d7a:	0089      	lsls	r1, r1, #2
 8000d7c:	5879      	ldr	r1, [r7, r1]
 8000d7e:	2708      	movs	r7, #8
 8000d80:	41f9      	rors	r1, r7
 8000d82:	4f45      	ldr	r7, [pc, #276]	; (8000e98 <cmox_aesFast_encrypt+0x2d4>)
 8000d84:	0412      	lsls	r2, r2, #16
 8000d86:	0e12      	lsrs	r2, r2, #24
 8000d88:	0092      	lsls	r2, r2, #2
 8000d8a:	58ba      	ldr	r2, [r7, r2]
 8000d8c:	2710      	movs	r7, #16
 8000d8e:	41fa      	rors	r2, r7
 8000d90:	4f41      	ldr	r7, [pc, #260]	; (8000e98 <cmox_aesFast_encrypt+0x2d4>)
 8000d92:	061b      	lsls	r3, r3, #24
 8000d94:	0d9b      	lsrs	r3, r3, #22
 8000d96:	58fb      	ldr	r3, [r7, r3]
 8000d98:	2718      	movs	r7, #24
 8000d9a:	41fb      	rors	r3, r7
 8000d9c:	4f3e      	ldr	r7, [pc, #248]	; (8000e98 <cmox_aesFast_encrypt+0x2d4>)
 8000d9e:	0e24      	lsrs	r4, r4, #24
 8000da0:	00a4      	lsls	r4, r4, #2
 8000da2:	593c      	ldr	r4, [r7, r4]
 8000da4:	4061      	eors	r1, r4
 8000da6:	404a      	eors	r2, r1
 8000da8:	4053      	eors	r3, r2
 8000daa:	69c4      	ldr	r4, [r0, #28]
 8000dac:	405c      	eors	r4, r3
 8000dae:	3020      	adds	r0, #32
 8000db0:	9901      	ldr	r1, [sp, #4]
 8000db2:	1e49      	subs	r1, r1, #1
 8000db4:	9101      	str	r1, [sp, #4]
 8000db6:	0e21      	lsrs	r1, r4, #24
 8000db8:	9102      	str	r1, [sp, #8]
 8000dba:	0429      	lsls	r1, r5, #16
 8000dbc:	0e09      	lsrs	r1, r1, #24
 8000dbe:	9104      	str	r1, [sp, #16]
 8000dc0:	9900      	ldr	r1, [sp, #0]
 8000dc2:	0209      	lsls	r1, r1, #8
 8000dc4:	0e09      	lsrs	r1, r1, #24
 8000dc6:	9105      	str	r1, [sp, #20]
 8000dc8:	0e31      	lsrs	r1, r6, #24
 8000dca:	9106      	str	r1, [sp, #24]
 8000dcc:	9900      	ldr	r1, [sp, #0]
 8000dce:	0409      	lsls	r1, r1, #16
 8000dd0:	0e09      	lsrs	r1, r1, #24
 8000dd2:	9108      	str	r1, [sp, #32]
 8000dd4:	0221      	lsls	r1, r4, #8
 8000dd6:	0e09      	lsrs	r1, r1, #24
 8000dd8:	9109      	str	r1, [sp, #36]	; 0x24
 8000dda:	0e2a      	lsrs	r2, r5, #24
 8000ddc:	0421      	lsls	r1, r4, #16
 8000dde:	0e09      	lsrs	r1, r1, #24
 8000de0:	910b      	str	r1, [sp, #44]	; 0x2c
 8000de2:	0231      	lsls	r1, r6, #8
 8000de4:	0e09      	lsrs	r1, r1, #24
 8000de6:	910c      	str	r1, [sp, #48]	; 0x30
 8000de8:	9900      	ldr	r1, [sp, #0]
 8000dea:	0e09      	lsrs	r1, r1, #24
 8000dec:	0433      	lsls	r3, r6, #16
 8000dee:	0e1b      	lsrs	r3, r3, #24
 8000df0:	022f      	lsls	r7, r5, #8
 8000df2:	0e3f      	lsrs	r7, r7, #24
 8000df4:	b2f6      	uxtb	r6, r6
 8000df6:	9603      	str	r6, [sp, #12]
 8000df8:	b2ed      	uxtb	r5, r5
 8000dfa:	9507      	str	r5, [sp, #28]
 8000dfc:	9d00      	ldr	r5, [sp, #0]
 8000dfe:	b2ed      	uxtb	r5, r5
 8000e00:	950a      	str	r5, [sp, #40]	; 0x28
 8000e02:	b2e5      	uxtb	r5, r4
 8000e04:	9c01      	ldr	r4, [sp, #4]
 8000e06:	2c00      	cmp	r4, #0
 8000e08:	d000      	beq.n	8000e0c <cmox_aesFast_encrypt+0x248>
 8000e0a:	e6f3      	b.n	8000bf4 <cmox_aesFast_encrypt+0x30>
 8000e0c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8000e0e:	4e23      	ldr	r6, [pc, #140]	; (8000e9c <cmox_aesFast_encrypt+0x2d8>)
 8000e10:	5c71      	ldrb	r1, [r6, r1]
 8000e12:	0609      	lsls	r1, r1, #24
 8000e14:	468c      	mov	ip, r1
 8000e16:	5df1      	ldrb	r1, [r6, r7]
 8000e18:	0409      	lsls	r1, r1, #16
 8000e1a:	4667      	mov	r7, ip
 8000e1c:	4339      	orrs	r1, r7
 8000e1e:	5cf3      	ldrb	r3, [r6, r3]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	430b      	orrs	r3, r1
 8000e24:	5d71      	ldrb	r1, [r6, r5]
 8000e26:	4319      	orrs	r1, r3
 8000e28:	6803      	ldr	r3, [r0, #0]
 8000e2a:	404b      	eors	r3, r1
 8000e2c:	6023      	str	r3, [r4, #0]
 8000e2e:	5cb1      	ldrb	r1, [r6, r2]
 8000e30:	0609      	lsls	r1, r1, #24
 8000e32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8000e34:	5cb2      	ldrb	r2, [r6, r2]
 8000e36:	0412      	lsls	r2, r2, #16
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000e3c:	5c71      	ldrb	r1, [r6, r1]
 8000e3e:	0209      	lsls	r1, r1, #8
 8000e40:	4311      	orrs	r1, r2
 8000e42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000e44:	5cb2      	ldrb	r2, [r6, r2]
 8000e46:	430a      	orrs	r2, r1
 8000e48:	6841      	ldr	r1, [r0, #4]
 8000e4a:	4051      	eors	r1, r2
 8000e4c:	6061      	str	r1, [r4, #4]
 8000e4e:	9906      	ldr	r1, [sp, #24]
 8000e50:	5c71      	ldrb	r1, [r6, r1]
 8000e52:	0609      	lsls	r1, r1, #24
 8000e54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e56:	5cb2      	ldrb	r2, [r6, r2]
 8000e58:	0412      	lsls	r2, r2, #16
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	9908      	ldr	r1, [sp, #32]
 8000e5e:	5c71      	ldrb	r1, [r6, r1]
 8000e60:	0209      	lsls	r1, r1, #8
 8000e62:	4311      	orrs	r1, r2
 8000e64:	9a07      	ldr	r2, [sp, #28]
 8000e66:	5cb2      	ldrb	r2, [r6, r2]
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	6881      	ldr	r1, [r0, #8]
 8000e6c:	4051      	eors	r1, r2
 8000e6e:	60a1      	str	r1, [r4, #8]
 8000e70:	9902      	ldr	r1, [sp, #8]
 8000e72:	5c71      	ldrb	r1, [r6, r1]
 8000e74:	0609      	lsls	r1, r1, #24
 8000e76:	9a05      	ldr	r2, [sp, #20]
 8000e78:	5cb2      	ldrb	r2, [r6, r2]
 8000e7a:	0412      	lsls	r2, r2, #16
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	9904      	ldr	r1, [sp, #16]
 8000e80:	5c71      	ldrb	r1, [r6, r1]
 8000e82:	0209      	lsls	r1, r1, #8
 8000e84:	4311      	orrs	r1, r2
 8000e86:	9a03      	ldr	r2, [sp, #12]
 8000e88:	5cb2      	ldrb	r2, [r6, r2]
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	68c0      	ldr	r0, [r0, #12]
 8000e8e:	4050      	eors	r0, r2
 8000e90:	60e0      	str	r0, [r4, #12]
 8000e92:	b00e      	add	sp, #56	; 0x38
 8000e94:	bcf0      	pop	{r4, r5, r6, r7}
 8000e96:	4770      	bx	lr
 8000e98:	0800b718 	.word	0x0800b718
 8000e9c:	0800bb18 	.word	0x0800bb18

08000ea0 <cmox_cipherMode_setKey>:
 8000ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ea2:	b08e      	sub	sp, #56	; 0x38
 8000ea4:	49de      	ldr	r1, [pc, #888]	; (8001220 <cmox_cipherMode_setKey+0x380>)
 8000ea6:	4bdf      	ldr	r3, [pc, #892]	; (8001224 <cmox_cipherMode_setKey+0x384>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	9810      	ldr	r0, [sp, #64]	; 0x40
 8000eac:	2810      	cmp	r0, #16
 8000eae:	d006      	beq.n	8000ebe <cmox_cipherMode_setKey+0x1e>
 8000eb0:	2818      	cmp	r0, #24
 8000eb2:	d100      	bne.n	8000eb6 <cmox_cipherMode_setKey+0x16>
 8000eb4:	e094      	b.n	8000fe0 <cmox_cipherMode_setKey+0x140>
 8000eb6:	2820      	cmp	r0, #32
 8000eb8:	d100      	bne.n	8000ebc <cmox_cipherMode_setKey+0x1c>
 8000eba:	e121      	b.n	8001100 <cmox_cipherMode_setKey+0x260>
 8000ebc:	e1b8      	b.n	8001230 <cmox_cipherMode_setKey+0x390>
 8000ebe:	a80b      	add	r0, sp, #44	; 0x2c
 8000ec0:	4cd9      	ldr	r4, [pc, #868]	; (8001228 <cmox_cipherMode_setKey+0x388>)
 8000ec2:	cc60      	ldmia	r4!, {r5, r6}
 8000ec4:	c060      	stmia	r0!, {r5, r6}
 8000ec6:	48d9      	ldr	r0, [pc, #868]	; (800122c <cmox_cipherMode_setKey+0x38c>)
 8000ec8:	7800      	ldrb	r0, [r0, #0]
 8000eca:	466c      	mov	r4, sp
 8000ecc:	7020      	strb	r0, [r4, #0]
 8000ece:	4668      	mov	r0, sp
 8000ed0:	7800      	ldrb	r0, [r0, #0]
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	d101      	bne.n	8000eda <cmox_cipherMode_setKey+0x3a>
 8000ed6:	2400      	movs	r4, #0
 8000ed8:	e001      	b.n	8000ede <cmox_cipherMode_setKey+0x3e>
 8000eda:	2004      	movs	r0, #4
 8000edc:	2404      	movs	r4, #4
 8000ede:	4ddd      	ldr	r5, [pc, #884]	; (8001254 <cmox_cipherMode_setKey+0x3b4>)
 8000ee0:	5828      	ldr	r0, [r5, r0]
 8000ee2:	ad0b      	add	r5, sp, #44	; 0x2c
 8000ee4:	592c      	ldr	r4, [r5, r4]
 8000ee6:	1900      	adds	r0, r0, r4
 8000ee8:	4cdb      	ldr	r4, [pc, #876]	; (8001258 <cmox_cipherMode_setKey+0x3b8>)
 8000eea:	6004      	str	r4, [r0, #0]
 8000eec:	6805      	ldr	r5, [r0, #0]
 8000eee:	2401      	movs	r4, #1
 8000ef0:	6084      	str	r4, [r0, #8]
 8000ef2:	48d8      	ldr	r0, [pc, #864]	; (8001254 <cmox_cipherMode_setKey+0x3b4>)
 8000ef4:	6840      	ldr	r0, [r0, #4]
 8000ef6:	9002      	str	r0, [sp, #8]
 8000ef8:	48d6      	ldr	r0, [pc, #856]	; (8001254 <cmox_cipherMode_setKey+0x3b4>)
 8000efa:	6800      	ldr	r0, [r0, #0]
 8000efc:	9001      	str	r0, [sp, #4]
 8000efe:	ac03      	add	r4, sp, #12
 8000f00:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8000f02:	7b80      	ldrb	r0, [r0, #14]
 8000f04:	9e02      	ldr	r6, [sp, #8]
 8000f06:	406e      	eors	r6, r5
 8000f08:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8000f0a:	4077      	eors	r7, r6
 8000f0c:	2504      	movs	r5, #4
 8000f0e:	407d      	eors	r5, r7
 8000f10:	9f01      	ldr	r7, [sp, #4]
 8000f12:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8000f14:	407e      	eors	r6, r7
 8000f16:	27fc      	movs	r7, #252	; 0xfc
 8000f18:	4077      	eors	r7, r6
 8000f1a:	19ed      	adds	r5, r5, r7
 8000f1c:	2652      	movs	r6, #82	; 0x52
 8000f1e:	406e      	eors	r6, r5
 8000f20:	1980      	adds	r0, r0, r6
 8000f22:	73a0      	strb	r0, [r4, #14]
 8000f24:	2501      	movs	r5, #1
 8000f26:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8000f28:	5d46      	ldrb	r6, [r0, r5]
 8000f2a:	5566      	strb	r6, [r4, r5]
 8000f2c:	1c6d      	adds	r5, r5, #1
 8000f2e:	2d0e      	cmp	r5, #14
 8000f30:	d3fa      	bcc.n	8000f28 <cmox_cipherMode_setKey+0x88>
 8000f32:	4cbd      	ldr	r4, [pc, #756]	; (8001228 <cmox_cipherMode_setKey+0x388>)
 8000f34:	ad0c      	add	r5, sp, #48	; 0x30
 8000f36:	ccc0      	ldmia	r4!, {r6, r7}
 8000f38:	c5c0      	stmia	r5!, {r6, r7}
 8000f3a:	3c08      	subs	r4, #8
 8000f3c:	2504      	movs	r5, #4
 8000f3e:	466e      	mov	r6, sp
 8000f40:	7836      	ldrb	r6, [r6, #0]
 8000f42:	2e00      	cmp	r6, #0
 8000f44:	d101      	bne.n	8000f4a <cmox_cipherMode_setKey+0xaa>
 8000f46:	920b      	str	r2, [sp, #44]	; 0x2c
 8000f48:	e001      	b.n	8000f4e <cmox_cipherMode_setKey+0xae>
 8000f4a:	2604      	movs	r6, #4
 8000f4c:	950b      	str	r5, [sp, #44]	; 0x2c
 8000f4e:	4fc1      	ldr	r7, [pc, #772]	; (8001254 <cmox_cipherMode_setKey+0x3b4>)
 8000f50:	59bf      	ldr	r7, [r7, r6]
 8000f52:	46bc      	mov	ip, r7
 8000f54:	af0c      	add	r7, sp, #48	; 0x30
 8000f56:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8000f58:	59be      	ldr	r6, [r7, r6]
 8000f5a:	4667      	mov	r7, ip
 8000f5c:	19be      	adds	r6, r7, r6
 8000f5e:	6033      	str	r3, [r6, #0]
 8000f60:	6833      	ldr	r3, [r6, #0]
 8000f62:	2701      	movs	r7, #1
 8000f64:	60b7      	str	r7, [r6, #8]
 8000f66:	7806      	ldrb	r6, [r0, #0]
 8000f68:	46b4      	mov	ip, r6
 8000f6a:	9e02      	ldr	r6, [sp, #8]
 8000f6c:	405e      	eors	r6, r3
 8000f6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000f70:	4073      	eors	r3, r6
 8000f72:	2604      	movs	r6, #4
 8000f74:	405e      	eors	r6, r3
 8000f76:	9f01      	ldr	r7, [sp, #4]
 8000f78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000f7a:	407b      	eors	r3, r7
 8000f7c:	27fc      	movs	r7, #252	; 0xfc
 8000f7e:	405f      	eors	r7, r3
 8000f80:	19f6      	adds	r6, r6, r7
 8000f82:	230b      	movs	r3, #11
 8000f84:	4073      	eors	r3, r6
 8000f86:	4666      	mov	r6, ip
 8000f88:	18f3      	adds	r3, r6, r3
 8000f8a:	466e      	mov	r6, sp
 8000f8c:	7333      	strb	r3, [r6, #12]
 8000f8e:	ab0b      	add	r3, sp, #44	; 0x2c
 8000f90:	ccc0      	ldmia	r4!, {r6, r7}
 8000f92:	c3c0      	stmia	r3!, {r6, r7}
 8000f94:	466b      	mov	r3, sp
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <cmox_cipherMode_setKey+0x100>
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	4cac      	ldr	r4, [pc, #688]	; (8001254 <cmox_cipherMode_setKey+0x3b4>)
 8000fa2:	58e3      	ldr	r3, [r4, r3]
 8000fa4:	ac0b      	add	r4, sp, #44	; 0x2c
 8000fa6:	58a2      	ldr	r2, [r4, r2]
 8000fa8:	189a      	adds	r2, r3, r2
 8000faa:	6011      	str	r1, [r2, #0]
 8000fac:	6811      	ldr	r1, [r2, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	6093      	str	r3, [r2, #8]
 8000fb2:	7bc0      	ldrb	r0, [r0, #15]
 8000fb4:	9a02      	ldr	r2, [sp, #8]
 8000fb6:	404a      	eors	r2, r1
 8000fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000fba:	4051      	eors	r1, r2
 8000fbc:	404d      	eors	r5, r1
 8000fbe:	9901      	ldr	r1, [sp, #4]
 8000fc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8000fc2:	404a      	eors	r2, r1
 8000fc4:	21fc      	movs	r1, #252	; 0xfc
 8000fc6:	4051      	eors	r1, r2
 8000fc8:	1869      	adds	r1, r5, r1
 8000fca:	2285      	movs	r2, #133	; 0x85
 8000fcc:	404a      	eors	r2, r1
 8000fce:	1880      	adds	r0, r0, r2
 8000fd0:	a903      	add	r1, sp, #12
 8000fd2:	73c8      	strb	r0, [r1, #15]
 8000fd4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8000fd6:	7a20      	ldrb	r0, [r4, #8]
 8000fd8:	07c0      	lsls	r0, r0, #31
 8000fda:	d500      	bpl.n	8000fde <cmox_cipherMode_setKey+0x13e>
 8000fdc:	e12a      	b.n	8001234 <cmox_cipherMode_setKey+0x394>
 8000fde:	e127      	b.n	8001230 <cmox_cipherMode_setKey+0x390>
 8000fe0:	a80b      	add	r0, sp, #44	; 0x2c
 8000fe2:	4c91      	ldr	r4, [pc, #580]	; (8001228 <cmox_cipherMode_setKey+0x388>)
 8000fe4:	cc60      	ldmia	r4!, {r5, r6}
 8000fe6:	c060      	stmia	r0!, {r5, r6}
 8000fe8:	4890      	ldr	r0, [pc, #576]	; (800122c <cmox_cipherMode_setKey+0x38c>)
 8000fea:	7800      	ldrb	r0, [r0, #0]
 8000fec:	466c      	mov	r4, sp
 8000fee:	7020      	strb	r0, [r4, #0]
 8000ff0:	4668      	mov	r0, sp
 8000ff2:	7800      	ldrb	r0, [r0, #0]
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	d101      	bne.n	8000ffc <cmox_cipherMode_setKey+0x15c>
 8000ff8:	2400      	movs	r4, #0
 8000ffa:	e001      	b.n	8001000 <cmox_cipherMode_setKey+0x160>
 8000ffc:	2004      	movs	r0, #4
 8000ffe:	2404      	movs	r4, #4
 8001000:	4d94      	ldr	r5, [pc, #592]	; (8001254 <cmox_cipherMode_setKey+0x3b4>)
 8001002:	5828      	ldr	r0, [r5, r0]
 8001004:	ad0b      	add	r5, sp, #44	; 0x2c
 8001006:	592c      	ldr	r4, [r5, r4]
 8001008:	1904      	adds	r4, r0, r4
 800100a:	6021      	str	r1, [r4, #0]
 800100c:	6820      	ldr	r0, [r4, #0]
 800100e:	2101      	movs	r1, #1
 8001010:	60a1      	str	r1, [r4, #8]
 8001012:	4990      	ldr	r1, [pc, #576]	; (8001254 <cmox_cipherMode_setKey+0x3b4>)
 8001014:	6849      	ldr	r1, [r1, #4]
 8001016:	9102      	str	r1, [sp, #8]
 8001018:	498e      	ldr	r1, [pc, #568]	; (8001254 <cmox_cipherMode_setKey+0x3b4>)
 800101a:	6809      	ldr	r1, [r1, #0]
 800101c:	9101      	str	r1, [sp, #4]
 800101e:	a903      	add	r1, sp, #12
 8001020:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8001022:	7ba4      	ldrb	r4, [r4, #14]
 8001024:	9d02      	ldr	r5, [sp, #8]
 8001026:	4045      	eors	r5, r0
 8001028:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800102a:	406e      	eors	r6, r5
 800102c:	2004      	movs	r0, #4
 800102e:	4070      	eors	r0, r6
 8001030:	9d01      	ldr	r5, [sp, #4]
 8001032:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8001034:	406e      	eors	r6, r5
 8001036:	25fc      	movs	r5, #252	; 0xfc
 8001038:	4075      	eors	r5, r6
 800103a:	1940      	adds	r0, r0, r5
 800103c:	2585      	movs	r5, #133	; 0x85
 800103e:	4045      	eors	r5, r0
 8001040:	1960      	adds	r0, r4, r5
 8001042:	7388      	strb	r0, [r1, #14]
 8001044:	2401      	movs	r4, #1
 8001046:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001048:	5d05      	ldrb	r5, [r0, r4]
 800104a:	550d      	strb	r5, [r1, r4]
 800104c:	1c64      	adds	r4, r4, #1
 800104e:	2c0e      	cmp	r4, #14
 8001050:	d3fa      	bcc.n	8001048 <cmox_cipherMode_setKey+0x1a8>
 8001052:	4c75      	ldr	r4, [pc, #468]	; (8001228 <cmox_cipherMode_setKey+0x388>)
 8001054:	a90b      	add	r1, sp, #44	; 0x2c
 8001056:	cc60      	ldmia	r4!, {r5, r6}
 8001058:	c160      	stmia	r1!, {r5, r6}
 800105a:	3c08      	subs	r4, #8
 800105c:	4669      	mov	r1, sp
 800105e:	7809      	ldrb	r1, [r1, #0]
 8001060:	2900      	cmp	r1, #0
 8001062:	d101      	bne.n	8001068 <cmox_cipherMode_setKey+0x1c8>
 8001064:	2500      	movs	r5, #0
 8001066:	e001      	b.n	800106c <cmox_cipherMode_setKey+0x1cc>
 8001068:	2504      	movs	r5, #4
 800106a:	2104      	movs	r1, #4
 800106c:	4e79      	ldr	r6, [pc, #484]	; (8001254 <cmox_cipherMode_setKey+0x3b4>)
 800106e:	5975      	ldr	r5, [r6, r5]
 8001070:	ae0b      	add	r6, sp, #44	; 0x2c
 8001072:	5871      	ldr	r1, [r6, r1]
 8001074:	186d      	adds	r5, r5, r1
 8001076:	4978      	ldr	r1, [pc, #480]	; (8001258 <cmox_cipherMode_setKey+0x3b8>)
 8001078:	6029      	str	r1, [r5, #0]
 800107a:	6829      	ldr	r1, [r5, #0]
 800107c:	2601      	movs	r6, #1
 800107e:	60ae      	str	r6, [r5, #8]
 8001080:	2504      	movs	r5, #4
 8001082:	7806      	ldrb	r6, [r0, #0]
 8001084:	46b4      	mov	ip, r6
 8001086:	9e02      	ldr	r6, [sp, #8]
 8001088:	404e      	eors	r6, r1
 800108a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800108c:	4071      	eors	r1, r6
 800108e:	2604      	movs	r6, #4
 8001090:	404e      	eors	r6, r1
 8001092:	9f01      	ldr	r7, [sp, #4]
 8001094:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001096:	4079      	eors	r1, r7
 8001098:	27fc      	movs	r7, #252	; 0xfc
 800109a:	404f      	eors	r7, r1
 800109c:	19f6      	adds	r6, r6, r7
 800109e:	2152      	movs	r1, #82	; 0x52
 80010a0:	4071      	eors	r1, r6
 80010a2:	4666      	mov	r6, ip
 80010a4:	1871      	adds	r1, r6, r1
 80010a6:	466e      	mov	r6, sp
 80010a8:	7331      	strb	r1, [r6, #12]
 80010aa:	a90b      	add	r1, sp, #44	; 0x2c
 80010ac:	ccc0      	ldmia	r4!, {r6, r7}
 80010ae:	c1c0      	stmia	r1!, {r6, r7}
 80010b0:	4669      	mov	r1, sp
 80010b2:	7809      	ldrb	r1, [r1, #0]
 80010b4:	2900      	cmp	r1, #0
 80010b6:	d001      	beq.n	80010bc <cmox_cipherMode_setKey+0x21c>
 80010b8:	2104      	movs	r1, #4
 80010ba:	2204      	movs	r2, #4
 80010bc:	4c65      	ldr	r4, [pc, #404]	; (8001254 <cmox_cipherMode_setKey+0x3b4>)
 80010be:	5861      	ldr	r1, [r4, r1]
 80010c0:	ac0b      	add	r4, sp, #44	; 0x2c
 80010c2:	58a2      	ldr	r2, [r4, r2]
 80010c4:	1889      	adds	r1, r1, r2
 80010c6:	600b      	str	r3, [r1, #0]
 80010c8:	680b      	ldr	r3, [r1, #0]
 80010ca:	2201      	movs	r2, #1
 80010cc:	608a      	str	r2, [r1, #8]
 80010ce:	a903      	add	r1, sp, #12
 80010d0:	7bc2      	ldrb	r2, [r0, #15]
 80010d2:	9c02      	ldr	r4, [sp, #8]
 80010d4:	405c      	eors	r4, r3
 80010d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80010d8:	4063      	eors	r3, r4
 80010da:	405d      	eors	r5, r3
 80010dc:	9b01      	ldr	r3, [sp, #4]
 80010de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80010e0:	405c      	eors	r4, r3
 80010e2:	23fc      	movs	r3, #252	; 0xfc
 80010e4:	4063      	eors	r3, r4
 80010e6:	18eb      	adds	r3, r5, r3
 80010e8:	240b      	movs	r4, #11
 80010ea:	405c      	eors	r4, r3
 80010ec:	1912      	adds	r2, r2, r4
 80010ee:	73ca      	strb	r2, [r1, #15]
 80010f0:	2210      	movs	r2, #16
 80010f2:	5c83      	ldrb	r3, [r0, r2]
 80010f4:	548b      	strb	r3, [r1, r2]
 80010f6:	1c52      	adds	r2, r2, #1
 80010f8:	2a18      	cmp	r2, #24
 80010fa:	d300      	bcc.n	80010fe <cmox_cipherMode_setKey+0x25e>
 80010fc:	e76a      	b.n	8000fd4 <cmox_cipherMode_setKey+0x134>
 80010fe:	e7f8      	b.n	80010f2 <cmox_cipherMode_setKey+0x252>
 8001100:	a80b      	add	r0, sp, #44	; 0x2c
 8001102:	4c49      	ldr	r4, [pc, #292]	; (8001228 <cmox_cipherMode_setKey+0x388>)
 8001104:	cc60      	ldmia	r4!, {r5, r6}
 8001106:	c060      	stmia	r0!, {r5, r6}
 8001108:	4848      	ldr	r0, [pc, #288]	; (800122c <cmox_cipherMode_setKey+0x38c>)
 800110a:	7800      	ldrb	r0, [r0, #0]
 800110c:	466c      	mov	r4, sp
 800110e:	7020      	strb	r0, [r4, #0]
 8001110:	4668      	mov	r0, sp
 8001112:	7800      	ldrb	r0, [r0, #0]
 8001114:	2800      	cmp	r0, #0
 8001116:	d101      	bne.n	800111c <cmox_cipherMode_setKey+0x27c>
 8001118:	2400      	movs	r4, #0
 800111a:	e001      	b.n	8001120 <cmox_cipherMode_setKey+0x280>
 800111c:	2004      	movs	r0, #4
 800111e:	2404      	movs	r4, #4
 8001120:	4d4c      	ldr	r5, [pc, #304]	; (8001254 <cmox_cipherMode_setKey+0x3b4>)
 8001122:	5828      	ldr	r0, [r5, r0]
 8001124:	ad0b      	add	r5, sp, #44	; 0x2c
 8001126:	592c      	ldr	r4, [r5, r4]
 8001128:	1900      	adds	r0, r0, r4
 800112a:	6003      	str	r3, [r0, #0]
 800112c:	6805      	ldr	r5, [r0, #0]
 800112e:	2301      	movs	r3, #1
 8001130:	6083      	str	r3, [r0, #8]
 8001132:	4848      	ldr	r0, [pc, #288]	; (8001254 <cmox_cipherMode_setKey+0x3b4>)
 8001134:	6840      	ldr	r0, [r0, #4]
 8001136:	9002      	str	r0, [sp, #8]
 8001138:	4846      	ldr	r0, [pc, #280]	; (8001254 <cmox_cipherMode_setKey+0x3b4>)
 800113a:	6800      	ldr	r0, [r0, #0]
 800113c:	9001      	str	r0, [sp, #4]
 800113e:	2304      	movs	r3, #4
 8001140:	ac03      	add	r4, sp, #12
 8001142:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001144:	7fc0      	ldrb	r0, [r0, #31]
 8001146:	9e02      	ldr	r6, [sp, #8]
 8001148:	406e      	eors	r6, r5
 800114a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800114c:	4077      	eors	r7, r6
 800114e:	2504      	movs	r5, #4
 8001150:	407d      	eors	r5, r7
 8001152:	9f01      	ldr	r7, [sp, #4]
 8001154:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8001156:	407e      	eors	r6, r7
 8001158:	27fc      	movs	r7, #252	; 0xfc
 800115a:	4077      	eors	r7, r6
 800115c:	19ed      	adds	r5, r5, r7
 800115e:	260b      	movs	r6, #11
 8001160:	406e      	eors	r6, r5
 8001162:	1980      	adds	r0, r0, r6
 8001164:	77e0      	strb	r0, [r4, #31]
 8001166:	2500      	movs	r5, #0
 8001168:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800116a:	5d46      	ldrb	r6, [r0, r5]
 800116c:	5566      	strb	r6, [r4, r5]
 800116e:	1c6d      	adds	r5, r5, #1
 8001170:	2d10      	cmp	r5, #16
 8001172:	d3fa      	bcc.n	800116a <cmox_cipherMode_setKey+0x2ca>
 8001174:	4c2c      	ldr	r4, [pc, #176]	; (8001228 <cmox_cipherMode_setKey+0x388>)
 8001176:	ad0b      	add	r5, sp, #44	; 0x2c
 8001178:	ccc0      	ldmia	r4!, {r6, r7}
 800117a:	c5c0      	stmia	r5!, {r6, r7}
 800117c:	3c08      	subs	r4, #8
 800117e:	466d      	mov	r5, sp
 8001180:	782d      	ldrb	r5, [r5, #0]
 8001182:	2d00      	cmp	r5, #0
 8001184:	d101      	bne.n	800118a <cmox_cipherMode_setKey+0x2ea>
 8001186:	2600      	movs	r6, #0
 8001188:	e001      	b.n	800118e <cmox_cipherMode_setKey+0x2ee>
 800118a:	2604      	movs	r6, #4
 800118c:	2504      	movs	r5, #4
 800118e:	4f31      	ldr	r7, [pc, #196]	; (8001254 <cmox_cipherMode_setKey+0x3b4>)
 8001190:	59be      	ldr	r6, [r7, r6]
 8001192:	af0b      	add	r7, sp, #44	; 0x2c
 8001194:	597d      	ldr	r5, [r7, r5]
 8001196:	1976      	adds	r6, r6, r5
 8001198:	6031      	str	r1, [r6, #0]
 800119a:	6831      	ldr	r1, [r6, #0]
 800119c:	2501      	movs	r5, #1
 800119e:	60b5      	str	r5, [r6, #8]
 80011a0:	7c46      	ldrb	r6, [r0, #17]
 80011a2:	46b4      	mov	ip, r6
 80011a4:	9e02      	ldr	r6, [sp, #8]
 80011a6:	404e      	eors	r6, r1
 80011a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80011aa:	4071      	eors	r1, r6
 80011ac:	2604      	movs	r6, #4
 80011ae:	404e      	eors	r6, r1
 80011b0:	9f01      	ldr	r7, [sp, #4]
 80011b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80011b4:	4079      	eors	r1, r7
 80011b6:	27fc      	movs	r7, #252	; 0xfc
 80011b8:	404f      	eors	r7, r1
 80011ba:	19f6      	adds	r6, r6, r7
 80011bc:	2185      	movs	r1, #133	; 0x85
 80011be:	4071      	eors	r1, r6
 80011c0:	4666      	mov	r6, ip
 80011c2:	1871      	adds	r1, r6, r1
 80011c4:	ae03      	add	r6, sp, #12
 80011c6:	7471      	strb	r1, [r6, #17]
 80011c8:	a90b      	add	r1, sp, #44	; 0x2c
 80011ca:	ccc0      	ldmia	r4!, {r6, r7}
 80011cc:	c1c0      	stmia	r1!, {r6, r7}
 80011ce:	4669      	mov	r1, sp
 80011d0:	7809      	ldrb	r1, [r1, #0]
 80011d2:	2900      	cmp	r1, #0
 80011d4:	d001      	beq.n	80011da <cmox_cipherMode_setKey+0x33a>
 80011d6:	2104      	movs	r1, #4
 80011d8:	2204      	movs	r2, #4
 80011da:	4c1e      	ldr	r4, [pc, #120]	; (8001254 <cmox_cipherMode_setKey+0x3b4>)
 80011dc:	5861      	ldr	r1, [r4, r1]
 80011de:	ac0b      	add	r4, sp, #44	; 0x2c
 80011e0:	58a2      	ldr	r2, [r4, r2]
 80011e2:	1889      	adds	r1, r1, r2
 80011e4:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <cmox_cipherMode_setKey+0x3b8>)
 80011e6:	600a      	str	r2, [r1, #0]
 80011e8:	680c      	ldr	r4, [r1, #0]
 80011ea:	608d      	str	r5, [r1, #8]
 80011ec:	a903      	add	r1, sp, #12
 80011ee:	7c02      	ldrb	r2, [r0, #16]
 80011f0:	9d02      	ldr	r5, [sp, #8]
 80011f2:	4065      	eors	r5, r4
 80011f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80011f6:	406c      	eors	r4, r5
 80011f8:	4063      	eors	r3, r4
 80011fa:	9c01      	ldr	r4, [sp, #4]
 80011fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80011fe:	4065      	eors	r5, r4
 8001200:	24fc      	movs	r4, #252	; 0xfc
 8001202:	406c      	eors	r4, r5
 8001204:	191b      	adds	r3, r3, r4
 8001206:	2452      	movs	r4, #82	; 0x52
 8001208:	405c      	eors	r4, r3
 800120a:	1912      	adds	r2, r2, r4
 800120c:	740a      	strb	r2, [r1, #16]
 800120e:	2212      	movs	r2, #18
 8001210:	5c83      	ldrb	r3, [r0, r2]
 8001212:	548b      	strb	r3, [r1, r2]
 8001214:	1c52      	adds	r2, r2, #1
 8001216:	2a1f      	cmp	r2, #31
 8001218:	d300      	bcc.n	800121c <cmox_cipherMode_setKey+0x37c>
 800121a:	e6db      	b.n	8000fd4 <cmox_cipherMode_setKey+0x134>
 800121c:	e7f8      	b.n	8001210 <cmox_cipherMode_setKey+0x370>
 800121e:	bf00      	nop
 8001220:	2e8f137d 	.word	0x2e8f137d
 8001224:	910e0ba4 	.word	0x910e0ba4
 8001228:	0800127c 	.word	0x0800127c
 800122c:	20000164 	.word	0x20000164
 8001230:	480a      	ldr	r0, [pc, #40]	; (800125c <cmox_cipherMode_setKey+0x3bc>)
 8001232:	e00c      	b.n	800124e <cmox_cipherMode_setKey+0x3ae>
 8001234:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001236:	0020      	movs	r0, r4
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4798      	blx	r3
 800123e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001240:	6060      	str	r0, [r4, #4]
 8001242:	68a0      	ldr	r0, [r4, #8]
 8001244:	2104      	movs	r1, #4
 8001246:	4301      	orrs	r1, r0
 8001248:	60a1      	str	r1, [r4, #8]
 800124a:	2080      	movs	r0, #128	; 0x80
 800124c:	0240      	lsls	r0, r0, #9
 800124e:	b011      	add	sp, #68	; 0x44
 8001250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001252:	bf00      	nop
 8001254:	0800b570 	.word	0x0800b570
 8001258:	f78e2254 	.word	0xf78e2254
 800125c:	00010003 	.word	0x00010003

08001260 <cmox_cipher_setPayloadLen_empty>:
 8001260:	2080      	movs	r0, #128	; 0x80
 8001262:	0240      	lsls	r0, r0, #9
 8001264:	4770      	bx	lr

08001266 <cmox_cipher_setADLen_empty>:
 8001266:	2080      	movs	r0, #128	; 0x80
 8001268:	0240      	lsls	r0, r0, #9
 800126a:	4770      	bx	lr

0800126c <cmox_cipher_generateTag_empty>:
 800126c:	4800      	ldr	r0, [pc, #0]	; (8001270 <cmox_cipher_generateTag_empty+0x4>)
 800126e:	4770      	bx	lr
 8001270:	00010002 	.word	0x00010002

08001274 <cmox_cipher_verifyTag_empty>:
 8001274:	4800      	ldr	r0, [pc, #0]	; (8001278 <cmox_cipher_verifyTag_empty+0x4>)
 8001276:	4770      	bx	lr
 8001278:	00010002 	.word	0x00010002
 800127c:	0101b004 	.word	0x0101b004
 8001280:	45011700 	.word	0x45011700

08001284 <poly_xor>:
 8001284:	b510      	push	{r4, lr}
 8001286:	6803      	ldr	r3, [r0, #0]
 8001288:	680c      	ldr	r4, [r1, #0]
 800128a:	405c      	eors	r4, r3
 800128c:	6014      	str	r4, [r2, #0]
 800128e:	6843      	ldr	r3, [r0, #4]
 8001290:	684c      	ldr	r4, [r1, #4]
 8001292:	405c      	eors	r4, r3
 8001294:	6054      	str	r4, [r2, #4]
 8001296:	6883      	ldr	r3, [r0, #8]
 8001298:	688c      	ldr	r4, [r1, #8]
 800129a:	405c      	eors	r4, r3
 800129c:	6094      	str	r4, [r2, #8]
 800129e:	68c0      	ldr	r0, [r0, #12]
 80012a0:	68c9      	ldr	r1, [r1, #12]
 80012a2:	4041      	eors	r1, r0
 80012a4:	60d1      	str	r1, [r2, #12]
 80012a6:	bd10      	pop	{r4, pc}

080012a8 <poly_copy>:
 80012a8:	6802      	ldr	r2, [r0, #0]
 80012aa:	600a      	str	r2, [r1, #0]
 80012ac:	6842      	ldr	r2, [r0, #4]
 80012ae:	604a      	str	r2, [r1, #4]
 80012b0:	6882      	ldr	r2, [r0, #8]
 80012b2:	608a      	str	r2, [r1, #8]
 80012b4:	68c0      	ldr	r0, [r0, #12]
 80012b6:	60c8      	str	r0, [r1, #12]
 80012b8:	4770      	bx	lr

080012ba <gfmul_x>:
 80012ba:	b510      	push	{r4, lr}
 80012bc:	68c3      	ldr	r3, [r0, #12]
 80012be:	07da      	lsls	r2, r3, #31
 80012c0:	0fd2      	lsrs	r2, r2, #31
 80012c2:	24e1      	movs	r4, #225	; 0xe1
 80012c4:	0624      	lsls	r4, r4, #24
 80012c6:	4362      	muls	r2, r4
 80012c8:	085b      	lsrs	r3, r3, #1
 80012ca:	6884      	ldr	r4, [r0, #8]
 80012cc:	07e4      	lsls	r4, r4, #31
 80012ce:	431c      	orrs	r4, r3
 80012d0:	60cc      	str	r4, [r1, #12]
 80012d2:	6883      	ldr	r3, [r0, #8]
 80012d4:	085b      	lsrs	r3, r3, #1
 80012d6:	6844      	ldr	r4, [r0, #4]
 80012d8:	07e4      	lsls	r4, r4, #31
 80012da:	431c      	orrs	r4, r3
 80012dc:	608c      	str	r4, [r1, #8]
 80012de:	6843      	ldr	r3, [r0, #4]
 80012e0:	085b      	lsrs	r3, r3, #1
 80012e2:	6804      	ldr	r4, [r0, #0]
 80012e4:	07e4      	lsls	r4, r4, #31
 80012e6:	431c      	orrs	r4, r3
 80012e8:	604c      	str	r4, [r1, #4]
 80012ea:	6800      	ldr	r0, [r0, #0]
 80012ec:	0840      	lsrs	r0, r0, #1
 80012ee:	4042      	eors	r2, r0
 80012f0:	600a      	str	r2, [r1, #0]
 80012f2:	bd10      	pop	{r4, pc}

080012f4 <gfmul_x4>:
 80012f4:	b510      	push	{r4, lr}
 80012f6:	68c3      	ldr	r3, [r0, #12]
 80012f8:	071a      	lsls	r2, r3, #28
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	6884      	ldr	r4, [r0, #8]
 80012fe:	0724      	lsls	r4, r4, #28
 8001300:	431c      	orrs	r4, r3
 8001302:	60cc      	str	r4, [r1, #12]
 8001304:	6883      	ldr	r3, [r0, #8]
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	6844      	ldr	r4, [r0, #4]
 800130a:	0724      	lsls	r4, r4, #28
 800130c:	431c      	orrs	r4, r3
 800130e:	608c      	str	r4, [r1, #8]
 8001310:	6843      	ldr	r3, [r0, #4]
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	6804      	ldr	r4, [r0, #0]
 8001316:	0724      	lsls	r4, r4, #28
 8001318:	431c      	orrs	r4, r3
 800131a:	604c      	str	r4, [r1, #4]
 800131c:	6800      	ldr	r0, [r0, #0]
 800131e:	0900      	lsrs	r0, r0, #4
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <gfmul_x4+0x3c>)
 8001322:	0ed2      	lsrs	r2, r2, #27
 8001324:	5a9a      	ldrh	r2, [r3, r2]
 8001326:	0412      	lsls	r2, r2, #16
 8001328:	4042      	eors	r2, r0
 800132a:	600a      	str	r2, [r1, #0]
 800132c:	bd10      	pop	{r4, pc}
 800132e:	bf00      	nop
 8001330:	08001334 	.word	0x08001334

08001334 <gfmul_x4::table_reduction4>:
 8001334:	1c200000 24603840 6ca07080 54e048c0     .. .@8`$.p.l.H.T
 8001344:	fd20e100 c560d940 8da09180 b5e0a9c0     .. .@.`.........

08001354 <cmox_gcm_initCommon>:
 8001354:	b530      	push	{r4, r5, lr}
 8001356:	2284      	movs	r2, #132	; 0x84
 8001358:	0052      	lsls	r2, r2, #1
 800135a:	188a      	adds	r2, r1, r2
 800135c:	2300      	movs	r3, #0
 800135e:	6093      	str	r3, [r2, #8]
 8001360:	60d3      	str	r3, [r2, #12]
 8001362:	2401      	movs	r4, #1
 8001364:	608c      	str	r4, [r1, #8]
 8001366:	6043      	str	r3, [r0, #4]
 8001368:	208c      	movs	r0, #140	; 0x8c
 800136a:	0040      	lsls	r0, r0, #1
 800136c:	1808      	adds	r0, r1, r0
 800136e:	2100      	movs	r1, #0
 8001370:	2400      	movs	r4, #0
 8001372:	2500      	movs	r5, #0
 8001374:	c03a      	stmia	r0!, {r1, r3, r4, r5}
 8001376:	2002      	movs	r0, #2
 8001378:	6010      	str	r0, [r2, #0]
 800137a:	bd30      	pop	{r4, r5, pc}

0800137c <cmox_gcm_appendAD_common>:
 800137c:	b5fb      	push	{r0, r1, r3, r4, r5, r6, r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	0004      	movs	r4, r0
 8001382:	0015      	movs	r5, r2
 8001384:	2300      	movs	r3, #0
 8001386:	4608      	mov	r0, r1
 8001388:	2188      	movs	r1, #136	; 0x88
 800138a:	0049      	lsls	r1, r1, #1
 800138c:	1840      	adds	r0, r0, r1
 800138e:	9005      	str	r0, [sp, #20]
 8001390:	e023      	b.n	80013da <cmox_gcm_appendAD_common+0x5e>
 8001392:	2100      	movs	r1, #0
 8001394:	0018      	movs	r0, r3
 8001396:	008a      	lsls	r2, r1, #2
 8001398:	1882      	adds	r2, r0, r2
 800139a:	18aa      	adds	r2, r5, r2
 800139c:	7813      	ldrb	r3, [r2, #0]
 800139e:	061e      	lsls	r6, r3, #24
 80013a0:	7853      	ldrb	r3, [r2, #1]
 80013a2:	041b      	lsls	r3, r3, #16
 80013a4:	4333      	orrs	r3, r6
 80013a6:	7896      	ldrb	r6, [r2, #2]
 80013a8:	0236      	lsls	r6, r6, #8
 80013aa:	431e      	orrs	r6, r3
 80013ac:	78d2      	ldrb	r2, [r2, #3]
 80013ae:	4332      	orrs	r2, r6
 80013b0:	008b      	lsls	r3, r1, #2
 80013b2:	ae01      	add	r6, sp, #4
 80013b4:	18f6      	adds	r6, r6, r3
 80013b6:	6032      	str	r2, [r6, #0]
 80013b8:	9f00      	ldr	r7, [sp, #0]
 80013ba:	58fb      	ldr	r3, [r7, r3]
 80013bc:	4053      	eors	r3, r2
 80013be:	6033      	str	r3, [r6, #0]
 80013c0:	1c49      	adds	r1, r1, #1
 80013c2:	2904      	cmp	r1, #4
 80013c4:	d3e7      	bcc.n	8001396 <cmox_gcm_appendAD_common+0x1a>
 80013c6:	9006      	str	r0, [sp, #24]
 80013c8:	9a00      	ldr	r2, [sp, #0]
 80013ca:	9910      	ldr	r1, [sp, #64]	; 0x40
 80013cc:	a801      	add	r0, sp, #4
 80013ce:	9b05      	ldr	r3, [sp, #20]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4798      	blx	r3
 80013d6:	9b06      	ldr	r3, [sp, #24]
 80013d8:	3310      	adds	r3, #16
 80013da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80013dc:	218c      	movs	r1, #140	; 0x8c
 80013de:	0049      	lsls	r1, r1, #1
 80013e0:	1840      	adds	r0, r0, r1
 80013e2:	9000      	str	r0, [sp, #0]
 80013e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80013e6:	0018      	movs	r0, r3
 80013e8:	3010      	adds	r0, #16
 80013ea:	4281      	cmp	r1, r0
 80013ec:	d2d1      	bcs.n	8001392 <cmox_gcm_appendAD_common+0x16>
 80013ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80013f0:	4283      	cmp	r3, r0
 80013f2:	d250      	bcs.n	8001496 <cmox_gcm_appendAD_common+0x11a>
 80013f4:	6860      	ldr	r0, [r4, #4]
 80013f6:	2104      	movs	r1, #4
 80013f8:	4301      	orrs	r1, r0
 80013fa:	6061      	str	r1, [r4, #4]
 80013fc:	2600      	movs	r6, #0
 80013fe:	e00f      	b.n	8001420 <cmox_gcm_appendAD_common+0xa4>
 8001400:	1869      	adds	r1, r5, r1
 8001402:	780a      	ldrb	r2, [r1, #0]
 8001404:	0616      	lsls	r6, r2, #24
 8001406:	784a      	ldrb	r2, [r1, #1]
 8001408:	0412      	lsls	r2, r2, #16
 800140a:	4332      	orrs	r2, r6
 800140c:	788e      	ldrb	r6, [r1, #2]
 800140e:	0236      	lsls	r6, r6, #8
 8001410:	4316      	orrs	r6, r2
 8001412:	78c9      	ldrb	r1, [r1, #3]
 8001414:	4331      	orrs	r1, r6
 8001416:	6001      	str	r1, [r0, #0]
 8001418:	6822      	ldr	r2, [r4, #0]
 800141a:	404a      	eors	r2, r1
 800141c:	6002      	str	r2, [r0, #0]
 800141e:	9e07      	ldr	r6, [sp, #28]
 8001420:	00b0      	lsls	r0, r6, #2
 8001422:	9900      	ldr	r1, [sp, #0]
 8001424:	180c      	adds	r4, r1, r0
 8001426:	a901      	add	r1, sp, #4
 8001428:	1808      	adds	r0, r1, r0
 800142a:	00b1      	lsls	r1, r6, #2
 800142c:	1859      	adds	r1, r3, r1
 800142e:	1c72      	adds	r2, r6, #1
 8001430:	9207      	str	r2, [sp, #28]
 8001432:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001434:	1ad2      	subs	r2, r2, r3
 8001436:	0897      	lsrs	r7, r2, #2
 8001438:	42be      	cmp	r6, r7
 800143a:	d3e1      	bcc.n	8001400 <cmox_gcm_appendAD_common+0x84>
 800143c:	002b      	movs	r3, r5
 800143e:	9606      	str	r6, [sp, #24]
 8001440:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001442:	268c      	movs	r6, #140	; 0x8c
 8001444:	0076      	lsls	r6, r6, #1
 8001446:	19ad      	adds	r5, r5, r6
 8001448:	9500      	str	r5, [sp, #0]
 800144a:	6824      	ldr	r4, [r4, #0]
 800144c:	6004      	str	r4, [r0, #0]
 800144e:	2400      	movs	r4, #0
 8001450:	e00b      	b.n	800146a <cmox_gcm_appendAD_common+0xee>
 8001452:	6807      	ldr	r7, [r0, #0]
 8001454:	190d      	adds	r5, r1, r4
 8001456:	5d5e      	ldrb	r6, [r3, r5]
 8001458:	46b4      	mov	ip, r6
 800145a:	2618      	movs	r6, #24
 800145c:	00e5      	lsls	r5, r4, #3
 800145e:	1b75      	subs	r5, r6, r5
 8001460:	4666      	mov	r6, ip
 8001462:	40ae      	lsls	r6, r5
 8001464:	407e      	eors	r6, r7
 8001466:	6006      	str	r6, [r0, #0]
 8001468:	1c64      	adds	r4, r4, #1
 800146a:	9d06      	ldr	r5, [sp, #24]
 800146c:	00ad      	lsls	r5, r5, #2
 800146e:	1b55      	subs	r5, r2, r5
 8001470:	42ac      	cmp	r4, r5
 8001472:	d3ee      	bcc.n	8001452 <cmox_gcm_appendAD_common+0xd6>
 8001474:	9807      	ldr	r0, [sp, #28]
 8001476:	ab01      	add	r3, sp, #4
 8001478:	e004      	b.n	8001484 <cmox_gcm_appendAD_common+0x108>
 800147a:	0081      	lsls	r1, r0, #2
 800147c:	9a00      	ldr	r2, [sp, #0]
 800147e:	5852      	ldr	r2, [r2, r1]
 8001480:	505a      	str	r2, [r3, r1]
 8001482:	1c40      	adds	r0, r0, #1
 8001484:	2804      	cmp	r0, #4
 8001486:	d3f8      	bcc.n	800147a <cmox_gcm_appendAD_common+0xfe>
 8001488:	9a00      	ldr	r2, [sp, #0]
 800148a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800148c:	a801      	add	r0, sp, #4
 800148e:	9b05      	ldr	r3, [sp, #20]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4798      	blx	r3
 8001496:	9805      	ldr	r0, [sp, #20]
 8001498:	6800      	ldr	r0, [r0, #0]
 800149a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800149c:	1840      	adds	r0, r0, r1
 800149e:	9905      	ldr	r1, [sp, #20]
 80014a0:	6008      	str	r0, [r1, #0]
 80014a2:	b00b      	add	sp, #44	; 0x2c
 80014a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014a6 <cmox_gcm_finish_common>:
 80014a6:	b5f4      	push	{r2, r4, r5, r6, r7, lr}
 80014a8:	000c      	movs	r4, r1
 80014aa:	9f06      	ldr	r7, [sp, #24]
 80014ac:	9e07      	ldr	r6, [sp, #28]
 80014ae:	6841      	ldr	r1, [r0, #4]
 80014b0:	2210      	movs	r2, #16
 80014b2:	430a      	orrs	r2, r1
 80014b4:	6042      	str	r2, [r0, #4]
 80014b6:	2084      	movs	r0, #132	; 0x84
 80014b8:	0040      	lsls	r0, r0, #1
 80014ba:	1825      	adds	r5, r4, r0
 80014bc:	6968      	ldr	r0, [r5, #20]
 80014be:	68a9      	ldr	r1, [r5, #8]
 80014c0:	00c9      	lsls	r1, r1, #3
 80014c2:	4041      	eors	r1, r0
 80014c4:	6169      	str	r1, [r5, #20]
 80014c6:	69e8      	ldr	r0, [r5, #28]
 80014c8:	68e9      	ldr	r1, [r5, #12]
 80014ca:	00c9      	lsls	r1, r1, #3
 80014cc:	4041      	eors	r1, r0
 80014ce:	61e9      	str	r1, [r5, #28]
 80014d0:	003a      	movs	r2, r7
 80014d2:	0019      	movs	r1, r3
 80014d4:	208c      	movs	r0, #140	; 0x8c
 80014d6:	0040      	lsls	r0, r0, #1
 80014d8:	1820      	adds	r0, r4, r0
 80014da:	6a2b      	ldr	r3, [r5, #32]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4798      	blx	r3
 80014e0:	2001      	movs	r0, #1
 80014e2:	6028      	str	r0, [r5, #0]
 80014e4:	0032      	movs	r2, r6
 80014e6:	0021      	movs	r1, r4
 80014e8:	31fc      	adds	r1, #252	; 0xfc
 80014ea:	9800      	ldr	r0, [sp, #0]
 80014ec:	6803      	ldr	r3, [r0, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4798      	blx	r3
 80014f2:	2000      	movs	r0, #0
 80014f4:	0081      	lsls	r1, r0, #2
 80014f6:	1872      	adds	r2, r6, r1
 80014f8:	6813      	ldr	r3, [r2, #0]
 80014fa:	5879      	ldr	r1, [r7, r1]
 80014fc:	4059      	eors	r1, r3
 80014fe:	6011      	str	r1, [r2, #0]
 8001500:	1c40      	adds	r0, r0, #1
 8001502:	2804      	cmp	r0, #4
 8001504:	d3f6      	bcc.n	80014f4 <cmox_gcm_finish_common+0x4e>
 8001506:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001508 <cmox_gcm_encrypt_common>:
 8001508:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800150a:	b092      	sub	sp, #72	; 0x48
 800150c:	000c      	movs	r4, r1
 800150e:	0015      	movs	r5, r2
 8001510:	001e      	movs	r6, r3
 8001512:	2210      	movs	r2, #16
 8001514:	2100      	movs	r1, #0
 8001516:	a804      	add	r0, sp, #16
 8001518:	f008 fb12 	bl	8009b40 <memset>
 800151c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800151e:	6840      	ldr	r0, [r0, #4]
 8001520:	2118      	movs	r1, #24
 8001522:	4001      	ands	r1, r0
 8001524:	d001      	beq.n	800152a <cmox_gcm_encrypt_common+0x22>
 8001526:	488a      	ldr	r0, [pc, #552]	; (8001750 <cmox_gcm_encrypt_common+0x248>)
 8001528:	e10f      	b.n	800174a <cmox_gcm_encrypt_common+0x242>
 800152a:	940c      	str	r4, [sp, #48]	; 0x30
 800152c:	2104      	movs	r1, #4
 800152e:	4301      	orrs	r1, r0
 8001530:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001532:	6041      	str	r1, [r0, #4]
 8001534:	2400      	movs	r4, #0
 8001536:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001538:	2184      	movs	r1, #132	; 0x84
 800153a:	0049      	lsls	r1, r1, #1
 800153c:	1840      	adds	r0, r0, r1
 800153e:	9003      	str	r0, [sp, #12]
 8001540:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001542:	30fc      	adds	r0, #252	; 0xfc
 8001544:	9001      	str	r0, [sp, #4]
 8001546:	9500      	str	r5, [sp, #0]
 8001548:	960f      	str	r6, [sp, #60]	; 0x3c
 800154a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800154c:	e04c      	b.n	80015e8 <cmox_gcm_encrypt_common+0xe0>
 800154e:	2500      	movs	r5, #0
 8001550:	2100      	movs	r1, #0
 8001552:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001554:	008a      	lsls	r2, r1, #2
 8001556:	18a2      	adds	r2, r4, r2
 8001558:	5c83      	ldrb	r3, [r0, r2]
 800155a:	061f      	lsls	r7, r3, #24
 800155c:	1c43      	adds	r3, r0, #1
 800155e:	5c9b      	ldrb	r3, [r3, r2]
 8001560:	041b      	lsls	r3, r3, #16
 8001562:	433b      	orrs	r3, r7
 8001564:	1c87      	adds	r7, r0, #2
 8001566:	5cbf      	ldrb	r7, [r7, r2]
 8001568:	023f      	lsls	r7, r7, #8
 800156a:	431f      	orrs	r7, r3
 800156c:	1cc3      	adds	r3, r0, #3
 800156e:	5c9a      	ldrb	r2, [r3, r2]
 8001570:	433a      	orrs	r2, r7
 8001572:	ab08      	add	r3, sp, #32
 8001574:	008f      	lsls	r7, r1, #2
 8001576:	51da      	str	r2, [r3, r7]
 8001578:	1c49      	adds	r1, r1, #1
 800157a:	2904      	cmp	r1, #4
 800157c:	d3ea      	bcc.n	8001554 <cmox_gcm_encrypt_common+0x4c>
 800157e:	9018      	str	r0, [sp, #96]	; 0x60
 8001580:	aa04      	add	r2, sp, #16
 8001582:	9901      	ldr	r1, [sp, #4]
 8001584:	9800      	ldr	r0, [sp, #0]
 8001586:	6803      	ldr	r3, [r0, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4798      	blx	r3
 800158c:	9803      	ldr	r0, [sp, #12]
 800158e:	6800      	ldr	r0, [r0, #0]
 8001590:	1c40      	adds	r0, r0, #1
 8001592:	9903      	ldr	r1, [sp, #12]
 8001594:	6008      	str	r0, [r1, #0]
 8001596:	00a8      	lsls	r0, r5, #2
 8001598:	a904      	add	r1, sp, #16
 800159a:	1809      	adds	r1, r1, r0
 800159c:	680b      	ldr	r3, [r1, #0]
 800159e:	aa08      	add	r2, sp, #32
 80015a0:	5812      	ldr	r2, [r2, r0]
 80015a2:	405a      	eors	r2, r3
 80015a4:	600a      	str	r2, [r1, #0]
 80015a6:	00ab      	lsls	r3, r5, #2
 80015a8:	18e3      	adds	r3, r4, r3
 80015aa:	1cf7      	adds	r7, r6, #3
 80015ac:	54fa      	strb	r2, [r7, r3]
 80015ae:	680a      	ldr	r2, [r1, #0]
 80015b0:	0a12      	lsrs	r2, r2, #8
 80015b2:	1cb7      	adds	r7, r6, #2
 80015b4:	54fa      	strb	r2, [r7, r3]
 80015b6:	680a      	ldr	r2, [r1, #0]
 80015b8:	0c12      	lsrs	r2, r2, #16
 80015ba:	1c77      	adds	r7, r6, #1
 80015bc:	54fa      	strb	r2, [r7, r3]
 80015be:	680a      	ldr	r2, [r1, #0]
 80015c0:	0e12      	lsrs	r2, r2, #24
 80015c2:	54f2      	strb	r2, [r6, r3]
 80015c4:	680a      	ldr	r2, [r1, #0]
 80015c6:	9b02      	ldr	r3, [sp, #8]
 80015c8:	5818      	ldr	r0, [r3, r0]
 80015ca:	4050      	eors	r0, r2
 80015cc:	6008      	str	r0, [r1, #0]
 80015ce:	1c6d      	adds	r5, r5, #1
 80015d0:	2d04      	cmp	r5, #4
 80015d2:	d3e0      	bcc.n	8001596 <cmox_gcm_encrypt_common+0x8e>
 80015d4:	940d      	str	r4, [sp, #52]	; 0x34
 80015d6:	9a02      	ldr	r2, [sp, #8]
 80015d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80015da:	a804      	add	r0, sp, #16
 80015dc:	9b03      	ldr	r3, [sp, #12]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4798      	blx	r3
 80015e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80015e6:	3410      	adds	r4, #16
 80015e8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80015ea:	218c      	movs	r1, #140	; 0x8c
 80015ec:	0049      	lsls	r1, r1, #1
 80015ee:	1840      	adds	r0, r0, r1
 80015f0:	9002      	str	r0, [sp, #8]
 80015f2:	9919      	ldr	r1, [sp, #100]	; 0x64
 80015f4:	0020      	movs	r0, r4
 80015f6:	3010      	adds	r0, #16
 80015f8:	4281      	cmp	r1, r0
 80015fa:	d2a8      	bcs.n	800154e <cmox_gcm_encrypt_common+0x46>
 80015fc:	9819      	ldr	r0, [sp, #100]	; 0x64
 80015fe:	4284      	cmp	r4, r0
 8001600:	d300      	bcc.n	8001604 <cmox_gcm_encrypt_common+0xfc>
 8001602:	e095      	b.n	8001730 <cmox_gcm_encrypt_common+0x228>
 8001604:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001606:	6840      	ldr	r0, [r0, #4]
 8001608:	2108      	movs	r1, #8
 800160a:	4301      	orrs	r1, r0
 800160c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800160e:	6041      	str	r1, [r0, #4]
 8001610:	aa04      	add	r2, sp, #16
 8001612:	9901      	ldr	r1, [sp, #4]
 8001614:	9800      	ldr	r0, [sp, #0]
 8001616:	6803      	ldr	r3, [r0, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4798      	blx	r3
 800161c:	2200      	movs	r2, #0
 800161e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001620:	1b00      	subs	r0, r0, r4
 8001622:	900d      	str	r0, [sp, #52]	; 0x34
 8001624:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001626:	0031      	movs	r1, r6
 8001628:	e02b      	b.n	8001682 <cmox_gcm_encrypt_common+0x17a>
 800162a:	0093      	lsls	r3, r2, #2
 800162c:	18e3      	adds	r3, r4, r3
 800162e:	5cc5      	ldrb	r5, [r0, r3]
 8001630:	062e      	lsls	r6, r5, #24
 8001632:	1c45      	adds	r5, r0, #1
 8001634:	5ced      	ldrb	r5, [r5, r3]
 8001636:	042d      	lsls	r5, r5, #16
 8001638:	4335      	orrs	r5, r6
 800163a:	1c86      	adds	r6, r0, #2
 800163c:	5cf6      	ldrb	r6, [r6, r3]
 800163e:	0236      	lsls	r6, r6, #8
 8001640:	432e      	orrs	r6, r5
 8001642:	1cc5      	adds	r5, r0, #3
 8001644:	5ced      	ldrb	r5, [r5, r3]
 8001646:	4335      	orrs	r5, r6
 8001648:	ae08      	add	r6, sp, #32
 800164a:	19f6      	adds	r6, r6, r7
 800164c:	9601      	str	r6, [sp, #4]
 800164e:	6035      	str	r5, [r6, #0]
 8001650:	ae04      	add	r6, sp, #16
 8001652:	19f6      	adds	r6, r6, r7
 8001654:	6837      	ldr	r7, [r6, #0]
 8001656:	407d      	eors	r5, r7
 8001658:	6035      	str	r5, [r6, #0]
 800165a:	1ccf      	adds	r7, r1, #3
 800165c:	54fd      	strb	r5, [r7, r3]
 800165e:	6835      	ldr	r5, [r6, #0]
 8001660:	0a2d      	lsrs	r5, r5, #8
 8001662:	1c8f      	adds	r7, r1, #2
 8001664:	54fd      	strb	r5, [r7, r3]
 8001666:	6835      	ldr	r5, [r6, #0]
 8001668:	0c2d      	lsrs	r5, r5, #16
 800166a:	1c4f      	adds	r7, r1, #1
 800166c:	54fd      	strb	r5, [r7, r3]
 800166e:	6835      	ldr	r5, [r6, #0]
 8001670:	0e2d      	lsrs	r5, r5, #24
 8001672:	54cd      	strb	r5, [r1, r3]
 8001674:	6833      	ldr	r3, [r6, #0]
 8001676:	9d00      	ldr	r5, [sp, #0]
 8001678:	682d      	ldr	r5, [r5, #0]
 800167a:	405d      	eors	r5, r3
 800167c:	9b01      	ldr	r3, [sp, #4]
 800167e:	601d      	str	r5, [r3, #0]
 8001680:	1c52      	adds	r2, r2, #1
 8001682:	0097      	lsls	r7, r2, #2
 8001684:	9b02      	ldr	r3, [sp, #8]
 8001686:	19db      	adds	r3, r3, r7
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	429a      	cmp	r2, r3
 8001690:	d3cb      	bcc.n	800162a <cmox_gcm_encrypt_common+0x122>
 8001692:	000b      	movs	r3, r1
 8001694:	920e      	str	r2, [sp, #56]	; 0x38
 8001696:	a908      	add	r1, sp, #32
 8001698:	19c9      	adds	r1, r1, r7
 800169a:	9101      	str	r1, [sp, #4]
 800169c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800169e:	228c      	movs	r2, #140	; 0x8c
 80016a0:	0052      	lsls	r2, r2, #1
 80016a2:	1889      	adds	r1, r1, r2
 80016a4:	9102      	str	r1, [sp, #8]
 80016a6:	9900      	ldr	r1, [sp, #0]
 80016a8:	6809      	ldr	r1, [r1, #0]
 80016aa:	9a01      	ldr	r2, [sp, #4]
 80016ac:	6011      	str	r1, [r2, #0]
 80016ae:	a904      	add	r1, sp, #16
 80016b0:	19c9      	adds	r1, r1, r7
 80016b2:	9110      	str	r1, [sp, #64]	; 0x40
 80016b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80016b6:	0089      	lsls	r1, r1, #2
 80016b8:	910c      	str	r1, [sp, #48]	; 0x30
 80016ba:	1861      	adds	r1, r4, r1
 80016bc:	9111      	str	r1, [sp, #68]	; 0x44
 80016be:	0001      	movs	r1, r0
 80016c0:	001a      	movs	r2, r3
 80016c2:	2300      	movs	r3, #0
 80016c4:	e01d      	b.n	8001702 <cmox_gcm_encrypt_common+0x1fa>
 80016c6:	2018      	movs	r0, #24
 80016c8:	00dc      	lsls	r4, r3, #3
 80016ca:	1b00      	subs	r0, r0, r4
 80016cc:	466c      	mov	r4, sp
 80016ce:	7020      	strb	r0, [r4, #0]
 80016d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80016d2:	6804      	ldr	r4, [r0, #0]
 80016d4:	4668      	mov	r0, sp
 80016d6:	7800      	ldrb	r0, [r0, #0]
 80016d8:	40c4      	lsrs	r4, r0
 80016da:	9811      	ldr	r0, [sp, #68]	; 0x44
 80016dc:	18c5      	adds	r5, r0, r3
 80016de:	194e      	adds	r6, r1, r5
 80016e0:	9801      	ldr	r0, [sp, #4]
 80016e2:	6807      	ldr	r7, [r0, #0]
 80016e4:	46bc      	mov	ip, r7
 80016e6:	7837      	ldrb	r7, [r6, #0]
 80016e8:	b2e0      	uxtb	r0, r4
 80016ea:	4078      	eors	r0, r7
 80016ec:	466f      	mov	r7, sp
 80016ee:	783f      	ldrb	r7, [r7, #0]
 80016f0:	40b8      	lsls	r0, r7
 80016f2:	4667      	mov	r7, ip
 80016f4:	4078      	eors	r0, r7
 80016f6:	9f01      	ldr	r7, [sp, #4]
 80016f8:	6038      	str	r0, [r7, #0]
 80016fa:	7830      	ldrb	r0, [r6, #0]
 80016fc:	4060      	eors	r0, r4
 80016fe:	5550      	strb	r0, [r2, r5]
 8001700:	1c5b      	adds	r3, r3, #1
 8001702:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001704:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8001706:	1b00      	subs	r0, r0, r4
 8001708:	4283      	cmp	r3, r0
 800170a:	d3dc      	bcc.n	80016c6 <cmox_gcm_encrypt_common+0x1be>
 800170c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800170e:	1c40      	adds	r0, r0, #1
 8001710:	ab08      	add	r3, sp, #32
 8001712:	e004      	b.n	800171e <cmox_gcm_encrypt_common+0x216>
 8001714:	0081      	lsls	r1, r0, #2
 8001716:	9a02      	ldr	r2, [sp, #8]
 8001718:	5852      	ldr	r2, [r2, r1]
 800171a:	505a      	str	r2, [r3, r1]
 800171c:	1c40      	adds	r0, r0, #1
 800171e:	2804      	cmp	r0, #4
 8001720:	d3f8      	bcc.n	8001714 <cmox_gcm_encrypt_common+0x20c>
 8001722:	9a02      	ldr	r2, [sp, #8]
 8001724:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001726:	a808      	add	r0, sp, #32
 8001728:	9b03      	ldr	r3, [sp, #12]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4798      	blx	r3
 8001730:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001732:	9903      	ldr	r1, [sp, #12]
 8001734:	68c9      	ldr	r1, [r1, #12]
 8001736:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8001738:	1889      	adds	r1, r1, r2
 800173a:	9a03      	ldr	r2, [sp, #12]
 800173c:	60d1      	str	r1, [r2, #12]
 800173e:	2800      	cmp	r0, #0
 8001740:	d001      	beq.n	8001746 <cmox_gcm_encrypt_common+0x23e>
 8001742:	9919      	ldr	r1, [sp, #100]	; 0x64
 8001744:	6001      	str	r1, [r0, #0]
 8001746:	2080      	movs	r0, #128	; 0x80
 8001748:	0240      	lsls	r0, r0, #9
 800174a:	b013      	add	sp, #76	; 0x4c
 800174c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800174e:	bf00      	nop
 8001750:	00010004 	.word	0x00010004

08001754 <cmox_gcm_generateTag_common>:
 8001754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	0006      	movs	r6, r0
 800175a:	000c      	movs	r4, r1
 800175c:	0015      	movs	r5, r2
 800175e:	001f      	movs	r7, r3
 8001760:	2210      	movs	r2, #16
 8001762:	2100      	movs	r1, #0
 8001764:	a802      	add	r0, sp, #8
 8001766:	f008 f9eb 	bl	8009b40 <memset>
 800176a:	2086      	movs	r0, #134	; 0x86
 800176c:	0040      	lsls	r0, r0, #1
 800176e:	5820      	ldr	r0, [r4, r0]
 8001770:	2800      	cmp	r0, #0
 8001772:	d001      	beq.n	8001778 <cmox_gcm_generateTag_common+0x24>
 8001774:	2810      	cmp	r0, #16
 8001776:	d901      	bls.n	800177c <cmox_gcm_generateTag_common+0x28>
 8001778:	481f      	ldr	r0, [pc, #124]	; (80017f8 <cmox_gcm_generateTag_common+0xa4>)
 800177a:	e03a      	b.n	80017f2 <cmox_gcm_generateTag_common+0x9e>
 800177c:	003b      	movs	r3, r7
 800177e:	002a      	movs	r2, r5
 8001780:	0030      	movs	r0, r6
 8001782:	a902      	add	r1, sp, #8
 8001784:	9101      	str	r1, [sp, #4]
 8001786:	a906      	add	r1, sp, #24
 8001788:	9100      	str	r1, [sp, #0]
 800178a:	0021      	movs	r1, r4
 800178c:	f7ff fe8b 	bl	80014a6 <cmox_gcm_finish_common>
 8001790:	2000      	movs	r0, #0
 8001792:	2600      	movs	r6, #0
 8001794:	2186      	movs	r1, #134	; 0x86
 8001796:	0049      	lsls	r1, r1, #1
 8001798:	1867      	adds	r7, r4, r1
 800179a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800179c:	e00c      	b.n	80017b8 <cmox_gcm_generateTag_common+0x64>
 800179e:	18e9      	adds	r1, r5, r3
 80017a0:	6813      	ldr	r3, [r2, #0]
 80017a2:	70cb      	strb	r3, [r1, #3]
 80017a4:	6813      	ldr	r3, [r2, #0]
 80017a6:	0a1b      	lsrs	r3, r3, #8
 80017a8:	708b      	strb	r3, [r1, #2]
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	0c1b      	lsrs	r3, r3, #16
 80017ae:	704b      	strb	r3, [r1, #1]
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	0e12      	lsrs	r2, r2, #24
 80017b4:	700a      	strb	r2, [r1, #0]
 80017b6:	1c76      	adds	r6, r6, #1
 80017b8:	a902      	add	r1, sp, #8
 80017ba:	00b2      	lsls	r2, r6, #2
 80017bc:	188a      	adds	r2, r1, r2
 80017be:	00b3      	lsls	r3, r6, #2
 80017c0:	6839      	ldr	r1, [r7, #0]
 80017c2:	0889      	lsrs	r1, r1, #2
 80017c4:	428e      	cmp	r6, r1
 80017c6:	d3ea      	bcc.n	800179e <cmox_gcm_generateTag_common+0x4a>
 80017c8:	0029      	movs	r1, r5
 80017ca:	2586      	movs	r5, #134	; 0x86
 80017cc:	006d      	lsls	r5, r5, #1
 80017ce:	1965      	adds	r5, r4, r5
 80017d0:	e007      	b.n	80017e2 <cmox_gcm_generateTag_common+0x8e>
 80017d2:	6814      	ldr	r4, [r2, #0]
 80017d4:	2618      	movs	r6, #24
 80017d6:	00c7      	lsls	r7, r0, #3
 80017d8:	1bf6      	subs	r6, r6, r7
 80017da:	40f4      	lsrs	r4, r6
 80017dc:	181e      	adds	r6, r3, r0
 80017de:	558c      	strb	r4, [r1, r6]
 80017e0:	1c40      	adds	r0, r0, #1
 80017e2:	682c      	ldr	r4, [r5, #0]
 80017e4:	1ae6      	subs	r6, r4, r3
 80017e6:	42b0      	cmp	r0, r6
 80017e8:	d3f3      	bcc.n	80017d2 <cmox_gcm_generateTag_common+0x7e>
 80017ea:	9811      	ldr	r0, [sp, #68]	; 0x44
 80017ec:	6004      	str	r4, [r0, #0]
 80017ee:	2080      	movs	r0, #128	; 0x80
 80017f0:	0240      	lsls	r0, r0, #9
 80017f2:	b00b      	add	sp, #44	; 0x2c
 80017f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f6:	bf00      	nop
 80017f8:	00010004 	.word	0x00010004

080017fc <cmox_gcm_decrypt_common>:
 80017fc:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 80017fe:	b092      	sub	sp, #72	; 0x48
 8001800:	000c      	movs	r4, r1
 8001802:	0015      	movs	r5, r2
 8001804:	001e      	movs	r6, r3
 8001806:	2210      	movs	r2, #16
 8001808:	2100      	movs	r1, #0
 800180a:	a803      	add	r0, sp, #12
 800180c:	f008 f998 	bl	8009b40 <memset>
 8001810:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001812:	6840      	ldr	r0, [r0, #4]
 8001814:	2118      	movs	r1, #24
 8001816:	4001      	ands	r1, r0
 8001818:	d001      	beq.n	800181e <cmox_gcm_decrypt_common+0x22>
 800181a:	4888      	ldr	r0, [pc, #544]	; (8001a3c <cmox_gcm_decrypt_common+0x240>)
 800181c:	e10b      	b.n	8001a36 <cmox_gcm_decrypt_common+0x23a>
 800181e:	940b      	str	r4, [sp, #44]	; 0x2c
 8001820:	2104      	movs	r1, #4
 8001822:	4301      	orrs	r1, r0
 8001824:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001826:	6041      	str	r1, [r0, #4]
 8001828:	2400      	movs	r4, #0
 800182a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800182c:	2184      	movs	r1, #132	; 0x84
 800182e:	0049      	lsls	r1, r1, #1
 8001830:	1840      	adds	r0, r0, r1
 8001832:	9002      	str	r0, [sp, #8]
 8001834:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001836:	30fc      	adds	r0, #252	; 0xfc
 8001838:	900c      	str	r0, [sp, #48]	; 0x30
 800183a:	9501      	str	r5, [sp, #4]
 800183c:	9610      	str	r6, [sp, #64]	; 0x40
 800183e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8001840:	e055      	b.n	80018ee <cmox_gcm_decrypt_common+0xf2>
 8001842:	2500      	movs	r5, #0
 8001844:	2200      	movs	r2, #0
 8001846:	9918      	ldr	r1, [sp, #96]	; 0x60
 8001848:	0090      	lsls	r0, r2, #2
 800184a:	1823      	adds	r3, r4, r0
 800184c:	5cc8      	ldrb	r0, [r1, r3]
 800184e:	0600      	lsls	r0, r0, #24
 8001850:	1c4f      	adds	r7, r1, #1
 8001852:	5cff      	ldrb	r7, [r7, r3]
 8001854:	043f      	lsls	r7, r7, #16
 8001856:	4307      	orrs	r7, r0
 8001858:	1c88      	adds	r0, r1, #2
 800185a:	5cc0      	ldrb	r0, [r0, r3]
 800185c:	0200      	lsls	r0, r0, #8
 800185e:	4338      	orrs	r0, r7
 8001860:	1ccf      	adds	r7, r1, #3
 8001862:	5cfb      	ldrb	r3, [r7, r3]
 8001864:	4303      	orrs	r3, r0
 8001866:	0090      	lsls	r0, r2, #2
 8001868:	af07      	add	r7, sp, #28
 800186a:	503b      	str	r3, [r7, r0]
 800186c:	9f00      	ldr	r7, [sp, #0]
 800186e:	583f      	ldr	r7, [r7, r0]
 8001870:	407b      	eors	r3, r7
 8001872:	af03      	add	r7, sp, #12
 8001874:	503b      	str	r3, [r7, r0]
 8001876:	1c52      	adds	r2, r2, #1
 8001878:	2a04      	cmp	r2, #4
 800187a:	d3e5      	bcc.n	8001848 <cmox_gcm_decrypt_common+0x4c>
 800187c:	9118      	str	r1, [sp, #96]	; 0x60
 800187e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001880:	218c      	movs	r1, #140	; 0x8c
 8001882:	0049      	lsls	r1, r1, #1
 8001884:	1840      	adds	r0, r0, r1
 8001886:	9000      	str	r0, [sp, #0]
 8001888:	4602      	mov	r2, r0
 800188a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800188c:	a803      	add	r0, sp, #12
 800188e:	9b02      	ldr	r3, [sp, #8]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4798      	blx	r3
 8001896:	aa03      	add	r2, sp, #12
 8001898:	990c      	ldr	r1, [sp, #48]	; 0x30
 800189a:	9801      	ldr	r0, [sp, #4]
 800189c:	6803      	ldr	r3, [r0, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4798      	blx	r3
 80018a2:	9802      	ldr	r0, [sp, #8]
 80018a4:	6800      	ldr	r0, [r0, #0]
 80018a6:	1c40      	adds	r0, r0, #1
 80018a8:	9902      	ldr	r1, [sp, #8]
 80018aa:	6008      	str	r0, [r1, #0]
 80018ac:	00a8      	lsls	r0, r5, #2
 80018ae:	a903      	add	r1, sp, #12
 80018b0:	1809      	adds	r1, r1, r0
 80018b2:	680b      	ldr	r3, [r1, #0]
 80018b4:	aa07      	add	r2, sp, #28
 80018b6:	5812      	ldr	r2, [r2, r0]
 80018b8:	405a      	eors	r2, r3
 80018ba:	600a      	str	r2, [r1, #0]
 80018bc:	00ab      	lsls	r3, r5, #2
 80018be:	18e3      	adds	r3, r4, r3
 80018c0:	1cf7      	adds	r7, r6, #3
 80018c2:	54fa      	strb	r2, [r7, r3]
 80018c4:	680a      	ldr	r2, [r1, #0]
 80018c6:	0a12      	lsrs	r2, r2, #8
 80018c8:	1cb7      	adds	r7, r6, #2
 80018ca:	54fa      	strb	r2, [r7, r3]
 80018cc:	680a      	ldr	r2, [r1, #0]
 80018ce:	0c12      	lsrs	r2, r2, #16
 80018d0:	1c77      	adds	r7, r6, #1
 80018d2:	54fa      	strb	r2, [r7, r3]
 80018d4:	680a      	ldr	r2, [r1, #0]
 80018d6:	0e12      	lsrs	r2, r2, #24
 80018d8:	54f2      	strb	r2, [r6, r3]
 80018da:	680a      	ldr	r2, [r1, #0]
 80018dc:	9b00      	ldr	r3, [sp, #0]
 80018de:	5818      	ldr	r0, [r3, r0]
 80018e0:	4050      	eors	r0, r2
 80018e2:	6008      	str	r0, [r1, #0]
 80018e4:	1c6d      	adds	r5, r5, #1
 80018e6:	2d04      	cmp	r5, #4
 80018e8:	d3e0      	bcc.n	80018ac <cmox_gcm_decrypt_common+0xb0>
 80018ea:	9400      	str	r4, [sp, #0]
 80018ec:	3410      	adds	r4, #16
 80018ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80018f0:	218c      	movs	r1, #140	; 0x8c
 80018f2:	0049      	lsls	r1, r1, #1
 80018f4:	1840      	adds	r0, r0, r1
 80018f6:	9000      	str	r0, [sp, #0]
 80018f8:	9919      	ldr	r1, [sp, #100]	; 0x64
 80018fa:	0020      	movs	r0, r4
 80018fc:	3010      	adds	r0, #16
 80018fe:	4281      	cmp	r1, r0
 8001900:	d29f      	bcs.n	8001842 <cmox_gcm_decrypt_common+0x46>
 8001902:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001904:	4284      	cmp	r4, r0
 8001906:	d300      	bcc.n	800190a <cmox_gcm_decrypt_common+0x10e>
 8001908:	e088      	b.n	8001a1c <cmox_gcm_decrypt_common+0x220>
 800190a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800190c:	6840      	ldr	r0, [r0, #4]
 800190e:	2108      	movs	r1, #8
 8001910:	4301      	orrs	r1, r0
 8001912:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001914:	6041      	str	r1, [r0, #4]
 8001916:	aa03      	add	r2, sp, #12
 8001918:	990c      	ldr	r1, [sp, #48]	; 0x30
 800191a:	9801      	ldr	r0, [sp, #4]
 800191c:	6803      	ldr	r3, [r0, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4798      	blx	r3
 8001922:	2200      	movs	r2, #0
 8001924:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001926:	1b00      	subs	r0, r0, r4
 8001928:	900e      	str	r0, [sp, #56]	; 0x38
 800192a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800192c:	e02c      	b.n	8001988 <cmox_gcm_decrypt_common+0x18c>
 800192e:	0090      	lsls	r0, r2, #2
 8001930:	1825      	adds	r5, r4, r0
 8001932:	5d48      	ldrb	r0, [r1, r5]
 8001934:	0600      	lsls	r0, r0, #24
 8001936:	1c4f      	adds	r7, r1, #1
 8001938:	5d7f      	ldrb	r7, [r7, r5]
 800193a:	043f      	lsls	r7, r7, #16
 800193c:	4307      	orrs	r7, r0
 800193e:	1c88      	adds	r0, r1, #2
 8001940:	5d40      	ldrb	r0, [r0, r5]
 8001942:	0200      	lsls	r0, r0, #8
 8001944:	4338      	orrs	r0, r7
 8001946:	1ccf      	adds	r7, r1, #3
 8001948:	5d7f      	ldrb	r7, [r7, r5]
 800194a:	4307      	orrs	r7, r0
 800194c:	a807      	add	r0, sp, #28
 800194e:	18c0      	adds	r0, r0, r3
 8001950:	6007      	str	r7, [r0, #0]
 8001952:	9b01      	ldr	r3, [sp, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	405f      	eors	r7, r3
 8001958:	9b01      	ldr	r3, [sp, #4]
 800195a:	601f      	str	r7, [r3, #0]
 800195c:	1cf3      	adds	r3, r6, #3
 800195e:	555f      	strb	r7, [r3, r5]
 8001960:	9b01      	ldr	r3, [sp, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	1cb7      	adds	r7, r6, #2
 8001968:	557b      	strb	r3, [r7, r5]
 800196a:	9b01      	ldr	r3, [sp, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	0c1b      	lsrs	r3, r3, #16
 8001970:	1c77      	adds	r7, r6, #1
 8001972:	557b      	strb	r3, [r7, r5]
 8001974:	9b01      	ldr	r3, [sp, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	0e1b      	lsrs	r3, r3, #24
 800197a:	5573      	strb	r3, [r6, r5]
 800197c:	6803      	ldr	r3, [r0, #0]
 800197e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8001980:	682d      	ldr	r5, [r5, #0]
 8001982:	405d      	eors	r5, r3
 8001984:	6005      	str	r5, [r0, #0]
 8001986:	1c52      	adds	r2, r2, #1
 8001988:	0093      	lsls	r3, r2, #2
 800198a:	9800      	ldr	r0, [sp, #0]
 800198c:	18c0      	adds	r0, r0, r3
 800198e:	900d      	str	r0, [sp, #52]	; 0x34
 8001990:	a803      	add	r0, sp, #12
 8001992:	18c0      	adds	r0, r0, r3
 8001994:	9001      	str	r0, [sp, #4]
 8001996:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001998:	0880      	lsrs	r0, r0, #2
 800199a:	4282      	cmp	r2, r0
 800199c:	d3c7      	bcc.n	800192e <cmox_gcm_decrypt_common+0x132>
 800199e:	920f      	str	r2, [sp, #60]	; 0x3c
 80019a0:	a807      	add	r0, sp, #28
 80019a2:	18c0      	adds	r0, r0, r3
 80019a4:	900c      	str	r0, [sp, #48]	; 0x30
 80019a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80019a8:	228c      	movs	r2, #140	; 0x8c
 80019aa:	0052      	lsls	r2, r2, #1
 80019ac:	1880      	adds	r0, r0, r2
 80019ae:	9000      	str	r0, [sp, #0]
 80019b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80019b2:	6800      	ldr	r0, [r0, #0]
 80019b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80019b6:	6010      	str	r0, [r2, #0]
 80019b8:	2500      	movs	r5, #0
 80019ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80019bc:	0080      	lsls	r0, r0, #2
 80019be:	900b      	str	r0, [sp, #44]	; 0x2c
 80019c0:	1820      	adds	r0, r4, r0
 80019c2:	900d      	str	r0, [sp, #52]	; 0x34
 80019c4:	e013      	b.n	80019ee <cmox_gcm_decrypt_common+0x1f2>
 80019c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80019c8:	1940      	adds	r0, r0, r5
 80019ca:	180a      	adds	r2, r1, r0
 80019cc:	2318      	movs	r3, #24
 80019ce:	00ec      	lsls	r4, r5, #3
 80019d0:	1b1b      	subs	r3, r3, r4
 80019d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80019d4:	6827      	ldr	r7, [r4, #0]
 80019d6:	7814      	ldrb	r4, [r2, #0]
 80019d8:	409c      	lsls	r4, r3
 80019da:	407c      	eors	r4, r7
 80019dc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80019de:	603c      	str	r4, [r7, #0]
 80019e0:	9c01      	ldr	r4, [sp, #4]
 80019e2:	6824      	ldr	r4, [r4, #0]
 80019e4:	40dc      	lsrs	r4, r3
 80019e6:	7812      	ldrb	r2, [r2, #0]
 80019e8:	4062      	eors	r2, r4
 80019ea:	5432      	strb	r2, [r6, r0]
 80019ec:	1c6d      	adds	r5, r5, #1
 80019ee:	980e      	ldr	r0, [sp, #56]	; 0x38
 80019f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80019f2:	1a80      	subs	r0, r0, r2
 80019f4:	4285      	cmp	r5, r0
 80019f6:	d3e6      	bcc.n	80019c6 <cmox_gcm_decrypt_common+0x1ca>
 80019f8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80019fa:	1c40      	adds	r0, r0, #1
 80019fc:	ab07      	add	r3, sp, #28
 80019fe:	e004      	b.n	8001a0a <cmox_gcm_decrypt_common+0x20e>
 8001a00:	0081      	lsls	r1, r0, #2
 8001a02:	9a00      	ldr	r2, [sp, #0]
 8001a04:	5852      	ldr	r2, [r2, r1]
 8001a06:	505a      	str	r2, [r3, r1]
 8001a08:	1c40      	adds	r0, r0, #1
 8001a0a:	2804      	cmp	r0, #4
 8001a0c:	d3f8      	bcc.n	8001a00 <cmox_gcm_decrypt_common+0x204>
 8001a0e:	9a00      	ldr	r2, [sp, #0]
 8001a10:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001a12:	a807      	add	r0, sp, #28
 8001a14:	9b02      	ldr	r3, [sp, #8]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4798      	blx	r3
 8001a1c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001a1e:	9902      	ldr	r1, [sp, #8]
 8001a20:	68c9      	ldr	r1, [r1, #12]
 8001a22:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8001a24:	1889      	adds	r1, r1, r2
 8001a26:	9a02      	ldr	r2, [sp, #8]
 8001a28:	60d1      	str	r1, [r2, #12]
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	d001      	beq.n	8001a32 <cmox_gcm_decrypt_common+0x236>
 8001a2e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8001a30:	6001      	str	r1, [r0, #0]
 8001a32:	2080      	movs	r0, #128	; 0x80
 8001a34:	0240      	lsls	r0, r0, #9
 8001a36:	b013      	add	sp, #76	; 0x4c
 8001a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	00010004 	.word	0x00010004

08001a40 <cmox_gcm_decrypt_verify_common>:
 8001a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a42:	b08c      	sub	sp, #48	; 0x30
 8001a44:	0006      	movs	r6, r0
 8001a46:	000c      	movs	r4, r1
 8001a48:	0015      	movs	r5, r2
 8001a4a:	001f      	movs	r7, r3
 8001a4c:	2210      	movs	r2, #16
 8001a4e:	2100      	movs	r1, #0
 8001a50:	a804      	add	r0, sp, #16
 8001a52:	f008 f875 	bl	8009b40 <memset>
 8001a56:	2086      	movs	r0, #134	; 0x86
 8001a58:	0040      	lsls	r0, r0, #1
 8001a5a:	5820      	ldr	r0, [r4, r0]
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	d001      	beq.n	8001a64 <cmox_gcm_decrypt_verify_common+0x24>
 8001a60:	2810      	cmp	r0, #16
 8001a62:	d901      	bls.n	8001a68 <cmox_gcm_decrypt_verify_common+0x28>
 8001a64:	480f      	ldr	r0, [pc, #60]	; (8001aa4 <cmox_gcm_decrypt_verify_common+0x64>)
 8001a66:	e01b      	b.n	8001aa0 <cmox_gcm_decrypt_verify_common+0x60>
 8001a68:	003b      	movs	r3, r7
 8001a6a:	002a      	movs	r2, r5
 8001a6c:	0030      	movs	r0, r6
 8001a6e:	a904      	add	r1, sp, #16
 8001a70:	9101      	str	r1, [sp, #4]
 8001a72:	a908      	add	r1, sp, #32
 8001a74:	9100      	str	r1, [sp, #0]
 8001a76:	0021      	movs	r1, r4
 8001a78:	f7ff fd15 	bl	80014a6 <cmox_gcm_finish_common>
 8001a7c:	2086      	movs	r0, #134	; 0x86
 8001a7e:	0040      	lsls	r0, r0, #1
 8001a80:	5821      	ldr	r1, [r4, r0]
 8001a82:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001a84:	9003      	str	r0, [sp, #12]
 8001a86:	4808      	ldr	r0, [pc, #32]	; (8001aa8 <cmox_gcm_decrypt_verify_common+0x68>)
 8001a88:	9002      	str	r0, [sp, #8]
 8001a8a:	4808      	ldr	r0, [pc, #32]	; (8001aac <cmox_gcm_decrypt_verify_common+0x6c>)
 8001a8c:	9001      	str	r0, [sp, #4]
 8001a8e:	4808      	ldr	r0, [pc, #32]	; (8001ab0 <cmox_gcm_decrypt_verify_common+0x70>)
 8001a90:	6800      	ldr	r0, [r0, #0]
 8001a92:	9000      	str	r0, [sp, #0]
 8001a94:	1cc8      	adds	r0, r1, #3
 8001a96:	0883      	lsrs	r3, r0, #2
 8001a98:	aa04      	add	r2, sp, #16
 8001a9a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001a9c:	f000 f8ea 	bl	8001c74 <cmox_utils_robustCmp>
 8001aa0:	b00d      	add	sp, #52	; 0x34
 8001aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aa4:	00010004 	.word	0x00010004
 8001aa8:	00016e93 	.word	0x00016e93
 8001aac:	0001c726 	.word	0x0001c726
 8001ab0:	0800b590 	.word	0x0800b590

08001ab4 <firstloop_bb_cmp>:
 8001ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab6:	0007      	movs	r7, r0
 8001ab8:	000c      	movs	r4, r1
 8001aba:	0013      	movs	r3, r2
 8001abc:	2500      	movs	r5, #0
 8001abe:	2001      	movs	r0, #1
 8001ac0:	9000      	str	r0, [sp, #0]
 8001ac2:	0039      	movs	r1, r7
 8001ac4:	0022      	movs	r2, r4
 8001ac6:	2400      	movs	r4, #0
 8001ac8:	e00e      	b.n	8001ae8 <firstloop_bb_cmp+0x34>
 8001aca:	9f00      	ldr	r7, [sp, #0]
 8001acc:	46bc      	mov	ip, r7
 8001ace:	5d4f      	ldrb	r7, [r1, r5]
 8001ad0:	5d56      	ldrb	r6, [r2, r5]
 8001ad2:	407e      	eors	r6, r7
 8001ad4:	43f7      	mvns	r7, r6
 8001ad6:	1c7f      	adds	r7, r7, #1
 8001ad8:	0ffe      	lsrs	r6, r7, #31
 8001ada:	4046      	eors	r6, r0
 8001adc:	4667      	mov	r7, ip
 8001ade:	403e      	ands	r6, r7
 8001ae0:	9600      	str	r6, [sp, #0]
 8001ae2:	9e00      	ldr	r6, [sp, #0]
 8001ae4:	19a4      	adds	r4, r4, r6
 8001ae6:	1c6d      	adds	r5, r5, #1
 8001ae8:	429d      	cmp	r5, r3
 8001aea:	d3ee      	bcc.n	8001aca <firstloop_bb_cmp+0x16>
 8001aec:	0020      	movs	r0, r4
 8001aee:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001af0 <secondloop_bb_cmp>:
 8001af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af2:	2401      	movs	r4, #1
 8001af4:	9400      	str	r4, [sp, #0]
 8001af6:	0003      	movs	r3, r0
 8001af8:	000d      	movs	r5, r1
 8001afa:	2100      	movs	r1, #0
 8001afc:	2a00      	cmp	r2, #0
 8001afe:	e010      	b.n	8001b22 <secondloop_bb_cmp+0x32>
 8001b00:	9800      	ldr	r0, [sp, #0]
 8001b02:	189e      	adds	r6, r3, r2
 8001b04:	1e76      	subs	r6, r6, #1
 8001b06:	7836      	ldrb	r6, [r6, #0]
 8001b08:	18af      	adds	r7, r5, r2
 8001b0a:	1e7f      	subs	r7, r7, #1
 8001b0c:	783f      	ldrb	r7, [r7, #0]
 8001b0e:	4077      	eors	r7, r6
 8001b10:	43fe      	mvns	r6, r7
 8001b12:	1c76      	adds	r6, r6, #1
 8001b14:	0ff6      	lsrs	r6, r6, #31
 8001b16:	4066      	eors	r6, r4
 8001b18:	4006      	ands	r6, r0
 8001b1a:	9600      	str	r6, [sp, #0]
 8001b1c:	9800      	ldr	r0, [sp, #0]
 8001b1e:	1809      	adds	r1, r1, r0
 8001b20:	1e52      	subs	r2, r2, #1
 8001b22:	d1ed      	bne.n	8001b00 <secondloop_bb_cmp+0x10>
 8001b24:	0008      	movs	r0, r1
 8001b26:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001b28 <firstloop_bw_be_cmp>:
 8001b28:	b5f4      	push	{r2, r4, r5, r6, r7, lr}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	2500      	movs	r5, #0
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2201      	movs	r2, #1
 8001b32:	9202      	str	r2, [sp, #8]
 8001b34:	9000      	str	r0, [sp, #0]
 8001b36:	2000      	movs	r0, #0
 8001b38:	9a03      	ldr	r2, [sp, #12]
 8001b3a:	e01c      	b.n	8001b76 <firstloop_bw_be_cmp+0x4e>
 8001b3c:	9c00      	ldr	r4, [sp, #0]
 8001b3e:	0086      	lsls	r6, r0, #2
 8001b40:	19a4      	adds	r4, r4, r6
 8001b42:	7826      	ldrb	r6, [r4, #0]
 8001b44:	0637      	lsls	r7, r6, #24
 8001b46:	7866      	ldrb	r6, [r4, #1]
 8001b48:	0436      	lsls	r6, r6, #16
 8001b4a:	433e      	orrs	r6, r7
 8001b4c:	78a7      	ldrb	r7, [r4, #2]
 8001b4e:	023f      	lsls	r7, r7, #8
 8001b50:	4337      	orrs	r7, r6
 8001b52:	78e4      	ldrb	r4, [r4, #3]
 8001b54:	433c      	orrs	r4, r7
 8001b56:	0086      	lsls	r6, r0, #2
 8001b58:	598e      	ldr	r6, [r1, r6]
 8001b5a:	4066      	eors	r6, r4
 8001b5c:	9c02      	ldr	r4, [sp, #8]
 8001b5e:	43f7      	mvns	r7, r6
 8001b60:	1c7f      	adds	r7, r7, #1
 8001b62:	4337      	orrs	r7, r6
 8001b64:	0fff      	lsrs	r7, r7, #31
 8001b66:	2601      	movs	r6, #1
 8001b68:	407e      	eors	r6, r7
 8001b6a:	4026      	ands	r6, r4
 8001b6c:	9602      	str	r6, [sp, #8]
 8001b6e:	9c02      	ldr	r4, [sp, #8]
 8001b70:	00a4      	lsls	r4, r4, #2
 8001b72:	191b      	adds	r3, r3, r4
 8001b74:	1c40      	adds	r0, r0, #1
 8001b76:	0894      	lsrs	r4, r2, #2
 8001b78:	42a0      	cmp	r0, r4
 8001b7a:	d3df      	bcc.n	8001b3c <firstloop_bw_be_cmp+0x14>
 8001b7c:	9800      	ldr	r0, [sp, #0]
 8001b7e:	00a4      	lsls	r4, r4, #2
 8001b80:	1b14      	subs	r4, r2, r4
 8001b82:	e01c      	b.n	8001bbe <firstloop_bw_be_cmp+0x96>
 8001b84:	9f02      	ldr	r7, [sp, #8]
 8001b86:	9701      	str	r7, [sp, #4]
 8001b88:	1b16      	subs	r6, r2, r4
 8001b8a:	1976      	adds	r6, r6, r5
 8001b8c:	5d86      	ldrb	r6, [r0, r6]
 8001b8e:	9600      	str	r6, [sp, #0]
 8001b90:	0896      	lsrs	r6, r2, #2
 8001b92:	00b6      	lsls	r6, r6, #2
 8001b94:	598f      	ldr	r7, [r1, r6]
 8001b96:	46bc      	mov	ip, r7
 8001b98:	2718      	movs	r7, #24
 8001b9a:	00ee      	lsls	r6, r5, #3
 8001b9c:	1bbe      	subs	r6, r7, r6
 8001b9e:	4667      	mov	r7, ip
 8001ba0:	40f7      	lsrs	r7, r6
 8001ba2:	9e00      	ldr	r6, [sp, #0]
 8001ba4:	4077      	eors	r7, r6
 8001ba6:	b2ff      	uxtb	r7, r7
 8001ba8:	43fe      	mvns	r6, r7
 8001baa:	1c76      	adds	r6, r6, #1
 8001bac:	0ff7      	lsrs	r7, r6, #31
 8001bae:	2601      	movs	r6, #1
 8001bb0:	407e      	eors	r6, r7
 8001bb2:	9f01      	ldr	r7, [sp, #4]
 8001bb4:	403e      	ands	r6, r7
 8001bb6:	9602      	str	r6, [sp, #8]
 8001bb8:	9e02      	ldr	r6, [sp, #8]
 8001bba:	199b      	adds	r3, r3, r6
 8001bbc:	1c6d      	adds	r5, r5, #1
 8001bbe:	42a5      	cmp	r5, r4
 8001bc0:	d3e0      	bcc.n	8001b84 <firstloop_bw_be_cmp+0x5c>
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	b004      	add	sp, #16
 8001bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bc8 <secondloop_bw_be_cmp>:
 8001bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2301      	movs	r3, #1
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	9b02      	ldr	r3, [sp, #8]
 8001bd2:	2403      	movs	r4, #3
 8001bd4:	43a3      	bics	r3, r4
 8001bd6:	9c02      	ldr	r4, [sp, #8]
 8001bd8:	e01a      	b.n	8001c10 <secondloop_bw_be_cmp+0x48>
 8001bda:	9e01      	ldr	r6, [sp, #4]
 8001bdc:	9600      	str	r6, [sp, #0]
 8001bde:	089e      	lsrs	r6, r3, #2
 8001be0:	00b6      	lsls	r6, r6, #2
 8001be2:	598f      	ldr	r7, [r1, r6]
 8001be4:	46bc      	mov	ip, r7
 8001be6:	2718      	movs	r7, #24
 8001be8:	1ae6      	subs	r6, r4, r3
 8001bea:	1e76      	subs	r6, r6, #1
 8001bec:	00f6      	lsls	r6, r6, #3
 8001bee:	1bbe      	subs	r6, r7, r6
 8001bf0:	4667      	mov	r7, ip
 8001bf2:	40f7      	lsrs	r7, r6
 8001bf4:	1e46      	subs	r6, r0, #1
 8001bf6:	5d36      	ldrb	r6, [r6, r4]
 8001bf8:	407e      	eors	r6, r7
 8001bfa:	b2f6      	uxtb	r6, r6
 8001bfc:	43f7      	mvns	r7, r6
 8001bfe:	1c7f      	adds	r7, r7, #1
 8001c00:	0ffe      	lsrs	r6, r7, #31
 8001c02:	4075      	eors	r5, r6
 8001c04:	9e00      	ldr	r6, [sp, #0]
 8001c06:	4035      	ands	r5, r6
 8001c08:	9501      	str	r5, [sp, #4]
 8001c0a:	9d01      	ldr	r5, [sp, #4]
 8001c0c:	1952      	adds	r2, r2, r5
 8001c0e:	1e64      	subs	r4, r4, #1
 8001c10:	2501      	movs	r5, #1
 8001c12:	42a3      	cmp	r3, r4
 8001c14:	d3e1      	bcc.n	8001bda <secondloop_bw_be_cmp+0x12>
 8001c16:	000b      	movs	r3, r1
 8001c18:	0011      	movs	r1, r2
 8001c1a:	9a02      	ldr	r2, [sp, #8]
 8001c1c:	0894      	lsrs	r4, r2, #2
 8001c1e:	0002      	movs	r2, r0
 8001c20:	2c00      	cmp	r4, #0
 8001c22:	e01d      	b.n	8001c60 <secondloop_bw_be_cmp+0x98>
 8001c24:	00a0      	lsls	r0, r4, #2
 8001c26:	1816      	adds	r6, r2, r0
 8001c28:	1f36      	subs	r6, r6, #4
 8001c2a:	7830      	ldrb	r0, [r6, #0]
 8001c2c:	0607      	lsls	r7, r0, #24
 8001c2e:	7870      	ldrb	r0, [r6, #1]
 8001c30:	0400      	lsls	r0, r0, #16
 8001c32:	4338      	orrs	r0, r7
 8001c34:	78b7      	ldrb	r7, [r6, #2]
 8001c36:	023f      	lsls	r7, r7, #8
 8001c38:	4307      	orrs	r7, r0
 8001c3a:	78f0      	ldrb	r0, [r6, #3]
 8001c3c:	4338      	orrs	r0, r7
 8001c3e:	00a6      	lsls	r6, r4, #2
 8001c40:	199e      	adds	r6, r3, r6
 8001c42:	1f36      	subs	r6, r6, #4
 8001c44:	6836      	ldr	r6, [r6, #0]
 8001c46:	4046      	eors	r6, r0
 8001c48:	9801      	ldr	r0, [sp, #4]
 8001c4a:	43f7      	mvns	r7, r6
 8001c4c:	1c7f      	adds	r7, r7, #1
 8001c4e:	4337      	orrs	r7, r6
 8001c50:	0ffe      	lsrs	r6, r7, #31
 8001c52:	406e      	eors	r6, r5
 8001c54:	4006      	ands	r6, r0
 8001c56:	9601      	str	r6, [sp, #4]
 8001c58:	9801      	ldr	r0, [sp, #4]
 8001c5a:	0080      	lsls	r0, r0, #2
 8001c5c:	1809      	adds	r1, r1, r0
 8001c5e:	1e64      	subs	r4, r4, #1
 8001c60:	d1e0      	bne.n	8001c24 <secondloop_bw_be_cmp+0x5c>
 8001c62:	0008      	movs	r0, r1
 8001c64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08001c68 <bufType_bb>:
 8001c68:	1ab5 0800 1af1 0800 0001 0000               ............

08001c74 <cmox_utils_robustCmp>:
 8001c74:	b5fd      	push	{r0, r2, r3, r4, r5, r6, r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	000c      	movs	r4, r1
 8001c7a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8001c7c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8001c7e:	2000      	movs	r0, #0
 8001c80:	43c0      	mvns	r0, r0
 8001c82:	9000      	str	r0, [sp, #0]
 8001c84:	0022      	movs	r2, r4
 8001c86:	9903      	ldr	r1, [sp, #12]
 8001c88:	9802      	ldr	r0, [sp, #8]
 8001c8a:	6833      	ldr	r3, [r6, #0]
 8001c8c:	4798      	blx	r3
 8001c8e:	0005      	movs	r5, r0
 8001c90:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d029      	beq.n	8001cea <cmox_utils_robustCmp+0x76>
 8001c96:	0022      	movs	r2, r4
 8001c98:	9903      	ldr	r1, [sp, #12]
 8001c9a:	9802      	ldr	r0, [sp, #8]
 8001c9c:	6873      	ldr	r3, [r6, #4]
 8001c9e:	4798      	blx	r3
 8001ca0:	9900      	ldr	r1, [sp, #0]
 8001ca2:	43ea      	mvns	r2, r5
 8001ca4:	1c52      	adds	r2, r2, #1
 8001ca6:	432a      	orrs	r2, r5
 8001ca8:	0fd3      	lsrs	r3, r2, #31
 8001caa:	43da      	mvns	r2, r3
 8001cac:	1c52      	adds	r2, r2, #1
 8001cae:	400a      	ands	r2, r1
 8001cb0:	9200      	str	r2, [sp, #0]
 8001cb2:	9900      	ldr	r1, [sp, #0]
 8001cb4:	43c2      	mvns	r2, r0
 8001cb6:	1c52      	adds	r2, r2, #1
 8001cb8:	4302      	orrs	r2, r0
 8001cba:	0fd3      	lsrs	r3, r2, #31
 8001cbc:	43da      	mvns	r2, r3
 8001cbe:	1c52      	adds	r2, r2, #1
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	9200      	str	r2, [sp, #0]
 8001cc4:	4a1f      	ldr	r2, [pc, #124]	; (8001d44 <cmox_utils_robustCmp+0xd0>)
 8001cc6:	0011      	movs	r1, r2
 8001cc8:	4061      	eors	r1, r4
 8001cca:	4041      	eors	r1, r0
 8001ccc:	0038      	movs	r0, r7
 8001cce:	4048      	eors	r0, r1
 8001cd0:	4050      	eors	r0, r2
 8001cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001cd4:	6018      	str	r0, [r3, #0]
 8001cd6:	9800      	ldr	r0, [sp, #0]
 8001cd8:	404a      	eors	r2, r1
 8001cda:	43d3      	mvns	r3, r2
 8001cdc:	1c5b      	adds	r3, r3, #1
 8001cde:	430b      	orrs	r3, r1
 8001ce0:	0fd9      	lsrs	r1, r3, #31
 8001ce2:	43ca      	mvns	r2, r1
 8001ce4:	1c52      	adds	r2, r2, #1
 8001ce6:	4390      	bics	r0, r2
 8001ce8:	9000      	str	r0, [sp, #0]
 8001cea:	9804      	ldr	r0, [sp, #16]
 8001cec:	68b1      	ldr	r1, [r6, #8]
 8001cee:	2901      	cmp	r1, #1
 8001cf0:	d103      	bne.n	8001cfa <cmox_utils_robustCmp+0x86>
 8001cf2:	4060      	eors	r0, r4
 8001cf4:	9900      	ldr	r1, [sp, #0]
 8001cf6:	43c2      	mvns	r2, r0
 8001cf8:	e005      	b.n	8001d06 <cmox_utils_robustCmp+0x92>
 8001cfa:	9900      	ldr	r1, [sp, #0]
 8001cfc:	1ce2      	adds	r2, r4, #3
 8001cfe:	0892      	lsrs	r2, r2, #2
 8001d00:	0003      	movs	r3, r0
 8001d02:	4053      	eors	r3, r2
 8001d04:	43da      	mvns	r2, r3
 8001d06:	1c52      	adds	r2, r2, #1
 8001d08:	4302      	orrs	r2, r0
 8001d0a:	0fd0      	lsrs	r0, r2, #31
 8001d0c:	43c2      	mvns	r2, r0
 8001d0e:	1c52      	adds	r2, r2, #1
 8001d10:	4391      	bics	r1, r2
 8001d12:	9100      	str	r1, [sp, #0]
 8001d14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001d16:	480c      	ldr	r0, [pc, #48]	; (8001d48 <cmox_utils_robustCmp+0xd4>)
 8001d18:	4044      	eors	r4, r0
 8001d1a:	406c      	eors	r4, r5
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	4063      	eors	r3, r4
 8001d20:	9a00      	ldr	r2, [sp, #0]
 8001d22:	43dd      	mvns	r5, r3
 8001d24:	1c6d      	adds	r5, r5, #1
 8001d26:	431d      	orrs	r5, r3
 8001d28:	0feb      	lsrs	r3, r5, #31
 8001d2a:	43dd      	mvns	r5, r3
 8001d2c:	1c6d      	adds	r5, r5, #1
 8001d2e:	43aa      	bics	r2, r5
 8001d30:	9200      	str	r2, [sp, #0]
 8001d32:	9a00      	ldr	r2, [sp, #0]
 8001d34:	4391      	bics	r1, r2
 8001d36:	9a00      	ldr	r2, [sp, #0]
 8001d38:	4067      	eors	r7, r4
 8001d3a:	4078      	eors	r0, r7
 8001d3c:	4010      	ands	r0, r2
 8001d3e:	4308      	orrs	r0, r1
 8001d40:	b005      	add	sp, #20
 8001d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d44:	55555555 	.word	0x55555555
 8001d48:	aaaaaaaa 	.word	0xaaaaaaaa

08001d4c <cmox_aesSmall_keySchedule>:
 8001d4c:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 8001d4e:	0013      	movs	r3, r2
 8001d50:	2600      	movs	r6, #0
 8001d52:	2200      	movs	r2, #0
 8001d54:	089c      	lsrs	r4, r3, #2
 8001d56:	4b41      	ldr	r3, [pc, #260]	; (8001e5c <cmox_aesSmall_keySchedule+0x110>)
 8001d58:	9301      	str	r3, [sp, #4]
 8001d5a:	0005      	movs	r5, r0
 8001d5c:	350c      	adds	r5, #12
 8001d5e:	000b      	movs	r3, r1
 8001d60:	0020      	movs	r0, r4
 8001d62:	0029      	movs	r1, r5
 8001d64:	e00e      	b.n	8001d84 <cmox_aesSmall_keySchedule+0x38>
 8001d66:	00b4      	lsls	r4, r6, #2
 8001d68:	191c      	adds	r4, r3, r4
 8001d6a:	7825      	ldrb	r5, [r4, #0]
 8001d6c:	062f      	lsls	r7, r5, #24
 8001d6e:	7865      	ldrb	r5, [r4, #1]
 8001d70:	042d      	lsls	r5, r5, #16
 8001d72:	433d      	orrs	r5, r7
 8001d74:	78a7      	ldrb	r7, [r4, #2]
 8001d76:	023f      	lsls	r7, r7, #8
 8001d78:	432f      	orrs	r7, r5
 8001d7a:	78e4      	ldrb	r4, [r4, #3]
 8001d7c:	433c      	orrs	r4, r7
 8001d7e:	00b5      	lsls	r5, r6, #2
 8001d80:	514c      	str	r4, [r1, r5]
 8001d82:	1c76      	adds	r6, r6, #1
 8001d84:	4286      	cmp	r6, r0
 8001d86:	d3ee      	bcc.n	8001d66 <cmox_aesSmall_keySchedule+0x1a>
 8001d88:	0083      	lsls	r3, r0, #2
 8001d8a:	18cb      	adds	r3, r1, r3
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	1f1b      	subs	r3, r3, #4
 8001d90:	681d      	ldr	r5, [r3, #0]
 8001d92:	4b33      	ldr	r3, [pc, #204]	; (8001e60 <cmox_aesSmall_keySchedule+0x114>)
 8001d94:	680e      	ldr	r6, [r1, #0]
 8001d96:	022c      	lsls	r4, r5, #8
 8001d98:	0e24      	lsrs	r4, r4, #24
 8001d9a:	5d1c      	ldrb	r4, [r3, r4]
 8001d9c:	0624      	lsls	r4, r4, #24
 8001d9e:	042f      	lsls	r7, r5, #16
 8001da0:	0e3f      	lsrs	r7, r7, #24
 8001da2:	5ddf      	ldrb	r7, [r3, r7]
 8001da4:	043f      	lsls	r7, r7, #16
 8001da6:	4327      	orrs	r7, r4
 8001da8:	b2ec      	uxtb	r4, r5
 8001daa:	5d1c      	ldrb	r4, [r3, r4]
 8001dac:	0224      	lsls	r4, r4, #8
 8001dae:	433c      	orrs	r4, r7
 8001db0:	0e2d      	lsrs	r5, r5, #24
 8001db2:	5d5d      	ldrb	r5, [r3, r5]
 8001db4:	4325      	orrs	r5, r4
 8001db6:	4075      	eors	r5, r6
 8001db8:	4c2a      	ldr	r4, [pc, #168]	; (8001e64 <cmox_aesSmall_keySchedule+0x118>)
 8001dba:	0096      	lsls	r6, r2, #2
 8001dbc:	59a4      	ldr	r4, [r4, r6]
 8001dbe:	406c      	eors	r4, r5
 8001dc0:	9d00      	ldr	r5, [sp, #0]
 8001dc2:	602c      	str	r4, [r5, #0]
 8001dc4:	1c52      	adds	r2, r2, #1
 8001dc6:	2401      	movs	r4, #1
 8001dc8:	1905      	adds	r5, r0, r4
 8001dca:	00ad      	lsls	r5, r5, #2
 8001dcc:	1f0e      	subs	r6, r1, #4
 8001dce:	5976      	ldr	r6, [r6, r5]
 8001dd0:	00a7      	lsls	r7, r4, #2
 8001dd2:	59cf      	ldr	r7, [r1, r7]
 8001dd4:	4077      	eors	r7, r6
 8001dd6:	514f      	str	r7, [r1, r5]
 8001dd8:	1c64      	adds	r4, r4, #1
 8001dda:	2c04      	cmp	r4, #4
 8001ddc:	d3f4      	bcc.n	8001dc8 <cmox_aesSmall_keySchedule+0x7c>
 8001dde:	2804      	cmp	r0, #4
 8001de0:	d004      	beq.n	8001dec <cmox_aesSmall_keySchedule+0xa0>
 8001de2:	2806      	cmp	r0, #6
 8001de4:	d00c      	beq.n	8001e00 <cmox_aesSmall_keySchedule+0xb4>
 8001de6:	2808      	cmp	r0, #8
 8001de8:	d014      	beq.n	8001e14 <cmox_aesSmall_keySchedule+0xc8>
 8001dea:	e034      	b.n	8001e56 <cmox_aesSmall_keySchedule+0x10a>
 8001dec:	2a0a      	cmp	r2, #10
 8001dee:	d206      	bcs.n	8001dfe <cmox_aesSmall_keySchedule+0xb2>
 8001df0:	9901      	ldr	r1, [sp, #4]
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	025b      	lsls	r3, r3, #9
 8001df6:	4299      	cmp	r1, r3
 8001df8:	d001      	beq.n	8001dfe <cmox_aesSmall_keySchedule+0xb2>
 8001dfa:	9900      	ldr	r1, [sp, #0]
 8001dfc:	e7c4      	b.n	8001d88 <cmox_aesSmall_keySchedule+0x3c>
 8001dfe:	bdf3      	pop	{r0, r1, r4, r5, r6, r7, pc}
 8001e00:	2a07      	cmp	r2, #7
 8001e02:	d8fc      	bhi.n	8001dfe <cmox_aesSmall_keySchedule+0xb2>
 8001e04:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8001e06:	690b      	ldr	r3, [r1, #16]
 8001e08:	406b      	eors	r3, r5
 8001e0a:	628b      	str	r3, [r1, #40]	; 0x28
 8001e0c:	694e      	ldr	r6, [r1, #20]
 8001e0e:	405e      	eors	r6, r3
 8001e10:	62ce      	str	r6, [r1, #44]	; 0x2c
 8001e12:	e7ed      	b.n	8001df0 <cmox_aesSmall_keySchedule+0xa4>
 8001e14:	2a07      	cmp	r2, #7
 8001e16:	d2f2      	bcs.n	8001dfe <cmox_aesSmall_keySchedule+0xb2>
 8001e18:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8001e1a:	690e      	ldr	r6, [r1, #16]
 8001e1c:	0e2c      	lsrs	r4, r5, #24
 8001e1e:	5d1c      	ldrb	r4, [r3, r4]
 8001e20:	0627      	lsls	r7, r4, #24
 8001e22:	022c      	lsls	r4, r5, #8
 8001e24:	0e24      	lsrs	r4, r4, #24
 8001e26:	5d1c      	ldrb	r4, [r3, r4]
 8001e28:	0424      	lsls	r4, r4, #16
 8001e2a:	433c      	orrs	r4, r7
 8001e2c:	042f      	lsls	r7, r5, #16
 8001e2e:	0e3f      	lsrs	r7, r7, #24
 8001e30:	5ddf      	ldrb	r7, [r3, r7]
 8001e32:	023f      	lsls	r7, r7, #8
 8001e34:	4327      	orrs	r7, r4
 8001e36:	b2ed      	uxtb	r5, r5
 8001e38:	5d5b      	ldrb	r3, [r3, r5]
 8001e3a:	433b      	orrs	r3, r7
 8001e3c:	4073      	eors	r3, r6
 8001e3e:	630b      	str	r3, [r1, #48]	; 0x30
 8001e40:	2305      	movs	r3, #5
 8001e42:	009c      	lsls	r4, r3, #2
 8001e44:	190c      	adds	r4, r1, r4
 8001e46:	69e5      	ldr	r5, [r4, #28]
 8001e48:	6826      	ldr	r6, [r4, #0]
 8001e4a:	406e      	eors	r6, r5
 8001e4c:	6226      	str	r6, [r4, #32]
 8001e4e:	1c5b      	adds	r3, r3, #1
 8001e50:	2b07      	cmp	r3, #7
 8001e52:	d8cd      	bhi.n	8001df0 <cmox_aesSmall_keySchedule+0xa4>
 8001e54:	e7f5      	b.n	8001e42 <cmox_aesSmall_keySchedule+0xf6>
 8001e56:	4904      	ldr	r1, [pc, #16]	; (8001e68 <cmox_aesSmall_keySchedule+0x11c>)
 8001e58:	9101      	str	r1, [sp, #4]
 8001e5a:	e7ce      	b.n	8001dfa <cmox_aesSmall_keySchedule+0xae>
 8001e5c:	00010004 	.word	0x00010004
 8001e60:	0800bb18 	.word	0x0800bb18
 8001e64:	0800b594 	.word	0x0800b594
 8001e68:	00010001 	.word	0x00010001

08001e6c <strlen>:
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	5cc2      	ldrb	r2, [r0, r3]
 8001e70:	3301      	adds	r3, #1
 8001e72:	2a00      	cmp	r2, #0
 8001e74:	d1fb      	bne.n	8001e6e <strlen+0x2>
 8001e76:	1e58      	subs	r0, r3, #1
 8001e78:	4770      	bx	lr
	...

08001e7c <__gnu_thumb1_case_shi>:
 8001e7c:	b403      	push	{r0, r1}
 8001e7e:	4671      	mov	r1, lr
 8001e80:	0849      	lsrs	r1, r1, #1
 8001e82:	0040      	lsls	r0, r0, #1
 8001e84:	0049      	lsls	r1, r1, #1
 8001e86:	5e09      	ldrsh	r1, [r1, r0]
 8001e88:	0049      	lsls	r1, r1, #1
 8001e8a:	448e      	add	lr, r1
 8001e8c:	bc03      	pop	{r0, r1}
 8001e8e:	4770      	bx	lr

08001e90 <__udivsi3>:
 8001e90:	2200      	movs	r2, #0
 8001e92:	0843      	lsrs	r3, r0, #1
 8001e94:	428b      	cmp	r3, r1
 8001e96:	d374      	bcc.n	8001f82 <__udivsi3+0xf2>
 8001e98:	0903      	lsrs	r3, r0, #4
 8001e9a:	428b      	cmp	r3, r1
 8001e9c:	d35f      	bcc.n	8001f5e <__udivsi3+0xce>
 8001e9e:	0a03      	lsrs	r3, r0, #8
 8001ea0:	428b      	cmp	r3, r1
 8001ea2:	d344      	bcc.n	8001f2e <__udivsi3+0x9e>
 8001ea4:	0b03      	lsrs	r3, r0, #12
 8001ea6:	428b      	cmp	r3, r1
 8001ea8:	d328      	bcc.n	8001efc <__udivsi3+0x6c>
 8001eaa:	0c03      	lsrs	r3, r0, #16
 8001eac:	428b      	cmp	r3, r1
 8001eae:	d30d      	bcc.n	8001ecc <__udivsi3+0x3c>
 8001eb0:	22ff      	movs	r2, #255	; 0xff
 8001eb2:	0209      	lsls	r1, r1, #8
 8001eb4:	ba12      	rev	r2, r2
 8001eb6:	0c03      	lsrs	r3, r0, #16
 8001eb8:	428b      	cmp	r3, r1
 8001eba:	d302      	bcc.n	8001ec2 <__udivsi3+0x32>
 8001ebc:	1212      	asrs	r2, r2, #8
 8001ebe:	0209      	lsls	r1, r1, #8
 8001ec0:	d065      	beq.n	8001f8e <__udivsi3+0xfe>
 8001ec2:	0b03      	lsrs	r3, r0, #12
 8001ec4:	428b      	cmp	r3, r1
 8001ec6:	d319      	bcc.n	8001efc <__udivsi3+0x6c>
 8001ec8:	e000      	b.n	8001ecc <__udivsi3+0x3c>
 8001eca:	0a09      	lsrs	r1, r1, #8
 8001ecc:	0bc3      	lsrs	r3, r0, #15
 8001ece:	428b      	cmp	r3, r1
 8001ed0:	d301      	bcc.n	8001ed6 <__udivsi3+0x46>
 8001ed2:	03cb      	lsls	r3, r1, #15
 8001ed4:	1ac0      	subs	r0, r0, r3
 8001ed6:	4152      	adcs	r2, r2
 8001ed8:	0b83      	lsrs	r3, r0, #14
 8001eda:	428b      	cmp	r3, r1
 8001edc:	d301      	bcc.n	8001ee2 <__udivsi3+0x52>
 8001ede:	038b      	lsls	r3, r1, #14
 8001ee0:	1ac0      	subs	r0, r0, r3
 8001ee2:	4152      	adcs	r2, r2
 8001ee4:	0b43      	lsrs	r3, r0, #13
 8001ee6:	428b      	cmp	r3, r1
 8001ee8:	d301      	bcc.n	8001eee <__udivsi3+0x5e>
 8001eea:	034b      	lsls	r3, r1, #13
 8001eec:	1ac0      	subs	r0, r0, r3
 8001eee:	4152      	adcs	r2, r2
 8001ef0:	0b03      	lsrs	r3, r0, #12
 8001ef2:	428b      	cmp	r3, r1
 8001ef4:	d301      	bcc.n	8001efa <__udivsi3+0x6a>
 8001ef6:	030b      	lsls	r3, r1, #12
 8001ef8:	1ac0      	subs	r0, r0, r3
 8001efa:	4152      	adcs	r2, r2
 8001efc:	0ac3      	lsrs	r3, r0, #11
 8001efe:	428b      	cmp	r3, r1
 8001f00:	d301      	bcc.n	8001f06 <__udivsi3+0x76>
 8001f02:	02cb      	lsls	r3, r1, #11
 8001f04:	1ac0      	subs	r0, r0, r3
 8001f06:	4152      	adcs	r2, r2
 8001f08:	0a83      	lsrs	r3, r0, #10
 8001f0a:	428b      	cmp	r3, r1
 8001f0c:	d301      	bcc.n	8001f12 <__udivsi3+0x82>
 8001f0e:	028b      	lsls	r3, r1, #10
 8001f10:	1ac0      	subs	r0, r0, r3
 8001f12:	4152      	adcs	r2, r2
 8001f14:	0a43      	lsrs	r3, r0, #9
 8001f16:	428b      	cmp	r3, r1
 8001f18:	d301      	bcc.n	8001f1e <__udivsi3+0x8e>
 8001f1a:	024b      	lsls	r3, r1, #9
 8001f1c:	1ac0      	subs	r0, r0, r3
 8001f1e:	4152      	adcs	r2, r2
 8001f20:	0a03      	lsrs	r3, r0, #8
 8001f22:	428b      	cmp	r3, r1
 8001f24:	d301      	bcc.n	8001f2a <__udivsi3+0x9a>
 8001f26:	020b      	lsls	r3, r1, #8
 8001f28:	1ac0      	subs	r0, r0, r3
 8001f2a:	4152      	adcs	r2, r2
 8001f2c:	d2cd      	bcs.n	8001eca <__udivsi3+0x3a>
 8001f2e:	09c3      	lsrs	r3, r0, #7
 8001f30:	428b      	cmp	r3, r1
 8001f32:	d301      	bcc.n	8001f38 <__udivsi3+0xa8>
 8001f34:	01cb      	lsls	r3, r1, #7
 8001f36:	1ac0      	subs	r0, r0, r3
 8001f38:	4152      	adcs	r2, r2
 8001f3a:	0983      	lsrs	r3, r0, #6
 8001f3c:	428b      	cmp	r3, r1
 8001f3e:	d301      	bcc.n	8001f44 <__udivsi3+0xb4>
 8001f40:	018b      	lsls	r3, r1, #6
 8001f42:	1ac0      	subs	r0, r0, r3
 8001f44:	4152      	adcs	r2, r2
 8001f46:	0943      	lsrs	r3, r0, #5
 8001f48:	428b      	cmp	r3, r1
 8001f4a:	d301      	bcc.n	8001f50 <__udivsi3+0xc0>
 8001f4c:	014b      	lsls	r3, r1, #5
 8001f4e:	1ac0      	subs	r0, r0, r3
 8001f50:	4152      	adcs	r2, r2
 8001f52:	0903      	lsrs	r3, r0, #4
 8001f54:	428b      	cmp	r3, r1
 8001f56:	d301      	bcc.n	8001f5c <__udivsi3+0xcc>
 8001f58:	010b      	lsls	r3, r1, #4
 8001f5a:	1ac0      	subs	r0, r0, r3
 8001f5c:	4152      	adcs	r2, r2
 8001f5e:	08c3      	lsrs	r3, r0, #3
 8001f60:	428b      	cmp	r3, r1
 8001f62:	d301      	bcc.n	8001f68 <__udivsi3+0xd8>
 8001f64:	00cb      	lsls	r3, r1, #3
 8001f66:	1ac0      	subs	r0, r0, r3
 8001f68:	4152      	adcs	r2, r2
 8001f6a:	0883      	lsrs	r3, r0, #2
 8001f6c:	428b      	cmp	r3, r1
 8001f6e:	d301      	bcc.n	8001f74 <__udivsi3+0xe4>
 8001f70:	008b      	lsls	r3, r1, #2
 8001f72:	1ac0      	subs	r0, r0, r3
 8001f74:	4152      	adcs	r2, r2
 8001f76:	0843      	lsrs	r3, r0, #1
 8001f78:	428b      	cmp	r3, r1
 8001f7a:	d301      	bcc.n	8001f80 <__udivsi3+0xf0>
 8001f7c:	004b      	lsls	r3, r1, #1
 8001f7e:	1ac0      	subs	r0, r0, r3
 8001f80:	4152      	adcs	r2, r2
 8001f82:	1a41      	subs	r1, r0, r1
 8001f84:	d200      	bcs.n	8001f88 <__udivsi3+0xf8>
 8001f86:	4601      	mov	r1, r0
 8001f88:	4152      	adcs	r2, r2
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4770      	bx	lr
 8001f8e:	e7ff      	b.n	8001f90 <__udivsi3+0x100>
 8001f90:	b501      	push	{r0, lr}
 8001f92:	2000      	movs	r0, #0
 8001f94:	f000 f8f0 	bl	8002178 <__aeabi_idiv0>
 8001f98:	bd02      	pop	{r1, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)

08001f9c <__aeabi_uidivmod>:
 8001f9c:	2900      	cmp	r1, #0
 8001f9e:	d0f7      	beq.n	8001f90 <__udivsi3+0x100>
 8001fa0:	e776      	b.n	8001e90 <__udivsi3>
 8001fa2:	4770      	bx	lr

08001fa4 <__divsi3>:
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	430b      	orrs	r3, r1
 8001fa8:	d47f      	bmi.n	80020aa <__divsi3+0x106>
 8001faa:	2200      	movs	r2, #0
 8001fac:	0843      	lsrs	r3, r0, #1
 8001fae:	428b      	cmp	r3, r1
 8001fb0:	d374      	bcc.n	800209c <__divsi3+0xf8>
 8001fb2:	0903      	lsrs	r3, r0, #4
 8001fb4:	428b      	cmp	r3, r1
 8001fb6:	d35f      	bcc.n	8002078 <__divsi3+0xd4>
 8001fb8:	0a03      	lsrs	r3, r0, #8
 8001fba:	428b      	cmp	r3, r1
 8001fbc:	d344      	bcc.n	8002048 <__divsi3+0xa4>
 8001fbe:	0b03      	lsrs	r3, r0, #12
 8001fc0:	428b      	cmp	r3, r1
 8001fc2:	d328      	bcc.n	8002016 <__divsi3+0x72>
 8001fc4:	0c03      	lsrs	r3, r0, #16
 8001fc6:	428b      	cmp	r3, r1
 8001fc8:	d30d      	bcc.n	8001fe6 <__divsi3+0x42>
 8001fca:	22ff      	movs	r2, #255	; 0xff
 8001fcc:	0209      	lsls	r1, r1, #8
 8001fce:	ba12      	rev	r2, r2
 8001fd0:	0c03      	lsrs	r3, r0, #16
 8001fd2:	428b      	cmp	r3, r1
 8001fd4:	d302      	bcc.n	8001fdc <__divsi3+0x38>
 8001fd6:	1212      	asrs	r2, r2, #8
 8001fd8:	0209      	lsls	r1, r1, #8
 8001fda:	d065      	beq.n	80020a8 <__divsi3+0x104>
 8001fdc:	0b03      	lsrs	r3, r0, #12
 8001fde:	428b      	cmp	r3, r1
 8001fe0:	d319      	bcc.n	8002016 <__divsi3+0x72>
 8001fe2:	e000      	b.n	8001fe6 <__divsi3+0x42>
 8001fe4:	0a09      	lsrs	r1, r1, #8
 8001fe6:	0bc3      	lsrs	r3, r0, #15
 8001fe8:	428b      	cmp	r3, r1
 8001fea:	d301      	bcc.n	8001ff0 <__divsi3+0x4c>
 8001fec:	03cb      	lsls	r3, r1, #15
 8001fee:	1ac0      	subs	r0, r0, r3
 8001ff0:	4152      	adcs	r2, r2
 8001ff2:	0b83      	lsrs	r3, r0, #14
 8001ff4:	428b      	cmp	r3, r1
 8001ff6:	d301      	bcc.n	8001ffc <__divsi3+0x58>
 8001ff8:	038b      	lsls	r3, r1, #14
 8001ffa:	1ac0      	subs	r0, r0, r3
 8001ffc:	4152      	adcs	r2, r2
 8001ffe:	0b43      	lsrs	r3, r0, #13
 8002000:	428b      	cmp	r3, r1
 8002002:	d301      	bcc.n	8002008 <__divsi3+0x64>
 8002004:	034b      	lsls	r3, r1, #13
 8002006:	1ac0      	subs	r0, r0, r3
 8002008:	4152      	adcs	r2, r2
 800200a:	0b03      	lsrs	r3, r0, #12
 800200c:	428b      	cmp	r3, r1
 800200e:	d301      	bcc.n	8002014 <__divsi3+0x70>
 8002010:	030b      	lsls	r3, r1, #12
 8002012:	1ac0      	subs	r0, r0, r3
 8002014:	4152      	adcs	r2, r2
 8002016:	0ac3      	lsrs	r3, r0, #11
 8002018:	428b      	cmp	r3, r1
 800201a:	d301      	bcc.n	8002020 <__divsi3+0x7c>
 800201c:	02cb      	lsls	r3, r1, #11
 800201e:	1ac0      	subs	r0, r0, r3
 8002020:	4152      	adcs	r2, r2
 8002022:	0a83      	lsrs	r3, r0, #10
 8002024:	428b      	cmp	r3, r1
 8002026:	d301      	bcc.n	800202c <__divsi3+0x88>
 8002028:	028b      	lsls	r3, r1, #10
 800202a:	1ac0      	subs	r0, r0, r3
 800202c:	4152      	adcs	r2, r2
 800202e:	0a43      	lsrs	r3, r0, #9
 8002030:	428b      	cmp	r3, r1
 8002032:	d301      	bcc.n	8002038 <__divsi3+0x94>
 8002034:	024b      	lsls	r3, r1, #9
 8002036:	1ac0      	subs	r0, r0, r3
 8002038:	4152      	adcs	r2, r2
 800203a:	0a03      	lsrs	r3, r0, #8
 800203c:	428b      	cmp	r3, r1
 800203e:	d301      	bcc.n	8002044 <__divsi3+0xa0>
 8002040:	020b      	lsls	r3, r1, #8
 8002042:	1ac0      	subs	r0, r0, r3
 8002044:	4152      	adcs	r2, r2
 8002046:	d2cd      	bcs.n	8001fe4 <__divsi3+0x40>
 8002048:	09c3      	lsrs	r3, r0, #7
 800204a:	428b      	cmp	r3, r1
 800204c:	d301      	bcc.n	8002052 <__divsi3+0xae>
 800204e:	01cb      	lsls	r3, r1, #7
 8002050:	1ac0      	subs	r0, r0, r3
 8002052:	4152      	adcs	r2, r2
 8002054:	0983      	lsrs	r3, r0, #6
 8002056:	428b      	cmp	r3, r1
 8002058:	d301      	bcc.n	800205e <__divsi3+0xba>
 800205a:	018b      	lsls	r3, r1, #6
 800205c:	1ac0      	subs	r0, r0, r3
 800205e:	4152      	adcs	r2, r2
 8002060:	0943      	lsrs	r3, r0, #5
 8002062:	428b      	cmp	r3, r1
 8002064:	d301      	bcc.n	800206a <__divsi3+0xc6>
 8002066:	014b      	lsls	r3, r1, #5
 8002068:	1ac0      	subs	r0, r0, r3
 800206a:	4152      	adcs	r2, r2
 800206c:	0903      	lsrs	r3, r0, #4
 800206e:	428b      	cmp	r3, r1
 8002070:	d301      	bcc.n	8002076 <__divsi3+0xd2>
 8002072:	010b      	lsls	r3, r1, #4
 8002074:	1ac0      	subs	r0, r0, r3
 8002076:	4152      	adcs	r2, r2
 8002078:	08c3      	lsrs	r3, r0, #3
 800207a:	428b      	cmp	r3, r1
 800207c:	d301      	bcc.n	8002082 <__divsi3+0xde>
 800207e:	00cb      	lsls	r3, r1, #3
 8002080:	1ac0      	subs	r0, r0, r3
 8002082:	4152      	adcs	r2, r2
 8002084:	0883      	lsrs	r3, r0, #2
 8002086:	428b      	cmp	r3, r1
 8002088:	d301      	bcc.n	800208e <__divsi3+0xea>
 800208a:	008b      	lsls	r3, r1, #2
 800208c:	1ac0      	subs	r0, r0, r3
 800208e:	4152      	adcs	r2, r2
 8002090:	0843      	lsrs	r3, r0, #1
 8002092:	428b      	cmp	r3, r1
 8002094:	d301      	bcc.n	800209a <__divsi3+0xf6>
 8002096:	004b      	lsls	r3, r1, #1
 8002098:	1ac0      	subs	r0, r0, r3
 800209a:	4152      	adcs	r2, r2
 800209c:	1a41      	subs	r1, r0, r1
 800209e:	d200      	bcs.n	80020a2 <__divsi3+0xfe>
 80020a0:	4601      	mov	r1, r0
 80020a2:	4152      	adcs	r2, r2
 80020a4:	4610      	mov	r0, r2
 80020a6:	4770      	bx	lr
 80020a8:	e05d      	b.n	8002166 <__divsi3+0x1c2>
 80020aa:	0fca      	lsrs	r2, r1, #31
 80020ac:	d000      	beq.n	80020b0 <__divsi3+0x10c>
 80020ae:	4249      	negs	r1, r1
 80020b0:	1003      	asrs	r3, r0, #32
 80020b2:	d300      	bcc.n	80020b6 <__divsi3+0x112>
 80020b4:	4240      	negs	r0, r0
 80020b6:	4053      	eors	r3, r2
 80020b8:	2200      	movs	r2, #0
 80020ba:	469c      	mov	ip, r3
 80020bc:	0903      	lsrs	r3, r0, #4
 80020be:	428b      	cmp	r3, r1
 80020c0:	d32d      	bcc.n	800211e <__divsi3+0x17a>
 80020c2:	0a03      	lsrs	r3, r0, #8
 80020c4:	428b      	cmp	r3, r1
 80020c6:	d312      	bcc.n	80020ee <__divsi3+0x14a>
 80020c8:	22fc      	movs	r2, #252	; 0xfc
 80020ca:	0189      	lsls	r1, r1, #6
 80020cc:	ba12      	rev	r2, r2
 80020ce:	0a03      	lsrs	r3, r0, #8
 80020d0:	428b      	cmp	r3, r1
 80020d2:	d30c      	bcc.n	80020ee <__divsi3+0x14a>
 80020d4:	0189      	lsls	r1, r1, #6
 80020d6:	1192      	asrs	r2, r2, #6
 80020d8:	428b      	cmp	r3, r1
 80020da:	d308      	bcc.n	80020ee <__divsi3+0x14a>
 80020dc:	0189      	lsls	r1, r1, #6
 80020de:	1192      	asrs	r2, r2, #6
 80020e0:	428b      	cmp	r3, r1
 80020e2:	d304      	bcc.n	80020ee <__divsi3+0x14a>
 80020e4:	0189      	lsls	r1, r1, #6
 80020e6:	d03a      	beq.n	800215e <__divsi3+0x1ba>
 80020e8:	1192      	asrs	r2, r2, #6
 80020ea:	e000      	b.n	80020ee <__divsi3+0x14a>
 80020ec:	0989      	lsrs	r1, r1, #6
 80020ee:	09c3      	lsrs	r3, r0, #7
 80020f0:	428b      	cmp	r3, r1
 80020f2:	d301      	bcc.n	80020f8 <__divsi3+0x154>
 80020f4:	01cb      	lsls	r3, r1, #7
 80020f6:	1ac0      	subs	r0, r0, r3
 80020f8:	4152      	adcs	r2, r2
 80020fa:	0983      	lsrs	r3, r0, #6
 80020fc:	428b      	cmp	r3, r1
 80020fe:	d301      	bcc.n	8002104 <__divsi3+0x160>
 8002100:	018b      	lsls	r3, r1, #6
 8002102:	1ac0      	subs	r0, r0, r3
 8002104:	4152      	adcs	r2, r2
 8002106:	0943      	lsrs	r3, r0, #5
 8002108:	428b      	cmp	r3, r1
 800210a:	d301      	bcc.n	8002110 <__divsi3+0x16c>
 800210c:	014b      	lsls	r3, r1, #5
 800210e:	1ac0      	subs	r0, r0, r3
 8002110:	4152      	adcs	r2, r2
 8002112:	0903      	lsrs	r3, r0, #4
 8002114:	428b      	cmp	r3, r1
 8002116:	d301      	bcc.n	800211c <__divsi3+0x178>
 8002118:	010b      	lsls	r3, r1, #4
 800211a:	1ac0      	subs	r0, r0, r3
 800211c:	4152      	adcs	r2, r2
 800211e:	08c3      	lsrs	r3, r0, #3
 8002120:	428b      	cmp	r3, r1
 8002122:	d301      	bcc.n	8002128 <__divsi3+0x184>
 8002124:	00cb      	lsls	r3, r1, #3
 8002126:	1ac0      	subs	r0, r0, r3
 8002128:	4152      	adcs	r2, r2
 800212a:	0883      	lsrs	r3, r0, #2
 800212c:	428b      	cmp	r3, r1
 800212e:	d301      	bcc.n	8002134 <__divsi3+0x190>
 8002130:	008b      	lsls	r3, r1, #2
 8002132:	1ac0      	subs	r0, r0, r3
 8002134:	4152      	adcs	r2, r2
 8002136:	d2d9      	bcs.n	80020ec <__divsi3+0x148>
 8002138:	0843      	lsrs	r3, r0, #1
 800213a:	428b      	cmp	r3, r1
 800213c:	d301      	bcc.n	8002142 <__divsi3+0x19e>
 800213e:	004b      	lsls	r3, r1, #1
 8002140:	1ac0      	subs	r0, r0, r3
 8002142:	4152      	adcs	r2, r2
 8002144:	1a41      	subs	r1, r0, r1
 8002146:	d200      	bcs.n	800214a <__divsi3+0x1a6>
 8002148:	4601      	mov	r1, r0
 800214a:	4663      	mov	r3, ip
 800214c:	4152      	adcs	r2, r2
 800214e:	105b      	asrs	r3, r3, #1
 8002150:	4610      	mov	r0, r2
 8002152:	d301      	bcc.n	8002158 <__divsi3+0x1b4>
 8002154:	4240      	negs	r0, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d500      	bpl.n	800215c <__divsi3+0x1b8>
 800215a:	4249      	negs	r1, r1
 800215c:	4770      	bx	lr
 800215e:	4663      	mov	r3, ip
 8002160:	105b      	asrs	r3, r3, #1
 8002162:	d300      	bcc.n	8002166 <__divsi3+0x1c2>
 8002164:	4240      	negs	r0, r0
 8002166:	b501      	push	{r0, lr}
 8002168:	2000      	movs	r0, #0
 800216a:	f000 f805 	bl	8002178 <__aeabi_idiv0>
 800216e:	bd02      	pop	{r1, pc}

08002170 <__aeabi_idivmod>:
 8002170:	2900      	cmp	r1, #0
 8002172:	d0f8      	beq.n	8002166 <__divsi3+0x1c2>
 8002174:	e716      	b.n	8001fa4 <__divsi3>
 8002176:	4770      	bx	lr

08002178 <__aeabi_idiv0>:
 8002178:	4770      	bx	lr
 800217a:	46c0      	nop			; (mov r8, r8)

0800217c <__aeabi_uldivmod>:
 800217c:	2b00      	cmp	r3, #0
 800217e:	d111      	bne.n	80021a4 <__aeabi_uldivmod+0x28>
 8002180:	2a00      	cmp	r2, #0
 8002182:	d10f      	bne.n	80021a4 <__aeabi_uldivmod+0x28>
 8002184:	2900      	cmp	r1, #0
 8002186:	d100      	bne.n	800218a <__aeabi_uldivmod+0xe>
 8002188:	2800      	cmp	r0, #0
 800218a:	d002      	beq.n	8002192 <__aeabi_uldivmod+0x16>
 800218c:	2100      	movs	r1, #0
 800218e:	43c9      	mvns	r1, r1
 8002190:	0008      	movs	r0, r1
 8002192:	b407      	push	{r0, r1, r2}
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <__aeabi_uldivmod+0x24>)
 8002196:	a102      	add	r1, pc, #8	; (adr r1, 80021a0 <__aeabi_uldivmod+0x24>)
 8002198:	1840      	adds	r0, r0, r1
 800219a:	9002      	str	r0, [sp, #8]
 800219c:	bd03      	pop	{r0, r1, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	ffffffd9 	.word	0xffffffd9
 80021a4:	b403      	push	{r0, r1}
 80021a6:	4668      	mov	r0, sp
 80021a8:	b501      	push	{r0, lr}
 80021aa:	9802      	ldr	r0, [sp, #8]
 80021ac:	f000 f806 	bl	80021bc <__udivmoddi4>
 80021b0:	9b01      	ldr	r3, [sp, #4]
 80021b2:	469e      	mov	lr, r3
 80021b4:	b002      	add	sp, #8
 80021b6:	bc0c      	pop	{r2, r3}
 80021b8:	4770      	bx	lr
 80021ba:	46c0      	nop			; (mov r8, r8)

080021bc <__udivmoddi4>:
 80021bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021be:	4657      	mov	r7, sl
 80021c0:	464e      	mov	r6, r9
 80021c2:	4645      	mov	r5, r8
 80021c4:	46de      	mov	lr, fp
 80021c6:	b5e0      	push	{r5, r6, r7, lr}
 80021c8:	0004      	movs	r4, r0
 80021ca:	000d      	movs	r5, r1
 80021cc:	4692      	mov	sl, r2
 80021ce:	4699      	mov	r9, r3
 80021d0:	b083      	sub	sp, #12
 80021d2:	428b      	cmp	r3, r1
 80021d4:	d830      	bhi.n	8002238 <__udivmoddi4+0x7c>
 80021d6:	d02d      	beq.n	8002234 <__udivmoddi4+0x78>
 80021d8:	4649      	mov	r1, r9
 80021da:	4650      	mov	r0, sl
 80021dc:	f000 f8ba 	bl	8002354 <__clzdi2>
 80021e0:	0029      	movs	r1, r5
 80021e2:	0006      	movs	r6, r0
 80021e4:	0020      	movs	r0, r4
 80021e6:	f000 f8b5 	bl	8002354 <__clzdi2>
 80021ea:	1a33      	subs	r3, r6, r0
 80021ec:	4698      	mov	r8, r3
 80021ee:	3b20      	subs	r3, #32
 80021f0:	469b      	mov	fp, r3
 80021f2:	d433      	bmi.n	800225c <__udivmoddi4+0xa0>
 80021f4:	465a      	mov	r2, fp
 80021f6:	4653      	mov	r3, sl
 80021f8:	4093      	lsls	r3, r2
 80021fa:	4642      	mov	r2, r8
 80021fc:	001f      	movs	r7, r3
 80021fe:	4653      	mov	r3, sl
 8002200:	4093      	lsls	r3, r2
 8002202:	001e      	movs	r6, r3
 8002204:	42af      	cmp	r7, r5
 8002206:	d83a      	bhi.n	800227e <__udivmoddi4+0xc2>
 8002208:	42af      	cmp	r7, r5
 800220a:	d100      	bne.n	800220e <__udivmoddi4+0x52>
 800220c:	e078      	b.n	8002300 <__udivmoddi4+0x144>
 800220e:	465b      	mov	r3, fp
 8002210:	1ba4      	subs	r4, r4, r6
 8002212:	41bd      	sbcs	r5, r7
 8002214:	2b00      	cmp	r3, #0
 8002216:	da00      	bge.n	800221a <__udivmoddi4+0x5e>
 8002218:	e075      	b.n	8002306 <__udivmoddi4+0x14a>
 800221a:	2200      	movs	r2, #0
 800221c:	2300      	movs	r3, #0
 800221e:	9200      	str	r2, [sp, #0]
 8002220:	9301      	str	r3, [sp, #4]
 8002222:	2301      	movs	r3, #1
 8002224:	465a      	mov	r2, fp
 8002226:	4093      	lsls	r3, r2
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	2301      	movs	r3, #1
 800222c:	4642      	mov	r2, r8
 800222e:	4093      	lsls	r3, r2
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	e028      	b.n	8002286 <__udivmoddi4+0xca>
 8002234:	4282      	cmp	r2, r0
 8002236:	d9cf      	bls.n	80021d8 <__udivmoddi4+0x1c>
 8002238:	2200      	movs	r2, #0
 800223a:	2300      	movs	r3, #0
 800223c:	9200      	str	r2, [sp, #0]
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <__udivmoddi4+0x8e>
 8002246:	601c      	str	r4, [r3, #0]
 8002248:	605d      	str	r5, [r3, #4]
 800224a:	9800      	ldr	r0, [sp, #0]
 800224c:	9901      	ldr	r1, [sp, #4]
 800224e:	b003      	add	sp, #12
 8002250:	bcf0      	pop	{r4, r5, r6, r7}
 8002252:	46bb      	mov	fp, r7
 8002254:	46b2      	mov	sl, r6
 8002256:	46a9      	mov	r9, r5
 8002258:	46a0      	mov	r8, r4
 800225a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800225c:	4642      	mov	r2, r8
 800225e:	2320      	movs	r3, #32
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	4652      	mov	r2, sl
 8002264:	40da      	lsrs	r2, r3
 8002266:	4641      	mov	r1, r8
 8002268:	0013      	movs	r3, r2
 800226a:	464a      	mov	r2, r9
 800226c:	408a      	lsls	r2, r1
 800226e:	0017      	movs	r7, r2
 8002270:	4642      	mov	r2, r8
 8002272:	431f      	orrs	r7, r3
 8002274:	4653      	mov	r3, sl
 8002276:	4093      	lsls	r3, r2
 8002278:	001e      	movs	r6, r3
 800227a:	42af      	cmp	r7, r5
 800227c:	d9c4      	bls.n	8002208 <__udivmoddi4+0x4c>
 800227e:	2200      	movs	r2, #0
 8002280:	2300      	movs	r3, #0
 8002282:	9200      	str	r2, [sp, #0]
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	4643      	mov	r3, r8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0d9      	beq.n	8002240 <__udivmoddi4+0x84>
 800228c:	07fb      	lsls	r3, r7, #31
 800228e:	0872      	lsrs	r2, r6, #1
 8002290:	431a      	orrs	r2, r3
 8002292:	4646      	mov	r6, r8
 8002294:	087b      	lsrs	r3, r7, #1
 8002296:	e00e      	b.n	80022b6 <__udivmoddi4+0xfa>
 8002298:	42ab      	cmp	r3, r5
 800229a:	d101      	bne.n	80022a0 <__udivmoddi4+0xe4>
 800229c:	42a2      	cmp	r2, r4
 800229e:	d80c      	bhi.n	80022ba <__udivmoddi4+0xfe>
 80022a0:	1aa4      	subs	r4, r4, r2
 80022a2:	419d      	sbcs	r5, r3
 80022a4:	2001      	movs	r0, #1
 80022a6:	1924      	adds	r4, r4, r4
 80022a8:	416d      	adcs	r5, r5
 80022aa:	2100      	movs	r1, #0
 80022ac:	3e01      	subs	r6, #1
 80022ae:	1824      	adds	r4, r4, r0
 80022b0:	414d      	adcs	r5, r1
 80022b2:	2e00      	cmp	r6, #0
 80022b4:	d006      	beq.n	80022c4 <__udivmoddi4+0x108>
 80022b6:	42ab      	cmp	r3, r5
 80022b8:	d9ee      	bls.n	8002298 <__udivmoddi4+0xdc>
 80022ba:	3e01      	subs	r6, #1
 80022bc:	1924      	adds	r4, r4, r4
 80022be:	416d      	adcs	r5, r5
 80022c0:	2e00      	cmp	r6, #0
 80022c2:	d1f8      	bne.n	80022b6 <__udivmoddi4+0xfa>
 80022c4:	9800      	ldr	r0, [sp, #0]
 80022c6:	9901      	ldr	r1, [sp, #4]
 80022c8:	465b      	mov	r3, fp
 80022ca:	1900      	adds	r0, r0, r4
 80022cc:	4169      	adcs	r1, r5
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	db24      	blt.n	800231c <__udivmoddi4+0x160>
 80022d2:	002b      	movs	r3, r5
 80022d4:	465a      	mov	r2, fp
 80022d6:	4644      	mov	r4, r8
 80022d8:	40d3      	lsrs	r3, r2
 80022da:	002a      	movs	r2, r5
 80022dc:	40e2      	lsrs	r2, r4
 80022de:	001c      	movs	r4, r3
 80022e0:	465b      	mov	r3, fp
 80022e2:	0015      	movs	r5, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	db2a      	blt.n	800233e <__udivmoddi4+0x182>
 80022e8:	0026      	movs	r6, r4
 80022ea:	409e      	lsls	r6, r3
 80022ec:	0033      	movs	r3, r6
 80022ee:	0026      	movs	r6, r4
 80022f0:	4647      	mov	r7, r8
 80022f2:	40be      	lsls	r6, r7
 80022f4:	0032      	movs	r2, r6
 80022f6:	1a80      	subs	r0, r0, r2
 80022f8:	4199      	sbcs	r1, r3
 80022fa:	9000      	str	r0, [sp, #0]
 80022fc:	9101      	str	r1, [sp, #4]
 80022fe:	e79f      	b.n	8002240 <__udivmoddi4+0x84>
 8002300:	42a3      	cmp	r3, r4
 8002302:	d8bc      	bhi.n	800227e <__udivmoddi4+0xc2>
 8002304:	e783      	b.n	800220e <__udivmoddi4+0x52>
 8002306:	4642      	mov	r2, r8
 8002308:	2320      	movs	r3, #32
 800230a:	2100      	movs	r1, #0
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	2200      	movs	r2, #0
 8002310:	9100      	str	r1, [sp, #0]
 8002312:	9201      	str	r2, [sp, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	40da      	lsrs	r2, r3
 8002318:	9201      	str	r2, [sp, #4]
 800231a:	e786      	b.n	800222a <__udivmoddi4+0x6e>
 800231c:	4642      	mov	r2, r8
 800231e:	2320      	movs	r3, #32
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	002a      	movs	r2, r5
 8002324:	4646      	mov	r6, r8
 8002326:	409a      	lsls	r2, r3
 8002328:	0023      	movs	r3, r4
 800232a:	40f3      	lsrs	r3, r6
 800232c:	4644      	mov	r4, r8
 800232e:	4313      	orrs	r3, r2
 8002330:	002a      	movs	r2, r5
 8002332:	40e2      	lsrs	r2, r4
 8002334:	001c      	movs	r4, r3
 8002336:	465b      	mov	r3, fp
 8002338:	0015      	movs	r5, r2
 800233a:	2b00      	cmp	r3, #0
 800233c:	dad4      	bge.n	80022e8 <__udivmoddi4+0x12c>
 800233e:	4642      	mov	r2, r8
 8002340:	002f      	movs	r7, r5
 8002342:	2320      	movs	r3, #32
 8002344:	0026      	movs	r6, r4
 8002346:	4097      	lsls	r7, r2
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	40de      	lsrs	r6, r3
 800234c:	003b      	movs	r3, r7
 800234e:	4333      	orrs	r3, r6
 8002350:	e7cd      	b.n	80022ee <__udivmoddi4+0x132>
 8002352:	46c0      	nop			; (mov r8, r8)

08002354 <__clzdi2>:
 8002354:	b510      	push	{r4, lr}
 8002356:	2900      	cmp	r1, #0
 8002358:	d103      	bne.n	8002362 <__clzdi2+0xe>
 800235a:	f000 f807 	bl	800236c <__clzsi2>
 800235e:	3020      	adds	r0, #32
 8002360:	e002      	b.n	8002368 <__clzdi2+0x14>
 8002362:	0008      	movs	r0, r1
 8002364:	f000 f802 	bl	800236c <__clzsi2>
 8002368:	bd10      	pop	{r4, pc}
 800236a:	46c0      	nop			; (mov r8, r8)

0800236c <__clzsi2>:
 800236c:	211c      	movs	r1, #28
 800236e:	2301      	movs	r3, #1
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	4298      	cmp	r0, r3
 8002374:	d301      	bcc.n	800237a <__clzsi2+0xe>
 8002376:	0c00      	lsrs	r0, r0, #16
 8002378:	3910      	subs	r1, #16
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	4298      	cmp	r0, r3
 800237e:	d301      	bcc.n	8002384 <__clzsi2+0x18>
 8002380:	0a00      	lsrs	r0, r0, #8
 8002382:	3908      	subs	r1, #8
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	4298      	cmp	r0, r3
 8002388:	d301      	bcc.n	800238e <__clzsi2+0x22>
 800238a:	0900      	lsrs	r0, r0, #4
 800238c:	3904      	subs	r1, #4
 800238e:	a202      	add	r2, pc, #8	; (adr r2, 8002398 <__clzsi2+0x2c>)
 8002390:	5c10      	ldrb	r0, [r2, r0]
 8002392:	1840      	adds	r0, r0, r1
 8002394:	4770      	bx	lr
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	02020304 	.word	0x02020304
 800239c:	01010101 	.word	0x01010101
	...

080023a8 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b089      	sub	sp, #36	; 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b0:	4b27      	ldr	r3, [pc, #156]	; (8002450 <HCI_TL_SPI_Init+0xa8>)
 80023b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023b4:	4b26      	ldr	r3, [pc, #152]	; (8002450 <HCI_TL_SPI_Init+0xa8>)
 80023b6:	2101      	movs	r1, #1
 80023b8:	430a      	orrs	r2, r1
 80023ba:	635a      	str	r2, [r3, #52]	; 0x34
 80023bc:	4b24      	ldr	r3, [pc, #144]	; (8002450 <HCI_TL_SPI_Init+0xa8>)
 80023be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c0:	2201      	movs	r2, #1
 80023c2:	4013      	ands	r3, r2
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80023c8:	240c      	movs	r4, #12
 80023ca:	193b      	adds	r3, r7, r4
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023d0:	193b      	adds	r3, r7, r4
 80023d2:	2288      	movs	r2, #136	; 0x88
 80023d4:	0352      	lsls	r2, r2, #13
 80023d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	193b      	adds	r3, r7, r4
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80023de:	193a      	adds	r2, r7, r4
 80023e0:	23a0      	movs	r3, #160	; 0xa0
 80023e2:	05db      	lsls	r3, r3, #23
 80023e4:	0011      	movs	r1, r2
 80023e6:	0018      	movs	r0, r3
 80023e8:	f003 f808 	bl	80053fc <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80023ec:	0021      	movs	r1, r4
 80023ee:	187b      	adds	r3, r7, r1
 80023f0:	2280      	movs	r2, #128	; 0x80
 80023f2:	0052      	lsls	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f6:	000c      	movs	r4, r1
 80023f8:	193b      	adds	r3, r7, r4
 80023fa:	2201      	movs	r2, #1
 80023fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	193b      	adds	r3, r7, r4
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	193b      	adds	r3, r7, r4
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800240a:	193a      	adds	r2, r7, r4
 800240c:	23a0      	movs	r3, #160	; 0xa0
 800240e:	05db      	lsls	r3, r3, #23
 8002410:	0011      	movs	r1, r2
 8002412:	0018      	movs	r0, r3
 8002414:	f002 fff2 	bl	80053fc <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8002418:	0021      	movs	r1, r4
 800241a:	187b      	adds	r3, r7, r1
 800241c:	2202      	movs	r2, #2
 800241e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002420:	187b      	adds	r3, r7, r1
 8002422:	2201      	movs	r2, #1
 8002424:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	187b      	adds	r3, r7, r1
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	187b      	adds	r3, r7, r1
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8002432:	187a      	adds	r2, r7, r1
 8002434:	23a0      	movs	r3, #160	; 0xa0
 8002436:	05db      	lsls	r3, r3, #23
 8002438:	0011      	movs	r1, r2
 800243a:	0018      	movs	r0, r3
 800243c:	f002 ffde 	bl	80053fc <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 8002440:	f001 fff8 	bl	8004434 <BSP_SPI1_Init>
 8002444:	0003      	movs	r3, r0
}
 8002446:	0018      	movs	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	b009      	add	sp, #36	; 0x24
 800244c:	bd90      	pop	{r4, r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	40021000 	.word	0x40021000

08002454 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8002458:	23a0      	movs	r3, #160	; 0xa0
 800245a:	05db      	lsls	r3, r3, #23
 800245c:	2101      	movs	r1, #1
 800245e:	0018      	movs	r0, r3
 8002460:	f003 f938 	bl	80056d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8002464:	23a0      	movs	r3, #160	; 0xa0
 8002466:	05db      	lsls	r3, r3, #23
 8002468:	2102      	movs	r1, #2
 800246a:	0018      	movs	r0, r3
 800246c:	f003 f932 	bl	80056d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	005a      	lsls	r2, r3, #1
 8002474:	23a0      	movs	r3, #160	; 0xa0
 8002476:	05db      	lsls	r3, r3, #23
 8002478:	0011      	movs	r1, r2
 800247a:	0018      	movs	r0, r3
 800247c:	f003 f92a 	bl	80056d4 <HAL_GPIO_DeInit>
  return 0;
 8002480:	2300      	movs	r3, #0
}
 8002482:	0018      	movs	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800248c:	23a0      	movs	r3, #160	; 0xa0
 800248e:	05db      	lsls	r3, r3, #23
 8002490:	2201      	movs	r2, #1
 8002492:	2102      	movs	r1, #2
 8002494:	0018      	movs	r0, r3
 8002496:	f003 fa12 	bl	80058be <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	0059      	lsls	r1, r3, #1
 800249e:	23a0      	movs	r3, #160	; 0xa0
 80024a0:	05db      	lsls	r3, r3, #23
 80024a2:	2200      	movs	r2, #0
 80024a4:	0018      	movs	r0, r3
 80024a6:	f003 fa0a 	bl	80058be <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80024aa:	2005      	movs	r0, #5
 80024ac:	f002 fb96 	bl	8004bdc <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	0059      	lsls	r1, r3, #1
 80024b4:	23a0      	movs	r3, #160	; 0xa0
 80024b6:	05db      	lsls	r3, r3, #23
 80024b8:	2201      	movs	r2, #1
 80024ba:	0018      	movs	r0, r3
 80024bc:	f003 f9ff 	bl	80058be <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80024c0:	2005      	movs	r0, #5
 80024c2:	f002 fb8b 	bl	8004bdc <HAL_Delay>
  return 0;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80024d0:	b5b0      	push	{r4, r5, r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	000a      	movs	r2, r1
 80024da:	1cbb      	adds	r3, r7, #2
 80024dc:	801a      	strh	r2, [r3, #0]
  uint16_t byte_count;
  uint8_t len = 0;
 80024de:	231d      	movs	r3, #29
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
  uint8_t char_ff = 0xff;
 80024e6:	231c      	movs	r3, #28
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	22ff      	movs	r2, #255	; 0xff
 80024ec:	701a      	strb	r2, [r3, #0]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80024ee:	2514      	movs	r5, #20
 80024f0:	197b      	adds	r3, r7, r5
 80024f2:	4a32      	ldr	r2, [pc, #200]	; (80025bc <HCI_TL_SPI_Receive+0xec>)
 80024f4:	6811      	ldr	r1, [r2, #0]
 80024f6:	6019      	str	r1, [r3, #0]
 80024f8:	7912      	ldrb	r2, [r2, #4]
 80024fa:	711a      	strb	r2, [r3, #4]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80024fc:	23a0      	movs	r3, #160	; 0xa0
 80024fe:	05db      	lsls	r3, r3, #23
 8002500:	2200      	movs	r2, #0
 8002502:	2102      	movs	r1, #2
 8002504:	0018      	movs	r0, r3
 8002506:	f003 f9da 	bl	80058be <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800250a:	240c      	movs	r4, #12
 800250c:	1939      	adds	r1, r7, r4
 800250e:	197b      	adds	r3, r7, r5
 8002510:	2205      	movs	r2, #5
 8002512:	0018      	movs	r0, r3
 8002514:	f001 ffbe 	bl	8004494 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 8002518:	0021      	movs	r1, r4
 800251a:	187b      	adds	r3, r7, r1
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d13d      	bne.n	800259e <HCI_TL_SPI_Receive+0xce>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8002522:	187b      	adds	r3, r7, r1
 8002524:	791b      	ldrb	r3, [r3, #4]
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	b21a      	sxth	r2, r3
 800252a:	187b      	adds	r3, r7, r1
 800252c:	78db      	ldrb	r3, [r3, #3]
 800252e:	b21b      	sxth	r3, r3
 8002530:	4313      	orrs	r3, r2
 8002532:	b21a      	sxth	r2, r3
 8002534:	211e      	movs	r1, #30
 8002536:	187b      	adds	r3, r7, r1
 8002538:	801a      	strh	r2, [r3, #0]

    if(byte_count > 0)
 800253a:	187b      	adds	r3, r7, r1
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d02d      	beq.n	800259e <HCI_TL_SPI_Receive+0xce>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8002542:	187a      	adds	r2, r7, r1
 8002544:	1cbb      	adds	r3, r7, #2
 8002546:	8812      	ldrh	r2, [r2, #0]
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d903      	bls.n	8002556 <HCI_TL_SPI_Receive+0x86>
        byte_count = size;
 800254e:	187b      	adds	r3, r7, r1
 8002550:	1cba      	adds	r2, r7, #2
 8002552:	8812      	ldrh	r2, [r2, #0]
 8002554:	801a      	strh	r2, [r3, #0]
      }

      for(len = 0; len < byte_count; len++)
 8002556:	231d      	movs	r3, #29
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	e015      	b.n	800258c <HCI_TL_SPI_Receive+0xbc>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8002560:	241b      	movs	r4, #27
 8002562:	1939      	adds	r1, r7, r4
 8002564:	231c      	movs	r3, #28
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	2201      	movs	r2, #1
 800256a:	0018      	movs	r0, r3
 800256c:	f001 ff92 	bl	8004494 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8002570:	211d      	movs	r1, #29
 8002572:	187b      	adds	r3, r7, r1
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	18d3      	adds	r3, r2, r3
 800257a:	193a      	adds	r2, r7, r4
 800257c:	7812      	ldrb	r2, [r2, #0]
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8002582:	187b      	adds	r3, r7, r1
 8002584:	781a      	ldrb	r2, [r3, #0]
 8002586:	187b      	adds	r3, r7, r1
 8002588:	3201      	adds	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
 800258c:	231d      	movs	r3, #29
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	b29b      	uxth	r3, r3
 8002594:	221e      	movs	r2, #30
 8002596:	18ba      	adds	r2, r7, r2
 8002598:	8812      	ldrh	r2, [r2, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d8e0      	bhi.n	8002560 <HCI_TL_SPI_Receive+0x90>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800259e:	23a0      	movs	r3, #160	; 0xa0
 80025a0:	05db      	lsls	r3, r3, #23
 80025a2:	2201      	movs	r2, #1
 80025a4:	2102      	movs	r1, #2
 80025a6:	0018      	movs	r0, r3
 80025a8:	f003 f989 	bl	80058be <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 80025ac:	231d      	movs	r3, #29
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	781b      	ldrb	r3, [r3, #0]
}
 80025b2:	0018      	movs	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b008      	add	sp, #32
 80025b8:	bdb0      	pop	{r4, r5, r7, pc}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	0800ac18 	.word	0x0800ac18

080025c0 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	000a      	movs	r2, r1
 80025ca:	1cbb      	adds	r3, r7, #2
 80025cc:	801a      	strh	r2, [r3, #0]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80025ce:	2310      	movs	r3, #16
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	4a27      	ldr	r2, [pc, #156]	; (8002670 <HCI_TL_SPI_Send+0xb0>)
 80025d4:	6811      	ldr	r1, [r2, #0]
 80025d6:	6019      	str	r1, [r3, #0]
 80025d8:	7912      	ldrb	r2, [r2, #4]
 80025da:	711a      	strb	r2, [r3, #4]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80025dc:	f002 faf4 	bl	8004bc8 <HAL_GetTick>
 80025e0:	0003      	movs	r3, r0
 80025e2:	61bb      	str	r3, [r7, #24]

  do
  {
    result = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80025e8:	23a0      	movs	r3, #160	; 0xa0
 80025ea:	05db      	lsls	r3, r3, #23
 80025ec:	2200      	movs	r2, #0
 80025ee:	2102      	movs	r1, #2
 80025f0:	0018      	movs	r0, r3
 80025f2:	f003 f964 	bl	80058be <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80025f6:	2408      	movs	r4, #8
 80025f8:	1939      	adds	r1, r7, r4
 80025fa:	2310      	movs	r3, #16
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	2205      	movs	r2, #5
 8002600:	0018      	movs	r0, r3
 8002602:	f001 ff47 	bl	8004494 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 8002606:	0022      	movs	r2, r4
 8002608:	18bb      	adds	r3, r7, r2
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d112      	bne.n	8002636 <HCI_TL_SPI_Send+0x76>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8002610:	18bb      	adds	r3, r7, r2
 8002612:	785b      	ldrb	r3, [r3, #1]
 8002614:	b29b      	uxth	r3, r3
 8002616:	1cba      	adds	r2, r7, #2
 8002618:	8812      	ldrh	r2, [r2, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d807      	bhi.n	800262e <HCI_TL_SPI_Send+0x6e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 800261e:	1cbb      	adds	r3, r7, #2
 8002620:	881a      	ldrh	r2, [r3, #0]
 8002622:	4914      	ldr	r1, [pc, #80]	; (8002674 <HCI_TL_SPI_Send+0xb4>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	0018      	movs	r0, r3
 8002628:	f001 ff34 	bl	8004494 <BSP_SPI1_SendRecv>
 800262c:	e006      	b.n	800263c <HCI_TL_SPI_Send+0x7c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 800262e:	2302      	movs	r3, #2
 8002630:	425b      	negs	r3, r3
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	e002      	b.n	800263c <HCI_TL_SPI_Send+0x7c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8002636:	2301      	movs	r3, #1
 8002638:	425b      	negs	r3, r3
 800263a:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800263c:	23a0      	movs	r3, #160	; 0xa0
 800263e:	05db      	lsls	r3, r3, #23
 8002640:	2201      	movs	r2, #1
 8002642:	2102      	movs	r1, #2
 8002644:	0018      	movs	r0, r3
 8002646:	f003 f93a 	bl	80058be <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800264a:	f002 fabd 	bl	8004bc8 <HAL_GetTick>
 800264e:	0002      	movs	r2, r0
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b0f      	cmp	r3, #15
 8002656:	d903      	bls.n	8002660 <HCI_TL_SPI_Send+0xa0>
    {
      result = -3;
 8002658:	2303      	movs	r3, #3
 800265a:	425b      	negs	r3, r3
 800265c:	61fb      	str	r3, [r7, #28]
      break;
 800265e:	e002      	b.n	8002666 <HCI_TL_SPI_Send+0xa6>
    }
  } while(result < 0);
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	2b00      	cmp	r3, #0
 8002664:	dbbe      	blt.n	80025e4 <HCI_TL_SPI_Send+0x24>

  return result;
 8002666:	69fb      	ldr	r3, [r7, #28]
}
 8002668:	0018      	movs	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	b009      	add	sp, #36	; 0x24
 800266e:	bd90      	pop	{r4, r7, pc}
 8002670:	0800ac20 	.word	0x0800ac20
 8002674:	20000174 	.word	0x20000174

08002678 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800267c:	23a0      	movs	r3, #160	; 0xa0
 800267e:	05db      	lsls	r3, r3, #23
 8002680:	2101      	movs	r1, #1
 8002682:	0018      	movs	r0, r3
 8002684:	f003 f8fe 	bl	8005884 <HAL_GPIO_ReadPin>
 8002688:	0003      	movs	r3, r0
 800268a:	3b01      	subs	r3, #1
 800268c:	425a      	negs	r2, r3
 800268e:	4153      	adcs	r3, r2
 8002690:	b2db      	uxtb	r3, r3
}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	4a16      	ldr	r2, [pc, #88]	; (80026fc <hci_tl_lowlevel_init+0x64>)
 80026a2:	601a      	str	r2, [r3, #0]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	4a16      	ldr	r2, [pc, #88]	; (8002700 <hci_tl_lowlevel_init+0x68>)
 80026a8:	605a      	str	r2, [r3, #4]
  fops.Send    = HCI_TL_SPI_Send;
 80026aa:	1d3b      	adds	r3, r7, #4
 80026ac:	4a15      	ldr	r2, [pc, #84]	; (8002704 <hci_tl_lowlevel_init+0x6c>)
 80026ae:	611a      	str	r2, [r3, #16]
  fops.Receive = HCI_TL_SPI_Receive;
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	4a15      	ldr	r2, [pc, #84]	; (8002708 <hci_tl_lowlevel_init+0x70>)
 80026b4:	60da      	str	r2, [r3, #12]
  fops.Reset   = HCI_TL_SPI_Reset;
 80026b6:	1d3b      	adds	r3, r7, #4
 80026b8:	4a14      	ldr	r2, [pc, #80]	; (800270c <hci_tl_lowlevel_init+0x74>)
 80026ba:	609a      	str	r2, [r3, #8]
  fops.GetTick = BSP_GetTick;
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	4a14      	ldr	r2, [pc, #80]	; (8002710 <hci_tl_lowlevel_init+0x78>)
 80026c0:	619a      	str	r2, [r3, #24]

  hci_register_io_bus (&fops);
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	0018      	movs	r0, r3
 80026c6:	f006 fd31 	bl	800912c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80026ca:	23c0      	movs	r3, #192	; 0xc0
 80026cc:	04da      	lsls	r2, r3, #19
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <hci_tl_lowlevel_init+0x7c>)
 80026d0:	0011      	movs	r1, r2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f002 fc89 	bl	8004fea <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80026d8:	4a0f      	ldr	r2, [pc, #60]	; (8002718 <hci_tl_lowlevel_init+0x80>)
 80026da:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <hci_tl_lowlevel_init+0x7c>)
 80026dc:	2100      	movs	r1, #0
 80026de:	0018      	movs	r0, r3
 80026e0:	f002 fc51 	bl	8004f86 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80026e4:	2200      	movs	r2, #0
 80026e6:	2100      	movs	r1, #0
 80026e8:	2005      	movs	r0, #5
 80026ea:	f002 fb47 	bl	8004d7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80026ee:	2005      	movs	r0, #5
 80026f0:	f002 fb59 	bl	8004da6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80026f4:	46c0      	nop			; (mov r8, r8)
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b008      	add	sp, #32
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	080023a9 	.word	0x080023a9
 8002700:	08002455 	.word	0x08002455
 8002704:	080025c1 	.word	0x080025c1
 8002708:	080024d1 	.word	0x080024d1
 800270c:	08002489 	.word	0x08002489
 8002710:	080044d5 	.word	0x080044d5
 8002714:	20000168 	.word	0x20000168
 8002718:	0800271d 	.word	0x0800271d

0800271c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8002720:	e004      	b.n	800272c <hci_tl_lowlevel_isr+0x10>
  {
    if (hci_notify_asynch_evt(NULL))
 8002722:	2000      	movs	r0, #0
 8002724:	f006 fe80 	bl	8009428 <hci_notify_asynch_evt>
 8002728:	1e03      	subs	r3, r0, #0
 800272a:	d104      	bne.n	8002736 <hci_tl_lowlevel_isr+0x1a>
  while(IsDataAvailable())
 800272c:	f7ff ffa4 	bl	8002678 <IsDataAvailable>
 8002730:	1e03      	subs	r3, r0, #0
 8002732:	d1f6      	bne.n	8002722 <hci_tl_lowlevel_isr+0x6>
 8002734:	e000      	b.n	8002738 <hci_tl_lowlevel_isr+0x1c>
    {
      return;
 8002736:	46c0      	nop			; (mov r8, r8)
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <BlueNRG_Init>:
extern uint8_t notification_enabled;

/*
 * Initialization task
 */
HAL_StatusTypeDef BlueNRG_Init(void){
 800273c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800273e:	b089      	sub	sp, #36	; 0x24
 8002740:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret = HAL_OK;
 8002742:	2517      	movs	r5, #23
 8002744:	197b      	adds	r3, r7, r5
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
	tBleStatus ret_ble;
	uint8_t bdaddr[BDADDR_SIZE];
	const char *name = "MyBLE";
 800274a:	4b52      	ldr	r3, [pc, #328]	; (8002894 <BlueNRG_Init+0x158>)
 800274c:	613b      	str	r3, [r7, #16]

	uint16_t service_handle, dev_name_char_handle, appearance_char_handle; // handlers of GAP service

	BLUENRG_memcpy(bdaddr, SERVER_BDADDRR, sizeof(SERVER_BDADDRR));
 800274e:	2608      	movs	r6, #8
 8002750:	19bb      	adds	r3, r7, r6
 8002752:	4a51      	ldr	r2, [pc, #324]	; (8002898 <BlueNRG_Init+0x15c>)
 8002754:	6811      	ldr	r1, [r2, #0]
 8002756:	6019      	str	r1, [r3, #0]
 8002758:	8892      	ldrh	r2, [r2, #4]
 800275a:	809a      	strh	r2, [r3, #4]

	/* Init HCI */
	hci_init(HCI_Event_CB,  NULL);
 800275c:	4b4f      	ldr	r3, [pc, #316]	; (800289c <BlueNRG_Init+0x160>)
 800275e:	2100      	movs	r1, #0
 8002760:	0018      	movs	r0, r3
 8002762:	f006 fc97 	bl	8009094 <hci_init>

	/* Reset HCI */
	hci_reset();
 8002766:	f006 fb74 	bl	8008e52 <hci_reset>
	HAL_Delay(100);
 800276a:	2064      	movs	r0, #100	; 0x64
 800276c:	f002 fa36 	bl	8004bdc <HAL_Delay>

	printf("\r\nStart initialization... \n\r");
 8002770:	4b4b      	ldr	r3, [pc, #300]	; (80028a0 <BlueNRG_Init+0x164>)
 8002772:	0018      	movs	r0, r3
 8002774:	f007 face 	bl	8009d14 <iprintf>
	fflush(stdout);
 8002778:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <BlueNRG_Init+0x168>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	0018      	movs	r0, r3
 8002780:	f007 f896 	bl	80098b0 <fflush>


	/* Configure device address */
	ret_ble = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8002784:	230f      	movs	r3, #15
 8002786:	18fc      	adds	r4, r7, r3
 8002788:	19bb      	adds	r3, r7, r6
 800278a:	001a      	movs	r2, r3
 800278c:	2106      	movs	r1, #6
 800278e:	2000      	movs	r0, #0
 8002790:	f006 faf6 	bl	8008d80 <aci_hal_write_config_data>
 8002794:	0003      	movs	r3, r0
 8002796:	7023      	strb	r3, [r4, #0]

	if(ret_ble != BLE_STATUS_SUCCESS){
 8002798:	230f      	movs	r3, #15
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d006      	beq.n	80027b0 <BlueNRG_Init+0x74>
		printf("Failed to set Public Address \n\r");
 80027a2:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <BlueNRG_Init+0x16c>)
 80027a4:	0018      	movs	r0, r3
 80027a6:	f007 fab5 	bl	8009d14 <iprintf>
		ret = HAL_ERROR;
 80027aa:	197b      	adds	r3, r7, r5
 80027ac:	2201      	movs	r2, #1
 80027ae:	701a      	strb	r2, [r3, #0]
	}

	/* Initialize GATT server */
	ret_ble = aci_gatt_init();
 80027b0:	250f      	movs	r5, #15
 80027b2:	197c      	adds	r4, r7, r5
 80027b4:	f006 f898 	bl	80088e8 <aci_gatt_init>
 80027b8:	0003      	movs	r3, r0
 80027ba:	7023      	strb	r3, [r4, #0]
	if(ret_ble != BLE_STATUS_SUCCESS){
 80027bc:	197b      	adds	r3, r7, r5
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <BlueNRG_Init+0x98>
		printf("Failed to GATT Initialization \n\r");
 80027c4:	4b39      	ldr	r3, [pc, #228]	; (80028ac <BlueNRG_Init+0x170>)
 80027c6:	0018      	movs	r0, r3
 80027c8:	f007 faa4 	bl	8009d14 <iprintf>
		ret = HAL_ERROR;
 80027cc:	2317      	movs	r3, #23
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
	}

	/* Initialize GAP service */
	ret_ble = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle); //2nd arg -> privacy (0: no, 1: yes)
 80027d4:	250f      	movs	r5, #15
 80027d6:	197c      	adds	r4, r7, r5
 80027d8:	1dba      	adds	r2, r7, #6
 80027da:	1cbb      	adds	r3, r7, #2
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	0013      	movs	r3, r2
 80027e4:	2207      	movs	r2, #7
 80027e6:	2100      	movs	r1, #0
 80027e8:	2001      	movs	r0, #1
 80027ea:	f005 fef7 	bl	80085dc <aci_gap_init_IDB05A1>
 80027ee:	0003      	movs	r3, r0
 80027f0:	7023      	strb	r3, [r4, #0]


	if(ret_ble != BLE_STATUS_SUCCESS){
 80027f2:	197b      	adds	r3, r7, r5
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <BlueNRG_Init+0xce>
		printf("Failed to Initialize GAP Service\n\r");
 80027fa:	4b2d      	ldr	r3, [pc, #180]	; (80028b0 <BlueNRG_Init+0x174>)
 80027fc:	0018      	movs	r0, r3
 80027fe:	f007 fa89 	bl	8009d14 <iprintf>
		ret = HAL_ERROR;
 8002802:	2317      	movs	r3, #23
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
	}


	/* Update characteristics */
	ret_ble = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800280a:	1dbb      	adds	r3, r7, #6
 800280c:	881d      	ldrh	r5, [r3, #0]
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	881e      	ldrh	r6, [r3, #0]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	0018      	movs	r0, r3
 8002816:	f7ff fb29 	bl	8001e6c <strlen>
 800281a:	0003      	movs	r3, r0
 800281c:	b2da      	uxtb	r2, r3
 800281e:	230f      	movs	r3, #15
 8002820:	18fc      	adds	r4, r7, r3
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	0013      	movs	r3, r2
 8002828:	2200      	movs	r2, #0
 800282a:	0031      	movs	r1, r6
 800282c:	0028      	movs	r0, r5
 800282e:	f006 fa03 	bl	8008c38 <aci_gatt_update_char_value>
 8002832:	0003      	movs	r3, r0
 8002834:	7023      	strb	r3, [r4, #0]
	if(ret_ble != BLE_STATUS_SUCCESS){
 8002836:	230f      	movs	r3, #15
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <BlueNRG_Init+0x11a>
		printf("Failed to Update Characteristics %d\n\r", ret);
 8002840:	2417      	movs	r4, #23
 8002842:	193b      	adds	r3, r7, r4
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <BlueNRG_Init+0x178>)
 8002848:	0011      	movs	r1, r2
 800284a:	0018      	movs	r0, r3
 800284c:	f007 fa62 	bl	8009d14 <iprintf>
		ret = HAL_ERROR;
 8002850:	193b      	adds	r3, r7, r4
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
	}

	/* Add custom service */
	ret_ble = add_FW_Update_Service();
 8002856:	250f      	movs	r5, #15
 8002858:	197c      	adds	r4, r7, r5
 800285a:	f001 fb59 	bl	8003f10 <add_FW_Update_Service>
 800285e:	0003      	movs	r3, r0
 8002860:	7023      	strb	r3, [r4, #0]
	if(ret_ble != BLE_STATUS_SUCCESS){
 8002862:	197b      	adds	r3, r7, r5
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <BlueNRG_Init+0x13e>
		printf("Failed to Add Service\n\r");
 800286a:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <BlueNRG_Init+0x17c>)
 800286c:	0018      	movs	r0, r3
 800286e:	f007 fa51 	bl	8009d14 <iprintf>
		ret = HAL_ERROR;
 8002872:	2317      	movs	r3, #23
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
	}

	fflush(stdout);
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <BlueNRG_Init+0x168>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	0018      	movs	r0, r3
 8002882:	f007 f815 	bl	80098b0 <fflush>
	return ret;
 8002886:	2317      	movs	r3, #23
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	781b      	ldrb	r3, [r3, #0]
}
 800288c:	0018      	movs	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	b007      	add	sp, #28
 8002892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002894:	0800ac28 	.word	0x0800ac28
 8002898:	20000000 	.word	0x20000000
 800289c:	08004275 	.word	0x08004275
 80028a0:	0800ac30 	.word	0x0800ac30
 80028a4:	2000005c 	.word	0x2000005c
 80028a8:	0800ac50 	.word	0x0800ac50
 80028ac:	0800ac70 	.word	0x0800ac70
 80028b0:	0800ac94 	.word	0x0800ac94
 80028b4:	0800acb8 	.word	0x0800acb8
 80028b8:	0800ace0 	.word	0x0800ace0

080028bc <BlueNRG_Process>:


/*
 * Background task
 */
void BlueNRG_Process(void){
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
	if(set_connectable){
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <BlueNRG_Process+0x20>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d004      	beq.n	80028d2 <BlueNRG_Process+0x16>
		Enable_Advertising();
 80028c8:	f000 f80a 	bl	80028e0 <Enable_Advertising>
		set_connectable = FALSE;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <BlueNRG_Process+0x20>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
	}

	/* Process user event */
	hci_user_evt_proc();
 80028d2:	f006 fd7b 	bl	80093cc <hci_user_evt_proc>

}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	2000004c 	.word	0x2000004c

080028e0 <Enable_Advertising>:

void Enable_Advertising(void){
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08c      	sub	sp, #48	; 0x30
 80028e4:	af08      	add	r7, sp, #32
	char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'B', 'L', 'E', '-', 'G', '-', 'U', 'P'};
 80028e6:	1d3b      	adds	r3, r7, #4
 80028e8:	4a10      	ldr	r2, [pc, #64]	; (800292c <Enable_Advertising+0x4c>)
 80028ea:	ca03      	ldmia	r2!, {r0, r1}
 80028ec:	c303      	stmia	r3!, {r0, r1}
 80028ee:	7812      	ldrb	r2, [r2, #0]
 80028f0:	701a      	strb	r2, [r3, #0]

	hci_le_set_scan_resp_data(0, NULL);
 80028f2:	2100      	movs	r1, #0
 80028f4:	2000      	movs	r0, #0
 80028f6:	f006 fad2 	bl	8008e9e <hci_le_set_scan_resp_data>

	/* Set device in General Discoverable mode */
	aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 80028fa:	2300      	movs	r3, #0
 80028fc:	9306      	str	r3, [sp, #24]
 80028fe:	2300      	movs	r3, #0
 8002900:	9305      	str	r3, [sp, #20]
 8002902:	2300      	movs	r3, #0
 8002904:	9304      	str	r3, [sp, #16]
 8002906:	2300      	movs	r3, #0
 8002908:	9303      	str	r3, [sp, #12]
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	9302      	str	r3, [sp, #8]
 800290e:	2309      	movs	r3, #9
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	2300      	movs	r3, #0
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	2300      	movs	r3, #0
 8002918:	2200      	movs	r2, #0
 800291a:	2100      	movs	r1, #0
 800291c:	2000      	movs	r0, #0
 800291e:	f005 fec8 	bl	80086b2 <aci_gap_set_discoverable>

}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	b004      	add	sp, #16
 8002928:	bd80      	pop	{r7, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	0800acf8 	.word	0x0800acf8

08002930 <cmox_ll_init>:
  * @brief          CMOX library low level initialization
  * @param          pArg User defined parameter that is transmitted from initialize service
  * @retval         Initialization status: @ref CMOX_INIT_SUCCESS / @ref CMOX_INIT_FAIL
  */
cmox_init_retval_t cmox_ll_init(void *pArg)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  (void)pArg;
  /* Ensure CRC is enabled for cryptographic processing */
  __HAL_RCC_CRC_RELEASE_RESET();
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <cmox_ll_init+0x3c>)
 800293a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <cmox_ll_init+0x3c>)
 800293e:	490c      	ldr	r1, [pc, #48]	; (8002970 <cmox_ll_init+0x40>)
 8002940:	400a      	ands	r2, r1
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_CRC_CLK_ENABLE();
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <cmox_ll_init+0x3c>)
 8002946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <cmox_ll_init+0x3c>)
 800294a:	2180      	movs	r1, #128	; 0x80
 800294c:	0149      	lsls	r1, r1, #5
 800294e:	430a      	orrs	r2, r1
 8002950:	639a      	str	r2, [r3, #56]	; 0x38
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <cmox_ll_init+0x3c>)
 8002954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002956:	2380      	movs	r3, #128	; 0x80
 8002958:	015b      	lsls	r3, r3, #5
 800295a:	4013      	ands	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
  return CMOX_INIT_SUCCESS;
 8002960:	2300      	movs	r3, #0
}
 8002962:	0018      	movs	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	b004      	add	sp, #16
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	40021000 	.word	0x40021000
 8002970:	ffffefff 	.word	0xffffefff

08002974 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002978:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <MX_CRC_Init+0x40>)
 800297a:	4a0f      	ldr	r2, [pc, #60]	; (80029b8 <MX_CRC_Init+0x44>)
 800297c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800297e:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <MX_CRC_Init+0x40>)
 8002980:	2200      	movs	r2, #0
 8002982:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <MX_CRC_Init+0x40>)
 8002986:	2200      	movs	r2, #0
 8002988:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <MX_CRC_Init+0x40>)
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <MX_CRC_Init+0x40>)
 8002992:	2200      	movs	r2, #0
 8002994:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <MX_CRC_Init+0x40>)
 8002998:	2201      	movs	r2, #1
 800299a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <MX_CRC_Init+0x40>)
 800299e:	0018      	movs	r0, r3
 80029a0:	f002 fa1e 	bl	8004de0 <HAL_CRC_Init>
 80029a4:	1e03      	subs	r3, r0, #0
 80029a6:	d001      	beq.n	80029ac <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80029a8:	f000 faed 	bl	8002f86 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80029ac:	46c0      	nop			; (mov r8, r8)
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	20000274 	.word	0x20000274
 80029b8:	40023000 	.word	0x40023000

080029bc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <HAL_CRC_MspInit+0x38>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10d      	bne.n	80029ea <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_CRC_MspInit+0x3c>)
 80029d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_CRC_MspInit+0x3c>)
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	0149      	lsls	r1, r1, #5
 80029d8:	430a      	orrs	r2, r1
 80029da:	639a      	str	r2, [r3, #56]	; 0x38
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_CRC_MspInit+0x3c>)
 80029de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	015b      	lsls	r3, r3, #5
 80029e4:	4013      	ands	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b004      	add	sp, #16
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	40023000 	.word	0x40023000
 80029f8:	40021000 	.word	0x40021000

080029fc <setStartPageAddress>:
#include "stm32g0xx_hal.h"
#include "flash_manager.h"
#include <inttypes.h>

uint32_t StartPageAddress = FLASH_APP_ADDR;
bool setStartPageAddress(FlashAppType AppToUpload){
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	0002      	movs	r2, r0
 8002a04:	1dfb      	adds	r3, r7, #7
 8002a06:	701a      	strb	r2, [r3, #0]

	switch(AppToUpload){
 8002a08:	1dfb      	adds	r3, r7, #7
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	dc02      	bgt.n	8002a16 <setStartPageAddress+0x1a>
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	da03      	bge.n	8002a1c <setStartPageAddress+0x20>
 8002a14:	e00a      	b.n	8002a2c <setStartPageAddress+0x30>
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d004      	beq.n	8002a24 <setStartPageAddress+0x28>
 8002a1a:	e007      	b.n	8002a2c <setStartPageAddress+0x30>
		case FLASH_APP_FULL_SPACE:
		case FLASH_APP_1:
			StartPageAddress = FLASH_APP_1_ADDR;
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <setStartPageAddress+0x48>)
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <setStartPageAddress+0x4c>)
 8002a20:	601a      	str	r2, [r3, #0]

			break;
 8002a22:	e009      	b.n	8002a38 <setStartPageAddress+0x3c>
		case FLASH_APP_2:
			StartPageAddress = FLASH_APP_2_ADDR;
 8002a24:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <setStartPageAddress+0x48>)
 8002a26:	4a09      	ldr	r2, [pc, #36]	; (8002a4c <setStartPageAddress+0x50>)
 8002a28:	601a      	str	r2, [r3, #0]

			break;
 8002a2a:	e005      	b.n	8002a38 <setStartPageAddress+0x3c>
		default:
			printf("Failed to set starting flash page address, input not valid! \n\r");
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <setStartPageAddress+0x54>)
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f007 f970 	bl	8009d14 <iprintf>

			return false;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e000      	b.n	8002a3a <setStartPageAddress+0x3e>
			break;
	}

	return true;
 8002a38:	2301      	movs	r3, #1

}
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b002      	add	sp, #8
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	20000008 	.word	0x20000008
 8002a48:	08040000 	.word	0x08040000
 8002a4c:	08060000 	.word	0x08060000
 8002a50:	0800ad04 	.word	0x0800ad04

08002a54 <Write_FW_to_flash>:

bool Write_FW_to_flash(uint64_t *data_to_flash, uint16_t num_bytes){
 8002a54:	b5b0      	push	{r4, r5, r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	000a      	movs	r2, r1
 8002a5e:	1cbb      	adds	r3, r7, #2
 8002a60:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef ret;

	ret = HAL_FLASH_Unlock();
 8002a62:	250e      	movs	r5, #14
 8002a64:	197c      	adds	r4, r7, r5
 8002a66:	f002 fb6b 	bl	8005140 <HAL_FLASH_Unlock>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	7023      	strb	r3, [r4, #0]
	if(ret != HAL_OK){
 8002a6e:	197b      	adds	r3, r7, r5
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <Write_FW_to_flash+0x2e>
		printf("ERROR FLASH Unlock!");
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <Write_FW_to_flash+0xb4>)
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f007 f94b 	bl	8009d14 <iprintf>
		return false;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e03e      	b.n	8002b00 <Write_FW_to_flash+0xac>
	}

	uint8_t sofar = 0;
 8002a82:	230f      	movs	r3, #15
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
	uint8_t num_dwords = num_bytes;
 8002a8a:	230d      	movs	r3, #13
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	1cba      	adds	r2, r7, #2
 8002a90:	8812      	ldrh	r2, [r2, #0]
 8002a92:	701a      	strb	r2, [r3, #0]
	while(sofar < num_dwords){
 8002a94:	e029      	b.n	8002aea <Write_FW_to_flash+0x96>
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, StartPageAddress, data_to_flash[sofar]) == HAL_OK){
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <Write_FW_to_flash+0xb8>)
 8002a98:	6819      	ldr	r1, [r3, #0]
 8002a9a:	240f      	movs	r4, #15
 8002a9c:	193b      	adds	r3, r7, r4
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	18d3      	adds	r3, r2, r3
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2001      	movs	r0, #1
 8002aac:	f002 fafa 	bl	80050a4 <HAL_FLASH_Program>
 8002ab0:	1e03      	subs	r3, r0, #0
 8002ab2:	d10b      	bne.n	8002acc <Write_FW_to_flash+0x78>
			StartPageAddress += 8; // doubleword
 8002ab4:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <Write_FW_to_flash+0xb8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3308      	adds	r3, #8
 8002aba:	001a      	movs	r2, r3
 8002abc:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <Write_FW_to_flash+0xb8>)
 8002abe:	601a      	str	r2, [r3, #0]
			sofar++;
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	781a      	ldrb	r2, [r3, #0]
 8002ac4:	193b      	adds	r3, r7, r4
 8002ac6:	3201      	adds	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	e00e      	b.n	8002aea <Write_FW_to_flash+0x96>
		}else{
			printf("Error while writing in FLASH! (%d, %x) \n\r", sofar, data_to_flash[sofar]);
 8002acc:	220f      	movs	r2, #15
 8002ace:	18bb      	adds	r3, r7, r2
 8002ad0:	7819      	ldrb	r1, [r3, #0]
 8002ad2:	18bb      	adds	r3, r7, r2
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	18d3      	adds	r3, r2, r3
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	480b      	ldr	r0, [pc, #44]	; (8002b10 <Write_FW_to_flash+0xbc>)
 8002ae2:	f007 f917 	bl	8009d14 <iprintf>

			return false;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e00a      	b.n	8002b00 <Write_FW_to_flash+0xac>
	while(sofar < num_dwords){
 8002aea:	230f      	movs	r3, #15
 8002aec:	18fa      	adds	r2, r7, r3
 8002aee:	230d      	movs	r3, #13
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	7812      	ldrb	r2, [r2, #0]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d3cd      	bcc.n	8002a96 <Write_FW_to_flash+0x42>
		}
	}

	HAL_FLASH_Lock();
 8002afa:	f002 fb45 	bl	8005188 <HAL_FLASH_Lock>

	return true;
 8002afe:	2301      	movs	r3, #1
}
 8002b00:	0018      	movs	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b004      	add	sp, #16
 8002b06:	bdb0      	pop	{r4, r5, r7, pc}
 8002b08:	0800ad44 	.word	0x0800ad44
 8002b0c:	20000008 	.word	0x20000008
 8002b10:	0800ad58 	.word	0x0800ad58

08002b14 <Prepare_Application_Memory>:

bool Prepare_Application_Memory(FlashAppType AppToUpload){
 8002b14:	b5b0      	push	{r4, r5, r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	0002      	movs	r2, r0
 8002b1c:	1dfb      	adds	r3, r7, #7
 8002b1e:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;
	uint32_t PageError;

	//printf("before : %x \n\r", *(volatile uint16_t*)0x08040000);

	ret = HAL_FLASH_Unlock();
 8002b20:	251f      	movs	r5, #31
 8002b22:	197c      	adds	r4, r7, r5
 8002b24:	f002 fb0c 	bl	8005140 <HAL_FLASH_Unlock>
 8002b28:	0003      	movs	r3, r0
 8002b2a:	7023      	strb	r3, [r4, #0]
	if(ret != HAL_OK){
 8002b2c:	197b      	adds	r3, r7, r5
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <Prepare_Application_Memory+0x28>
		printf("ERROR Unlock!");
 8002b34:	4b38      	ldr	r3, [pc, #224]	; (8002c18 <Prepare_Application_Memory+0x104>)
 8002b36:	0018      	movs	r0, r3
 8002b38:	f007 f8ec 	bl	8009d14 <iprintf>
	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;

	ret               = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
	*/

	printf("APP_SEL : %d \n\r", AppToUpload);
 8002b3c:	1dfb      	adds	r3, r7, #7
 8002b3e:	781a      	ldrb	r2, [r3, #0]
 8002b40:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <Prepare_Application_Memory+0x108>)
 8002b42:	0011      	movs	r1, r2
 8002b44:	0018      	movs	r0, r3
 8002b46:	f007 f8e5 	bl	8009d14 <iprintf>
	switch (AppToUpload) {
 8002b4a:	1dfb      	adds	r3, r7, #7
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d023      	beq.n	8002b9a <Prepare_Application_Memory+0x86>
 8002b52:	dc31      	bgt.n	8002bb8 <Prepare_Application_Memory+0xa4>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <Prepare_Application_Memory+0x4a>
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d00f      	beq.n	8002b7c <Prepare_Application_Memory+0x68>
 8002b5c:	e02c      	b.n	8002bb8 <Prepare_Application_Memory+0xa4>
		case FLASH_APP_FULL_SPACE:
			/* Clear BANK_2 */
			pEraseInit.Banks     = FLASH_BANK_2;
 8002b5e:	2108      	movs	r1, #8
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	0212      	lsls	r2, r2, #8
 8002b66:	605a      	str	r2, [r3, #4]
			pEraseInit.NbPages   = 128;
 8002b68:	187b      	adds	r3, r7, r1
 8002b6a:	2280      	movs	r2, #128	; 0x80
 8002b6c:	60da      	str	r2, [r3, #12]
			pEraseInit.Page      = 0;
 8002b6e:	187b      	adds	r3, r7, r1
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
			pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8002b74:	187b      	adds	r3, r7, r1
 8002b76:	2202      	movs	r2, #2
 8002b78:	601a      	str	r2, [r3, #0]

			break;
 8002b7a:	e022      	b.n	8002bc2 <Prepare_Application_Memory+0xae>

		case FLASH_APP_1:
			/* Clear BANK_2 */
			pEraseInit.Banks     = FLASH_BANK_2;
 8002b7c:	2108      	movs	r1, #8
 8002b7e:	187b      	adds	r3, r7, r1
 8002b80:	2280      	movs	r2, #128	; 0x80
 8002b82:	0212      	lsls	r2, r2, #8
 8002b84:	605a      	str	r2, [r3, #4]
			pEraseInit.NbPages   = 64;
 8002b86:	187b      	adds	r3, r7, r1
 8002b88:	2240      	movs	r2, #64	; 0x40
 8002b8a:	60da      	str	r2, [r3, #12]
			pEraseInit.Page      = 0;
 8002b8c:	187b      	adds	r3, r7, r1
 8002b8e:	2200      	movs	r2, #0
 8002b90:	609a      	str	r2, [r3, #8]
			pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8002b92:	187b      	adds	r3, r7, r1
 8002b94:	2202      	movs	r2, #2
 8002b96:	601a      	str	r2, [r3, #0]

			break;
 8002b98:	e013      	b.n	8002bc2 <Prepare_Application_Memory+0xae>

		case FLASH_APP_2:
			/* Clear BANK_2 */
			pEraseInit.Banks     = FLASH_BANK_2;
 8002b9a:	2108      	movs	r1, #8
 8002b9c:	187b      	adds	r3, r7, r1
 8002b9e:	2280      	movs	r2, #128	; 0x80
 8002ba0:	0212      	lsls	r2, r2, #8
 8002ba2:	605a      	str	r2, [r3, #4]
			pEraseInit.NbPages   = 64;
 8002ba4:	187b      	adds	r3, r7, r1
 8002ba6:	2240      	movs	r2, #64	; 0x40
 8002ba8:	60da      	str	r2, [r3, #12]
			pEraseInit.Page      = 64;
 8002baa:	187b      	adds	r3, r7, r1
 8002bac:	2240      	movs	r2, #64	; 0x40
 8002bae:	609a      	str	r2, [r3, #8]
			pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8002bb0:	187b      	adds	r3, r7, r1
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	601a      	str	r2, [r3, #0]

			break;
 8002bb6:	e004      	b.n	8002bc2 <Prepare_Application_Memory+0xae>

		default:
			printf("Bad parameter \n\r");
 8002bb8:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <Prepare_Application_Memory+0x10c>)
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f007 f8aa 	bl	8009d14 <iprintf>
			break;
 8002bc0:	46c0      	nop			; (mov r8, r8)
	}


    ret = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8002bc2:	251f      	movs	r5, #31
 8002bc4:	197c      	adds	r4, r7, r5
 8002bc6:	2318      	movs	r3, #24
 8002bc8:	18fa      	adds	r2, r7, r3
 8002bca:	2308      	movs	r3, #8
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	0011      	movs	r1, r2
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f002 fb63 	bl	800529c <HAL_FLASHEx_Erase>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	7023      	strb	r3, [r4, #0]

	if(ret != HAL_OK){
 8002bda:	197b      	adds	r3, r7, r5
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <Prepare_Application_Memory+0xde>
		printf("Failed to erase FLASH memory\n\r");
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <Prepare_Application_Memory+0x110>)
 8002be4:	0018      	movs	r0, r3
 8002be6:	f007 f895 	bl	8009d14 <iprintf>

		HAL_FLASH_Lock();
 8002bea:	f002 facd 	bl	8005188 <HAL_FLASH_Lock>
		return false;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e00d      	b.n	8002c0e <Prepare_Application_Memory+0xfa>
	}

	fflush(stdout);
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <Prepare_Application_Memory+0x114>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f006 fe59 	bl	80098b0 <fflush>

	HAL_FLASH_Lock();
 8002bfe:	f002 fac3 	bl	8005188 <HAL_FLASH_Lock>


	//printf("after: %x \n\r", *(volatile uint16_t*)0x08040000);

	return setStartPageAddress(AppToUpload);
 8002c02:	1dfb      	adds	r3, r7, #7
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	0018      	movs	r0, r3
 8002c08:	f7ff fef8 	bl	80029fc <setStartPageAddress>
 8002c0c:	0003      	movs	r3, r0
}
 8002c0e:	0018      	movs	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b008      	add	sp, #32
 8002c14:	bdb0      	pop	{r4, r5, r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	0800ad84 	.word	0x0800ad84
 8002c1c:	0800ad94 	.word	0x0800ad94
 8002c20:	0800ada4 	.word	0x0800ada4
 8002c24:	0800adb8 	.word	0x0800adb8
 8002c28:	2000005c 	.word	0x2000005c

08002c2c <go2App>:
		HAL_FLASH_Lock();
	}

}

void go2App(FlashAppType AppSelected){
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	0002      	movs	r2, r0
 8002c34:	1dfb      	adds	r3, r7, #7
 8002c36:	701a      	strb	r2, [r3, #0]
	uint32_t JumpAddress;
	pFunction Jump_TO_Application;

	printf("APP I'm jumping into : %d \n\r", AppSelected);
 8002c38:	1dfb      	adds	r3, r7, #7
 8002c3a:	781a      	ldrb	r2, [r3, #0]
 8002c3c:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <go2App+0x90>)
 8002c3e:	0011      	movs	r1, r2
 8002c40:	0018      	movs	r0, r3
 8002c42:	f007 f867 	bl	8009d14 <iprintf>

	//if(((*(uint32_t *) FLASH_APP_ADDR) & 0x2FFD8000) == 0x20000000){
	if( AppSelected == FLASH_APP_1 || AppSelected == FLASH_APP_FULL_SPACE)
 8002c46:	1dfb      	adds	r3, r7, #7
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d003      	beq.n	8002c56 <go2App+0x2a>
 8002c4e:	1dfb      	adds	r3, r7, #7
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d103      	bne.n	8002c5e <go2App+0x32>
		JumpAddress =  *(__IO uint32_t *) (FLASH_APP_ADDR + 4);
 8002c56:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <go2App+0x94>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	e002      	b.n	8002c64 <go2App+0x38>
	else
		JumpAddress =  *(__IO uint32_t *) (FLASH_APP_2_ADDR + 4);
 8002c5e:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <go2App+0x98>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	617b      	str	r3, [r7, #20]

	Jump_TO_Application = (pFunction) JumpAddress;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	613b      	str	r3, [r7, #16]


	HAL_RCC_DeInit();
 8002c68:	f002 fe92 	bl	8005990 <HAL_RCC_DeInit>
	HAL_DeInit();
 8002c6c:	f001 ff24 	bl	8004ab8 <HAL_DeInit>

	SysTick->CTRL = 0;
 8002c70:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <go2App+0x9c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8002c76:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <go2App+0x9c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = 0;
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <go2App+0x9c>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]

	if( AppSelected == FLASH_APP_1 || AppSelected == FLASH_APP_FULL_SPACE)
 8002c82:	1dfb      	adds	r3, r7, #7
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d003      	beq.n	8002c92 <go2App+0x66>
 8002c8a:	1dfb      	adds	r3, r7, #7
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d107      	bne.n	8002ca2 <go2App+0x76>
		__set_MSP(*(uint32_t *)FLASH_APP_ADDR);
 8002c92:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <go2App+0xa0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f383 8808 	msr	MSP, r3
}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	e006      	b.n	8002cb0 <go2App+0x84>
	else
		__set_MSP(*(uint32_t *)FLASH_APP_2_ADDR);
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <go2App+0xa4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f383 8808 	msr	MSP, r3
}
 8002cae:	46c0      	nop			; (mov r8, r8)

	Jump_TO_Application();
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4798      	blx	r3

}
 8002cb4:	46c0      	nop			; (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b006      	add	sp, #24
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	0800add8 	.word	0x0800add8
 8002cc0:	08040004 	.word	0x08040004
 8002cc4:	08060004 	.word	0x08060004
 8002cc8:	e000e010 	.word	0xe000e010
 8002ccc:	08040000 	.word	0x08040000
 8002cd0:	08060000 	.word	0x08060000

08002cd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b08b      	sub	sp, #44	; 0x2c
 8002cd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cda:	2414      	movs	r4, #20
 8002cdc:	193b      	adds	r3, r7, r4
 8002cde:	0018      	movs	r0, r3
 8002ce0:	2314      	movs	r3, #20
 8002ce2:	001a      	movs	r2, r3
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	f006 ff2b 	bl	8009b40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cea:	4b44      	ldr	r3, [pc, #272]	; (8002dfc <MX_GPIO_Init+0x128>)
 8002cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cee:	4b43      	ldr	r3, [pc, #268]	; (8002dfc <MX_GPIO_Init+0x128>)
 8002cf0:	2104      	movs	r1, #4
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8002cf6:	4b41      	ldr	r3, [pc, #260]	; (8002dfc <MX_GPIO_Init+0x128>)
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d02:	4b3e      	ldr	r3, [pc, #248]	; (8002dfc <MX_GPIO_Init+0x128>)
 8002d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d06:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <MX_GPIO_Init+0x128>)
 8002d08:	2120      	movs	r1, #32
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d0e:	4b3b      	ldr	r3, [pc, #236]	; (8002dfc <MX_GPIO_Init+0x128>)
 8002d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d12:	2220      	movs	r2, #32
 8002d14:	4013      	ands	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1a:	4b38      	ldr	r3, [pc, #224]	; (8002dfc <MX_GPIO_Init+0x128>)
 8002d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d1e:	4b37      	ldr	r3, [pc, #220]	; (8002dfc <MX_GPIO_Init+0x128>)
 8002d20:	2101      	movs	r1, #1
 8002d22:	430a      	orrs	r2, r1
 8002d24:	635a      	str	r2, [r3, #52]	; 0x34
 8002d26:	4b35      	ldr	r3, [pc, #212]	; (8002dfc <MX_GPIO_Init+0x128>)
 8002d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d32:	4b32      	ldr	r3, [pc, #200]	; (8002dfc <MX_GPIO_Init+0x128>)
 8002d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d36:	4b31      	ldr	r3, [pc, #196]	; (8002dfc <MX_GPIO_Init+0x128>)
 8002d38:	2102      	movs	r1, #2
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d3e:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <MX_GPIO_Init+0x128>)
 8002d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d42:	2202      	movs	r2, #2
 8002d44:	4013      	ands	r3, r2
 8002d46:	607b      	str	r3, [r7, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8002d4a:	2381      	movs	r3, #129	; 0x81
 8002d4c:	0059      	lsls	r1, r3, #1
 8002d4e:	23a0      	movs	r3, #160	; 0xa0
 8002d50:	05db      	lsls	r3, r3, #23
 8002d52:	2200      	movs	r2, #0
 8002d54:	0018      	movs	r0, r3
 8002d56:	f002 fdb2 	bl	80058be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d5a:	193b      	adds	r3, r7, r4
 8002d5c:	2280      	movs	r2, #128	; 0x80
 8002d5e:	0192      	lsls	r2, r2, #6
 8002d60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d62:	193b      	adds	r3, r7, r4
 8002d64:	2200      	movs	r2, #0
 8002d66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d68:	193b      	adds	r3, r7, r4
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	4a23      	ldr	r2, [pc, #140]	; (8002e00 <MX_GPIO_Init+0x12c>)
 8002d72:	0019      	movs	r1, r3
 8002d74:	0010      	movs	r0, r2
 8002d76:	f002 fb41 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = APP_1_Pin|APP_2_Pin;
 8002d7a:	193b      	adds	r3, r7, r4
 8002d7c:	220c      	movs	r2, #12
 8002d7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d80:	193b      	adds	r3, r7, r4
 8002d82:	2200      	movs	r2, #0
 8002d84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d86:	193b      	adds	r3, r7, r4
 8002d88:	2202      	movs	r2, #2
 8002d8a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d8c:	193b      	adds	r3, r7, r4
 8002d8e:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <MX_GPIO_Init+0x12c>)
 8002d90:	0019      	movs	r1, r3
 8002d92:	0010      	movs	r0, r2
 8002d94:	f002 fb32 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d98:	193b      	adds	r3, r7, r4
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d9e:	193b      	adds	r3, r7, r4
 8002da0:	2288      	movs	r2, #136	; 0x88
 8002da2:	0352      	lsls	r2, r2, #13
 8002da4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	193b      	adds	r3, r7, r4
 8002da8:	2200      	movs	r2, #0
 8002daa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dac:	193a      	adds	r2, r7, r4
 8002dae:	23a0      	movs	r3, #160	; 0xa0
 8002db0:	05db      	lsls	r3, r3, #23
 8002db2:	0011      	movs	r1, r2
 8002db4:	0018      	movs	r0, r3
 8002db6:	f002 fb21 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8002dba:	0021      	movs	r1, r4
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	2281      	movs	r2, #129	; 0x81
 8002dc0:	0052      	lsls	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	187b      	adds	r3, r7, r1
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd6:	187a      	adds	r2, r7, r1
 8002dd8:	23a0      	movs	r3, #160	; 0xa0
 8002dda:	05db      	lsls	r3, r3, #23
 8002ddc:	0011      	movs	r1, r2
 8002dde:	0018      	movs	r0, r3
 8002de0:	f002 fb0c 	bl	80053fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002de4:	2200      	movs	r2, #0
 8002de6:	2100      	movs	r1, #0
 8002de8:	2005      	movs	r0, #5
 8002dea:	f001 ffc7 	bl	8004d7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002dee:	2005      	movs	r0, #5
 8002df0:	f001 ffd9 	bl	8004da6 <HAL_NVIC_EnableIRQ>

}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b00b      	add	sp, #44	; 0x2c
 8002dfa:	bd90      	pop	{r4, r7, pc}
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	50000800 	.word	0x50000800

08002e04 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch){
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	425b      	negs	r3, r3
 8002e10:	1d39      	adds	r1, r7, #4
 8002e12:	4804      	ldr	r0, [pc, #16]	; (8002e24 <__io_putchar+0x20>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	f004 fd0b 	bl	8007830 <HAL_UART_Transmit>

	return ch;
 8002e1a:	687b      	ldr	r3, [r7, #4]
}
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b002      	add	sp, #8
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000474 	.word	0x20000474

08002e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e2c:	f001 fe24 	bl	8004a78 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e30:	f000 f84a 	bl	8002ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e34:	f7ff ff4e 	bl	8002cd4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002e38:	f001 fd46 	bl	80048c8 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8002e3c:	f7ff fd9a 	bl	8002974 <MX_CRC_Init>
  MX_TIM1_Init();
 8002e40:	f001 fcb0 	bl	80047a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_GPIO_ReadPin(APP_1_GPIO_Port, APP_1_Pin) == GPIO_PIN_SET){
 8002e44:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <main+0x88>)
 8002e46:	2104      	movs	r1, #4
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f002 fd1b 	bl	8005884 <HAL_GPIO_ReadPin>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d103      	bne.n	8002e5c <main+0x34>
	  go2App(FLASH_APP_1);
 8002e54:	2001      	movs	r0, #1
 8002e56:	f7ff fee9 	bl	8002c2c <go2App>
 8002e5a:	e00a      	b.n	8002e72 <main+0x4a>
  }else if(HAL_GPIO_ReadPin(APP_2_GPIO_Port, APP_2_Pin) == GPIO_PIN_SET){
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <main+0x88>)
 8002e5e:	2108      	movs	r1, #8
 8002e60:	0018      	movs	r0, r3
 8002e62:	f002 fd0f 	bl	8005884 <HAL_GPIO_ReadPin>
 8002e66:	0003      	movs	r3, r0
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d102      	bne.n	8002e72 <main+0x4a>
	  go2App(FLASH_APP_2);
 8002e6c:	2002      	movs	r0, #2
 8002e6e:	f7ff fedd 	bl	8002c2c <go2App>
  }


  if( BlueNRG_Init() == HAL_OK ){
 8002e72:	f7ff fc63 	bl	800273c <BlueNRG_Init>
 8002e76:	1e03      	subs	r3, r0, #0
 8002e78:	d112      	bne.n	8002ea0 <main+0x78>
	  HAL_TIM_Base_Start(&htim1);
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <main+0x8c>)
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f004 f9b5 	bl	80071ec <HAL_TIM_Base_Start>
	  printf("BLE FW UPDATE Initialization Succesfull! \n\r");
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <main+0x90>)
 8002e84:	0018      	movs	r0, r3
 8002e86:	f006 ff45 	bl	8009d14 <iprintf>
  }else{
	  printf("BLE FW UPDATE Initialization FAILED! \n\r");
	  while(1);
  }

  fflush(stdout);
 8002e8a:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <main+0x94>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	0018      	movs	r0, r3
 8002e92:	f006 fd0d 	bl	80098b0 <fflush>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  printf("Device is now discoverable! \n\r");
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <main+0x98>)
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f006 ff3b 	bl	8009d14 <iprintf>
 8002e9e:	e004      	b.n	8002eaa <main+0x82>
	  printf("BLE FW UPDATE Initialization FAILED! \n\r");
 8002ea0:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <main+0x9c>)
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f006 ff36 	bl	8009d14 <iprintf>
	  while(1);
 8002ea8:	e7fe      	b.n	8002ea8 <main+0x80>

  while (1)
  {
	  BlueNRG_Process();
 8002eaa:	f7ff fd07 	bl	80028bc <BlueNRG_Process>
 8002eae:	e7fc      	b.n	8002eaa <main+0x82>
 8002eb0:	50000800 	.word	0x50000800
 8002eb4:	20000428 	.word	0x20000428
 8002eb8:	0800adf8 	.word	0x0800adf8
 8002ebc:	2000005c 	.word	0x2000005c
 8002ec0:	0800ae4c 	.word	0x0800ae4c
 8002ec4:	0800ae24 	.word	0x0800ae24

08002ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b095      	sub	sp, #84	; 0x54
 8002ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ece:	2414      	movs	r4, #20
 8002ed0:	193b      	adds	r3, r7, r4
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	233c      	movs	r3, #60	; 0x3c
 8002ed6:	001a      	movs	r2, r3
 8002ed8:	2100      	movs	r1, #0
 8002eda:	f006 fe31 	bl	8009b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	2310      	movs	r3, #16
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	f006 fe2a 	bl	8009b40 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f002 fd01 	bl	80058f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ef6:	193b      	adds	r3, r7, r4
 8002ef8:	2202      	movs	r2, #2
 8002efa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002efc:	193b      	adds	r3, r7, r4
 8002efe:	2280      	movs	r2, #128	; 0x80
 8002f00:	0052      	lsls	r2, r2, #1
 8002f02:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002f04:	0021      	movs	r1, r4
 8002f06:	187b      	adds	r3, r7, r1
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f0c:	187b      	adds	r3, r7, r1
 8002f0e:	2240      	movs	r2, #64	; 0x40
 8002f10:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f12:	187b      	adds	r3, r7, r1
 8002f14:	2202      	movs	r2, #2
 8002f16:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002f1e:	187b      	adds	r3, r7, r1
 8002f20:	2200      	movs	r2, #0
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002f24:	187b      	adds	r3, r7, r1
 8002f26:	2208      	movs	r2, #8
 8002f28:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f2a:	187b      	adds	r3, r7, r1
 8002f2c:	2280      	movs	r2, #128	; 0x80
 8002f2e:	0292      	lsls	r2, r2, #10
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f32:	187b      	adds	r3, r7, r1
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	0492      	lsls	r2, r2, #18
 8002f38:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f3a:	187b      	adds	r3, r7, r1
 8002f3c:	2280      	movs	r2, #128	; 0x80
 8002f3e:	0592      	lsls	r2, r2, #22
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f42:	187b      	adds	r3, r7, r1
 8002f44:	0018      	movs	r0, r3
 8002f46:	f002 fd9f 	bl	8005a88 <HAL_RCC_OscConfig>
 8002f4a:	1e03      	subs	r3, r0, #0
 8002f4c:	d001      	beq.n	8002f52 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002f4e:	f000 f81a 	bl	8002f86 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f52:	1d3b      	adds	r3, r7, #4
 8002f54:	2207      	movs	r2, #7
 8002f56:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f58:	1d3b      	adds	r3, r7, #4
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f5e:	1d3b      	adds	r3, r7, #4
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	22c0      	movs	r2, #192	; 0xc0
 8002f68:	01d2      	lsls	r2, r2, #7
 8002f6a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f6c:	1d3b      	adds	r3, r7, #4
 8002f6e:	2102      	movs	r1, #2
 8002f70:	0018      	movs	r0, r3
 8002f72:	f003 f8e9 	bl	8006148 <HAL_RCC_ClockConfig>
 8002f76:	1e03      	subs	r3, r0, #0
 8002f78:	d001      	beq.n	8002f7e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002f7a:	f000 f804 	bl	8002f86 <Error_Handler>
  }
}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b015      	add	sp, #84	; 0x54
 8002f84:	bd90      	pop	{r4, r7, pc}

08002f86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002f8a:	b672      	cpsid	i
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f8e:	e7fe      	b.n	8002f8e <Error_Handler+0x8>

08002f90 <data_handler>:
uint8_t IV[] =
{
  0x61, 0x1c, 0xe6, 0xf9, 0xa6, 0x88, 0x07, 0x50, 0xde, 0x7d, 0xa6, 0xcb
};

void data_handler(uint8_t *data_rcv, uint8_t num_bytes_rcv){
 8002f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f92:	b095      	sub	sp, #84	; 0x54
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002f98:	000b      	movs	r3, r1
 8002f9a:	223b      	movs	r2, #59	; 0x3b
 8002f9c:	18ba      	adds	r2, r7, r2
 8002f9e:	7013      	strb	r3, [r2, #0]
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

	int i;
	for(i=0 ; i<num_bytes_rcv && num_bytes_rcv<=CHAT_DATA_LEN ; i++){
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fa4:	e00c      	b.n	8002fc0 <data_handler+0x30>
		printf("%02x", data_rcv[i]);
 8002fa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002faa:	189b      	adds	r3, r3, r2
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	001a      	movs	r2, r3
 8002fb0:	4bd2      	ldr	r3, [pc, #840]	; (80032fc <data_handler+0x36c>)
 8002fb2:	0011      	movs	r1, r2
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f006 fead 	bl	8009d14 <iprintf>
	for(i=0 ; i<num_bytes_rcv && num_bytes_rcv<=CHAT_DATA_LEN ; i++){
 8002fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc0:	213b      	movs	r1, #59	; 0x3b
 8002fc2:	187b      	adds	r3, r7, r1
 8002fc4:	781a      	ldrb	r2, [r3, #0]
 8002fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	da03      	bge.n	8002fd4 <data_handler+0x44>
 8002fcc:	187b      	adds	r3, r7, r1
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b14      	cmp	r3, #20
 8002fd2:	d9e8      	bls.n	8002fa6 <data_handler+0x16>
	}
	printf("\n\r");
 8002fd4:	4bca      	ldr	r3, [pc, #808]	; (8003300 <data_handler+0x370>)
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f006 fe9c 	bl	8009d14 <iprintf>

	switch(connection_status){
 8002fdc:	4bc9      	ldr	r3, [pc, #804]	; (8003304 <data_handler+0x374>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d100      	bne.n	8002fe6 <data_handler+0x56>
 8002fe4:	e1dd      	b.n	80033a2 <data_handler+0x412>
 8002fe6:	dd00      	ble.n	8002fea <data_handler+0x5a>
 8002fe8:	e304      	b.n	80035f4 <data_handler+0x664>
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d003      	beq.n	8002ff6 <data_handler+0x66>
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d100      	bne.n	8002ff4 <data_handler+0x64>
 8002ff2:	e0a7      	b.n	8003144 <data_handler+0x1b4>
 8002ff4:	e2fe      	b.n	80035f4 <data_handler+0x664>
		case CONNECTED:   // receive START FLASH MODE pck
			if(verify_data_type(data_rcv, num_bytes_rcv, START_FLASH_MODE) == true){
 8002ff6:	233b      	movs	r3, #59	; 0x3b
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	7819      	ldrb	r1, [r3, #0]
 8002ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ffe:	2200      	movs	r2, #0
 8003000:	0018      	movs	r0, r3
 8003002:	f000 fb27 	bl	8003654 <verify_data_type>
 8003006:	0003      	movs	r3, r0
 8003008:	2b01      	cmp	r3, #1
 800300a:	d140      	bne.n	800308e <data_handler+0xfe>
				total_pck = (data_rcv[2] << 8) + data_rcv[3];
 800300c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300e:	3302      	adds	r3, #2
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	b29b      	uxth	r3, r3
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	b29a      	uxth	r2, r3
 8003018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301a:	3303      	adds	r3, #3
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	b29b      	uxth	r3, r3
 8003020:	18d3      	adds	r3, r2, r3
 8003022:	b29a      	uxth	r2, r3
 8003024:	4bb8      	ldr	r3, [pc, #736]	; (8003308 <data_handler+0x378>)
 8003026:	801a      	strh	r2, [r3, #0]
				printf("I expect %d packets \n\r", total_pck);  // TODO: CHECK SPACE
 8003028:	4bb7      	ldr	r3, [pc, #732]	; (8003308 <data_handler+0x378>)
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	001a      	movs	r2, r3
 800302e:	4bb7      	ldr	r3, [pc, #732]	; (800330c <data_handler+0x37c>)
 8003030:	0011      	movs	r1, r2
 8003032:	0018      	movs	r0, r3
 8003034:	f006 fe6e 	bl	8009d14 <iprintf>

				AppToUpdate = data_rcv[1];
 8003038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303a:	3301      	adds	r3, #1
 800303c:	781a      	ldrb	r2, [r3, #0]
 800303e:	4bb4      	ldr	r3, [pc, #720]	; (8003310 <data_handler+0x380>)
 8003040:	701a      	strb	r2, [r3, #0]

				if( Prepare_Application_Memory(AppToUpdate) && checkFWSize(total_pck, PAYLOAD_LEN, AppToUpdate) ){
 8003042:	4bb3      	ldr	r3, [pc, #716]	; (8003310 <data_handler+0x380>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	0018      	movs	r0, r3
 8003048:	f7ff fd64 	bl	8002b14 <Prepare_Application_Memory>
 800304c:	1e03      	subs	r3, r0, #0
 800304e:	d015      	beq.n	800307c <data_handler+0xec>
 8003050:	4bad      	ldr	r3, [pc, #692]	; (8003308 <data_handler+0x378>)
 8003052:	8818      	ldrh	r0, [r3, #0]
 8003054:	4bae      	ldr	r3, [pc, #696]	; (8003310 <data_handler+0x380>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	001a      	movs	r2, r3
 800305a:	2110      	movs	r1, #16
 800305c:	f000 feac 	bl	8003db8 <checkFWSize>
 8003060:	1e03      	subs	r3, r0, #0
 8003062:	d00b      	beq.n	800307c <data_handler+0xec>

					send_ack(true, WRITE_FLASH_PACKET_RESPONSE);
 8003064:	2104      	movs	r1, #4
 8003066:	2001      	movs	r0, #1
 8003068:	f000 fb8c 	bl	8003784 <send_ack>

					connection_status = RECEVEING_RAW_FW;
 800306c:	4ba5      	ldr	r3, [pc, #660]	; (8003304 <data_handler+0x374>)
 800306e:	2202      	movs	r2, #2
 8003070:	701a      	strb	r2, [r3, #0]
					printf("READY TO RECEIVE FW\n\r");
 8003072:	4ba8      	ldr	r3, [pc, #672]	; (8003314 <data_handler+0x384>)
 8003074:	0018      	movs	r0, r3
 8003076:	f006 fe4d 	bl	8009d14 <iprintf>
 800307a:	e062      	b.n	8003142 <data_handler+0x1b2>
				}else{
					send_ack(false, WRITE_FLASH_PACKET_RESPONSE);
 800307c:	2104      	movs	r1, #4
 800307e:	2000      	movs	r0, #0
 8003080:	f000 fb80 	bl	8003784 <send_ack>

					printf("IROR");
 8003084:	4ba4      	ldr	r3, [pc, #656]	; (8003318 <data_handler+0x388>)
 8003086:	0018      	movs	r0, r3
 8003088:	f006 fe44 	bl	8009d14 <iprintf>
				send_ack(false, WRITE_FLASH_PACKET_RESPONSE);

				printf("Received an init pck that I can't handle or wrong\n\r");
			}

			break;
 800308c:	e2ba      	b.n	8003604 <data_handler+0x674>
			}else if(verify_data_type(data_rcv, num_bytes_rcv, START_SECURE_FLASH_MODE) == true){
 800308e:	233b      	movs	r3, #59	; 0x3b
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	7819      	ldrb	r1, [r3, #0]
 8003094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003096:	2201      	movs	r2, #1
 8003098:	0018      	movs	r0, r3
 800309a:	f000 fadb 	bl	8003654 <verify_data_type>
 800309e:	0003      	movs	r3, r0
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d145      	bne.n	8003130 <data_handler+0x1a0>
				total_pck = (data_rcv[2] << 8) + data_rcv[3]; // la prima volta ricevo il numero completo
 80030a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a6:	3302      	adds	r3, #2
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b2:	3303      	adds	r3, #3
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	18d3      	adds	r3, r2, r3
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	4b92      	ldr	r3, [pc, #584]	; (8003308 <data_handler+0x378>)
 80030be:	801a      	strh	r2, [r3, #0]
				printf("I expect %d packets \n\r", total_pck);
 80030c0:	4b91      	ldr	r3, [pc, #580]	; (8003308 <data_handler+0x378>)
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	001a      	movs	r2, r3
 80030c6:	4b91      	ldr	r3, [pc, #580]	; (800330c <data_handler+0x37c>)
 80030c8:	0011      	movs	r1, r2
 80030ca:	0018      	movs	r0, r3
 80030cc:	f006 fe22 	bl	8009d14 <iprintf>
				AppToUpdate = data_rcv[1];
 80030d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d2:	3301      	adds	r3, #1
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	4b8e      	ldr	r3, [pc, #568]	; (8003310 <data_handler+0x380>)
 80030d8:	701a      	strb	r2, [r3, #0]
				init_crypto();
 80030da:	f000 fc6f 	bl	80039bc <init_crypto>
				init_rand_generator(__HAL_TIM_GetCounter(&htim1));
 80030de:	4b8f      	ldr	r3, [pc, #572]	; (800331c <data_handler+0x38c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	0018      	movs	r0, r3
 80030e8:	f000 feb8 	bl	8003e5c <init_rand_generator>
				if( Prepare_Application_Memory(AppToUpdate) && checkFWSize(total_pck, SECURE_PAYLOAD_LEN, AppToUpdate) ){
 80030ec:	4b88      	ldr	r3, [pc, #544]	; (8003310 <data_handler+0x380>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f7ff fd0f 	bl	8002b14 <Prepare_Application_Memory>
 80030f6:	1e03      	subs	r3, r0, #0
 80030f8:	d011      	beq.n	800311e <data_handler+0x18e>
 80030fa:	4b83      	ldr	r3, [pc, #524]	; (8003308 <data_handler+0x378>)
 80030fc:	8818      	ldrh	r0, [r3, #0]
 80030fe:	4b84      	ldr	r3, [pc, #528]	; (8003310 <data_handler+0x380>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	001a      	movs	r2, r3
 8003104:	210e      	movs	r1, #14
 8003106:	f000 fe57 	bl	8003db8 <checkFWSize>
 800310a:	1e03      	subs	r3, r0, #0
 800310c:	d007      	beq.n	800311e <data_handler+0x18e>
					send_ack(true, WRITE_SECURE_FLASH_PACKET_RESPONSE);
 800310e:	2105      	movs	r1, #5
 8003110:	2001      	movs	r0, #1
 8003112:	f000 fb37 	bl	8003784 <send_ack>
					connection_status = RECEVEING_SECURE_FW;
 8003116:	4b7b      	ldr	r3, [pc, #492]	; (8003304 <data_handler+0x374>)
 8003118:	2203      	movs	r2, #3
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	e011      	b.n	8003142 <data_handler+0x1b2>
					send_ack(false, WRITE_FLASH_PACKET_RESPONSE);
 800311e:	2104      	movs	r1, #4
 8003120:	2000      	movs	r0, #0
 8003122:	f000 fb2f 	bl	8003784 <send_ack>
					printf("Error while preparing the memory for the new firmware. \n\r");
 8003126:	4b7e      	ldr	r3, [pc, #504]	; (8003320 <data_handler+0x390>)
 8003128:	0018      	movs	r0, r3
 800312a:	f006 fdf3 	bl	8009d14 <iprintf>
			break;
 800312e:	e269      	b.n	8003604 <data_handler+0x674>
				send_ack(false, WRITE_FLASH_PACKET_RESPONSE);
 8003130:	2104      	movs	r1, #4
 8003132:	2000      	movs	r0, #0
 8003134:	f000 fb26 	bl	8003784 <send_ack>
				printf("Received an init pck that I can't handle or wrong\n\r");
 8003138:	4b7a      	ldr	r3, [pc, #488]	; (8003324 <data_handler+0x394>)
 800313a:	0018      	movs	r0, r3
 800313c:	f006 fdea 	bl	8009d14 <iprintf>
			break;
 8003140:	e260      	b.n	8003604 <data_handler+0x674>
 8003142:	e25f      	b.n	8003604 <data_handler+0x674>
		case RECEVEING_RAW_FW:

			if(verify_data_type(data_rcv, num_bytes_rcv, WRITE_FLASH_PACKET)){
 8003144:	233b      	movs	r3, #59	; 0x3b
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	7819      	ldrb	r1, [r3, #0]
 800314a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314c:	2202      	movs	r2, #2
 800314e:	0018      	movs	r0, r3
 8003150:	f000 fa80 	bl	8003654 <verify_data_type>
 8003154:	1e03      	subs	r3, r0, #0
 8003156:	d100      	bne.n	800315a <data_handler+0x1ca>
 8003158:	e0a6      	b.n	80032a8 <data_handler+0x318>
				uint16_t pck_num = (data_rcv[1] << 8) + data_rcv[2];
 800315a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315c:	3301      	adds	r3, #1
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	b299      	uxth	r1, r3
 8003166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003168:	3302      	adds	r3, #2
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	b29a      	uxth	r2, r3
 800316e:	2008      	movs	r0, #8
 8003170:	2638      	movs	r6, #56	; 0x38
 8003172:	1983      	adds	r3, r0, r6
 8003174:	19db      	adds	r3, r3, r7
 8003176:	188a      	adds	r2, r1, r2
 8003178:	801a      	strh	r2, [r3, #0]

				if(pck_num == count_pck){
 800317a:	4b6b      	ldr	r3, [pc, #428]	; (8003328 <data_handler+0x398>)
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	1982      	adds	r2, r0, r6
 8003180:	19d2      	adds	r2, r2, r7
 8003182:	8812      	ldrh	r2, [r2, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d000      	beq.n	800318a <data_handler+0x1fa>
 8003188:	e07e      	b.n	8003288 <data_handler+0x2f8>
					// save msg, it will be written in the FLASH

					for(int i=3 ; i<num_bytes_rcv-1 ; i++){
 800318a:	2303      	movs	r3, #3
 800318c:	64bb      	str	r3, [r7, #72]	; 0x48
 800318e:	e072      	b.n	8003276 <data_handler+0x2e6>
						if(byte_pos != 0){
 8003190:	4b66      	ldr	r3, [pc, #408]	; (800332c <data_handler+0x39c>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d02e      	beq.n	80031f6 <data_handler+0x266>
							flash_buff[cont_buff] += ((uint64_t)data_rcv[i] << byte_pos*8) ; // %8 -> 8 uint8_t * 8 = 1 uint64_t
 8003198:	4b65      	ldr	r3, [pc, #404]	; (8003330 <data_handler+0x3a0>)
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	4a65      	ldr	r2, [pc, #404]	; (8003334 <data_handler+0x3a4>)
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	18d3      	adds	r3, r2, r3
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80031a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80031aa:	1841      	adds	r1, r0, r1
 80031ac:	7809      	ldrb	r1, [r1, #0]
 80031ae:	6339      	str	r1, [r7, #48]	; 0x30
 80031b0:	2100      	movs	r1, #0
 80031b2:	6379      	str	r1, [r7, #52]	; 0x34
 80031b4:	495d      	ldr	r1, [pc, #372]	; (800332c <data_handler+0x39c>)
 80031b6:	7809      	ldrb	r1, [r1, #0]
 80031b8:	00c9      	lsls	r1, r1, #3
 80031ba:	0008      	movs	r0, r1
 80031bc:	3820      	subs	r0, #32
 80031be:	2800      	cmp	r0, #0
 80031c0:	db03      	blt.n	80031ca <data_handler+0x23a>
 80031c2:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80031c4:	4086      	lsls	r6, r0
 80031c6:	0035      	movs	r5, r6
 80031c8:	e008      	b.n	80031dc <data_handler+0x24c>
 80031ca:	2020      	movs	r0, #32
 80031cc:	1a40      	subs	r0, r0, r1
 80031ce:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80031d0:	40c6      	lsrs	r6, r0
 80031d2:	0030      	movs	r0, r6
 80031d4:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 80031d6:	408e      	lsls	r6, r1
 80031d8:	0035      	movs	r5, r6
 80031da:	4305      	orrs	r5, r0
 80031dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031de:	4088      	lsls	r0, r1
 80031e0:	0004      	movs	r4, r0
 80031e2:	4953      	ldr	r1, [pc, #332]	; (8003330 <data_handler+0x3a0>)
 80031e4:	8809      	ldrh	r1, [r1, #0]
 80031e6:	1912      	adds	r2, r2, r4
 80031e8:	416b      	adcs	r3, r5
 80031ea:	4852      	ldr	r0, [pc, #328]	; (8003334 <data_handler+0x3a4>)
 80031ec:	00c9      	lsls	r1, r1, #3
 80031ee:	1841      	adds	r1, r0, r1
 80031f0:	600a      	str	r2, [r1, #0]
 80031f2:	604b      	str	r3, [r1, #4]
 80031f4:	e02f      	b.n	8003256 <data_handler+0x2c6>
						}else{
							cont_buff++; // NOTICE it's initialized as (-1) -> OK also for first time
 80031f6:	4b4e      	ldr	r3, [pc, #312]	; (8003330 <data_handler+0x3a0>)
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	3301      	adds	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	4b4c      	ldr	r3, [pc, #304]	; (8003330 <data_handler+0x3a0>)
 8003200:	801a      	strh	r2, [r3, #0]
							flash_buff[cont_buff] = ((uint64_t)data_rcv[i] << byte_pos*8) ; // %8 -> 8 uint8_t * 8 = 1 uint64_t
 8003202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003204:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003206:	18d3      	adds	r3, r2, r3
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
 800320c:	2300      	movs	r3, #0
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003210:	4b46      	ldr	r3, [pc, #280]	; (800332c <data_handler+0x39c>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4a46      	ldr	r2, [pc, #280]	; (8003330 <data_handler+0x3a0>)
 8003218:	8812      	ldrh	r2, [r2, #0]
 800321a:	0011      	movs	r1, r2
 800321c:	001a      	movs	r2, r3
 800321e:	3a20      	subs	r2, #32
 8003220:	2a00      	cmp	r2, #0
 8003222:	db03      	blt.n	800322c <data_handler+0x29c>
 8003224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003226:	4090      	lsls	r0, r2
 8003228:	6278      	str	r0, [r7, #36]	; 0x24
 800322a:	e00a      	b.n	8003242 <data_handler+0x2b2>
 800322c:	2220      	movs	r2, #32
 800322e:	1ad2      	subs	r2, r2, r3
 8003230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003232:	40d0      	lsrs	r0, r2
 8003234:	0002      	movs	r2, r0
 8003236:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003238:	4098      	lsls	r0, r3
 800323a:	6278      	str	r0, [r7, #36]	; 0x24
 800323c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800323e:	4310      	orrs	r0, r2
 8003240:	6278      	str	r0, [r7, #36]	; 0x24
 8003242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003244:	409a      	lsls	r2, r3
 8003246:	623a      	str	r2, [r7, #32]
 8003248:	4a3a      	ldr	r2, [pc, #232]	; (8003334 <data_handler+0x3a4>)
 800324a:	00cb      	lsls	r3, r1, #3
 800324c:	18d3      	adds	r3, r2, r3
 800324e:	6a39      	ldr	r1, [r7, #32]
 8003250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003252:	6019      	str	r1, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
						}
						byte_pos++;
 8003256:	4b35      	ldr	r3, [pc, #212]	; (800332c <data_handler+0x39c>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	3301      	adds	r3, #1
 800325c:	b2da      	uxtb	r2, r3
 800325e:	4b33      	ldr	r3, [pc, #204]	; (800332c <data_handler+0x39c>)
 8003260:	701a      	strb	r2, [r3, #0]
						byte_pos %= 8;
 8003262:	4b32      	ldr	r3, [pc, #200]	; (800332c <data_handler+0x39c>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2207      	movs	r2, #7
 8003268:	4013      	ands	r3, r2
 800326a:	b2da      	uxtb	r2, r3
 800326c:	4b2f      	ldr	r3, [pc, #188]	; (800332c <data_handler+0x39c>)
 800326e:	701a      	strb	r2, [r3, #0]
					for(int i=3 ; i<num_bytes_rcv-1 ; i++){
 8003270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003272:	3301      	adds	r3, #1
 8003274:	64bb      	str	r3, [r7, #72]	; 0x48
 8003276:	233b      	movs	r3, #59	; 0x3b
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	3b01      	subs	r3, #1
 800327e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003280:	429a      	cmp	r2, r3
 8003282:	da00      	bge.n	8003286 <data_handler+0x2f6>
 8003284:	e784      	b.n	8003190 <data_handler+0x200>
 8003286:	e016      	b.n	80032b6 <data_handler+0x326>
					}

				}else{
					printf("Wrong pck_num %d, %d \n\r", pck_num, count_pck);
 8003288:	2308      	movs	r3, #8
 800328a:	2238      	movs	r2, #56	; 0x38
 800328c:	189b      	adds	r3, r3, r2
 800328e:	19db      	adds	r3, r3, r7
 8003290:	8819      	ldrh	r1, [r3, #0]
 8003292:	4b25      	ldr	r3, [pc, #148]	; (8003328 <data_handler+0x398>)
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	001a      	movs	r2, r3
 8003298:	4b27      	ldr	r3, [pc, #156]	; (8003338 <data_handler+0x3a8>)
 800329a:	0018      	movs	r0, r3
 800329c:	f006 fd3a 	bl	8009d14 <iprintf>
					next_ack = false;
 80032a0:	4b26      	ldr	r3, [pc, #152]	; (800333c <data_handler+0x3ac>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	e006      	b.n	80032b6 <data_handler+0x326>
				}

			}else{

				printf("Ricevuto pckt sbagliato \n\r");
 80032a8:	4b25      	ldr	r3, [pc, #148]	; (8003340 <data_handler+0x3b0>)
 80032aa:	0018      	movs	r0, r3
 80032ac:	f006 fd32 	bl	8009d14 <iprintf>
				next_ack = false;
 80032b0:	4b22      	ldr	r3, [pc, #136]	; (800333c <data_handler+0x3ac>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
			}
			count_pck++;
 80032b6:	4b1c      	ldr	r3, [pc, #112]	; (8003328 <data_handler+0x398>)
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	3301      	adds	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <data_handler+0x398>)
 80032c0:	801a      	strh	r2, [r3, #0]

			if(count_pck%RAW_NUM_CUMULATIVE_ACK == 0 || count_pck == total_pck){
 80032c2:	4b19      	ldr	r3, [pc, #100]	; (8003328 <data_handler+0x398>)
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	210a      	movs	r1, #10
 80032c8:	0018      	movs	r0, r3
 80032ca:	f7fe fe67 	bl	8001f9c <__aeabi_uidivmod>
 80032ce:	000b      	movs	r3, r1
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d006      	beq.n	80032e4 <data_handler+0x354>
 80032d6:	4b14      	ldr	r3, [pc, #80]	; (8003328 <data_handler+0x398>)
 80032d8:	881a      	ldrh	r2, [r3, #0]
 80032da:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <data_handler+0x378>)
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d000      	beq.n	80032e4 <data_handler+0x354>
 80032e2:	e18c      	b.n	80035fe <data_handler+0x66e>

				if(next_ack == false){
 80032e4:	4b15      	ldr	r3, [pc, #84]	; (800333c <data_handler+0x3ac>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d12b      	bne.n	8003344 <data_handler+0x3b4>
					count_pck -= RAW_NUM_CUMULATIVE_ACK;    // set back the counter packet
 80032ec:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <data_handler+0x398>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	3b0a      	subs	r3, #10
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <data_handler+0x398>)
 80032f6:	801a      	strh	r2, [r3, #0]
 80032f8:	e038      	b.n	800336c <data_handler+0x3dc>
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	0800ae6c 	.word	0x0800ae6c
 8003300:	0800ae74 	.word	0x0800ae74
 8003304:	20000298 	.word	0x20000298
 8003308:	200003a2 	.word	0x200003a2
 800330c:	0800ae78 	.word	0x0800ae78
 8003310:	2000000e 	.word	0x2000000e
 8003314:	0800ae90 	.word	0x0800ae90
 8003318:	0800aea8 	.word	0x0800aea8
 800331c:	20000428 	.word	0x20000428
 8003320:	0800aeb0 	.word	0x0800aeb0
 8003324:	0800aeec 	.word	0x0800aeec
 8003328:	200003a4 	.word	0x200003a4
 800332c:	200003a0 	.word	0x200003a0
 8003330:	2000000c 	.word	0x2000000c
 8003334:	200002a0 	.word	0x200002a0
 8003338:	0800af20 	.word	0x0800af20
 800333c:	2000000f 	.word	0x2000000f
 8003340:	0800af38 	.word	0x0800af38
				}else{

					if( !Write_FW_to_flash(flash_buff, cont_buff+1) ){ // you can try to save properly since no error found in pckts
 8003344:	4bb4      	ldr	r3, [pc, #720]	; (8003618 <data_handler+0x688>)
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	3301      	adds	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	4bb3      	ldr	r3, [pc, #716]	; (800361c <data_handler+0x68c>)
 800334e:	0011      	movs	r1, r2
 8003350:	0018      	movs	r0, r3
 8003352:	f7ff fb7f 	bl	8002a54 <Write_FW_to_flash>
 8003356:	1e03      	subs	r3, r0, #0
 8003358:	d108      	bne.n	800336c <data_handler+0x3dc>
						next_ack = false;
 800335a:	4bb1      	ldr	r3, [pc, #708]	; (8003620 <data_handler+0x690>)
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
						count_pck -= RAW_NUM_CUMULATIVE_ACK;
 8003360:	4bb0      	ldr	r3, [pc, #704]	; (8003624 <data_handler+0x694>)
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	3b0a      	subs	r3, #10
 8003366:	b29a      	uxth	r2, r3
 8003368:	4bae      	ldr	r3, [pc, #696]	; (8003624 <data_handler+0x694>)
 800336a:	801a      	strh	r2, [r3, #0]

					}

				}

				send_ack(next_ack, WRITE_FLASH_PACKET_RESPONSE);
 800336c:	4bac      	ldr	r3, [pc, #688]	; (8003620 <data_handler+0x690>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2104      	movs	r1, #4
 8003372:	0018      	movs	r0, r3
 8003374:	f000 fa06 	bl	8003784 <send_ack>

				if(count_pck == total_pck){
 8003378:	4baa      	ldr	r3, [pc, #680]	; (8003624 <data_handler+0x694>)
 800337a:	881a      	ldrh	r2, [r3, #0]
 800337c:	4baa      	ldr	r3, [pc, #680]	; (8003628 <data_handler+0x698>)
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d106      	bne.n	8003392 <data_handler+0x402>
					printf("RAW FW Received!\n\r");
 8003384:	4ba9      	ldr	r3, [pc, #676]	; (800362c <data_handler+0x69c>)
 8003386:	0018      	movs	r0, r3
 8003388:	f006 fcc4 	bl	8009d14 <iprintf>
					connection_status = CLOSING_CONNECTION;
 800338c:	4ba8      	ldr	r3, [pc, #672]	; (8003630 <data_handler+0x6a0>)
 800338e:	2204      	movs	r2, #4
 8003390:	701a      	strb	r2, [r3, #0]
				}

				cont_buff = -1;
 8003392:	4ba1      	ldr	r3, [pc, #644]	; (8003618 <data_handler+0x688>)
 8003394:	2201      	movs	r2, #1
 8003396:	4252      	negs	r2, r2
 8003398:	801a      	strh	r2, [r3, #0]
				next_ack = true;
 800339a:	4ba1      	ldr	r3, [pc, #644]	; (8003620 <data_handler+0x690>)
 800339c:	2201      	movs	r2, #1
 800339e:	701a      	strb	r2, [r3, #0]

			}

			break;
 80033a0:	e12d      	b.n	80035fe <data_handler+0x66e>

		case RECEVEING_SECURE_FW:
			if(verify_data_type(data_rcv, num_bytes_rcv, WRITE_SECURE_FLASH_PACKET)){
 80033a2:	233b      	movs	r3, #59	; 0x3b
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	7819      	ldrb	r1, [r3, #0]
 80033a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033aa:	2203      	movs	r2, #3
 80033ac:	0018      	movs	r0, r3
 80033ae:	f000 f951 	bl	8003654 <verify_data_type>
 80033b2:	1e03      	subs	r3, r0, #0
 80033b4:	d100      	bne.n	80033b8 <data_handler+0x428>
 80033b6:	e0b4      	b.n	8003522 <data_handler+0x592>
				// if SECURE
				uint16_t cumulative_pck_num = (data_rcv[0] & 0xf); // ) << 8) + data_rcv[1];
 80033b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	b29a      	uxth	r2, r3
 80033be:	240a      	movs	r4, #10
 80033c0:	2538      	movs	r5, #56	; 0x38
 80033c2:	1963      	adds	r3, r4, r5
 80033c4:	19db      	adds	r3, r3, r7
 80033c6:	210f      	movs	r1, #15
 80033c8:	400a      	ands	r2, r1
 80033ca:	801a      	strh	r2, [r3, #0]

				decrypt_data(&data_rcv[1], 19, data_rcv, 1);
 80033cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ce:	1c58      	adds	r0, r3, #1
 80033d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033d2:	2301      	movs	r3, #1
 80033d4:	2113      	movs	r1, #19
 80033d6:	f000 fb01 	bl	80039dc <decrypt_data>

				if(cumulative_pck_num == count_pck%16){
 80033da:	4b92      	ldr	r3, [pc, #584]	; (8003624 <data_handler+0x694>)
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	220f      	movs	r2, #15
 80033e0:	4013      	ands	r3, r2
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	1962      	adds	r2, r4, r5
 80033e6:	19d2      	adds	r2, r2, r7
 80033e8:	8812      	ldrh	r2, [r2, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d000      	beq.n	80033f0 <data_handler+0x460>
 80033ee:	e086      	b.n	80034fe <data_handler+0x56e>
					// save msg, it will be written in the FLASH
					for(int i=1 ; i<num_bytes_rcv-4 ; i++){
 80033f0:	2301      	movs	r3, #1
 80033f2:	647b      	str	r3, [r7, #68]	; 0x44
 80033f4:	e07a      	b.n	80034ec <data_handler+0x55c>
						if(byte_pos != 0){
 80033f6:	4b8f      	ldr	r3, [pc, #572]	; (8003634 <data_handler+0x6a4>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d034      	beq.n	8003468 <data_handler+0x4d8>
							flash_buff[cont_buff] += ((uint64_t)data_rcv[i] << byte_pos*8) ; // %8 -> 8 uint8_t * 8 = 1 uint64_t
 80033fe:	4b86      	ldr	r3, [pc, #536]	; (8003618 <data_handler+0x688>)
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	4a86      	ldr	r2, [pc, #536]	; (800361c <data_handler+0x68c>)
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	18d3      	adds	r3, r2, r3
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800340e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003410:	1841      	adds	r1, r0, r1
 8003412:	7809      	ldrb	r1, [r1, #0]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	2100      	movs	r1, #0
 8003418:	60f9      	str	r1, [r7, #12]
 800341a:	4986      	ldr	r1, [pc, #536]	; (8003634 <data_handler+0x6a4>)
 800341c:	7809      	ldrb	r1, [r1, #0]
 800341e:	00c9      	lsls	r1, r1, #3
 8003420:	0008      	movs	r0, r1
 8003422:	3820      	subs	r0, #32
 8003424:	2800      	cmp	r0, #0
 8003426:	db03      	blt.n	8003430 <data_handler+0x4a0>
 8003428:	68bc      	ldr	r4, [r7, #8]
 800342a:	4084      	lsls	r4, r0
 800342c:	61fc      	str	r4, [r7, #28]
 800342e:	e00c      	b.n	800344a <data_handler+0x4ba>
 8003430:	2020      	movs	r0, #32
 8003432:	1a40      	subs	r0, r0, r1
 8003434:	68bc      	ldr	r4, [r7, #8]
 8003436:	68fd      	ldr	r5, [r7, #12]
 8003438:	0026      	movs	r6, r4
 800343a:	40c6      	lsrs	r6, r0
 800343c:	0030      	movs	r0, r6
 800343e:	002c      	movs	r4, r5
 8003440:	408c      	lsls	r4, r1
 8003442:	61fc      	str	r4, [r7, #28]
 8003444:	69fc      	ldr	r4, [r7, #28]
 8003446:	4304      	orrs	r4, r0
 8003448:	61fc      	str	r4, [r7, #28]
 800344a:	68b8      	ldr	r0, [r7, #8]
 800344c:	4088      	lsls	r0, r1
 800344e:	61b8      	str	r0, [r7, #24]
 8003450:	4971      	ldr	r1, [pc, #452]	; (8003618 <data_handler+0x688>)
 8003452:	8809      	ldrh	r1, [r1, #0]
 8003454:	69bc      	ldr	r4, [r7, #24]
 8003456:	69fd      	ldr	r5, [r7, #28]
 8003458:	1912      	adds	r2, r2, r4
 800345a:	416b      	adcs	r3, r5
 800345c:	486f      	ldr	r0, [pc, #444]	; (800361c <data_handler+0x68c>)
 800345e:	00c9      	lsls	r1, r1, #3
 8003460:	1841      	adds	r1, r0, r1
 8003462:	600a      	str	r2, [r1, #0]
 8003464:	604b      	str	r3, [r1, #4]
 8003466:	e031      	b.n	80034cc <data_handler+0x53c>
						}else{
							cont_buff++; // NOTICE it's initialized as (-1) -> OK also for first time
 8003468:	4b6b      	ldr	r3, [pc, #428]	; (8003618 <data_handler+0x688>)
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	3301      	adds	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	4b69      	ldr	r3, [pc, #420]	; (8003618 <data_handler+0x688>)
 8003472:	801a      	strh	r2, [r3, #0]
							flash_buff[cont_buff] = ((uint64_t)data_rcv[i] << byte_pos*8) ; // %8 -> 8 uint8_t * 8 = 1 uint64_t
 8003474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003476:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003478:	18d3      	adds	r3, r2, r3
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	603b      	str	r3, [r7, #0]
 800347e:	2300      	movs	r3, #0
 8003480:	607b      	str	r3, [r7, #4]
 8003482:	4b6c      	ldr	r3, [pc, #432]	; (8003634 <data_handler+0x6a4>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4a63      	ldr	r2, [pc, #396]	; (8003618 <data_handler+0x688>)
 800348a:	8812      	ldrh	r2, [r2, #0]
 800348c:	0011      	movs	r1, r2
 800348e:	001a      	movs	r2, r3
 8003490:	3a20      	subs	r2, #32
 8003492:	2a00      	cmp	r2, #0
 8003494:	db03      	blt.n	800349e <data_handler+0x50e>
 8003496:	6838      	ldr	r0, [r7, #0]
 8003498:	4090      	lsls	r0, r2
 800349a:	6178      	str	r0, [r7, #20]
 800349c:	e00c      	b.n	80034b8 <data_handler+0x528>
 800349e:	2220      	movs	r2, #32
 80034a0:	1ad2      	subs	r2, r2, r3
 80034a2:	683c      	ldr	r4, [r7, #0]
 80034a4:	687d      	ldr	r5, [r7, #4]
 80034a6:	0020      	movs	r0, r4
 80034a8:	40d0      	lsrs	r0, r2
 80034aa:	0002      	movs	r2, r0
 80034ac:	0028      	movs	r0, r5
 80034ae:	4098      	lsls	r0, r3
 80034b0:	6178      	str	r0, [r7, #20]
 80034b2:	6978      	ldr	r0, [r7, #20]
 80034b4:	4310      	orrs	r0, r2
 80034b6:	6178      	str	r0, [r7, #20]
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	409a      	lsls	r2, r3
 80034bc:	613a      	str	r2, [r7, #16]
 80034be:	4a57      	ldr	r2, [pc, #348]	; (800361c <data_handler+0x68c>)
 80034c0:	00cb      	lsls	r3, r1, #3
 80034c2:	18d3      	adds	r3, r2, r3
 80034c4:	6939      	ldr	r1, [r7, #16]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	6019      	str	r1, [r3, #0]
 80034ca:	605a      	str	r2, [r3, #4]
						}
						byte_pos++;
 80034cc:	4b59      	ldr	r3, [pc, #356]	; (8003634 <data_handler+0x6a4>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	3301      	adds	r3, #1
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	4b57      	ldr	r3, [pc, #348]	; (8003634 <data_handler+0x6a4>)
 80034d6:	701a      	strb	r2, [r3, #0]
						byte_pos %= 8;
 80034d8:	4b56      	ldr	r3, [pc, #344]	; (8003634 <data_handler+0x6a4>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2207      	movs	r2, #7
 80034de:	4013      	ands	r3, r2
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	4b54      	ldr	r3, [pc, #336]	; (8003634 <data_handler+0x6a4>)
 80034e4:	701a      	strb	r2, [r3, #0]
					for(int i=1 ; i<num_bytes_rcv-4 ; i++){
 80034e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e8:	3301      	adds	r3, #1
 80034ea:	647b      	str	r3, [r7, #68]	; 0x44
 80034ec:	233b      	movs	r3, #59	; 0x3b
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	3b04      	subs	r3, #4
 80034f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034f6:	429a      	cmp	r2, r3
 80034f8:	da00      	bge.n	80034fc <data_handler+0x56c>
 80034fa:	e77c      	b.n	80033f6 <data_handler+0x466>
 80034fc:	e02d      	b.n	800355a <data_handler+0x5ca>
					}

				}else{
					printf("Wrong pck_num %d, %d \n\r", cumulative_pck_num, count_pck%16);
 80034fe:	230a      	movs	r3, #10
 8003500:	2238      	movs	r2, #56	; 0x38
 8003502:	189b      	adds	r3, r3, r2
 8003504:	19db      	adds	r3, r3, r7
 8003506:	8819      	ldrh	r1, [r3, #0]
 8003508:	4b46      	ldr	r3, [pc, #280]	; (8003624 <data_handler+0x694>)
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	001a      	movs	r2, r3
 800350e:	230f      	movs	r3, #15
 8003510:	401a      	ands	r2, r3
 8003512:	4b49      	ldr	r3, [pc, #292]	; (8003638 <data_handler+0x6a8>)
 8003514:	0018      	movs	r0, r3
 8003516:	f006 fbfd 	bl	8009d14 <iprintf>
					next_ack = false;
 800351a:	4b41      	ldr	r3, [pc, #260]	; (8003620 <data_handler+0x690>)
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]
 8003520:	e01b      	b.n	800355a <data_handler+0x5ca>
				}

			}else if(verify_data_type(data_rcv, num_bytes_rcv, MASTER_NAK)){
 8003522:	233b      	movs	r3, #59	; 0x3b
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	7819      	ldrb	r1, [r3, #0]
 8003528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352a:	2206      	movs	r2, #6
 800352c:	0018      	movs	r0, r3
 800352e:	f000 f891 	bl	8003654 <verify_data_type>
 8003532:	1e03      	subs	r3, r0, #0
 8003534:	d00a      	beq.n	800354c <data_handler+0x5bc>
				printf("NAK from MASTER received ! \n\r");
 8003536:	4b41      	ldr	r3, [pc, #260]	; (800363c <data_handler+0x6ac>)
 8003538:	0018      	movs	r0, r3
 800353a:	f006 fbeb 	bl	8009d14 <iprintf>
				send_ack(old_ack, WRITE_SECURE_FLASH_PACKET_RESPONSE);
 800353e:	4b40      	ldr	r3, [pc, #256]	; (8003640 <data_handler+0x6b0>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2105      	movs	r1, #5
 8003544:	0018      	movs	r0, r3
 8003546:	f000 f91d 	bl	8003784 <send_ack>
				break;
 800354a:	e05b      	b.n	8003604 <data_handler+0x674>

			}else{
				printf("Ricevuto pckt sbagliato \n\r");
 800354c:	4b3d      	ldr	r3, [pc, #244]	; (8003644 <data_handler+0x6b4>)
 800354e:	0018      	movs	r0, r3
 8003550:	f006 fbe0 	bl	8009d14 <iprintf>
				next_ack = false;
 8003554:	4b32      	ldr	r3, [pc, #200]	; (8003620 <data_handler+0x690>)
 8003556:	2200      	movs	r2, #0
 8003558:	701a      	strb	r2, [r3, #0]
			}
			count_pck++;
 800355a:	4b32      	ldr	r3, [pc, #200]	; (8003624 <data_handler+0x694>)
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	3301      	adds	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	4b30      	ldr	r3, [pc, #192]	; (8003624 <data_handler+0x694>)
 8003564:	801a      	strh	r2, [r3, #0]

			if(count_pck%SECURE_NUM_CUMULATIVE_ACK == 0 || count_pck == total_pck){
 8003566:	4b2f      	ldr	r3, [pc, #188]	; (8003624 <data_handler+0x694>)
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	220f      	movs	r2, #15
 800356c:	4013      	ands	r3, r2
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <data_handler+0x5f0>
 8003574:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <data_handler+0x694>)
 8003576:	881a      	ldrh	r2, [r3, #0]
 8003578:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <data_handler+0x698>)
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d140      	bne.n	8003602 <data_handler+0x672>

				send_ack(next_ack, WRITE_SECURE_FLASH_PACKET_RESPONSE);
 8003580:	4b27      	ldr	r3, [pc, #156]	; (8003620 <data_handler+0x690>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2105      	movs	r1, #5
 8003586:	0018      	movs	r0, r3
 8003588:	f000 f8fc 	bl	8003784 <send_ack>

				if(next_ack == false){
 800358c:	4b24      	ldr	r3, [pc, #144]	; (8003620 <data_handler+0x690>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d106      	bne.n	80035a2 <data_handler+0x612>
					count_pck -= SECURE_NUM_CUMULATIVE_ACK;    // set back the counter packet
 8003594:	4b23      	ldr	r3, [pc, #140]	; (8003624 <data_handler+0x694>)
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	3b10      	subs	r3, #16
 800359a:	b29a      	uxth	r2, r3
 800359c:	4b21      	ldr	r3, [pc, #132]	; (8003624 <data_handler+0x694>)
 800359e:	801a      	strh	r2, [r3, #0]
 80035a0:	e013      	b.n	80035ca <data_handler+0x63a>
				}else{

					if( !Write_FW_to_flash(flash_buff, cont_buff+1) ){ // you can try to save properly since no error found in pckts
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <data_handler+0x688>)
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	3301      	adds	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <data_handler+0x68c>)
 80035ac:	0011      	movs	r1, r2
 80035ae:	0018      	movs	r0, r3
 80035b0:	f7ff fa50 	bl	8002a54 <Write_FW_to_flash>
 80035b4:	1e03      	subs	r3, r0, #0
 80035b6:	d108      	bne.n	80035ca <data_handler+0x63a>
						next_ack = false;
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <data_handler+0x690>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
						count_pck -= SECURE_NUM_CUMULATIVE_ACK;
 80035be:	4b19      	ldr	r3, [pc, #100]	; (8003624 <data_handler+0x694>)
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	3b10      	subs	r3, #16
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	4b17      	ldr	r3, [pc, #92]	; (8003624 <data_handler+0x694>)
 80035c8:	801a      	strh	r2, [r3, #0]

					}
				}

				if(count_pck == total_pck){
 80035ca:	4b16      	ldr	r3, [pc, #88]	; (8003624 <data_handler+0x694>)
 80035cc:	881a      	ldrh	r2, [r3, #0]
 80035ce:	4b16      	ldr	r3, [pc, #88]	; (8003628 <data_handler+0x698>)
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d106      	bne.n	80035e4 <data_handler+0x654>
					printf("SECURE FW Received!\n\r");
 80035d6:	4b1c      	ldr	r3, [pc, #112]	; (8003648 <data_handler+0x6b8>)
 80035d8:	0018      	movs	r0, r3
 80035da:	f006 fb9b 	bl	8009d14 <iprintf>
					connection_status = CLOSING_CONNECTION;
 80035de:	4b14      	ldr	r3, [pc, #80]	; (8003630 <data_handler+0x6a0>)
 80035e0:	2204      	movs	r2, #4
 80035e2:	701a      	strb	r2, [r3, #0]
				}

				cont_buff = -1;
 80035e4:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <data_handler+0x688>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	4252      	negs	r2, r2
 80035ea:	801a      	strh	r2, [r3, #0]
				next_ack = true;
 80035ec:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <data_handler+0x690>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	701a      	strb	r2, [r3, #0]

			}

			break;
 80035f2:	e006      	b.n	8003602 <data_handler+0x672>

		default:
			printf("Connection status handle not found\n\r");
 80035f4:	4b15      	ldr	r3, [pc, #84]	; (800364c <data_handler+0x6bc>)
 80035f6:	0018      	movs	r0, r3
 80035f8:	f006 fb8c 	bl	8009d14 <iprintf>

			break;
 80035fc:	e002      	b.n	8003604 <data_handler+0x674>
			break;
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	e000      	b.n	8003604 <data_handler+0x674>
			break;
 8003602:	46c0      	nop			; (mov r8, r8)
	}
	fflush(stdout);
 8003604:	4b12      	ldr	r3, [pc, #72]	; (8003650 <data_handler+0x6c0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	0018      	movs	r0, r3
 800360c:	f006 f950 	bl	80098b0 <fflush>

}
 8003610:	46c0      	nop			; (mov r8, r8)
 8003612:	46bd      	mov	sp, r7
 8003614:	b015      	add	sp, #84	; 0x54
 8003616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003618:	2000000c 	.word	0x2000000c
 800361c:	200002a0 	.word	0x200002a0
 8003620:	2000000f 	.word	0x2000000f
 8003624:	200003a4 	.word	0x200003a4
 8003628:	200003a2 	.word	0x200003a2
 800362c:	0800af54 	.word	0x0800af54
 8003630:	20000298 	.word	0x20000298
 8003634:	200003a0 	.word	0x200003a0
 8003638:	0800af20 	.word	0x0800af20
 800363c:	0800af68 	.word	0x0800af68
 8003640:	200003a6 	.word	0x200003a6
 8003644:	0800af38 	.word	0x0800af38
 8003648:	0800af88 	.word	0x0800af88
 800364c:	0800afa0 	.word	0x0800afa0
 8003650:	2000005c 	.word	0x2000005c

08003654 <verify_data_type>:

bool verify_data_type(uint8_t *data_buffer, uint8_t num_bytes, PckType expected_pck){
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	0008      	movs	r0, r1
 800365e:	0011      	movs	r1, r2
 8003660:	1cfb      	adds	r3, r7, #3
 8003662:	1c02      	adds	r2, r0, #0
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	1cbb      	adds	r3, r7, #2
 8003668:	1c0a      	adds	r2, r1, #0
 800366a:	701a      	strb	r2, [r3, #0]
	uint8_t rcv_crc = data_buffer[num_bytes-1];;
 800366c:	1cfb      	adds	r3, r7, #3
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	3b01      	subs	r3, #1
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	18d2      	adds	r2, r2, r3
 8003676:	230e      	movs	r3, #14
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	7812      	ldrb	r2, [r2, #0]
 800367c:	701a      	strb	r2, [r3, #0]

	uint8_t checksum = 0;
 800367e:	230f      	movs	r3, #15
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	2200      	movs	r2, #0
 8003684:	701a      	strb	r2, [r3, #0]

	switch(expected_pck){
 8003686:	1cbb      	adds	r3, r7, #2
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b06      	cmp	r3, #6
 800368c:	d860      	bhi.n	8003750 <verify_data_type+0xfc>
 800368e:	009a      	lsls	r2, r3, #2
 8003690:	4b3a      	ldr	r3, [pc, #232]	; (800377c <verify_data_type+0x128>)
 8003692:	18d3      	adds	r3, r2, r3
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	469f      	mov	pc, r3
		case START_FLASH_MODE:
			/* check cmd and lenght of the msg */
			if(data_buffer[0] != START_FLASH_MODE_CMD || num_bytes != START_FLASH_MODE_LEN)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2bbb      	cmp	r3, #187	; 0xbb
 800369e:	d103      	bne.n	80036a8 <verify_data_type+0x54>
 80036a0:	1cfb      	adds	r3, r7, #3
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b05      	cmp	r3, #5
 80036a6:	d001      	beq.n	80036ac <verify_data_type+0x58>
				return false;
 80036a8:	2300      	movs	r3, #0
 80036aa:	e062      	b.n	8003772 <verify_data_type+0x11e>


			checksum = sum_payload(data_buffer, 2, num_bytes-2); // -2 because sum_payload include end index
 80036ac:	1cfb      	adds	r3, r7, #3
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	3b02      	subs	r3, #2
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	230f      	movs	r3, #15
 80036b6:	18fc      	adds	r4, r7, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2102      	movs	r1, #2
 80036bc:	0018      	movs	r0, r3
 80036be:	f000 f94b 	bl	8003958 <sum_payload>
 80036c2:	0003      	movs	r3, r0
 80036c4:	7023      	strb	r3, [r4, #0]

			break;
 80036c6:	e049      	b.n	800375c <verify_data_type+0x108>

		case START_SECURE_FLASH_MODE:
			/* check cmd and lenght of the msg */
			if(data_buffer[0] != START_SECURE_FLASH_MODE_CMD || num_bytes != START_SECURE_FLASH_MODE_LEN)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2bbc      	cmp	r3, #188	; 0xbc
 80036ce:	d103      	bne.n	80036d8 <verify_data_type+0x84>
 80036d0:	1cfb      	adds	r3, r7, #3
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b05      	cmp	r3, #5
 80036d6:	d001      	beq.n	80036dc <verify_data_type+0x88>
				return false;
 80036d8:	2300      	movs	r3, #0
 80036da:	e04a      	b.n	8003772 <verify_data_type+0x11e>

			checksum = sum_payload(data_buffer, 2, num_bytes-2); // -2 because sum_payload include end index
 80036dc:	1cfb      	adds	r3, r7, #3
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	3b02      	subs	r3, #2
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	230f      	movs	r3, #15
 80036e6:	18fc      	adds	r4, r7, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2102      	movs	r1, #2
 80036ec:	0018      	movs	r0, r3
 80036ee:	f000 f933 	bl	8003958 <sum_payload>
 80036f2:	0003      	movs	r3, r0
 80036f4:	7023      	strb	r3, [r4, #0]

			break;
 80036f6:	e031      	b.n	800375c <verify_data_type+0x108>

		case WRITE_FLASH_PACKET:
			// add controls
			if(data_buffer[0] != WRITE_FLASH_PACKET_CMD)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2bbb      	cmp	r3, #187	; 0xbb
 80036fe:	d001      	beq.n	8003704 <verify_data_type+0xb0>
				return false;
 8003700:	2300      	movs	r3, #0
 8003702:	e036      	b.n	8003772 <verify_data_type+0x11e>

			checksum = sum_payload(data_buffer, 3, num_bytes-2);
 8003704:	1cfb      	adds	r3, r7, #3
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	3b02      	subs	r3, #2
 800370a:	b2da      	uxtb	r2, r3
 800370c:	230f      	movs	r3, #15
 800370e:	18fc      	adds	r4, r7, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2103      	movs	r1, #3
 8003714:	0018      	movs	r0, r3
 8003716:	f000 f91f 	bl	8003958 <sum_payload>
 800371a:	0003      	movs	r3, r0
 800371c:	7023      	strb	r3, [r4, #0]

			break;
 800371e:	e01d      	b.n	800375c <verify_data_type+0x108>

		case WRITE_SECURE_FLASH_PACKET:
			if((data_buffer[0] >> 4) != WRITE_SECURE_FLASH_PACKET_CMD)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b0c      	cmp	r3, #12
 800372a:	d001      	beq.n	8003730 <verify_data_type+0xdc>
				return false;
 800372c:	2300      	movs	r3, #0
 800372e:	e020      	b.n	8003772 <verify_data_type+0x11e>

			return true;
 8003730:	2301      	movs	r3, #1
 8003732:	e01e      	b.n	8003772 <verify_data_type+0x11e>
			break;

		case MASTER_NAK:
			if( (data_buffer[0] >> 4) != NAK_CMD && num_bytes != 1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	d005      	beq.n	800374c <verify_data_type+0xf8>
 8003740:	1cfb      	adds	r3, r7, #3
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d001      	beq.n	800374c <verify_data_type+0xf8>
				return false;
 8003748:	2300      	movs	r3, #0
 800374a:	e012      	b.n	8003772 <verify_data_type+0x11e>

			return true;
 800374c:	2301      	movs	r3, #1
 800374e:	e010      	b.n	8003772 <verify_data_type+0x11e>
			break;

		default:
			printf("Can't verify this data\n\r");
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <verify_data_type+0x12c>)
 8003752:	0018      	movs	r0, r3
 8003754:	f006 fade 	bl	8009d14 <iprintf>

			return false;
 8003758:	2300      	movs	r3, #0
 800375a:	e00a      	b.n	8003772 <verify_data_type+0x11e>
	}

	//printf("ck rcv: %d, clc: %d", rcv_crc, checksum);

	if(checksum == rcv_crc){
 800375c:	230f      	movs	r3, #15
 800375e:	18fa      	adds	r2, r7, r3
 8003760:	230e      	movs	r3, #14
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	7812      	ldrb	r2, [r2, #0]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d101      	bne.n	8003770 <verify_data_type+0x11c>
		return true;
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <verify_data_type+0x11e>
	}else{
		return false;
 8003770:	2300      	movs	r3, #0
	}
}
 8003772:	0018      	movs	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	b005      	add	sp, #20
 8003778:	bd90      	pop	{r4, r7, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	0800b5dc 	.word	0x0800b5dc
 8003780:	0800afc8 	.word	0x0800afc8

08003784 <send_ack>:

uint8_t rand_IV[3] = {0, 0, 0};
void send_ack(bool ack, PckType reply_type){
 8003784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003786:	b091      	sub	sp, #68	; 0x44
 8003788:	af02      	add	r7, sp, #8
 800378a:	0002      	movs	r2, r0
 800378c:	1dfb      	adds	r3, r7, #7
 800378e:	701a      	strb	r2, [r3, #0]
 8003790:	1dbb      	adds	r3, r7, #6
 8003792:	1c0a      	adds	r2, r1, #0
 8003794:	701a      	strb	r2, [r3, #0]
	uint8_t ack_msg;

	old_ack = ack;
 8003796:	4b69      	ldr	r3, [pc, #420]	; (800393c <send_ack+0x1b8>)
 8003798:	1dfa      	adds	r2, r7, #7
 800379a:	7812      	ldrb	r2, [r2, #0]
 800379c:	701a      	strb	r2, [r3, #0]

	if(ack == true){
 800379e:	1dfb      	adds	r3, r7, #7
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d104      	bne.n	80037b0 <send_ack+0x2c>
		ack_msg = ACK_CMD;
 80037a6:	2332      	movs	r3, #50	; 0x32
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	e003      	b.n	80037b8 <send_ack+0x34>
	}else{
		ack_msg = NAK_CMD;
 80037b0:	2332      	movs	r3, #50	; 0x32
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	2201      	movs	r2, #1
 80037b6:	701a      	strb	r2, [r3, #0]
	}

	uint8_t msg_len = 0;
 80037b8:	2333      	movs	r3, #51	; 0x33
 80037ba:	18fb      	adds	r3, r7, r3
 80037bc:	2200      	movs	r2, #0
 80037be:	701a      	strb	r2, [r3, #0]
	switch(reply_type){
 80037c0:	1dbb      	adds	r3, r7, #6
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d002      	beq.n	80037ce <send_ack+0x4a>
 80037c8:	2b05      	cmp	r3, #5
 80037ca:	d02d      	beq.n	8003828 <send_ack+0xa4>
 80037cc:	e0ae      	b.n	800392c <send_ack+0x1a8>
		case WRITE_FLASH_PACKET_RESPONSE:
			msg_len = WRITE_FLASH_PACKET_RESPONSE_LEN;
 80037ce:	2533      	movs	r5, #51	; 0x33
 80037d0:	197b      	adds	r3, r7, r5
 80037d2:	2204      	movs	r2, #4
 80037d4:	701a      	strb	r2, [r3, #0]
			uint8_t msg[WRITE_FLASH_PACKET_RESPONSE_LEN+2];

			msg[0] = ack_msg;
 80037d6:	2332      	movs	r3, #50	; 0x32
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	781a      	ldrb	r2, [r3, #0]
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	187b      	adds	r3, r7, r1
 80037e0:	701a      	strb	r2, [r3, #0]
			msg[1] = (count_pck >> 8) & 0xff;
 80037e2:	4b57      	ldr	r3, [pc, #348]	; (8003940 <send_ack+0x1bc>)
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	0a1b      	lsrs	r3, r3, #8
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	187b      	adds	r3, r7, r1
 80037ee:	705a      	strb	r2, [r3, #1]
			msg[2] = (count_pck & 0xff);
 80037f0:	4b53      	ldr	r3, [pc, #332]	; (8003940 <send_ack+0x1bc>)
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	187b      	adds	r3, r7, r1
 80037f8:	709a      	strb	r2, [r3, #2]
			sprintf((char *)&msg[3], "%02x", sum_payload(msg, 2, 3)); // add also the NULL terminator, not sending
 80037fa:	000c      	movs	r4, r1
 80037fc:	187b      	adds	r3, r7, r1
 80037fe:	2203      	movs	r2, #3
 8003800:	2102      	movs	r1, #2
 8003802:	0018      	movs	r0, r3
 8003804:	f000 f8a8 	bl	8003958 <sum_payload>
 8003808:	0003      	movs	r3, r0
 800380a:	001a      	movs	r2, r3
 800380c:	494d      	ldr	r1, [pc, #308]	; (8003944 <send_ack+0x1c0>)
 800380e:	193b      	adds	r3, r7, r4
 8003810:	3303      	adds	r3, #3
 8003812:	0018      	movs	r0, r3
 8003814:	f006 fb26 	bl	8009e64 <siprintf>
			//msg[3] = sum_payload(msg, 2, 3);

			Update_TX_Char(msg, msg_len);
 8003818:	197b      	adds	r3, r7, r5
 800381a:	781a      	ldrb	r2, [r3, #0]
 800381c:	193b      	adds	r3, r7, r4
 800381e:	0011      	movs	r1, r2
 8003820:	0018      	movs	r0, r3
 8003822:	f000 fc01 	bl	8004028 <Update_TX_Char>
			break;
 8003826:	e085      	b.n	8003934 <send_ack+0x1b0>

		case WRITE_SECURE_FLASH_PACKET_RESPONSE:
			msg_len = WRITE_SECURE_FLASH_PACKET_RESPONSE_LEN;
 8003828:	2333      	movs	r3, #51	; 0x33
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	220a      	movs	r2, #10
 800382e:	701a      	strb	r2, [r3, #0]
			uint8_t msg_crypted[WRITE_SECURE_FLASH_PACKET_RESPONSE_LEN];

			uint8_t plaintext[5] = { (uint8_t) ((count_pck >> 8) & 0xff), (uint8_t) (count_pck & 0xff)};
 8003830:	2418      	movs	r4, #24
 8003832:	193b      	adds	r3, r7, r4
 8003834:	0018      	movs	r0, r3
 8003836:	2305      	movs	r3, #5
 8003838:	001a      	movs	r2, r3
 800383a:	2100      	movs	r1, #0
 800383c:	f006 f980 	bl	8009b40 <memset>
 8003840:	4b3f      	ldr	r3, [pc, #252]	; (8003940 <send_ack+0x1bc>)
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	b29b      	uxth	r3, r3
 8003848:	b2da      	uxtb	r2, r3
 800384a:	193b      	adds	r3, r7, r4
 800384c:	701a      	strb	r2, [r3, #0]
 800384e:	4b3c      	ldr	r3, [pc, #240]	; (8003940 <send_ack+0x1bc>)
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	b2da      	uxtb	r2, r3
 8003854:	193b      	adds	r3, r7, r4
 8003856:	705a      	strb	r2, [r3, #1]

			for(int i=2 ; i<5 ; i++){
 8003858:	2302      	movs	r3, #2
 800385a:	637b      	str	r3, [r7, #52]	; 0x34
 800385c:	e01e      	b.n	800389c <send_ack+0x118>
				rand_IV[i-2] = get_rand_byte();
 800385e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003860:	1e9c      	subs	r4, r3, #2
 8003862:	f000 fb0b 	bl	8003e7c <get_rand_byte>
 8003866:	0003      	movs	r3, r0
 8003868:	001a      	movs	r2, r3
 800386a:	4b37      	ldr	r3, [pc, #220]	; (8003948 <send_ack+0x1c4>)
 800386c:	551a      	strb	r2, [r3, r4]
				plaintext[i] = rand_IV[i-2];
 800386e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003870:	3b02      	subs	r3, #2
 8003872:	4a35      	ldr	r2, [pc, #212]	; (8003948 <send_ack+0x1c4>)
 8003874:	5cd1      	ldrb	r1, [r2, r3]
 8003876:	2318      	movs	r3, #24
 8003878:	18fa      	adds	r2, r7, r3
 800387a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387c:	18d3      	adds	r3, r2, r3
 800387e:	1c0a      	adds	r2, r1, #0
 8003880:	701a      	strb	r2, [r3, #0]
				printf("%d ", rand_IV[i-2]);
 8003882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003884:	3b02      	subs	r3, #2
 8003886:	4a30      	ldr	r2, [pc, #192]	; (8003948 <send_ack+0x1c4>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	001a      	movs	r2, r3
 800388c:	4b2f      	ldr	r3, [pc, #188]	; (800394c <send_ack+0x1c8>)
 800388e:	0011      	movs	r1, r2
 8003890:	0018      	movs	r0, r3
 8003892:	f006 fa3f 	bl	8009d14 <iprintf>
			for(int i=2 ; i<5 ; i++){
 8003896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003898:	3301      	adds	r3, #1
 800389a:	637b      	str	r3, [r7, #52]	; 0x34
 800389c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389e:	2b04      	cmp	r3, #4
 80038a0:	dddd      	ble.n	800385e <send_ack+0xda>
			}
			printf("\n\r");
 80038a2:	4b2b      	ldr	r3, [pc, #172]	; (8003950 <send_ack+0x1cc>)
 80038a4:	0018      	movs	r0, r3
 80038a6:	f006 fa35 	bl	8009d14 <iprintf>

			uint8_t ciphertext[5];
			uint8_t tag[AES_TAG_LEN];

			encrypt_data(plaintext, sizeof(plaintext), &ack_msg, 1 , ciphertext, tag);
 80038aa:	2632      	movs	r6, #50	; 0x32
 80038ac:	19ba      	adds	r2, r7, r6
 80038ae:	2318      	movs	r3, #24
 80038b0:	18f8      	adds	r0, r7, r3
 80038b2:	250c      	movs	r5, #12
 80038b4:	197b      	adds	r3, r7, r5
 80038b6:	9301      	str	r3, [sp, #4]
 80038b8:	2410      	movs	r4, #16
 80038ba:	193b      	adds	r3, r7, r4
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	2301      	movs	r3, #1
 80038c0:	2105      	movs	r1, #5
 80038c2:	f000 f9a5 	bl	8003c10 <encrypt_data>

			msg_crypted[0] = ack_msg;
 80038c6:	19bb      	adds	r3, r7, r6
 80038c8:	781a      	ldrb	r2, [r3, #0]
 80038ca:	2120      	movs	r1, #32
 80038cc:	187b      	adds	r3, r7, r1
 80038ce:	701a      	strb	r2, [r3, #0]
			msg_crypted[1] = ciphertext[0];
 80038d0:	0020      	movs	r0, r4
 80038d2:	183b      	adds	r3, r7, r0
 80038d4:	781a      	ldrb	r2, [r3, #0]
 80038d6:	187b      	adds	r3, r7, r1
 80038d8:	705a      	strb	r2, [r3, #1]
			msg_crypted[2] = ciphertext[1];
 80038da:	183b      	adds	r3, r7, r0
 80038dc:	785a      	ldrb	r2, [r3, #1]
 80038de:	187b      	adds	r3, r7, r1
 80038e0:	709a      	strb	r2, [r3, #2]
			msg_crypted[3] = ciphertext[2];
 80038e2:	183b      	adds	r3, r7, r0
 80038e4:	789a      	ldrb	r2, [r3, #2]
 80038e6:	187b      	adds	r3, r7, r1
 80038e8:	70da      	strb	r2, [r3, #3]
			msg_crypted[4] = ciphertext[3];
 80038ea:	183b      	adds	r3, r7, r0
 80038ec:	78da      	ldrb	r2, [r3, #3]
 80038ee:	187b      	adds	r3, r7, r1
 80038f0:	711a      	strb	r2, [r3, #4]
			msg_crypted[5] = ciphertext[4];
 80038f2:	183b      	adds	r3, r7, r0
 80038f4:	791a      	ldrb	r2, [r3, #4]
 80038f6:	187b      	adds	r3, r7, r1
 80038f8:	715a      	strb	r2, [r3, #5]
			msg_crypted[6] = tag[0];
 80038fa:	197b      	adds	r3, r7, r5
 80038fc:	781a      	ldrb	r2, [r3, #0]
 80038fe:	187b      	adds	r3, r7, r1
 8003900:	719a      	strb	r2, [r3, #6]
			msg_crypted[7] = tag[1];
 8003902:	197b      	adds	r3, r7, r5
 8003904:	785a      	ldrb	r2, [r3, #1]
 8003906:	187b      	adds	r3, r7, r1
 8003908:	71da      	strb	r2, [r3, #7]
			msg_crypted[8] = tag[2];
 800390a:	197b      	adds	r3, r7, r5
 800390c:	789a      	ldrb	r2, [r3, #2]
 800390e:	187b      	adds	r3, r7, r1
 8003910:	721a      	strb	r2, [r3, #8]
			msg_crypted[9] = tag[3];
 8003912:	197b      	adds	r3, r7, r5
 8003914:	78da      	ldrb	r2, [r3, #3]
 8003916:	187b      	adds	r3, r7, r1
 8003918:	725a      	strb	r2, [r3, #9]

			Update_TX_Char(msg_crypted, msg_len);
 800391a:	2333      	movs	r3, #51	; 0x33
 800391c:	18fb      	adds	r3, r7, r3
 800391e:	781a      	ldrb	r2, [r3, #0]
 8003920:	187b      	adds	r3, r7, r1
 8003922:	0011      	movs	r1, r2
 8003924:	0018      	movs	r0, r3
 8003926:	f000 fb7f 	bl	8004028 <Update_TX_Char>

			break;
 800392a:	e003      	b.n	8003934 <send_ack+0x1b0>

		default:
			printf("Can't handle the reply_type\n\r");
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <send_ack+0x1d0>)
 800392e:	0018      	movs	r0, r3
 8003930:	f006 f9f0 	bl	8009d14 <iprintf>
			return;
			break;
	}

}
 8003934:	46bd      	mov	sp, r7
 8003936:	b00f      	add	sp, #60	; 0x3c
 8003938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	200003a6 	.word	0x200003a6
 8003940:	200003a4 	.word	0x200003a4
 8003944:	0800ae6c 	.word	0x0800ae6c
 8003948:	200003a8 	.word	0x200003a8
 800394c:	0800afe4 	.word	0x0800afe4
 8003950:	0800ae74 	.word	0x0800ae74
 8003954:	0800afe8 	.word	0x0800afe8

08003958 <sum_payload>:


uint8_t sum_payload(uint8_t *payload, uint8_t start, uint8_t end){
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	0008      	movs	r0, r1
 8003962:	0011      	movs	r1, r2
 8003964:	1cfb      	adds	r3, r7, #3
 8003966:	1c02      	adds	r2, r0, #0
 8003968:	701a      	strb	r2, [r3, #0]
 800396a:	1cbb      	adds	r3, r7, #2
 800396c:	1c0a      	adds	r2, r1, #0
 800396e:	701a      	strb	r2, [r3, #0]
	uint8_t sum = 0;
 8003970:	230f      	movs	r3, #15
 8003972:	18fb      	adds	r3, r7, r3
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]

	for(int i=start; i<=end ;i++){
 8003978:	1cfb      	adds	r3, r7, #3
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	e00c      	b.n	800399a <sum_payload+0x42>
		sum += payload[i];
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	18d3      	adds	r3, r2, r3
 8003986:	7819      	ldrb	r1, [r3, #0]
 8003988:	220f      	movs	r2, #15
 800398a:	18bb      	adds	r3, r7, r2
 800398c:	18ba      	adds	r2, r7, r2
 800398e:	7812      	ldrb	r2, [r2, #0]
 8003990:	188a      	adds	r2, r1, r2
 8003992:	701a      	strb	r2, [r3, #0]
	for(int i=start; i<=end ;i++){
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	3301      	adds	r3, #1
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	1cbb      	adds	r3, r7, #2
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	dded      	ble.n	8003980 <sum_payload+0x28>
	}
	sum = sum & 0xff;
 80039a4:	210f      	movs	r1, #15
 80039a6:	187b      	adds	r3, r7, r1
 80039a8:	187a      	adds	r2, r7, r1
 80039aa:	7812      	ldrb	r2, [r2, #0]
 80039ac:	701a      	strb	r2, [r3, #0]

	return sum;
 80039ae:	187b      	adds	r3, r7, r1
 80039b0:	781b      	ldrb	r3, [r3, #0]
}
 80039b2:	0018      	movs	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b004      	add	sp, #16
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <init_crypto>:

void init_crypto(){
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0

	if (cmox_initialize(NULL) != CMOX_INIT_SUCCESS)
 80039c0:	2000      	movs	r0, #0
 80039c2:	f7fd f8eb 	bl	8000b9c <cmox_initialize>
 80039c6:	1e03      	subs	r3, r0, #0
 80039c8:	d003      	beq.n	80039d2 <init_crypto+0x16>
	{
		printf("CRYPTO ERROR\r\n");
 80039ca:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <init_crypto+0x1c>)
 80039cc:	0018      	movs	r0, r3
 80039ce:	f006 fa2d 	bl	8009e2c <puts>
	}
}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	0800b008 	.word	0x0800b008

080039dc <decrypt_data>:

/* should receive payload  and tag */
void decrypt_data(uint8_t *ciphertext, uint8_t ciphertext_len, uint8_t *add_data, uint8_t add_data_len){
 80039dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039de:	46c6      	mov	lr, r8
 80039e0:	b500      	push	{lr}
 80039e2:	b096      	sub	sp, #88	; 0x58
 80039e4:	af08      	add	r7, sp, #32
 80039e6:	6278      	str	r0, [r7, #36]	; 0x24
 80039e8:	0008      	movs	r0, r1
 80039ea:	61fa      	str	r2, [r7, #28]
 80039ec:	0019      	movs	r1, r3
 80039ee:	230b      	movs	r3, #11
 80039f0:	001e      	movs	r6, r3
 80039f2:	2218      	movs	r2, #24
 80039f4:	189b      	adds	r3, r3, r2
 80039f6:	19db      	adds	r3, r3, r7
 80039f8:	1c02      	adds	r2, r0, #0
 80039fa:	701a      	strb	r2, [r3, #0]
 80039fc:	220a      	movs	r2, #10
 80039fe:	2018      	movs	r0, #24
 8003a00:	1813      	adds	r3, r2, r0
 8003a02:	19db      	adds	r3, r3, r7
 8003a04:	1c0a      	adds	r2, r1, #0
 8003a06:	701a      	strb	r2, [r3, #0]
 8003a08:	466b      	mov	r3, sp
 8003a0a:	4698      	mov	r8, r3
	cmox_cipher_retval_t retval;
	uint8_t Computed_Plaintext[ciphertext_len];
 8003a0c:	0033      	movs	r3, r6
 8003a0e:	181b      	adds	r3, r3, r0
 8003a10:	19db      	adds	r3, r3, r7
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	001a      	movs	r2, r3
 8003a16:	3a01      	subs	r2, #1
 8003a18:	637a      	str	r2, [r7, #52]	; 0x34
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	60fa      	str	r2, [r7, #12]
 8003a20:	68b8      	ldr	r0, [r7, #8]
 8003a22:	68f9      	ldr	r1, [r7, #12]
 8003a24:	0002      	movs	r2, r0
 8003a26:	0f52      	lsrs	r2, r2, #29
 8003a28:	000e      	movs	r6, r1
 8003a2a:	00f6      	lsls	r6, r6, #3
 8003a2c:	617e      	str	r6, [r7, #20]
 8003a2e:	697e      	ldr	r6, [r7, #20]
 8003a30:	4316      	orrs	r6, r2
 8003a32:	617e      	str	r6, [r7, #20]
 8003a34:	0002      	movs	r2, r0
 8003a36:	00d2      	lsls	r2, r2, #3
 8003a38:	613a      	str	r2, [r7, #16]
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	6838      	ldr	r0, [r7, #0]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	0002      	movs	r2, r0
 8003a46:	0f52      	lsrs	r2, r2, #29
 8003a48:	000e      	movs	r6, r1
 8003a4a:	00f5      	lsls	r5, r6, #3
 8003a4c:	4315      	orrs	r5, r2
 8003a4e:	0002      	movs	r2, r0
 8003a50:	00d4      	lsls	r4, r2, #3
 8003a52:	3307      	adds	r3, #7
 8003a54:	08db      	lsrs	r3, r3, #3
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	466a      	mov	r2, sp
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	469d      	mov	sp, r3
 8003a5e:	ab08      	add	r3, sp, #32
 8003a60:	3300      	adds	r3, #0
 8003a62:	633b      	str	r3, [r7, #48]	; 0x30
	size_t computed_size;

	// calc new IV could use also SHA

	IV[(rand_IV[0] >> 4)%IV_LEN] = ( IV[(rand_IV[0] >> 4)%IV_LEN] + (rand_IV[0] & 0x0f) ) % 256;
 8003a64:	4b61      	ldr	r3, [pc, #388]	; (8003bec <decrypt_data+0x210>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	210c      	movs	r1, #12
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f7fe fa94 	bl	8001f9c <__aeabi_uidivmod>
 8003a74:	000b      	movs	r3, r1
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	001a      	movs	r2, r3
 8003a7a:	4b5d      	ldr	r3, [pc, #372]	; (8003bf0 <decrypt_data+0x214>)
 8003a7c:	5c9b      	ldrb	r3, [r3, r2]
 8003a7e:	001a      	movs	r2, r3
 8003a80:	4b5a      	ldr	r3, [pc, #360]	; (8003bec <decrypt_data+0x210>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	0019      	movs	r1, r3
 8003a86:	230f      	movs	r3, #15
 8003a88:	400b      	ands	r3, r1
 8003a8a:	18d3      	adds	r3, r2, r3
 8003a8c:	4a59      	ldr	r2, [pc, #356]	; (8003bf4 <decrypt_data+0x218>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d503      	bpl.n	8003a9a <decrypt_data+0xbe>
 8003a92:	3b01      	subs	r3, #1
 8003a94:	4a58      	ldr	r2, [pc, #352]	; (8003bf8 <decrypt_data+0x21c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	3301      	adds	r3, #1
 8003a9a:	001c      	movs	r4, r3
 8003a9c:	4b53      	ldr	r3, [pc, #332]	; (8003bec <decrypt_data+0x210>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	210c      	movs	r1, #12
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f7fe fa78 	bl	8001f9c <__aeabi_uidivmod>
 8003aac:	000b      	movs	r3, r1
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	001a      	movs	r2, r3
 8003ab2:	b2e1      	uxtb	r1, r4
 8003ab4:	4b4e      	ldr	r3, [pc, #312]	; (8003bf0 <decrypt_data+0x214>)
 8003ab6:	5499      	strb	r1, [r3, r2]
	IV[(rand_IV[1] >> 4)%IV_LEN] = ( IV[(rand_IV[1] >> 4)%IV_LEN] + (rand_IV[1] & 0x0f) ) % 256;
 8003ab8:	4b4c      	ldr	r3, [pc, #304]	; (8003bec <decrypt_data+0x210>)
 8003aba:	785b      	ldrb	r3, [r3, #1]
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	210c      	movs	r1, #12
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f7fe fa6a 	bl	8001f9c <__aeabi_uidivmod>
 8003ac8:	000b      	movs	r3, r1
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	001a      	movs	r2, r3
 8003ace:	4b48      	ldr	r3, [pc, #288]	; (8003bf0 <decrypt_data+0x214>)
 8003ad0:	5c9b      	ldrb	r3, [r3, r2]
 8003ad2:	001a      	movs	r2, r3
 8003ad4:	4b45      	ldr	r3, [pc, #276]	; (8003bec <decrypt_data+0x210>)
 8003ad6:	785b      	ldrb	r3, [r3, #1]
 8003ad8:	0019      	movs	r1, r3
 8003ada:	230f      	movs	r3, #15
 8003adc:	400b      	ands	r3, r1
 8003ade:	18d3      	adds	r3, r2, r3
 8003ae0:	4a44      	ldr	r2, [pc, #272]	; (8003bf4 <decrypt_data+0x218>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d503      	bpl.n	8003aee <decrypt_data+0x112>
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	4a43      	ldr	r2, [pc, #268]	; (8003bf8 <decrypt_data+0x21c>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	3301      	adds	r3, #1
 8003aee:	001c      	movs	r4, r3
 8003af0:	4b3e      	ldr	r3, [pc, #248]	; (8003bec <decrypt_data+0x210>)
 8003af2:	785b      	ldrb	r3, [r3, #1]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	210c      	movs	r1, #12
 8003afa:	0018      	movs	r0, r3
 8003afc:	f7fe fa4e 	bl	8001f9c <__aeabi_uidivmod>
 8003b00:	000b      	movs	r3, r1
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	001a      	movs	r2, r3
 8003b06:	b2e1      	uxtb	r1, r4
 8003b08:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <decrypt_data+0x214>)
 8003b0a:	5499      	strb	r1, [r3, r2]
	IV[(rand_IV[2] >> 4)%IV_LEN] = ( IV[(rand_IV[2] >> 4)%IV_LEN] + (rand_IV[2] & 0x0f) ) % 256;
 8003b0c:	4b37      	ldr	r3, [pc, #220]	; (8003bec <decrypt_data+0x210>)
 8003b0e:	789b      	ldrb	r3, [r3, #2]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	210c      	movs	r1, #12
 8003b16:	0018      	movs	r0, r3
 8003b18:	f7fe fa40 	bl	8001f9c <__aeabi_uidivmod>
 8003b1c:	000b      	movs	r3, r1
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	001a      	movs	r2, r3
 8003b22:	4b33      	ldr	r3, [pc, #204]	; (8003bf0 <decrypt_data+0x214>)
 8003b24:	5c9b      	ldrb	r3, [r3, r2]
 8003b26:	001a      	movs	r2, r3
 8003b28:	4b30      	ldr	r3, [pc, #192]	; (8003bec <decrypt_data+0x210>)
 8003b2a:	789b      	ldrb	r3, [r3, #2]
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	230f      	movs	r3, #15
 8003b30:	400b      	ands	r3, r1
 8003b32:	18d3      	adds	r3, r2, r3
 8003b34:	4a2f      	ldr	r2, [pc, #188]	; (8003bf4 <decrypt_data+0x218>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	d503      	bpl.n	8003b42 <decrypt_data+0x166>
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	4a2e      	ldr	r2, [pc, #184]	; (8003bf8 <decrypt_data+0x21c>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	3301      	adds	r3, #1
 8003b42:	001c      	movs	r4, r3
 8003b44:	4b29      	ldr	r3, [pc, #164]	; (8003bec <decrypt_data+0x210>)
 8003b46:	789b      	ldrb	r3, [r3, #2]
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	210c      	movs	r1, #12
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f7fe fa24 	bl	8001f9c <__aeabi_uidivmod>
 8003b54:	000b      	movs	r3, r1
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	001a      	movs	r2, r3
 8003b5a:	b2e1      	uxtb	r1, r4
 8003b5c:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <decrypt_data+0x214>)
 8003b5e:	5499      	strb	r1, [r3, r2]
	//printf("%d, %d, %d e val: %d\n\r",rand_IV[0] ,(rand_IV[0] >> 4)%IV_LEN, (rand_IV[0] & 0x0f) , IV[(rand_IV[0] >> 4)%IV_LEN]);
	//printf("%d, %d, %d e val: %d\n\r",rand_IV[1] ,(rand_IV[1] >> 4)%IV_LEN, (rand_IV[1] & 0x0f) , IV[(rand_IV[1] >> 4)%IV_LEN]);
	//printf("%d, %d, %d e val: %d\n\r",rand_IV[2] ,(rand_IV[2] >> 4)%IV_LEN, (rand_IV[2] & 0x0f) , IV[(rand_IV[2] >> 4)%IV_LEN]);


	retval = cmox_aead_decrypt(CMOX_AES_GCM_DEC_ALGO,                  /* Use AES GCM algorithm */
 8003b60:	4b26      	ldr	r3, [pc, #152]	; (8003bfc <decrypt_data+0x220>)
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	230b      	movs	r3, #11
 8003b66:	2518      	movs	r5, #24
 8003b68:	195b      	adds	r3, r3, r5
 8003b6a:	19db      	adds	r3, r3, r7
 8003b6c:	781c      	ldrb	r4, [r3, #0]
 8003b6e:	230a      	movs	r3, #10
 8003b70:	195b      	adds	r3, r3, r5
 8003b72:	19db      	adds	r3, r3, r7
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b78:	2210      	movs	r2, #16
 8003b7a:	1952      	adds	r2, r2, r5
 8003b7c:	19d2      	adds	r2, r2, r7
 8003b7e:	9207      	str	r2, [sp, #28]
 8003b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b82:	9206      	str	r2, [sp, #24]
 8003b84:	9305      	str	r3, [sp, #20]
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	9304      	str	r3, [sp, #16]
 8003b8a:	230c      	movs	r3, #12
 8003b8c:	9303      	str	r3, [sp, #12]
 8003b8e:	4b18      	ldr	r3, [pc, #96]	; (8003bf0 <decrypt_data+0x214>)
 8003b90:	9302      	str	r3, [sp, #8]
 8003b92:	2320      	movs	r3, #32
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <decrypt_data+0x224>)
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	0022      	movs	r2, r4
 8003b9e:	f7fc faf3 	bl	8000188 <cmox_aead_decrypt>
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
	                             IV, sizeof(IV),                       /* Initialization vector */
	                             add_data, add_data_len,               /* Additional authenticated data */
	                             Computed_Plaintext, &computed_size);  /* Data buffer to receive generated plaintext */

	  /* Verify API returned value -> decryption and tag verification successfull */
	  if (retval != CMOX_CIPHER_AUTH_SUCCESS)
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba8:	4a16      	ldr	r2, [pc, #88]	; (8003c04 <decrypt_data+0x228>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d003      	beq.n	8003bb6 <decrypt_data+0x1da>
	  {
		  printf("Tag check fallito\n\r");
 8003bae:	4b16      	ldr	r3, [pc, #88]	; (8003c08 <decrypt_data+0x22c>)
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f006 f8af 	bl	8009d14 <iprintf>
	  }

	  /* Verify generated data size is the expected one */
	  if (computed_size != ciphertext_len - AES_TAG_LEN)
 8003bb6:	230b      	movs	r3, #11
 8003bb8:	2218      	movs	r2, #24
 8003bba:	189b      	adds	r3, r3, r2
 8003bbc:	19db      	adds	r3, r3, r7
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	3b04      	subs	r3, #4
 8003bc2:	001a      	movs	r2, r3
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d003      	beq.n	8003bd2 <decrypt_data+0x1f6>
	  {
	      printf("Decryption error\n\r");
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <decrypt_data+0x230>)
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f006 f8a1 	bl	8009d14 <iprintf>
	  }

	  memcpy(ciphertext, Computed_Plaintext, computed_size);
 8003bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f005 ffa8 	bl	8009b2e <memcpy>
 8003bde:	46c5      	mov	sp, r8
}
 8003be0:	46c0      	nop			; (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b00e      	add	sp, #56	; 0x38
 8003be6:	bc80      	pop	{r7}
 8003be8:	46b8      	mov	r8, r7
 8003bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bec:	200003a8 	.word	0x200003a8
 8003bf0:	20000010 	.word	0x20000010
 8003bf4:	800000ff 	.word	0x800000ff
 8003bf8:	ffffff00 	.word	0xffffff00
 8003bfc:	0800b300 	.word	0x0800b300
 8003c00:	0800b5bc 	.word	0x0800b5bc
 8003c04:	0001c726 	.word	0x0001c726
 8003c08:	0800b018 	.word	0x0800b018
 8003c0c:	0800b02c 	.word	0x0800b02c

08003c10 <encrypt_data>:
/*
 * NOTE: ciphertext should be long: sizeof(plaintext) while tag: AES_TAG_LEN
 *
 * 		UNITA PLAINTEXT
 */
void encrypt_data(uint8_t *plaintext, uint8_t plaintext_len, uint8_t *add_data, uint8_t add_data_len, uint8_t *ciphertext, uint8_t *tag){
 8003c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c12:	b099      	sub	sp, #100	; 0x64
 8003c14:	af08      	add	r7, sp, #32
 8003c16:	6278      	str	r0, [r7, #36]	; 0x24
 8003c18:	0008      	movs	r0, r1
 8003c1a:	61fa      	str	r2, [r7, #28]
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	230b      	movs	r3, #11
 8003c20:	2218      	movs	r2, #24
 8003c22:	189b      	adds	r3, r3, r2
 8003c24:	19db      	adds	r3, r3, r7
 8003c26:	1c02      	adds	r2, r0, #0
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	220a      	movs	r2, #10
 8003c2c:	2318      	movs	r3, #24
 8003c2e:	18d3      	adds	r3, r2, r3
 8003c30:	19db      	adds	r3, r3, r7
 8003c32:	1c0a      	adds	r2, r1, #0
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	466b      	mov	r3, sp
 8003c38:	001e      	movs	r6, r3
	cmox_cipher_retval_t retval;
	uint8_t Computed_Ciphertext[plaintext_len + AES_TAG_LEN];
 8003c3a:	230b      	movs	r3, #11
 8003c3c:	2218      	movs	r2, #24
 8003c3e:	189b      	adds	r3, r3, r2
 8003c40:	19db      	adds	r3, r3, r7
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	3304      	adds	r3, #4
 8003c46:	1e5a      	subs	r2, r3, #1
 8003c48:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c4a:	001a      	movs	r2, r3
 8003c4c:	0014      	movs	r4, r2
 8003c4e:	2200      	movs	r2, #0
 8003c50:	0015      	movs	r5, r2
 8003c52:	0020      	movs	r0, r4
 8003c54:	0029      	movs	r1, r5
 8003c56:	0004      	movs	r4, r0
 8003c58:	0f62      	lsrs	r2, r4, #29
 8003c5a:	000c      	movs	r4, r1
 8003c5c:	00e4      	lsls	r4, r4, #3
 8003c5e:	617c      	str	r4, [r7, #20]
 8003c60:	697c      	ldr	r4, [r7, #20]
 8003c62:	4314      	orrs	r4, r2
 8003c64:	617c      	str	r4, [r7, #20]
 8003c66:	0001      	movs	r1, r0
 8003c68:	00c9      	lsls	r1, r1, #3
 8003c6a:	6139      	str	r1, [r7, #16]
 8003c6c:	001a      	movs	r2, r3
 8003c6e:	603a      	str	r2, [r7, #0]
 8003c70:	2200      	movs	r2, #0
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	6838      	ldr	r0, [r7, #0]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	0004      	movs	r4, r0
 8003c7a:	0f62      	lsrs	r2, r4, #29
 8003c7c:	000c      	movs	r4, r1
 8003c7e:	00e4      	lsls	r4, r4, #3
 8003c80:	60fc      	str	r4, [r7, #12]
 8003c82:	68fc      	ldr	r4, [r7, #12]
 8003c84:	4314      	orrs	r4, r2
 8003c86:	60fc      	str	r4, [r7, #12]
 8003c88:	0001      	movs	r1, r0
 8003c8a:	00ca      	lsls	r2, r1, #3
 8003c8c:	60ba      	str	r2, [r7, #8]
 8003c8e:	3307      	adds	r3, #7
 8003c90:	08db      	lsrs	r3, r3, #3
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4669      	mov	r1, sp
 8003c96:	1ac9      	subs	r1, r1, r3
 8003c98:	468d      	mov	sp, r1
 8003c9a:	ab08      	add	r3, sp, #32
 8003c9c:	3300      	adds	r3, #0
 8003c9e:	637b      	str	r3, [r7, #52]	; 0x34
	size_t computed_size;

	if(plaintext_len + add_data_len + AES_TAG_LEN > 20){
 8003ca0:	230b      	movs	r3, #11
 8003ca2:	2218      	movs	r2, #24
 8003ca4:	189b      	adds	r3, r3, r2
 8003ca6:	19db      	adds	r3, r3, r7
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	230a      	movs	r3, #10
 8003cac:	2118      	movs	r1, #24
 8003cae:	185b      	adds	r3, r3, r1
 8003cb0:	19db      	adds	r3, r3, r7
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	18d3      	adds	r3, r2, r3
 8003cb6:	2b10      	cmp	r3, #16
 8003cb8:	dd05      	ble.n	8003cc6 <encrypt_data+0xb6>
		printf("Message Length Not Supported by BLE\n\r");
 8003cba:	4b39      	ldr	r3, [pc, #228]	; (8003da0 <encrypt_data+0x190>)
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f006 f829 	bl	8009d14 <iprintf>
 8003cc2:	46b5      	mov	sp, r6
 8003cc4:	e069      	b.n	8003d9a <encrypt_data+0x18a>
		return;
	}

	if(plaintext_len < 16){
 8003cc6:	220b      	movs	r2, #11
 8003cc8:	2318      	movs	r3, #24
 8003cca:	18d3      	adds	r3, r2, r3
 8003ccc:	19db      	adds	r3, r3, r7
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b0f      	cmp	r3, #15
 8003cd2:	d810      	bhi.n	8003cf6 <encrypt_data+0xe6>
		for(int i=plaintext_len ; i<16 ; i++){
 8003cd4:	2318      	movs	r3, #24
 8003cd6:	18d3      	adds	r3, r2, r3
 8003cd8:	19db      	adds	r3, r3, r7
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cde:	e007      	b.n	8003cf0 <encrypt_data+0xe0>
			plaintext[i] = 0x00;
 8003ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	18d3      	adds	r3, r2, r3
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	701a      	strb	r2, [r3, #0]
		for(int i=plaintext_len ; i<16 ; i++){
 8003cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cec:	3301      	adds	r3, #1
 8003cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf2:	2b0f      	cmp	r3, #15
 8003cf4:	ddf4      	ble.n	8003ce0 <encrypt_data+0xd0>
		}
	}


	retval = cmox_aead_encrypt(CMOX_AES_GCM_ENC_ALGO,                  	/* Use AES GCM algorithm */
 8003cf6:	4b2b      	ldr	r3, [pc, #172]	; (8003da4 <encrypt_data+0x194>)
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	230b      	movs	r3, #11
 8003cfc:	2218      	movs	r2, #24
 8003cfe:	189b      	adds	r3, r3, r2
 8003d00:	19db      	adds	r3, r3, r7
 8003d02:	781c      	ldrb	r4, [r3, #0]
 8003d04:	230a      	movs	r3, #10
 8003d06:	2218      	movs	r2, #24
 8003d08:	189b      	adds	r3, r3, r2
 8003d0a:	19db      	adds	r3, r3, r7
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d10:	2214      	movs	r2, #20
 8003d12:	2518      	movs	r5, #24
 8003d14:	1952      	adds	r2, r2, r5
 8003d16:	19d2      	adds	r2, r2, r7
 8003d18:	9207      	str	r2, [sp, #28]
 8003d1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d1c:	9206      	str	r2, [sp, #24]
 8003d1e:	9305      	str	r3, [sp, #20]
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	9304      	str	r3, [sp, #16]
 8003d24:	230c      	movs	r3, #12
 8003d26:	9303      	str	r3, [sp, #12]
 8003d28:	4b1f      	ldr	r3, [pc, #124]	; (8003da8 <encrypt_data+0x198>)
 8003d2a:	9302      	str	r3, [sp, #8]
 8003d2c:	2320      	movs	r3, #32
 8003d2e:	9301      	str	r3, [sp, #4]
 8003d30:	4b1e      	ldr	r3, [pc, #120]	; (8003dac <encrypt_data+0x19c>)
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	2304      	movs	r3, #4
 8003d36:	0022      	movs	r2, r4
 8003d38:	f7fc f9e6 	bl	8000108 <cmox_aead_encrypt>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	633b      	str	r3, [r7, #48]	; 0x30
	                             Computed_Ciphertext, &computed_size);  /* Data buffer to receive generated ciphertext
	                                                                        and authentication tag */


	/* Verify API returned value -> encryption and tag generation successful */
	if (retval != CMOX_CIPHER_SUCCESS)
 8003d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d42:	2380      	movs	r3, #128	; 0x80
 8003d44:	025b      	lsls	r3, r3, #9
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d003      	beq.n	8003d52 <encrypt_data+0x142>
	{
	    printf("Encryption and tag generation failed");
 8003d4a:	4b19      	ldr	r3, [pc, #100]	; (8003db0 <encrypt_data+0x1a0>)
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f005 ffe1 	bl	8009d14 <iprintf>
	}

	/* Verify generated data size is the expected one */
	if (computed_size != (plaintext_len + AES_TAG_LEN))
 8003d52:	230b      	movs	r3, #11
 8003d54:	2218      	movs	r2, #24
 8003d56:	189b      	adds	r3, r3, r2
 8003d58:	19db      	adds	r3, r3, r7
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	001a      	movs	r2, r3
 8003d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d003      	beq.n	8003d6e <encrypt_data+0x15e>
	{
	  printf("Error in the computation of ciphertext and tag\n\r");
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <encrypt_data+0x1a4>)
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f005 ffd3 	bl	8009d14 <iprintf>
	}

	  memcpy(ciphertext, Computed_Ciphertext, plaintext_len);
 8003d6e:	240b      	movs	r4, #11
 8003d70:	2318      	movs	r3, #24
 8003d72:	18e3      	adds	r3, r4, r3
 8003d74:	19db      	adds	r3, r3, r7
 8003d76:	781a      	ldrb	r2, [r3, #0]
 8003d78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f005 fed6 	bl	8009b2e <memcpy>
	  memcpy(tag, &Computed_Ciphertext[plaintext_len], AES_TAG_LEN);
 8003d82:	2318      	movs	r3, #24
 8003d84:	18e3      	adds	r3, r4, r3
 8003d86:	19db      	adds	r3, r3, r7
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d8c:	18d1      	adds	r1, r2, r3
 8003d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d90:	2204      	movs	r2, #4
 8003d92:	0018      	movs	r0, r3
 8003d94:	f005 fecb 	bl	8009b2e <memcpy>
 8003d98:	46b5      	mov	sp, r6
	  		for(int i=0; i<IV_LEN ; i++){
	  			printf("%02x", IV[i]);
	  		}
	  	printf("\n\r");
	  	*/
}
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b011      	add	sp, #68	; 0x44
 8003d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003da0:	0800b040 	.word	0x0800b040
 8003da4:	0800b30c 	.word	0x0800b30c
 8003da8:	20000010 	.word	0x20000010
 8003dac:	0800b5bc 	.word	0x0800b5bc
 8003db0:	0800b068 	.word	0x0800b068
 8003db4:	0800b090 	.word	0x0800b090

08003db8 <checkFWSize>:

bool checkFWSize(uint16_t num_pckts, uint8_t fw_payload_len, FlashAppType AppSelected){
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	0004      	movs	r4, r0
 8003dc0:	0008      	movs	r0, r1
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	1dbb      	adds	r3, r7, #6
 8003dc6:	1c22      	adds	r2, r4, #0
 8003dc8:	801a      	strh	r2, [r3, #0]
 8003dca:	1d7b      	adds	r3, r7, #5
 8003dcc:	1c02      	adds	r2, r0, #0
 8003dce:	701a      	strb	r2, [r3, #0]
 8003dd0:	1d3b      	adds	r3, r7, #4
 8003dd2:	1c0a      	adds	r2, r1, #0
 8003dd4:	701a      	strb	r2, [r3, #0]
	uint32_t bytes_fw_dim = num_pckts * fw_payload_len;
 8003dd6:	1dbb      	adds	r3, r7, #6
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	1d7a      	adds	r2, r7, #5
 8003ddc:	7812      	ldrb	r2, [r2, #0]
 8003dde:	4353      	muls	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

	switch(AppSelected){
 8003de2:	1d3b      	adds	r3, r7, #4
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d01d      	beq.n	8003e26 <checkFWSize+0x6e>
 8003dea:	dc22      	bgt.n	8003e32 <checkFWSize+0x7a>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d004      	beq.n	8003dfa <checkFWSize+0x42>
 8003df0:	db1f      	blt.n	8003e32 <checkFWSize+0x7a>
 8003df2:	3b01      	subs	r3, #1
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d81c      	bhi.n	8003e32 <checkFWSize+0x7a>
 8003df8:	e00a      	b.n	8003e10 <checkFWSize+0x58>
	case FLASH_APP_FULL_SPACE:
		if(bytes_fw_dim / 256000 >  1 ){
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	23fa      	movs	r3, #250	; 0xfa
 8003dfe:	02db      	lsls	r3, r3, #11
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d31c      	bcc.n	8003e3e <checkFWSize+0x86>
			printf("FW size too big\n\r");
 8003e04:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <checkFWSize+0x98>)
 8003e06:	0018      	movs	r0, r3
 8003e08:	f005 ff84 	bl	8009d14 <iprintf>
			return false;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e01a      	b.n	8003e46 <checkFWSize+0x8e>
		}
		break;
	case FLASH_APP_1:
	case FLASH_APP_2:
			if(bytes_fw_dim / 128000 >  1 ){
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	23fa      	movs	r3, #250	; 0xfa
 8003e14:	029b      	lsls	r3, r3, #10
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d313      	bcc.n	8003e42 <checkFWSize+0x8a>
				printf("FW size too big\n\r");
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	; (8003e50 <checkFWSize+0x98>)
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f005 ff79 	bl	8009d14 <iprintf>
				return false;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e00f      	b.n	8003e46 <checkFWSize+0x8e>
			}
			break;
	case NONE:
		printf("NONE APP SELECTED \n\r");
 8003e26:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <checkFWSize+0x9c>)
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f005 ff73 	bl	8009d14 <iprintf>
		return false;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e009      	b.n	8003e46 <checkFWSize+0x8e>

	default:
		printf("App Selected not recognized \n\r");
 8003e32:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <checkFWSize+0xa0>)
 8003e34:	0018      	movs	r0, r3
 8003e36:	f005 ff6d 	bl	8009d14 <iprintf>
		return false;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e003      	b.n	8003e46 <checkFWSize+0x8e>
		break;
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	e000      	b.n	8003e44 <checkFWSize+0x8c>
			break;
 8003e42:	46c0      	nop			; (mov r8, r8)

	}

	return true;
 8003e44:	2301      	movs	r3, #1
}
 8003e46:	0018      	movs	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b005      	add	sp, #20
 8003e4c:	bd90      	pop	{r4, r7, pc}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	0800b0c4 	.word	0x0800b0c4
 8003e54:	0800b0d8 	.word	0x0800b0d8
 8003e58:	0800b0f0 	.word	0x0800b0f0

08003e5c <init_rand_generator>:
#include "rand_generator.h"

uint16_t reg;


void init_rand_generator(uint16_t initializer){
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	0002      	movs	r2, r0
 8003e64:	1dbb      	adds	r3, r7, #6
 8003e66:	801a      	strh	r2, [r3, #0]
	reg = initializer & 0xFFFF;
 8003e68:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <init_rand_generator+0x1c>)
 8003e6a:	1dba      	adds	r2, r7, #6
 8003e6c:	8812      	ldrh	r2, [r2, #0]
 8003e6e:	801a      	strh	r2, [r3, #0]
}
 8003e70:	46c0      	nop			; (mov r8, r8)
 8003e72:	46bd      	mov	sp, r7
 8003e74:	b002      	add	sp, #8
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	200003ac 	.word	0x200003ac

08003e7c <get_rand_byte>:

uint8_t get_rand_byte(){
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8003e82:	1dfb      	adds	r3, r7, #7
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
	uint8_t rand_byte = 0;
 8003e88:	1dbb      	adds	r3, r7, #6
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	701a      	strb	r2, [r3, #0]

	while(i < 8){
 8003e8e:	e033      	b.n	8003ef8 <get_rand_byte+0x7c>

		/* save output from the register */
		rand_byte += (reg & 1) << i;
 8003e90:	4b1e      	ldr	r3, [pc, #120]	; (8003f0c <get_rand_byte+0x90>)
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	001a      	movs	r2, r3
 8003e96:	2301      	movs	r3, #1
 8003e98:	401a      	ands	r2, r3
 8003e9a:	1dfb      	adds	r3, r7, #7
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	0013      	movs	r3, r2
 8003ea2:	b2d9      	uxtb	r1, r3
 8003ea4:	1dbb      	adds	r3, r7, #6
 8003ea6:	1dba      	adds	r2, r7, #6
 8003ea8:	7812      	ldrb	r2, [r2, #0]
 8003eaa:	188a      	adds	r2, r1, r2
 8003eac:	701a      	strb	r2, [r3, #0]

		/* update the register */
	    reg = (reg >> 1) | (((reg >> 16 & 1) ^ (reg >> 15 & 1) ^ (reg >> 13 & 1) ^
 8003eae:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <get_rand_byte+0x90>)
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	085b      	lsrs	r3, r3, #1
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	b21a      	sxth	r2, r3
 8003eb8:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <get_rand_byte+0x90>)
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	0bdb      	lsrs	r3, r3, #15
 8003ebe:	b299      	uxth	r1, r3
 8003ec0:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <get_rand_byte+0x90>)
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	0b5b      	lsrs	r3, r3, #13
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	404b      	eors	r3, r1
 8003eca:	b299      	uxth	r1, r3
 8003ecc:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <get_rand_byte+0x90>)
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	404b      	eors	r3, r1
 8003ed6:	b299      	uxth	r1, r3
	    		(reg >> 4 & 1) ^ (reg >> 0 & 1) )<<15);
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <get_rand_byte+0x90>)
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	404b      	eors	r3, r1
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	03db      	lsls	r3, r3, #15
	    reg = (reg >> 1) | (((reg >> 16 & 1) ^ (reg >> 15 & 1) ^ (reg >> 13 & 1) ^
 8003ee2:	b21b      	sxth	r3, r3
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	b21b      	sxth	r3, r3
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <get_rand_byte+0x90>)
 8003eec:	801a      	strh	r2, [r3, #0]

	    i++;
 8003eee:	1dfb      	adds	r3, r7, #7
 8003ef0:	781a      	ldrb	r2, [r3, #0]
 8003ef2:	1dfb      	adds	r3, r7, #7
 8003ef4:	3201      	adds	r2, #1
 8003ef6:	701a      	strb	r2, [r3, #0]
	while(i < 8){
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b07      	cmp	r3, #7
 8003efe:	d9c7      	bls.n	8003e90 <get_rand_byte+0x14>
	}

	return rand_byte;
 8003f00:	1dbb      	adds	r3, r7, #6
 8003f02:	781b      	ldrb	r3, [r3, #0]
}
 8003f04:	0018      	movs	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b002      	add	sp, #8
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	200003ac 	.word	0x200003ac

08003f10 <add_FW_Update_Service>:
extern uint16_t count_pck;
extern uint16_t cont_buff;
extern uint16_t total_pck;
extern FlashAppType AppToUpdate;

tBleStatus add_FW_Update_Service(void){
 8003f10:	b5b0      	push	{r4, r5, r7, lr}
 8003f12:	b094      	sub	sp, #80	; 0x50
 8003f14:	af06      	add	r7, sp, #24
	tBleStatus ret;
	Service_UUID_t chat_service_uuid;
	Char_UUID_t rx_char_uuid, tx_char_uuid;

	BLUENRG_memcpy(&chat_service_uuid.Service_UUID_128, CHAT_SERVICE_UUID, 16);
 8003f16:	2124      	movs	r1, #36	; 0x24
 8003f18:	187b      	adds	r3, r7, r1
 8003f1a:	4a3a      	ldr	r2, [pc, #232]	; (8004004 <add_FW_Update_Service+0xf4>)
 8003f1c:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003f1e:	c331      	stmia	r3!, {r0, r4, r5}
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	601a      	str	r2, [r3, #0]

	BLUENRG_memcpy(rx_char_uuid.Char_UUID_128, RX_CHAR_UUID, 16);
 8003f24:	2314      	movs	r3, #20
 8003f26:	18fb      	adds	r3, r7, r3
 8003f28:	4a37      	ldr	r2, [pc, #220]	; (8004008 <add_FW_Update_Service+0xf8>)
 8003f2a:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003f2c:	c331      	stmia	r3!, {r0, r4, r5}
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	601a      	str	r2, [r3, #0]
	BLUENRG_memcpy(tx_char_uuid.Char_UUID_128, TX_CHAR_UUID, 16);
 8003f32:	1d3b      	adds	r3, r7, #4
 8003f34:	4a35      	ldr	r2, [pc, #212]	; (800400c <add_FW_Update_Service+0xfc>)
 8003f36:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003f38:	c331      	stmia	r3!, {r0, r4, r5}
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	601a      	str	r2, [r3, #0]

	/* ---- Add FW update Service ---- */
	ret = aci_gatt_add_serv(UUID_TYPE_128, chat_service_uuid.Service_UUID_128, PRIMARY_SERVICE, 7, &chat_service_handle);
 8003f3e:	2537      	movs	r5, #55	; 0x37
 8003f40:	197c      	adds	r4, r7, r5
 8003f42:	1879      	adds	r1, r7, r1
 8003f44:	4b32      	ldr	r3, [pc, #200]	; (8004010 <add_FW_Update_Service+0x100>)
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	2307      	movs	r3, #7
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	2002      	movs	r0, #2
 8003f4e:	f004 fcf2 	bl	8008936 <aci_gatt_add_serv>
 8003f52:	0003      	movs	r3, r0
 8003f54:	7023      	strb	r3, [r4, #0]
	if(ret != BLE_STATUS_SUCCESS){
 8003f56:	197b      	adds	r3, r7, r5
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d006      	beq.n	8003f6c <add_FW_Update_Service+0x5c>
		printf("Error in the creation of the service \n\r");
 8003f5e:	4b2d      	ldr	r3, [pc, #180]	; (8004014 <add_FW_Update_Service+0x104>)
 8003f60:	0018      	movs	r0, r3
 8003f62:	f005 fed7 	bl	8009d14 <iprintf>
		return ret;
 8003f66:	197b      	adds	r3, r7, r5
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	e047      	b.n	8003ffc <add_FW_Update_Service+0xec>
	}

	/* Add Characteristics */
	ret = aci_gatt_add_char(chat_service_handle, UUID_TYPE_128, rx_char_uuid.Char_UUID_128, CHAT_DATA_LEN, CHAR_PROP_WRITE_WITHOUT_RESP | CHAR_PROP_WRITE, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,16, 1, &rx_char_handle);
 8003f6c:	4b28      	ldr	r3, [pc, #160]	; (8004010 <add_FW_Update_Service+0x100>)
 8003f6e:	8818      	ldrh	r0, [r3, #0]
 8003f70:	2537      	movs	r5, #55	; 0x37
 8003f72:	197c      	adds	r4, r7, r5
 8003f74:	2314      	movs	r3, #20
 8003f76:	18fa      	adds	r2, r7, r3
 8003f78:	4b27      	ldr	r3, [pc, #156]	; (8004018 <add_FW_Update_Service+0x108>)
 8003f7a:	9305      	str	r3, [sp, #20]
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	9304      	str	r3, [sp, #16]
 8003f80:	2310      	movs	r3, #16
 8003f82:	9303      	str	r3, [sp, #12]
 8003f84:	2301      	movs	r3, #1
 8003f86:	9302      	str	r3, [sp, #8]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9301      	str	r3, [sp, #4]
 8003f8c:	230c      	movs	r3, #12
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	2314      	movs	r3, #20
 8003f92:	2102      	movs	r1, #2
 8003f94:	f004 fd6a 	bl	8008a6c <aci_gatt_add_char>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	7023      	strb	r3, [r4, #0]
	if(ret != BLE_STATUS_SUCCESS){
 8003f9c:	197b      	adds	r3, r7, r5
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d006      	beq.n	8003fb2 <add_FW_Update_Service+0xa2>
		printf("Failed to add RX char to the service \n\r");
 8003fa4:	4b1d      	ldr	r3, [pc, #116]	; (800401c <add_FW_Update_Service+0x10c>)
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f005 feb4 	bl	8009d14 <iprintf>
		return ret;
 8003fac:	197b      	adds	r3, r7, r5
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	e024      	b.n	8003ffc <add_FW_Update_Service+0xec>
	}


	ret = aci_gatt_add_char(chat_service_handle, UUID_TYPE_128, tx_char_uuid.Char_UUID_128, CHAT_DATA_LEN, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0, 16, 1, &tx_char_handle);
 8003fb2:	4b17      	ldr	r3, [pc, #92]	; (8004010 <add_FW_Update_Service+0x100>)
 8003fb4:	8818      	ldrh	r0, [r3, #0]
 8003fb6:	2537      	movs	r5, #55	; 0x37
 8003fb8:	197c      	adds	r4, r7, r5
 8003fba:	1d3a      	adds	r2, r7, #4
 8003fbc:	4b18      	ldr	r3, [pc, #96]	; (8004020 <add_FW_Update_Service+0x110>)
 8003fbe:	9305      	str	r3, [sp, #20]
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	9304      	str	r3, [sp, #16]
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	9303      	str	r3, [sp, #12]
 8003fc8:	2300      	movs	r3, #0
 8003fca:	9302      	str	r3, [sp, #8]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	9301      	str	r3, [sp, #4]
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	2314      	movs	r3, #20
 8003fd6:	2102      	movs	r1, #2
 8003fd8:	f004 fd48 	bl	8008a6c <aci_gatt_add_char>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	7023      	strb	r3, [r4, #0]

	if(ret != BLE_STATUS_SUCCESS){
 8003fe0:	197b      	adds	r3, r7, r5
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d006      	beq.n	8003ff6 <add_FW_Update_Service+0xe6>
		printf("Failed to add TX char to the service \n\r");
 8003fe8:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <add_FW_Update_Service+0x114>)
 8003fea:	0018      	movs	r0, r3
 8003fec:	f005 fe92 	bl	8009d14 <iprintf>
		return ret;
 8003ff0:	197b      	adds	r3, r7, r5
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	e002      	b.n	8003ffc <add_FW_Update_Service+0xec>
	}



	return ret;
 8003ff6:	2337      	movs	r3, #55	; 0x37
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	781b      	ldrb	r3, [r3, #0]
}
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b00e      	add	sp, #56	; 0x38
 8004002:	bdb0      	pop	{r4, r5, r7, pc}
 8004004:	2000001c 	.word	0x2000001c
 8004008:	2000002c 	.word	0x2000002c
 800400c:	2000003c 	.word	0x2000003c
 8004010:	200003ae 	.word	0x200003ae
 8004014:	0800b110 	.word	0x0800b110
 8004018:	200003b0 	.word	0x200003b0
 800401c:	0800b138 	.word	0x0800b138
 8004020:	200003b2 	.word	0x200003b2
 8004024:	0800b160 	.word	0x0800b160

08004028 <Update_TX_Char>:

void Update_TX_Char(uint8_t *data_buffer, uint8_t num_bytes){
 8004028:	b5b0      	push	{r4, r5, r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af02      	add	r7, sp, #8
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	000a      	movs	r2, r1
 8004032:	1cfb      	adds	r3, r7, #3
 8004034:	701a      	strb	r2, [r3, #0]
	tBleStatus ret;

	printf("response: ");
 8004036:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <Update_TX_Char+0x80>)
 8004038:	0018      	movs	r0, r3
 800403a:	f005 fe6b 	bl	8009d14 <iprintf>
	for(int i=0; i<num_bytes ; i++){
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	e00c      	b.n	800405e <Update_TX_Char+0x36>
		printf("%02x ", data_buffer[i]);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	18d3      	adds	r3, r2, r3
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	001a      	movs	r2, r3
 800404e:	4b17      	ldr	r3, [pc, #92]	; (80040ac <Update_TX_Char+0x84>)
 8004050:	0011      	movs	r1, r2
 8004052:	0018      	movs	r0, r3
 8004054:	f005 fe5e 	bl	8009d14 <iprintf>
	for(int i=0; i<num_bytes ; i++){
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3301      	adds	r3, #1
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	1cfb      	adds	r3, r7, #3
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	429a      	cmp	r2, r3
 8004066:	dbed      	blt.n	8004044 <Update_TX_Char+0x1c>
	}
	printf("\n\r");
 8004068:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <Update_TX_Char+0x88>)
 800406a:	0018      	movs	r0, r3
 800406c:	f005 fe52 	bl	8009d14 <iprintf>

	ret = aci_gatt_update_char_value(chat_service_handle, tx_char_handle, 0, num_bytes, data_buffer);
 8004070:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <Update_TX_Char+0x8c>)
 8004072:	8818      	ldrh	r0, [r3, #0]
 8004074:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <Update_TX_Char+0x90>)
 8004076:	8819      	ldrh	r1, [r3, #0]
 8004078:	250b      	movs	r5, #11
 800407a:	197c      	adds	r4, r7, r5
 800407c:	1cfb      	adds	r3, r7, #3
 800407e:	781a      	ldrb	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	0013      	movs	r3, r2
 8004086:	2200      	movs	r2, #0
 8004088:	f004 fdd6 	bl	8008c38 <aci_gatt_update_char_value>
 800408c:	0003      	movs	r3, r0
 800408e:	7023      	strb	r3, [r4, #0]

	if(ret != BLE_STATUS_SUCCESS){
 8004090:	197b      	adds	r3, r7, r5
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <Update_TX_Char+0x78>
		printf("Error while updating tx_char value \n\r");
 8004098:	4b08      	ldr	r3, [pc, #32]	; (80040bc <Update_TX_Char+0x94>)
 800409a:	0018      	movs	r0, r3
 800409c:	f005 fe3a 	bl	8009d14 <iprintf>
	}

}
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b004      	add	sp, #16
 80040a6:	bdb0      	pop	{r4, r5, r7, pc}
 80040a8:	0800b188 	.word	0x0800b188
 80040ac:	0800b194 	.word	0x0800b194
 80040b0:	0800b19c 	.word	0x0800b19c
 80040b4:	200003ae 	.word	0x200003ae
 80040b8:	200003b2 	.word	0x200003b2
 80040bc:	0800b1a0 	.word	0x0800b1a0

080040c0 <GAP_ConnectionComplete_CB>:

void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle){
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	000a      	movs	r2, r1
 80040ca:	1cbb      	adds	r3, r7, #2
 80040cc:	801a      	strh	r2, [r3, #0]
	connected = TRUE;
 80040ce:	4b16      	ldr	r3, [pc, #88]	; (8004128 <GAP_ConnectionComplete_CB+0x68>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
	connection_handle = handle;
 80040d4:	4b15      	ldr	r3, [pc, #84]	; (800412c <GAP_ConnectionComplete_CB+0x6c>)
 80040d6:	1cba      	adds	r2, r7, #2
 80040d8:	8812      	ldrh	r2, [r2, #0]
 80040da:	801a      	strh	r2, [r3, #0]
	connection_status = CONNECTED;
 80040dc:	4b14      	ldr	r3, [pc, #80]	; (8004130 <GAP_ConnectionComplete_CB+0x70>)
 80040de:	2201      	movs	r2, #1
 80040e0:	701a      	strb	r2, [r3, #0]

	printf("Connection Complete...\n\r");
 80040e2:	4b14      	ldr	r3, [pc, #80]	; (8004134 <GAP_ConnectionComplete_CB+0x74>)
 80040e4:	0018      	movs	r0, r3
 80040e6:	f005 fe15 	bl	8009d14 <iprintf>

	for(int i=5; i>=0 ; i--){
 80040ea:	2305      	movs	r3, #5
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	e00c      	b.n	800410a <GAP_ConnectionComplete_CB+0x4a>
		printf("%02X -", addr[i]);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	18d3      	adds	r3, r2, r3
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	001a      	movs	r2, r3
 80040fa:	4b0f      	ldr	r3, [pc, #60]	; (8004138 <GAP_ConnectionComplete_CB+0x78>)
 80040fc:	0011      	movs	r1, r2
 80040fe:	0018      	movs	r0, r3
 8004100:	f005 fe08 	bl	8009d14 <iprintf>
	for(int i=5; i>=0 ; i--){
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3b01      	subs	r3, #1
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	daef      	bge.n	80040f0 <GAP_ConnectionComplete_CB+0x30>
	}
	printf("%02X\n\r",addr[0]);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	001a      	movs	r2, r3
 8004116:	4b09      	ldr	r3, [pc, #36]	; (800413c <GAP_ConnectionComplete_CB+0x7c>)
 8004118:	0011      	movs	r1, r2
 800411a:	0018      	movs	r0, r3
 800411c:	f005 fdfa 	bl	8009d14 <iprintf>
}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	b004      	add	sp, #16
 8004126:	bd80      	pop	{r7, pc}
 8004128:	200003b4 	.word	0x200003b4
 800412c:	200003b8 	.word	0x200003b8
 8004130:	20000298 	.word	0x20000298
 8004134:	0800b1c8 	.word	0x0800b1c8
 8004138:	0800b1e4 	.word	0x0800b1e4
 800413c:	0800b1ec 	.word	0x0800b1ec

08004140 <GAP_DisconnectionComplete_CB>:

void GAP_DisconnectionComplete_CB(void){
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
	connected = FALSE;
 8004144:	4b24      	ldr	r3, [pc, #144]	; (80041d8 <GAP_DisconnectionComplete_CB+0x98>)
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
	connection_status = IDLE;
 800414a:	4b24      	ldr	r3, [pc, #144]	; (80041dc <GAP_DisconnectionComplete_CB+0x9c>)
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
	printf("Disconnection Complete...\n\r");
 8004150:	4b23      	ldr	r3, [pc, #140]	; (80041e0 <GAP_DisconnectionComplete_CB+0xa0>)
 8004152:	0018      	movs	r0, r3
 8004154:	f005 fdde 	bl	8009d14 <iprintf>

	if(count_pck == total_pck && total_pck != 0){
 8004158:	4b22      	ldr	r3, [pc, #136]	; (80041e4 <GAP_DisconnectionComplete_CB+0xa4>)
 800415a:	881a      	ldrh	r2, [r3, #0]
 800415c:	4b22      	ldr	r3, [pc, #136]	; (80041e8 <GAP_DisconnectionComplete_CB+0xa8>)
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d10d      	bne.n	8004180 <GAP_DisconnectionComplete_CB+0x40>
 8004164:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <GAP_DisconnectionComplete_CB+0xa8>)
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d009      	beq.n	8004180 <GAP_DisconnectionComplete_CB+0x40>
		printf("Jump to the new FW :\n\n\r");
 800416c:	4b1f      	ldr	r3, [pc, #124]	; (80041ec <GAP_DisconnectionComplete_CB+0xac>)
 800416e:	0018      	movs	r0, r3
 8004170:	f005 fdd0 	bl	8009d14 <iprintf>
		go2App(AppToUpdate);
 8004174:	4b1e      	ldr	r3, [pc, #120]	; (80041f0 <GAP_DisconnectionComplete_CB+0xb0>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	0018      	movs	r0, r3
 800417a:	f7fe fd57 	bl	8002c2c <go2App>
 800417e:	e021      	b.n	80041c4 <GAP_DisconnectionComplete_CB+0x84>
	}else{
		printf("Upload FW interrupted, received %d packets over %d\n\r", count_pck, total_pck);
 8004180:	4b18      	ldr	r3, [pc, #96]	; (80041e4 <GAP_DisconnectionComplete_CB+0xa4>)
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	0019      	movs	r1, r3
 8004186:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <GAP_DisconnectionComplete_CB+0xa8>)
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	001a      	movs	r2, r3
 800418c:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <GAP_DisconnectionComplete_CB+0xb4>)
 800418e:	0018      	movs	r0, r3
 8004190:	f005 fdc0 	bl	8009d14 <iprintf>

		count_pck = 0;
 8004194:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <GAP_DisconnectionComplete_CB+0xa4>)
 8004196:	2200      	movs	r2, #0
 8004198:	801a      	strh	r2, [r3, #0]
		cont_buff = -1;
 800419a:	4b17      	ldr	r3, [pc, #92]	; (80041f8 <GAP_DisconnectionComplete_CB+0xb8>)
 800419c:	2201      	movs	r2, #1
 800419e:	4252      	negs	r2, r2
 80041a0:	801a      	strh	r2, [r3, #0]

		printf("Erasing firmware saved in memory...");
 80041a2:	4b16      	ldr	r3, [pc, #88]	; (80041fc <GAP_DisconnectionComplete_CB+0xbc>)
 80041a4:	0018      	movs	r0, r3
 80041a6:	f005 fdb5 	bl	8009d14 <iprintf>
		Prepare_Application_Memory(AppToUpdate);
 80041aa:	4b11      	ldr	r3, [pc, #68]	; (80041f0 <GAP_DisconnectionComplete_CB+0xb0>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	0018      	movs	r0, r3
 80041b0:	f7fe fcb0 	bl	8002b14 <Prepare_Application_Memory>
		printf("Done\n\r");
 80041b4:	4b12      	ldr	r3, [pc, #72]	; (8004200 <GAP_DisconnectionComplete_CB+0xc0>)
 80041b6:	0018      	movs	r0, r3
 80041b8:	f005 fdac 	bl	8009d14 <iprintf>

		printf("Device discoverable again...\n\r");
 80041bc:	4b11      	ldr	r3, [pc, #68]	; (8004204 <GAP_DisconnectionComplete_CB+0xc4>)
 80041be:	0018      	movs	r0, r3
 80041c0:	f005 fda8 	bl	8009d14 <iprintf>
	}

	set_connectable = TRUE;
 80041c4:	4b10      	ldr	r3, [pc, #64]	; (8004208 <GAP_DisconnectionComplete_CB+0xc8>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]
	notification_enabled = FALSE;
 80041ca:	4b10      	ldr	r3, [pc, #64]	; (800420c <GAP_DisconnectionComplete_CB+0xcc>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	701a      	strb	r2, [r3, #0]
}
 80041d0:	46c0      	nop			; (mov r8, r8)
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	200003b4 	.word	0x200003b4
 80041dc:	20000298 	.word	0x20000298
 80041e0:	0800b1f4 	.word	0x0800b1f4
 80041e4:	200003a4 	.word	0x200003a4
 80041e8:	200003a2 	.word	0x200003a2
 80041ec:	0800b210 	.word	0x0800b210
 80041f0:	2000000e 	.word	0x2000000e
 80041f4:	0800b228 	.word	0x0800b228
 80041f8:	2000000c 	.word	0x2000000c
 80041fc:	0800b260 	.word	0x0800b260
 8004200:	0800b284 	.word	0x0800b284
 8004204:	0800b28c 	.word	0x0800b28c
 8004208:	2000004c 	.word	0x2000004c
 800420c:	200003ba 	.word	0x200003ba

08004210 <Attribute_Modified_CB>:

void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data){
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	603a      	str	r2, [r7, #0]
 8004218:	1dbb      	adds	r3, r7, #6
 800421a:	1c02      	adds	r2, r0, #0
 800421c:	801a      	strh	r2, [r3, #0]
 800421e:	1d7b      	adds	r3, r7, #5
 8004220:	1c0a      	adds	r2, r1, #0
 8004222:	701a      	strb	r2, [r3, #0]


	if(handle == rx_char_handle+1){
 8004224:	1dbb      	adds	r3, r7, #6
 8004226:	881a      	ldrh	r2, [r3, #0]
 8004228:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <Attribute_Modified_CB+0x58>)
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	3301      	adds	r3, #1
 800422e:	429a      	cmp	r2, r3
 8004230:	d107      	bne.n	8004242 <Attribute_Modified_CB+0x32>
		data_handler(att_data, data_length);
 8004232:	1d7b      	adds	r3, r7, #5
 8004234:	781a      	ldrb	r2, [r3, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	0011      	movs	r1, r2
 800423a:	0018      	movs	r0, r3
 800423c:	f7fe fea8 	bl	8002f90 <data_handler>
		if(att_data[0] == 0x01){
			notification_enabled = TRUE;
		}

	}
}
 8004240:	e00d      	b.n	800425e <Attribute_Modified_CB+0x4e>
	}else if(handle == tx_char_handle+2){
 8004242:	1dbb      	adds	r3, r7, #6
 8004244:	881a      	ldrh	r2, [r3, #0]
 8004246:	4b09      	ldr	r3, [pc, #36]	; (800426c <Attribute_Modified_CB+0x5c>)
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	3302      	adds	r3, #2
 800424c:	429a      	cmp	r2, r3
 800424e:	d106      	bne.n	800425e <Attribute_Modified_CB+0x4e>
		if(att_data[0] == 0x01){
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d102      	bne.n	800425e <Attribute_Modified_CB+0x4e>
			notification_enabled = TRUE;
 8004258:	4b05      	ldr	r3, [pc, #20]	; (8004270 <Attribute_Modified_CB+0x60>)
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	46bd      	mov	sp, r7
 8004262:	b002      	add	sp, #8
 8004264:	bd80      	pop	{r7, pc}
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	200003b0 	.word	0x200003b0
 800426c:	200003b2 	.word	0x200003b2
 8004270:	200003ba 	.word	0x200003ba

08004274 <HCI_Event_CB>:
 * @note   Inside this function each event must be identified and correctly
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void HCI_Event_CB(void *pData){
 8004274:	b580      	push	{r7, lr}
 8004276:	b08a      	sub	sp, #40	; 0x28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
	hci_uart_pckt *hci_pckt = (hci_uart_pckt *)pData;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	627b      	str	r3, [r7, #36]	; 0x24

	/* Process event packet */
	if(hci_pckt->type == HCI_EVENT_PKT){
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b04      	cmp	r3, #4
 8004286:	d000      	beq.n	800428a <HCI_Event_CB+0x16>
 8004288:	e06f      	b.n	800436a <HCI_Event_CB+0xf6>
		/* Get data from packet */
		hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	3301      	adds	r3, #1
 800428e:	623b      	str	r3, [r7, #32]

		switch(event_pckt->evt){
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2bff      	cmp	r3, #255	; 0xff
 8004296:	d01f      	beq.n	80042d8 <HCI_Event_CB+0x64>
 8004298:	dc5e      	bgt.n	8004358 <HCI_Event_CB+0xe4>
 800429a:	2b05      	cmp	r3, #5
 800429c:	d002      	beq.n	80042a4 <HCI_Event_CB+0x30>
 800429e:	2b3e      	cmp	r3, #62	; 0x3e
 80042a0:	d003      	beq.n	80042aa <HCI_Event_CB+0x36>
 80042a2:	e059      	b.n	8004358 <HCI_Event_CB+0xe4>
			case EVT_DISCONN_COMPLETE:
				GAP_DisconnectionComplete_CB();
 80042a4:	f7ff ff4c 	bl	8004140 <GAP_DisconnectionComplete_CB>

				break;
 80042a8:	e069      	b.n	800437e <HCI_Event_CB+0x10a>

			case EVT_LE_META_EVENT:
				{
					evt_le_meta_event *evt = (evt_le_meta_event*)event_pckt->data;
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	3302      	adds	r3, #2
 80042ae:	613b      	str	r3, [r7, #16]

					switch(evt->subevent){
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d161      	bne.n	800437c <HCI_Event_CB+0x108>


						case EVT_LE_CONN_COMPLETE:
						{
							evt_le_connection_complete *cc = (evt_le_connection_complete *)evt->data;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	3301      	adds	r3, #1
 80042bc:	60fb      	str	r3, [r7, #12]
							GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1d58      	adds	r0, r3, #5
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	785a      	ldrb	r2, [r3, #1]
 80042c6:	789b      	ldrb	r3, [r3, #2]
 80042c8:	021b      	lsls	r3, r3, #8
 80042ca:	4313      	orrs	r3, r2
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	0019      	movs	r1, r3
 80042d0:	f7ff fef6 	bl	80040c0 <GAP_ConnectionComplete_CB>
						}
							break;
 80042d4:	46c0      	nop			; (mov r8, r8)
					}
				}

				break;
 80042d6:	e051      	b.n	800437c <HCI_Event_CB+0x108>

			case EVT_VENDOR:
			{
				evt_blue_aci *blue_evt = (evt_blue_aci*)event_pckt->data;
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	3302      	adds	r3, #2
 80042dc:	61fb      	str	r3, [r7, #28]

				switch(blue_evt->ecode){
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	781a      	ldrb	r2, [r3, #0]
 80042e2:	785b      	ldrb	r3, [r3, #1]
 80042e4:	021b      	lsls	r3, r3, #8
 80042e6:	4313      	orrs	r3, r2
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	4a27      	ldr	r2, [pc, #156]	; (8004388 <HCI_Event_CB+0x114>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d003      	beq.n	80042f8 <HCI_Event_CB+0x84>
 80042f0:	4a26      	ldr	r2, [pc, #152]	; (800438c <HCI_Event_CB+0x118>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d021      	beq.n	800433a <HCI_Event_CB+0xc6>
						break;
*/
				}
			}

				break;
 80042f6:	e042      	b.n	800437e <HCI_Event_CB+0x10a>
						evt_gatt_attr_modified_IDB05A1 *evt =
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	3302      	adds	r3, #2
 80042fc:	617b      	str	r3, [r7, #20]
						printf("JUST RECEIVED %lu \r\n",__HAL_TIM_GetCounter(&htim1));
 80042fe:	4b24      	ldr	r3, [pc, #144]	; (8004390 <HCI_Event_CB+0x11c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004304:	4b23      	ldr	r3, [pc, #140]	; (8004394 <HCI_Event_CB+0x120>)
 8004306:	0011      	movs	r1, r2
 8004308:	0018      	movs	r0, r3
 800430a:	f005 fd03 	bl	8009d14 <iprintf>
						Attribute_Modified_CB(evt->attr_handle, evt->data_length,
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	789a      	ldrb	r2, [r3, #2]
 8004312:	78db      	ldrb	r3, [r3, #3]
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	4313      	orrs	r3, r2
 8004318:	b298      	uxth	r0, r3
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	7919      	ldrb	r1, [r3, #4]
								evt->att_data);
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	3307      	adds	r3, #7
						Attribute_Modified_CB(evt->attr_handle, evt->data_length,
 8004322:	001a      	movs	r2, r3
 8004324:	f7ff ff74 	bl	8004210 <Attribute_Modified_CB>
						printf("FINISHED RECEIVEING %lu \r\n",__HAL_TIM_GetCounter(&htim1));
 8004328:	4b19      	ldr	r3, [pc, #100]	; (8004390 <HCI_Event_CB+0x11c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800432e:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <HCI_Event_CB+0x124>)
 8004330:	0011      	movs	r1, r2
 8004332:	0018      	movs	r0, r3
 8004334:	f005 fcee 	bl	8009d14 <iprintf>
						break;
 8004338:	e00d      	b.n	8004356 <HCI_Event_CB+0xe2>
						evt_gatt_attr_notification *evt =
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	3302      	adds	r3, #2
 800433e:	61bb      	str	r3, [r7, #24]
						data_handler(evt->attr_value, evt->event_data_length - 2);
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	1d5a      	adds	r2, r3, #5
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	789b      	ldrb	r3, [r3, #2]
 8004348:	3b02      	subs	r3, #2
 800434a:	b2db      	uxtb	r3, r3
 800434c:	0019      	movs	r1, r3
 800434e:	0010      	movs	r0, r2
 8004350:	f7fe fe1e 	bl	8002f90 <data_handler>
						break;
 8004354:	46c0      	nop			; (mov r8, r8)
				break;
 8004356:	e012      	b.n	800437e <HCI_Event_CB+0x10a>


			default:
				printf("%d\n\r",event_pckt->evt);
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	001a      	movs	r2, r3
 800435e:	4b0f      	ldr	r3, [pc, #60]	; (800439c <HCI_Event_CB+0x128>)
 8004360:	0011      	movs	r1, r2
 8004362:	0018      	movs	r0, r3
 8004364:	f005 fcd6 	bl	8009d14 <iprintf>
				break;
 8004368:	e009      	b.n	800437e <HCI_Event_CB+0x10a>
		}

	}else{
		printf("pckt_type: %d", hci_pckt->type);
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	001a      	movs	r2, r3
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HCI_Event_CB+0x12c>)
 8004372:	0011      	movs	r1, r2
 8004374:	0018      	movs	r0, r3
 8004376:	f005 fccd 	bl	8009d14 <iprintf>
	}
}
 800437a:	e000      	b.n	800437e <HCI_Event_CB+0x10a>
				break;
 800437c:	46c0      	nop			; (mov r8, r8)
}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	46bd      	mov	sp, r7
 8004382:	b00a      	add	sp, #40	; 0x28
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	00000c01 	.word	0x00000c01
 800438c:	00000c0f 	.word	0x00000c0f
 8004390:	20000428 	.word	0x20000428
 8004394:	0800b2ac 	.word	0x0800b2ac
 8004398:	0800b2c4 	.word	0x0800b2c4
 800439c:	0800b2e0 	.word	0x0800b2e0
 80043a0:	0800b2e8 	.word	0x0800b2e8

080043a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043aa:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <HAL_MspInit+0x44>)
 80043ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ae:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <HAL_MspInit+0x44>)
 80043b0:	2101      	movs	r1, #1
 80043b2:	430a      	orrs	r2, r1
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <HAL_MspInit+0x44>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	2201      	movs	r2, #1
 80043bc:	4013      	ands	r3, r2
 80043be:	607b      	str	r3, [r7, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043c2:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <HAL_MspInit+0x44>)
 80043c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043c6:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <HAL_MspInit+0x44>)
 80043c8:	2180      	movs	r1, #128	; 0x80
 80043ca:	0549      	lsls	r1, r1, #21
 80043cc:	430a      	orrs	r2, r1
 80043ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <HAL_MspInit+0x44>)
 80043d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	055b      	lsls	r3, r3, #21
 80043d8:	4013      	ands	r3, r2
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	46bd      	mov	sp, r7
 80043e2:	b002      	add	sp, #8
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	40021000 	.word	0x40021000

080043ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043f0:	e7fe      	b.n	80043f0 <NMI_Handler+0x4>

080043f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043f6:	e7fe      	b.n	80043f6 <HardFault_Handler+0x4>

080043f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80043fc:	46c0      	nop			; (mov r8, r8)
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004410:	f000 fbc8 	bl	8004ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8004420:	4b03      	ldr	r3, [pc, #12]	; (8004430 <EXTI0_1_IRQHandler+0x14>)
 8004422:	0018      	movs	r0, r3
 8004424:	f000 fdf4 	bl	8005010 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004428:	46c0      	nop			; (mov r8, r8)
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	20000168 	.word	0x20000168

08004434 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800443a:	2300      	movs	r3, #0
 800443c:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800443e:	4b12      	ldr	r3, [pc, #72]	; (8004488 <BSP_SPI1_Init+0x54>)
 8004440:	4a12      	ldr	r2, [pc, #72]	; (800448c <BSP_SPI1_Init+0x58>)
 8004442:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8004444:	4b12      	ldr	r3, [pc, #72]	; (8004490 <BSP_SPI1_Init+0x5c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	1c59      	adds	r1, r3, #1
 800444a:	4a11      	ldr	r2, [pc, #68]	; (8004490 <BSP_SPI1_Init+0x5c>)
 800444c:	6011      	str	r1, [r2, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d115      	bne.n	800447e <BSP_SPI1_Init+0x4a>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8004452:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <BSP_SPI1_Init+0x54>)
 8004454:	0018      	movs	r0, r3
 8004456:	f002 fcef 	bl	8006e38 <HAL_SPI_GetState>
 800445a:	1e03      	subs	r3, r0, #0
 800445c:	d10f      	bne.n	800447e <BSP_SPI1_Init+0x4a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <BSP_SPI1_Init+0x54>)
 8004460:	0018      	movs	r0, r3
 8004462:	f000 f887 	bl	8004574 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d108      	bne.n	800447e <BSP_SPI1_Init+0x4a>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <BSP_SPI1_Init+0x54>)
 800446e:	0018      	movs	r0, r3
 8004470:	f000 f838 	bl	80044e4 <MX_SPI1_Init>
 8004474:	1e03      	subs	r3, r0, #0
 8004476:	d002      	beq.n	800447e <BSP_SPI1_Init+0x4a>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8004478:	2308      	movs	r3, #8
 800447a:	425b      	negs	r3, r3
 800447c:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 800447e:	687b      	ldr	r3, [r7, #4]
}
 8004480:	0018      	movs	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	b002      	add	sp, #8
 8004486:	bd80      	pop	{r7, pc}
 8004488:	200003bc 	.word	0x200003bc
 800448c:	40013000 	.word	0x40013000
 8004490:	20000420 	.word	0x20000420

08004494 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8004494:	b590      	push	{r4, r7, lr}
 8004496:	b089      	sub	sp, #36	; 0x24
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	1dbb      	adds	r3, r7, #6
 80044a0:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80044a6:	1dbb      	adds	r3, r7, #6
 80044a8:	881c      	ldrh	r4, [r3, #0]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	68f9      	ldr	r1, [r7, #12]
 80044ae:	4808      	ldr	r0, [pc, #32]	; (80044d0 <BSP_SPI1_SendRecv+0x3c>)
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	015b      	lsls	r3, r3, #5
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	0023      	movs	r3, r4
 80044b8:	f002 faec 	bl	8006a94 <HAL_SPI_TransmitReceive>
 80044bc:	1e03      	subs	r3, r0, #0
 80044be:	d002      	beq.n	80044c6 <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80044c0:	2306      	movs	r3, #6
 80044c2:	425b      	negs	r3, r3
 80044c4:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80044c6:	697b      	ldr	r3, [r7, #20]
}
 80044c8:	0018      	movs	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b007      	add	sp, #28
 80044ce:	bd90      	pop	{r4, r7, pc}
 80044d0:	200003bc 	.word	0x200003bc

080044d4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80044d8:	f000 fb76 	bl	8004bc8 <HAL_GetTick>
 80044dc:	0003      	movs	r3, r0
}
 80044de:	0018      	movs	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80044e4:	b590      	push	{r4, r7, lr}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80044ec:	240f      	movs	r4, #15
 80044ee:	193b      	adds	r3, r7, r4
 80044f0:	2200      	movs	r2, #0
 80044f2:	701a      	strb	r2, [r3, #0]

  hspi->Instance = SPI1;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a1e      	ldr	r2, [pc, #120]	; (8004570 <MX_SPI1_Init+0x8c>)
 80044f8:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2282      	movs	r2, #130	; 0x82
 80044fe:	0052      	lsls	r2, r2, #1
 8004500:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	22e0      	movs	r2, #224	; 0xe0
 800450c:	00d2      	lsls	r2, r2, #3
 800450e:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2280      	movs	r2, #128	; 0x80
 8004520:	0092      	lsls	r2, r2, #2
 8004522:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2218      	movs	r2, #24
 8004528:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2207      	movs	r2, #7
 8004540:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2208      	movs	r2, #8
 800454c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	0018      	movs	r0, r3
 8004552:	f002 f9df 	bl	8006914 <HAL_SPI_Init>
 8004556:	1e03      	subs	r3, r0, #0
 8004558:	d002      	beq.n	8004560 <MX_SPI1_Init+0x7c>
  {
    ret = HAL_ERROR;
 800455a:	193b      	adds	r3, r7, r4
 800455c:	2201      	movs	r2, #1
 800455e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004560:	230f      	movs	r3, #15
 8004562:	18fb      	adds	r3, r7, r3
 8004564:	781b      	ldrb	r3, [r3, #0]
}
 8004566:	0018      	movs	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	b005      	add	sp, #20
 800456c:	bd90      	pop	{r4, r7, pc}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	40013000 	.word	0x40013000

08004574 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004574:	b590      	push	{r4, r7, lr}
 8004576:	b08b      	sub	sp, #44	; 0x2c
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800457c:	4b36      	ldr	r3, [pc, #216]	; (8004658 <SPI1_MspInit+0xe4>)
 800457e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004580:	4b35      	ldr	r3, [pc, #212]	; (8004658 <SPI1_MspInit+0xe4>)
 8004582:	2180      	movs	r1, #128	; 0x80
 8004584:	0149      	lsls	r1, r1, #5
 8004586:	430a      	orrs	r2, r1
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
 800458a:	4b33      	ldr	r3, [pc, #204]	; (8004658 <SPI1_MspInit+0xe4>)
 800458c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800458e:	2380      	movs	r3, #128	; 0x80
 8004590:	015b      	lsls	r3, r3, #5
 8004592:	4013      	ands	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004598:	4b2f      	ldr	r3, [pc, #188]	; (8004658 <SPI1_MspInit+0xe4>)
 800459a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800459c:	4b2e      	ldr	r3, [pc, #184]	; (8004658 <SPI1_MspInit+0xe4>)
 800459e:	2101      	movs	r1, #1
 80045a0:	430a      	orrs	r2, r1
 80045a2:	635a      	str	r2, [r3, #52]	; 0x34
 80045a4:	4b2c      	ldr	r3, [pc, #176]	; (8004658 <SPI1_MspInit+0xe4>)
 80045a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a8:	2201      	movs	r2, #1
 80045aa:	4013      	ands	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045b0:	4b29      	ldr	r3, [pc, #164]	; (8004658 <SPI1_MspInit+0xe4>)
 80045b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b4:	4b28      	ldr	r3, [pc, #160]	; (8004658 <SPI1_MspInit+0xe4>)
 80045b6:	2102      	movs	r1, #2
 80045b8:	430a      	orrs	r2, r1
 80045ba:	635a      	str	r2, [r3, #52]	; 0x34
 80045bc:	4b26      	ldr	r3, [pc, #152]	; (8004658 <SPI1_MspInit+0xe4>)
 80045be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c0:	2202      	movs	r2, #2
 80045c2:	4013      	ands	r3, r2
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80045c8:	2414      	movs	r4, #20
 80045ca:	193b      	adds	r3, r7, r4
 80045cc:	2240      	movs	r2, #64	; 0x40
 80045ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d0:	193b      	adds	r3, r7, r4
 80045d2:	2202      	movs	r2, #2
 80045d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d6:	193b      	adds	r3, r7, r4
 80045d8:	2200      	movs	r2, #0
 80045da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045dc:	193b      	adds	r3, r7, r4
 80045de:	2200      	movs	r2, #0
 80045e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80045e2:	193b      	adds	r3, r7, r4
 80045e4:	2200      	movs	r2, #0
 80045e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80045e8:	193a      	adds	r2, r7, r4
 80045ea:	23a0      	movs	r3, #160	; 0xa0
 80045ec:	05db      	lsls	r3, r3, #23
 80045ee:	0011      	movs	r1, r2
 80045f0:	0018      	movs	r0, r3
 80045f2:	f000 ff03 	bl	80053fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80045f6:	193b      	adds	r3, r7, r4
 80045f8:	2280      	movs	r2, #128	; 0x80
 80045fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045fc:	193b      	adds	r3, r7, r4
 80045fe:	2202      	movs	r2, #2
 8004600:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004602:	193b      	adds	r3, r7, r4
 8004604:	2200      	movs	r2, #0
 8004606:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004608:	193b      	adds	r3, r7, r4
 800460a:	2200      	movs	r2, #0
 800460c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800460e:	193b      	adds	r3, r7, r4
 8004610:	2200      	movs	r2, #0
 8004612:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004614:	193a      	adds	r2, r7, r4
 8004616:	23a0      	movs	r3, #160	; 0xa0
 8004618:	05db      	lsls	r3, r3, #23
 800461a:	0011      	movs	r1, r2
 800461c:	0018      	movs	r0, r3
 800461e:	f000 feed 	bl	80053fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8004622:	0021      	movs	r1, r4
 8004624:	187b      	adds	r3, r7, r1
 8004626:	2208      	movs	r2, #8
 8004628:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800462a:	187b      	adds	r3, r7, r1
 800462c:	2202      	movs	r2, #2
 800462e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004630:	187b      	adds	r3, r7, r1
 8004632:	2200      	movs	r2, #0
 8004634:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004636:	187b      	adds	r3, r7, r1
 8004638:	2200      	movs	r2, #0
 800463a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800463c:	187b      	adds	r3, r7, r1
 800463e:	2200      	movs	r2, #0
 8004640:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004642:	187b      	adds	r3, r7, r1
 8004644:	4a05      	ldr	r2, [pc, #20]	; (800465c <SPI1_MspInit+0xe8>)
 8004646:	0019      	movs	r1, r3
 8004648:	0010      	movs	r0, r2
 800464a:	f000 fed7 	bl	80053fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	46bd      	mov	sp, r7
 8004652:	b00b      	add	sp, #44	; 0x2c
 8004654:	bd90      	pop	{r4, r7, pc}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	40021000 	.word	0x40021000
 800465c:	50000400 	.word	0x50000400

08004660 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	e00a      	b.n	8004688 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004672:	e000      	b.n	8004676 <_read+0x16>
 8004674:	bf00      	nop
 8004676:	0001      	movs	r1, r0
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	60ba      	str	r2, [r7, #8]
 800467e:	b2ca      	uxtb	r2, r1
 8004680:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	3301      	adds	r3, #1
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	429a      	cmp	r2, r3
 800468e:	dbf0      	blt.n	8004672 <_read+0x12>
	}

return len;
 8004690:	687b      	ldr	r3, [r7, #4]
}
 8004692:	0018      	movs	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	b006      	add	sp, #24
 8004698:	bd80      	pop	{r7, pc}

0800469a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b086      	sub	sp, #24
 800469e:	af00      	add	r7, sp, #0
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	e009      	b.n	80046c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	60ba      	str	r2, [r7, #8]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	0018      	movs	r0, r3
 80046b6:	f7fe fba5 	bl	8002e04 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	3301      	adds	r3, #1
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	dbf1      	blt.n	80046ac <_write+0x12>
	}
	return len;
 80046c8:	687b      	ldr	r3, [r7, #4]
}
 80046ca:	0018      	movs	r0, r3
 80046cc:	46bd      	mov	sp, r7
 80046ce:	b006      	add	sp, #24
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <_close>:

int _close(int file)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
	return -1;
 80046da:	2301      	movs	r3, #1
 80046dc:	425b      	negs	r3, r3
}
 80046de:	0018      	movs	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b002      	add	sp, #8
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2280      	movs	r2, #128	; 0x80
 80046f4:	0192      	lsls	r2, r2, #6
 80046f6:	605a      	str	r2, [r3, #4]
	return 0;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	0018      	movs	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b002      	add	sp, #8
 8004700:	bd80      	pop	{r7, pc}

08004702 <_isatty>:

int _isatty(int file)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
	return 1;
 800470a:	2301      	movs	r3, #1
}
 800470c:	0018      	movs	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	b002      	add	sp, #8
 8004712:	bd80      	pop	{r7, pc}

08004714 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
	return 0;
 8004720:	2300      	movs	r3, #0
}
 8004722:	0018      	movs	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	b004      	add	sp, #16
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004734:	4a14      	ldr	r2, [pc, #80]	; (8004788 <_sbrk+0x5c>)
 8004736:	4b15      	ldr	r3, [pc, #84]	; (800478c <_sbrk+0x60>)
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004740:	4b13      	ldr	r3, [pc, #76]	; (8004790 <_sbrk+0x64>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004748:	4b11      	ldr	r3, [pc, #68]	; (8004790 <_sbrk+0x64>)
 800474a:	4a12      	ldr	r2, [pc, #72]	; (8004794 <_sbrk+0x68>)
 800474c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800474e:	4b10      	ldr	r3, [pc, #64]	; (8004790 <_sbrk+0x64>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	18d3      	adds	r3, r2, r3
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	429a      	cmp	r2, r3
 800475a:	d207      	bcs.n	800476c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800475c:	f004 ffd6 	bl	800970c <__errno>
 8004760:	0003      	movs	r3, r0
 8004762:	220c      	movs	r2, #12
 8004764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004766:	2301      	movs	r3, #1
 8004768:	425b      	negs	r3, r3
 800476a:	e009      	b.n	8004780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800476c:	4b08      	ldr	r3, [pc, #32]	; (8004790 <_sbrk+0x64>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004772:	4b07      	ldr	r3, [pc, #28]	; (8004790 <_sbrk+0x64>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	18d2      	adds	r2, r2, r3
 800477a:	4b05      	ldr	r3, [pc, #20]	; (8004790 <_sbrk+0x64>)
 800477c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800477e:	68fb      	ldr	r3, [r7, #12]
}
 8004780:	0018      	movs	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	b006      	add	sp, #24
 8004786:	bd80      	pop	{r7, pc}
 8004788:	20024000 	.word	0x20024000
 800478c:	00000400 	.word	0x00000400
 8004790:	20000424 	.word	0x20000424
 8004794:	20000828 	.word	0x20000828

08004798 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800479c:	46c0      	nop			; (mov r8, r8)
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047aa:	2310      	movs	r3, #16
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	0018      	movs	r0, r3
 80047b0:	2310      	movs	r3, #16
 80047b2:	001a      	movs	r2, r3
 80047b4:	2100      	movs	r1, #0
 80047b6:	f005 f9c3 	bl	8009b40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047ba:	1d3b      	adds	r3, r7, #4
 80047bc:	0018      	movs	r0, r3
 80047be:	230c      	movs	r3, #12
 80047c0:	001a      	movs	r2, r3
 80047c2:	2100      	movs	r1, #0
 80047c4:	f005 f9bc 	bl	8009b40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80047c8:	4b21      	ldr	r3, [pc, #132]	; (8004850 <MX_TIM1_Init+0xac>)
 80047ca:	4a22      	ldr	r2, [pc, #136]	; (8004854 <MX_TIM1_Init+0xb0>)
 80047cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <MX_TIM1_Init+0xac>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047d4:	4b1e      	ldr	r3, [pc, #120]	; (8004850 <MX_TIM1_Init+0xac>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80047da:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <MX_TIM1_Init+0xac>)
 80047dc:	4a1e      	ldr	r2, [pc, #120]	; (8004858 <MX_TIM1_Init+0xb4>)
 80047de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047e0:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <MX_TIM1_Init+0xac>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80047e6:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <MX_TIM1_Init+0xac>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047ec:	4b18      	ldr	r3, [pc, #96]	; (8004850 <MX_TIM1_Init+0xac>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80047f2:	4b17      	ldr	r3, [pc, #92]	; (8004850 <MX_TIM1_Init+0xac>)
 80047f4:	0018      	movs	r0, r3
 80047f6:	f002 fca1 	bl	800713c <HAL_TIM_Base_Init>
 80047fa:	1e03      	subs	r3, r0, #0
 80047fc:	d001      	beq.n	8004802 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80047fe:	f7fe fbc2 	bl	8002f86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004802:	2110      	movs	r1, #16
 8004804:	187b      	adds	r3, r7, r1
 8004806:	2280      	movs	r2, #128	; 0x80
 8004808:	0152      	lsls	r2, r2, #5
 800480a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800480c:	187a      	adds	r2, r7, r1
 800480e:	4b10      	ldr	r3, [pc, #64]	; (8004850 <MX_TIM1_Init+0xac>)
 8004810:	0011      	movs	r1, r2
 8004812:	0018      	movs	r0, r3
 8004814:	f002 fd44 	bl	80072a0 <HAL_TIM_ConfigClockSource>
 8004818:	1e03      	subs	r3, r0, #0
 800481a:	d001      	beq.n	8004820 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800481c:	f7fe fbb3 	bl	8002f86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004820:	1d3b      	adds	r3, r7, #4
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004826:	1d3b      	adds	r3, r7, #4
 8004828:	2200      	movs	r2, #0
 800482a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800482c:	1d3b      	adds	r3, r7, #4
 800482e:	2200      	movs	r2, #0
 8004830:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004832:	1d3a      	adds	r2, r7, #4
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <MX_TIM1_Init+0xac>)
 8004836:	0011      	movs	r1, r2
 8004838:	0018      	movs	r0, r3
 800483a:	f002 ff2d 	bl	8007698 <HAL_TIMEx_MasterConfigSynchronization>
 800483e:	1e03      	subs	r3, r0, #0
 8004840:	d001      	beq.n	8004846 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8004842:	f7fe fba0 	bl	8002f86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	46bd      	mov	sp, r7
 800484a:	b008      	add	sp, #32
 800484c:	bd80      	pop	{r7, pc}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	20000428 	.word	0x20000428
 8004854:	40012c00 	.word	0x40012c00
 8004858:	0000ffff 	.word	0x0000ffff

0800485c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800485c:	b590      	push	{r4, r7, lr}
 800485e:	b097      	sub	sp, #92	; 0x5c
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004864:	240c      	movs	r4, #12
 8004866:	193b      	adds	r3, r7, r4
 8004868:	0018      	movs	r0, r3
 800486a:	234c      	movs	r3, #76	; 0x4c
 800486c:	001a      	movs	r2, r3
 800486e:	2100      	movs	r1, #0
 8004870:	f005 f966 	bl	8009b40 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a11      	ldr	r2, [pc, #68]	; (80048c0 <HAL_TIM_Base_MspInit+0x64>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d11c      	bne.n	80048b8 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800487e:	193b      	adds	r3, r7, r4
 8004880:	2280      	movs	r2, #128	; 0x80
 8004882:	0392      	lsls	r2, r2, #14
 8004884:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004886:	193b      	adds	r3, r7, r4
 8004888:	2200      	movs	r2, #0
 800488a:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800488c:	193b      	adds	r3, r7, r4
 800488e:	0018      	movs	r0, r3
 8004890:	f001 fe04 	bl	800649c <HAL_RCCEx_PeriphCLKConfig>
 8004894:	1e03      	subs	r3, r0, #0
 8004896:	d001      	beq.n	800489c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8004898:	f7fe fb75 	bl	8002f86 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800489c:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <HAL_TIM_Base_MspInit+0x68>)
 800489e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048a0:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <HAL_TIM_Base_MspInit+0x68>)
 80048a2:	2180      	movs	r1, #128	; 0x80
 80048a4:	0109      	lsls	r1, r1, #4
 80048a6:	430a      	orrs	r2, r1
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <HAL_TIM_Base_MspInit+0x68>)
 80048ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ae:	2380      	movs	r3, #128	; 0x80
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	4013      	ands	r3, r2
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80048b8:	46c0      	nop			; (mov r8, r8)
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b017      	add	sp, #92	; 0x5c
 80048be:	bd90      	pop	{r4, r7, pc}
 80048c0:	40012c00 	.word	0x40012c00
 80048c4:	40021000 	.word	0x40021000

080048c8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80048cc:	4b23      	ldr	r3, [pc, #140]	; (800495c <MX_USART2_UART_Init+0x94>)
 80048ce:	4a24      	ldr	r2, [pc, #144]	; (8004960 <MX_USART2_UART_Init+0x98>)
 80048d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80048d2:	4b22      	ldr	r3, [pc, #136]	; (800495c <MX_USART2_UART_Init+0x94>)
 80048d4:	22e1      	movs	r2, #225	; 0xe1
 80048d6:	0252      	lsls	r2, r2, #9
 80048d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80048da:	4b20      	ldr	r3, [pc, #128]	; (800495c <MX_USART2_UART_Init+0x94>)
 80048dc:	2200      	movs	r2, #0
 80048de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048e0:	4b1e      	ldr	r3, [pc, #120]	; (800495c <MX_USART2_UART_Init+0x94>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048e6:	4b1d      	ldr	r3, [pc, #116]	; (800495c <MX_USART2_UART_Init+0x94>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80048ec:	4b1b      	ldr	r3, [pc, #108]	; (800495c <MX_USART2_UART_Init+0x94>)
 80048ee:	220c      	movs	r2, #12
 80048f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048f2:	4b1a      	ldr	r3, [pc, #104]	; (800495c <MX_USART2_UART_Init+0x94>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80048f8:	4b18      	ldr	r3, [pc, #96]	; (800495c <MX_USART2_UART_Init+0x94>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048fe:	4b17      	ldr	r3, [pc, #92]	; (800495c <MX_USART2_UART_Init+0x94>)
 8004900:	2200      	movs	r2, #0
 8004902:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004904:	4b15      	ldr	r3, [pc, #84]	; (800495c <MX_USART2_UART_Init+0x94>)
 8004906:	2200      	movs	r2, #0
 8004908:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800490a:	4b14      	ldr	r3, [pc, #80]	; (800495c <MX_USART2_UART_Init+0x94>)
 800490c:	2200      	movs	r2, #0
 800490e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004910:	4b12      	ldr	r3, [pc, #72]	; (800495c <MX_USART2_UART_Init+0x94>)
 8004912:	0018      	movs	r0, r3
 8004914:	f002 ff36 	bl	8007784 <HAL_UART_Init>
 8004918:	1e03      	subs	r3, r0, #0
 800491a:	d001      	beq.n	8004920 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800491c:	f7fe fb33 	bl	8002f86 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004920:	4b0e      	ldr	r3, [pc, #56]	; (800495c <MX_USART2_UART_Init+0x94>)
 8004922:	2100      	movs	r1, #0
 8004924:	0018      	movs	r0, r3
 8004926:	f003 fd79 	bl	800841c <HAL_UARTEx_SetTxFifoThreshold>
 800492a:	1e03      	subs	r3, r0, #0
 800492c:	d001      	beq.n	8004932 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800492e:	f7fe fb2a 	bl	8002f86 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <MX_USART2_UART_Init+0x94>)
 8004934:	2100      	movs	r1, #0
 8004936:	0018      	movs	r0, r3
 8004938:	f003 fdb0 	bl	800849c <HAL_UARTEx_SetRxFifoThreshold>
 800493c:	1e03      	subs	r3, r0, #0
 800493e:	d001      	beq.n	8004944 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004940:	f7fe fb21 	bl	8002f86 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <MX_USART2_UART_Init+0x94>)
 8004946:	0018      	movs	r0, r3
 8004948:	f003 fd2e 	bl	80083a8 <HAL_UARTEx_DisableFifoMode>
 800494c:	1e03      	subs	r3, r0, #0
 800494e:	d001      	beq.n	8004954 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004950:	f7fe fb19 	bl	8002f86 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004954:	46c0      	nop			; (mov r8, r8)
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	20000474 	.word	0x20000474
 8004960:	40004400 	.word	0x40004400

08004964 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004964:	b590      	push	{r4, r7, lr}
 8004966:	b09d      	sub	sp, #116	; 0x74
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800496c:	235c      	movs	r3, #92	; 0x5c
 800496e:	18fb      	adds	r3, r7, r3
 8004970:	0018      	movs	r0, r3
 8004972:	2314      	movs	r3, #20
 8004974:	001a      	movs	r2, r3
 8004976:	2100      	movs	r1, #0
 8004978:	f005 f8e2 	bl	8009b40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800497c:	2410      	movs	r4, #16
 800497e:	193b      	adds	r3, r7, r4
 8004980:	0018      	movs	r0, r3
 8004982:	234c      	movs	r3, #76	; 0x4c
 8004984:	001a      	movs	r2, r3
 8004986:	2100      	movs	r1, #0
 8004988:	f005 f8da 	bl	8009b40 <memset>
  if(uartHandle->Instance==USART2)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a22      	ldr	r2, [pc, #136]	; (8004a1c <HAL_UART_MspInit+0xb8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d13e      	bne.n	8004a14 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004996:	193b      	adds	r3, r7, r4
 8004998:	2202      	movs	r2, #2
 800499a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800499c:	193b      	adds	r3, r7, r4
 800499e:	2200      	movs	r2, #0
 80049a0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049a2:	193b      	adds	r3, r7, r4
 80049a4:	0018      	movs	r0, r3
 80049a6:	f001 fd79 	bl	800649c <HAL_RCCEx_PeriphCLKConfig>
 80049aa:	1e03      	subs	r3, r0, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80049ae:	f7fe faea 	bl	8002f86 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049b2:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <HAL_UART_MspInit+0xbc>)
 80049b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049b6:	4b1a      	ldr	r3, [pc, #104]	; (8004a20 <HAL_UART_MspInit+0xbc>)
 80049b8:	2180      	movs	r1, #128	; 0x80
 80049ba:	0289      	lsls	r1, r1, #10
 80049bc:	430a      	orrs	r2, r1
 80049be:	63da      	str	r2, [r3, #60]	; 0x3c
 80049c0:	4b17      	ldr	r3, [pc, #92]	; (8004a20 <HAL_UART_MspInit+0xbc>)
 80049c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049c4:	2380      	movs	r3, #128	; 0x80
 80049c6:	029b      	lsls	r3, r3, #10
 80049c8:	4013      	ands	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049ce:	4b14      	ldr	r3, [pc, #80]	; (8004a20 <HAL_UART_MspInit+0xbc>)
 80049d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049d2:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <HAL_UART_MspInit+0xbc>)
 80049d4:	2101      	movs	r1, #1
 80049d6:	430a      	orrs	r2, r1
 80049d8:	635a      	str	r2, [r3, #52]	; 0x34
 80049da:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <HAL_UART_MspInit+0xbc>)
 80049dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049de:	2201      	movs	r2, #1
 80049e0:	4013      	ands	r3, r2
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80049e6:	215c      	movs	r1, #92	; 0x5c
 80049e8:	187b      	adds	r3, r7, r1
 80049ea:	220c      	movs	r2, #12
 80049ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ee:	187b      	adds	r3, r7, r1
 80049f0:	2202      	movs	r2, #2
 80049f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f4:	187b      	adds	r3, r7, r1
 80049f6:	2200      	movs	r2, #0
 80049f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049fa:	187b      	adds	r3, r7, r1
 80049fc:	2200      	movs	r2, #0
 80049fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004a00:	187b      	adds	r3, r7, r1
 8004a02:	2201      	movs	r2, #1
 8004a04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a06:	187a      	adds	r2, r7, r1
 8004a08:	23a0      	movs	r3, #160	; 0xa0
 8004a0a:	05db      	lsls	r3, r3, #23
 8004a0c:	0011      	movs	r1, r2
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f000 fcf4 	bl	80053fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004a14:	46c0      	nop			; (mov r8, r8)
 8004a16:	46bd      	mov	sp, r7
 8004a18:	b01d      	add	sp, #116	; 0x74
 8004a1a:	bd90      	pop	{r4, r7, pc}
 8004a1c:	40004400 	.word	0x40004400
 8004a20:	40021000 	.word	0x40021000

08004a24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004a24:	480d      	ldr	r0, [pc, #52]	; (8004a5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004a26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004a28:	f7ff feb6 	bl	8004798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a2c:	480c      	ldr	r0, [pc, #48]	; (8004a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8004a2e:	490d      	ldr	r1, [pc, #52]	; (8004a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a30:	4a0d      	ldr	r2, [pc, #52]	; (8004a68 <LoopForever+0xe>)
  movs r3, #0
 8004a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a34:	e002      	b.n	8004a3c <LoopCopyDataInit>

08004a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a3a:	3304      	adds	r3, #4

08004a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a40:	d3f9      	bcc.n	8004a36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a42:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a44:	4c0a      	ldr	r4, [pc, #40]	; (8004a70 <LoopForever+0x16>)
  movs r3, #0
 8004a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a48:	e001      	b.n	8004a4e <LoopFillZerobss>

08004a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a4c:	3204      	adds	r2, #4

08004a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a50:	d3fb      	bcc.n	8004a4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004a52:	f005 f845 	bl	8009ae0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004a56:	f7fe f9e7 	bl	8002e28 <main>

08004a5a <LoopForever>:

LoopForever:
  b LoopForever
 8004a5a:	e7fe      	b.n	8004a5a <LoopForever>
  ldr   r0, =_estack
 8004a5c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8004a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a64:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 8004a68:	0800bc28 	.word	0x0800bc28
  ldr r2, =_sbss
 8004a6c:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8004a70:	20000824 	.word	0x20000824

08004a74 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a74:	e7fe      	b.n	8004a74 <ADC1_COMP_IRQHandler>
	...

08004a78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a7e:	1dfb      	adds	r3, r7, #7
 8004a80:	2200      	movs	r2, #0
 8004a82:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a84:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <HAL_Init+0x3c>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <HAL_Init+0x3c>)
 8004a8a:	2180      	movs	r1, #128	; 0x80
 8004a8c:	0049      	lsls	r1, r1, #1
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a92:	2000      	movs	r0, #0
 8004a94:	f000 f83c 	bl	8004b10 <HAL_InitTick>
 8004a98:	1e03      	subs	r3, r0, #0
 8004a9a:	d003      	beq.n	8004aa4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004a9c:	1dfb      	adds	r3, r7, #7
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	701a      	strb	r2, [r3, #0]
 8004aa2:	e001      	b.n	8004aa8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004aa4:	f7ff fc7e 	bl	80043a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004aa8:	1dfb      	adds	r3, r7, #7
 8004aaa:	781b      	ldrb	r3, [r3, #0]
}
 8004aac:	0018      	movs	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b002      	add	sp, #8
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40022000 	.word	0x40022000

08004ab8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8004abc:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <HAL_DeInit+0x48>)
 8004abe:	2201      	movs	r2, #1
 8004ac0:	4252      	negs	r2, r2
 8004ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_APB1_RELEASE_RESET();
 8004ac4:	4b0e      	ldr	r3, [pc, #56]	; (8004b00 <HAL_DeInit+0x48>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_APB2_FORCE_RESET();
 8004aca:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <HAL_DeInit+0x48>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	4252      	negs	r2, r2
 8004ad0:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_APB2_RELEASE_RESET();
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <HAL_DeInit+0x48>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	631a      	str	r2, [r3, #48]	; 0x30

  __HAL_RCC_AHB_FORCE_RESET();
 8004ad8:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <HAL_DeInit+0x48>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	4252      	negs	r2, r2
 8004ade:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8004ae0:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <HAL_DeInit+0x48>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_IOP_FORCE_RESET();
 8004ae6:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <HAL_DeInit+0x48>)
 8004ae8:	2201      	movs	r2, #1
 8004aea:	4252      	negs	r2, r2
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_IOP_RELEASE_RESET();
 8004aee:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <HAL_DeInit+0x48>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8004af4:	f000 f806 	bl	8004b04 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	0018      	movs	r0, r3
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40021000 	.word	0x40021000

08004b04 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8004b08:	46c0      	nop			; (mov r8, r8)
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004b18:	230f      	movs	r3, #15
 8004b1a:	18fb      	adds	r3, r7, r3
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004b20:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <HAL_InitTick+0x88>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d02b      	beq.n	8004b80 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004b28:	4b1c      	ldr	r3, [pc, #112]	; (8004b9c <HAL_InitTick+0x8c>)
 8004b2a:	681c      	ldr	r4, [r3, #0]
 8004b2c:	4b1a      	ldr	r3, [pc, #104]	; (8004b98 <HAL_InitTick+0x88>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	0019      	movs	r1, r3
 8004b32:	23fa      	movs	r3, #250	; 0xfa
 8004b34:	0098      	lsls	r0, r3, #2
 8004b36:	f7fd f9ab 	bl	8001e90 <__udivsi3>
 8004b3a:	0003      	movs	r3, r0
 8004b3c:	0019      	movs	r1, r3
 8004b3e:	0020      	movs	r0, r4
 8004b40:	f7fd f9a6 	bl	8001e90 <__udivsi3>
 8004b44:	0003      	movs	r3, r0
 8004b46:	0018      	movs	r0, r3
 8004b48:	f000 f93d 	bl	8004dc6 <HAL_SYSTICK_Config>
 8004b4c:	1e03      	subs	r3, r0, #0
 8004b4e:	d112      	bne.n	8004b76 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d80a      	bhi.n	8004b6c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	2301      	movs	r3, #1
 8004b5a:	425b      	negs	r3, r3
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f000 f90c 	bl	8004d7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <HAL_InitTick+0x90>)
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	e00d      	b.n	8004b88 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004b6c:	230f      	movs	r3, #15
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	2201      	movs	r2, #1
 8004b72:	701a      	strb	r2, [r3, #0]
 8004b74:	e008      	b.n	8004b88 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004b76:	230f      	movs	r3, #15
 8004b78:	18fb      	adds	r3, r7, r3
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	e003      	b.n	8004b88 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004b80:	230f      	movs	r3, #15
 8004b82:	18fb      	adds	r3, r7, r3
 8004b84:	2201      	movs	r2, #1
 8004b86:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004b88:	230f      	movs	r3, #15
 8004b8a:	18fb      	adds	r3, r7, r3
 8004b8c:	781b      	ldrb	r3, [r3, #0]
}
 8004b8e:	0018      	movs	r0, r3
 8004b90:	46bd      	mov	sp, r7
 8004b92:	b005      	add	sp, #20
 8004b94:	bd90      	pop	{r4, r7, pc}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	20000058 	.word	0x20000058
 8004b9c:	20000050 	.word	0x20000050
 8004ba0:	20000054 	.word	0x20000054

08004ba4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004ba8:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <HAL_IncTick+0x1c>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	001a      	movs	r2, r3
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_IncTick+0x20>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	18d2      	adds	r2, r2, r3
 8004bb4:	4b03      	ldr	r3, [pc, #12]	; (8004bc4 <HAL_IncTick+0x20>)
 8004bb6:	601a      	str	r2, [r3, #0]
}
 8004bb8:	46c0      	nop			; (mov r8, r8)
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	20000058 	.word	0x20000058
 8004bc4:	20000508 	.word	0x20000508

08004bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  return uwTick;
 8004bcc:	4b02      	ldr	r3, [pc, #8]	; (8004bd8 <HAL_GetTick+0x10>)
 8004bce:	681b      	ldr	r3, [r3, #0]
}
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	20000508 	.word	0x20000508

08004bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004be4:	f7ff fff0 	bl	8004bc8 <HAL_GetTick>
 8004be8:	0003      	movs	r3, r0
 8004bea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	d005      	beq.n	8004c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <HAL_Delay+0x44>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	001a      	movs	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	189b      	adds	r3, r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	f7ff ffe0 	bl	8004bc8 <HAL_GetTick>
 8004c08:	0002      	movs	r2, r0
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d8f7      	bhi.n	8004c04 <HAL_Delay+0x28>
  {
  }
}
 8004c14:	46c0      	nop			; (mov r8, r8)
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	b004      	add	sp, #16
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	20000058 	.word	0x20000058

08004c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	0002      	movs	r2, r0
 8004c2c:	1dfb      	adds	r3, r7, #7
 8004c2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c30:	1dfb      	adds	r3, r7, #7
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b7f      	cmp	r3, #127	; 0x7f
 8004c36:	d809      	bhi.n	8004c4c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c38:	1dfb      	adds	r3, r7, #7
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	001a      	movs	r2, r3
 8004c3e:	231f      	movs	r3, #31
 8004c40:	401a      	ands	r2, r3
 8004c42:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <__NVIC_EnableIRQ+0x30>)
 8004c44:	2101      	movs	r1, #1
 8004c46:	4091      	lsls	r1, r2
 8004c48:	000a      	movs	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004c4c:	46c0      	nop			; (mov r8, r8)
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b002      	add	sp, #8
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	e000e100 	.word	0xe000e100

08004c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c58:	b590      	push	{r4, r7, lr}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	0002      	movs	r2, r0
 8004c60:	6039      	str	r1, [r7, #0]
 8004c62:	1dfb      	adds	r3, r7, #7
 8004c64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c66:	1dfb      	adds	r3, r7, #7
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c6c:	d828      	bhi.n	8004cc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c6e:	4a2f      	ldr	r2, [pc, #188]	; (8004d2c <__NVIC_SetPriority+0xd4>)
 8004c70:	1dfb      	adds	r3, r7, #7
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	b25b      	sxtb	r3, r3
 8004c76:	089b      	lsrs	r3, r3, #2
 8004c78:	33c0      	adds	r3, #192	; 0xc0
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	589b      	ldr	r3, [r3, r2]
 8004c7e:	1dfa      	adds	r2, r7, #7
 8004c80:	7812      	ldrb	r2, [r2, #0]
 8004c82:	0011      	movs	r1, r2
 8004c84:	2203      	movs	r2, #3
 8004c86:	400a      	ands	r2, r1
 8004c88:	00d2      	lsls	r2, r2, #3
 8004c8a:	21ff      	movs	r1, #255	; 0xff
 8004c8c:	4091      	lsls	r1, r2
 8004c8e:	000a      	movs	r2, r1
 8004c90:	43d2      	mvns	r2, r2
 8004c92:	401a      	ands	r2, r3
 8004c94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	019b      	lsls	r3, r3, #6
 8004c9a:	22ff      	movs	r2, #255	; 0xff
 8004c9c:	401a      	ands	r2, r3
 8004c9e:	1dfb      	adds	r3, r7, #7
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	4003      	ands	r3, r0
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cac:	481f      	ldr	r0, [pc, #124]	; (8004d2c <__NVIC_SetPriority+0xd4>)
 8004cae:	1dfb      	adds	r3, r7, #7
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	b25b      	sxtb	r3, r3
 8004cb4:	089b      	lsrs	r3, r3, #2
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	33c0      	adds	r3, #192	; 0xc0
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004cbe:	e031      	b.n	8004d24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cc0:	4a1b      	ldr	r2, [pc, #108]	; (8004d30 <__NVIC_SetPriority+0xd8>)
 8004cc2:	1dfb      	adds	r3, r7, #7
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	230f      	movs	r3, #15
 8004cca:	400b      	ands	r3, r1
 8004ccc:	3b08      	subs	r3, #8
 8004cce:	089b      	lsrs	r3, r3, #2
 8004cd0:	3306      	adds	r3, #6
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	18d3      	adds	r3, r2, r3
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	1dfa      	adds	r2, r7, #7
 8004cdc:	7812      	ldrb	r2, [r2, #0]
 8004cde:	0011      	movs	r1, r2
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	400a      	ands	r2, r1
 8004ce4:	00d2      	lsls	r2, r2, #3
 8004ce6:	21ff      	movs	r1, #255	; 0xff
 8004ce8:	4091      	lsls	r1, r2
 8004cea:	000a      	movs	r2, r1
 8004cec:	43d2      	mvns	r2, r2
 8004cee:	401a      	ands	r2, r3
 8004cf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	019b      	lsls	r3, r3, #6
 8004cf6:	22ff      	movs	r2, #255	; 0xff
 8004cf8:	401a      	ands	r2, r3
 8004cfa:	1dfb      	adds	r3, r7, #7
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	0018      	movs	r0, r3
 8004d00:	2303      	movs	r3, #3
 8004d02:	4003      	ands	r3, r0
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d08:	4809      	ldr	r0, [pc, #36]	; (8004d30 <__NVIC_SetPriority+0xd8>)
 8004d0a:	1dfb      	adds	r3, r7, #7
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	001c      	movs	r4, r3
 8004d10:	230f      	movs	r3, #15
 8004d12:	4023      	ands	r3, r4
 8004d14:	3b08      	subs	r3, #8
 8004d16:	089b      	lsrs	r3, r3, #2
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	3306      	adds	r3, #6
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	18c3      	adds	r3, r0, r3
 8004d20:	3304      	adds	r3, #4
 8004d22:	601a      	str	r2, [r3, #0]
}
 8004d24:	46c0      	nop			; (mov r8, r8)
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b003      	add	sp, #12
 8004d2a:	bd90      	pop	{r4, r7, pc}
 8004d2c:	e000e100 	.word	0xe000e100
 8004d30:	e000ed00 	.word	0xe000ed00

08004d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	1e5a      	subs	r2, r3, #1
 8004d40:	2380      	movs	r3, #128	; 0x80
 8004d42:	045b      	lsls	r3, r3, #17
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d301      	bcc.n	8004d4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e010      	b.n	8004d6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d4c:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <SysTick_Config+0x44>)
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	3a01      	subs	r2, #1
 8004d52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d54:	2301      	movs	r3, #1
 8004d56:	425b      	negs	r3, r3
 8004d58:	2103      	movs	r1, #3
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f7ff ff7c 	bl	8004c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <SysTick_Config+0x44>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d66:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <SysTick_Config+0x44>)
 8004d68:	2207      	movs	r2, #7
 8004d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	0018      	movs	r0, r3
 8004d70:	46bd      	mov	sp, r7
 8004d72:	b002      	add	sp, #8
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	e000e010 	.word	0xe000e010

08004d7c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	607a      	str	r2, [r7, #4]
 8004d86:	210f      	movs	r1, #15
 8004d88:	187b      	adds	r3, r7, r1
 8004d8a:	1c02      	adds	r2, r0, #0
 8004d8c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	187b      	adds	r3, r7, r1
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	b25b      	sxtb	r3, r3
 8004d96:	0011      	movs	r1, r2
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f7ff ff5d 	bl	8004c58 <__NVIC_SetPriority>
}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	46bd      	mov	sp, r7
 8004da2:	b004      	add	sp, #16
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b082      	sub	sp, #8
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	0002      	movs	r2, r0
 8004dae:	1dfb      	adds	r3, r7, #7
 8004db0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004db2:	1dfb      	adds	r3, r7, #7
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b25b      	sxtb	r3, r3
 8004db8:	0018      	movs	r0, r3
 8004dba:	f7ff ff33 	bl	8004c24 <__NVIC_EnableIRQ>
}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	b002      	add	sp, #8
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f7ff ffaf 	bl	8004d34 <SysTick_Config>
 8004dd6:	0003      	movs	r3, r0
}
 8004dd8:	0018      	movs	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	b002      	add	sp, #8
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e056      	b.n	8004ea0 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	7f5b      	ldrb	r3, [r3, #29]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d106      	bne.n	8004e0a <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	0018      	movs	r0, r3
 8004e06:	f7fd fdd9 	bl	80029bc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	791b      	ldrb	r3, [r3, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10c      	bne.n	8004e32 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a22      	ldr	r2, [pc, #136]	; (8004ea8 <HAL_CRC_Init+0xc8>)
 8004e1e:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2118      	movs	r1, #24
 8004e2c:	438a      	bics	r2, r1
 8004e2e:	609a      	str	r2, [r3, #8]
 8004e30:	e00b      	b.n	8004e4a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6899      	ldr	r1, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	f000 f835 	bl	8004eac <HAL_CRCEx_Polynomial_Set>
 8004e42:	1e03      	subs	r3, r0, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e02a      	b.n	8004ea0 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	795b      	ldrb	r3, [r3, #5]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d105      	bne.n	8004e5e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2201      	movs	r2, #1
 8004e58:	4252      	negs	r2, r2
 8004e5a:	611a      	str	r2, [r3, #16]
 8004e5c:	e004      	b.n	8004e68 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6912      	ldr	r2, [r2, #16]
 8004e66:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2260      	movs	r2, #96	; 0x60
 8004e70:	4393      	bics	r3, r2
 8004e72:	0019      	movs	r1, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2280      	movs	r2, #128	; 0x80
 8004e88:	4393      	bics	r3, r2
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699a      	ldr	r2, [r3, #24]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	b002      	add	sp, #8
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	04c11db7 	.word	0x04c11db7

08004eac <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb8:	2317      	movs	r3, #23
 8004eba:	18fb      	adds	r3, r7, r3
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004ec0:	231f      	movs	r3, #31
 8004ec2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004ec4:	46c0      	nop			; (mov r8, r8)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1e5a      	subs	r2, r3, #1
 8004eca:	613a      	str	r2, [r7, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_CRCEx_Polynomial_Set+0x36>
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	221f      	movs	r2, #31
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	40da      	lsrs	r2, r3
 8004eda:	0013      	movs	r3, r2
 8004edc:	2201      	movs	r2, #1
 8004ede:	4013      	ands	r3, r2
 8004ee0:	d0f1      	beq.n	8004ec6 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b18      	cmp	r3, #24
 8004ee6:	d00f      	beq.n	8004f08 <HAL_CRCEx_Polynomial_Set+0x5c>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b18      	cmp	r3, #24
 8004eec:	d824      	bhi.n	8004f38 <HAL_CRCEx_Polynomial_Set+0x8c>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d011      	beq.n	8004f18 <HAL_CRCEx_Polynomial_Set+0x6c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b10      	cmp	r3, #16
 8004ef8:	d81e      	bhi.n	8004f38 <HAL_CRCEx_Polynomial_Set+0x8c>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d020      	beq.n	8004f42 <HAL_CRCEx_Polynomial_Set+0x96>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	d010      	beq.n	8004f28 <HAL_CRCEx_Polynomial_Set+0x7c>
 8004f06:	e017      	b.n	8004f38 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	2b06      	cmp	r3, #6
 8004f0c:	d91b      	bls.n	8004f46 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8004f0e:	2317      	movs	r3, #23
 8004f10:	18fb      	adds	r3, r7, r3
 8004f12:	2201      	movs	r2, #1
 8004f14:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004f16:	e016      	b.n	8004f46 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b07      	cmp	r3, #7
 8004f1c:	d915      	bls.n	8004f4a <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8004f1e:	2317      	movs	r3, #23
 8004f20:	18fb      	adds	r3, r7, r3
 8004f22:	2201      	movs	r2, #1
 8004f24:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004f26:	e010      	b.n	8004f4a <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b0f      	cmp	r3, #15
 8004f2c:	d90f      	bls.n	8004f4e <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8004f2e:	2317      	movs	r3, #23
 8004f30:	18fb      	adds	r3, r7, r3
 8004f32:	2201      	movs	r2, #1
 8004f34:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004f36:	e00a      	b.n	8004f4e <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004f38:	2317      	movs	r3, #23
 8004f3a:	18fb      	adds	r3, r7, r3
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	701a      	strb	r2, [r3, #0]
      break;
 8004f40:	e006      	b.n	8004f50 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	e004      	b.n	8004f50 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	e002      	b.n	8004f50 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	e000      	b.n	8004f50 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004f4e:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8004f50:	2317      	movs	r3, #23
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10e      	bne.n	8004f78 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	2218      	movs	r2, #24
 8004f6a:	4393      	bics	r3, r2
 8004f6c:	0019      	movs	r1, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004f78:	2317      	movs	r3, #23
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	781b      	ldrb	r3, [r3, #0]
}
 8004f7e:	0018      	movs	r0, r3
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b006      	add	sp, #24
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b086      	sub	sp, #24
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	200b      	movs	r0, #11
 8004f92:	183b      	adds	r3, r7, r0
 8004f94:	1c0a      	adds	r2, r1, #0
 8004f96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f98:	2317      	movs	r3, #23
 8004f9a:	18fb      	adds	r3, r7, r3
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 8004fa0:	183b      	adds	r3, r7, r0
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d010      	beq.n	8004fca <HAL_EXTI_RegisterCallback+0x44>
 8004fa8:	dc13      	bgt.n	8004fd2 <HAL_EXTI_RegisterCallback+0x4c>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <HAL_EXTI_RegisterCallback+0x2e>
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d007      	beq.n	8004fc2 <HAL_EXTI_RegisterCallback+0x3c>
 8004fb2:	e00e      	b.n	8004fd2 <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	609a      	str	r2, [r3, #8]
      break;
 8004fc0:	e00c      	b.n	8004fdc <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	605a      	str	r2, [r3, #4]
      break;
 8004fc8:	e008      	b.n	8004fdc <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	609a      	str	r2, [r3, #8]
      break;
 8004fd0:	e004      	b.n	8004fdc <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 8004fd2:	2317      	movs	r3, #23
 8004fd4:	18fb      	adds	r3, r7, r3
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	701a      	strb	r2, [r3, #0]
      break;
 8004fda:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8004fdc:	2317      	movs	r3, #23
 8004fde:	18fb      	adds	r3, r7, r3
 8004fe0:	781b      	ldrb	r3, [r3, #0]
}
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	b006      	add	sp, #24
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e003      	b.n	8005006 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005004:	2300      	movs	r3, #0
  }
}
 8005006:	0018      	movs	r0, r3
 8005008:	46bd      	mov	sp, r7
 800500a:	b002      	add	sp, #8
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	0c1b      	lsrs	r3, r3, #16
 800501e:	2201      	movs	r2, #1
 8005020:	4013      	ands	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	221f      	movs	r2, #31
 800502a:	4013      	ands	r3, r2
 800502c:	2201      	movs	r2, #1
 800502e:	409a      	lsls	r2, r3
 8005030:	0013      	movs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	015b      	lsls	r3, r3, #5
 8005038:	4a18      	ldr	r2, [pc, #96]	; (800509c <HAL_EXTI_IRQHandler+0x8c>)
 800503a:	4694      	mov	ip, r2
 800503c:	4463      	add	r3, ip
 800503e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	4013      	ands	r3, r2
 8005048:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d009      	beq.n	8005064 <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	015b      	lsls	r3, r3, #5
 8005068:	4a0d      	ldr	r2, [pc, #52]	; (80050a0 <HAL_EXTI_IRQHandler+0x90>)
 800506a:	4694      	mov	ip, r2
 800506c:	4463      	add	r3, ip
 800506e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	4013      	ands	r3, r2
 8005078:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d009      	beq.n	8005094 <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	4798      	blx	r3
    }
  }
}
 8005094:	46c0      	nop			; (mov r8, r8)
 8005096:	46bd      	mov	sp, r7
 8005098:	b006      	add	sp, #24
 800509a:	bd80      	pop	{r7, pc}
 800509c:	4002180c 	.word	0x4002180c
 80050a0:	40021810 	.word	0x40021810

080050a4 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80050a4:	b5b0      	push	{r4, r5, r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	603a      	str	r2, [r7, #0]
 80050b0:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80050b2:	4b21      	ldr	r3, [pc, #132]	; (8005138 <HAL_FLASH_Program+0x94>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d101      	bne.n	80050be <HAL_FLASH_Program+0x1a>
 80050ba:	2302      	movs	r3, #2
 80050bc:	e038      	b.n	8005130 <HAL_FLASH_Program+0x8c>
 80050be:	4b1e      	ldr	r3, [pc, #120]	; (8005138 <HAL_FLASH_Program+0x94>)
 80050c0:	2201      	movs	r2, #1
 80050c2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80050c4:	4b1c      	ldr	r3, [pc, #112]	; (8005138 <HAL_FLASH_Program+0x94>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80050ca:	2517      	movs	r5, #23
 80050cc:	197c      	adds	r4, r7, r5
 80050ce:	23fa      	movs	r3, #250	; 0xfa
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	0018      	movs	r0, r3
 80050d4:	f000 f874 	bl	80051c0 <FLASH_WaitForLastOperation>
 80050d8:	0003      	movs	r3, r0
 80050da:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80050dc:	197b      	adds	r3, r7, r5
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d11f      	bne.n	8005124 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d106      	bne.n	80050f8 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68b9      	ldr	r1, [r7, #8]
 80050f0:	0008      	movs	r0, r1
 80050f2:	f000 f8b3 	bl	800525c <FLASH_Program_DoubleWord>
 80050f6:	e005      	b.n	8005104 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	0011      	movs	r1, r2
 80050fe:	0018      	movs	r0, r3
 8005100:	f005 fd82 	bl	800ac08 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005104:	2317      	movs	r3, #23
 8005106:	18fc      	adds	r4, r7, r3
 8005108:	23fa      	movs	r3, #250	; 0xfa
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	0018      	movs	r0, r3
 800510e:	f000 f857 	bl	80051c0 <FLASH_WaitForLastOperation>
 8005112:	0003      	movs	r3, r0
 8005114:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005116:	4b09      	ldr	r3, [pc, #36]	; (800513c <HAL_FLASH_Program+0x98>)
 8005118:	695a      	ldr	r2, [r3, #20]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	43d9      	mvns	r1, r3
 800511e:	4b07      	ldr	r3, [pc, #28]	; (800513c <HAL_FLASH_Program+0x98>)
 8005120:	400a      	ands	r2, r1
 8005122:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005124:	4b04      	ldr	r3, [pc, #16]	; (8005138 <HAL_FLASH_Program+0x94>)
 8005126:	2200      	movs	r2, #0
 8005128:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800512a:	2317      	movs	r3, #23
 800512c:	18fb      	adds	r3, r7, r3
 800512e:	781b      	ldrb	r3, [r3, #0]
}
 8005130:	0018      	movs	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	b006      	add	sp, #24
 8005136:	bdb0      	pop	{r4, r5, r7, pc}
 8005138:	2000050c 	.word	0x2000050c
 800513c:	40022000 	.word	0x40022000

08005140 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005146:	1dfb      	adds	r3, r7, #7
 8005148:	2200      	movs	r2, #0
 800514a:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800514c:	4b0b      	ldr	r3, [pc, #44]	; (800517c <HAL_FLASH_Unlock+0x3c>)
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	da0c      	bge.n	800516e <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005154:	4b09      	ldr	r3, [pc, #36]	; (800517c <HAL_FLASH_Unlock+0x3c>)
 8005156:	4a0a      	ldr	r2, [pc, #40]	; (8005180 <HAL_FLASH_Unlock+0x40>)
 8005158:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800515a:	4b08      	ldr	r3, [pc, #32]	; (800517c <HAL_FLASH_Unlock+0x3c>)
 800515c:	4a09      	ldr	r2, [pc, #36]	; (8005184 <HAL_FLASH_Unlock+0x44>)
 800515e:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8005160:	4b06      	ldr	r3, [pc, #24]	; (800517c <HAL_FLASH_Unlock+0x3c>)
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	da02      	bge.n	800516e <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8005168:	1dfb      	adds	r3, r7, #7
 800516a:	2201      	movs	r2, #1
 800516c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800516e:	1dfb      	adds	r3, r7, #7
 8005170:	781b      	ldrb	r3, [r3, #0]
}
 8005172:	0018      	movs	r0, r3
 8005174:	46bd      	mov	sp, r7
 8005176:	b002      	add	sp, #8
 8005178:	bd80      	pop	{r7, pc}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	40022000 	.word	0x40022000
 8005180:	45670123 	.word	0x45670123
 8005184:	cdef89ab 	.word	0xcdef89ab

08005188 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800518e:	1dfb      	adds	r3, r7, #7
 8005190:	2201      	movs	r2, #1
 8005192:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005194:	4b09      	ldr	r3, [pc, #36]	; (80051bc <HAL_FLASH_Lock+0x34>)
 8005196:	695a      	ldr	r2, [r3, #20]
 8005198:	4b08      	ldr	r3, [pc, #32]	; (80051bc <HAL_FLASH_Lock+0x34>)
 800519a:	2180      	movs	r1, #128	; 0x80
 800519c:	0609      	lsls	r1, r1, #24
 800519e:	430a      	orrs	r2, r1
 80051a0:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80051a2:	4b06      	ldr	r3, [pc, #24]	; (80051bc <HAL_FLASH_Lock+0x34>)
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	da02      	bge.n	80051b0 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 80051aa:	1dfb      	adds	r3, r7, #7
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80051b0:	1dfb      	adds	r3, r7, #7
 80051b2:	781b      	ldrb	r3, [r3, #0]
}
 80051b4:	0018      	movs	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b002      	add	sp, #8
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40022000 	.word	0x40022000

080051c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 80051c8:	f7ff fcfe 	bl	8004bc8 <HAL_GetTick>
 80051cc:	0002      	movs	r2, r0
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	189b      	adds	r3, r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 80051d4:	23c0      	movs	r3, #192	; 0xc0
 80051d6:	029b      	lsls	r3, r3, #10
 80051d8:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 80051da:	e007      	b.n	80051ec <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 80051dc:	f7ff fcf4 	bl	8004bc8 <HAL_GetTick>
 80051e0:	0002      	movs	r2, r0
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d801      	bhi.n	80051ec <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e02a      	b.n	8005242 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 80051ec:	4b17      	ldr	r3, [pc, #92]	; (800524c <FLASH_WaitForLastOperation+0x8c>)
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	4013      	ands	r3, r2
 80051f4:	d1f2      	bne.n	80051dc <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80051f6:	4b15      	ldr	r3, [pc, #84]	; (800524c <FLASH_WaitForLastOperation+0x8c>)
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	4a15      	ldr	r2, [pc, #84]	; (8005250 <FLASH_WaitForLastOperation+0x90>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8005200:	4b12      	ldr	r3, [pc, #72]	; (800524c <FLASH_WaitForLastOperation+0x8c>)
 8005202:	4a14      	ldr	r2, [pc, #80]	; (8005254 <FLASH_WaitForLastOperation+0x94>)
 8005204:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800520c:	4b12      	ldr	r3, [pc, #72]	; (8005258 <FLASH_WaitForLastOperation+0x98>)
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e015      	b.n	8005242 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8005216:	f7ff fcd7 	bl	8004bc8 <HAL_GetTick>
 800521a:	0002      	movs	r2, r0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	189b      	adds	r3, r3, r2
 8005220:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8005222:	e007      	b.n	8005234 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8005224:	f7ff fcd0 	bl	8004bc8 <HAL_GetTick>
 8005228:	0002      	movs	r2, r0
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4293      	cmp	r3, r2
 800522e:	d801      	bhi.n	8005234 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e006      	b.n	8005242 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8005234:	4b05      	ldr	r3, [pc, #20]	; (800524c <FLASH_WaitForLastOperation+0x8c>)
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	2380      	movs	r3, #128	; 0x80
 800523a:	02db      	lsls	r3, r3, #11
 800523c:	4013      	ands	r3, r2
 800523e:	d1f1      	bne.n	8005224 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	0018      	movs	r0, r3
 8005244:	46bd      	mov	sp, r7
 8005246:	b004      	add	sp, #16
 8005248:	bd80      	pop	{r7, pc}
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	40022000 	.word	0x40022000
 8005250:	0000c3fa 	.word	0x0000c3fa
 8005254:	0008c3fb 	.word	0x0008c3fb
 8005258:	2000050c 	.word	0x2000050c

0800525c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800525c:	b5b0      	push	{r4, r5, r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	603a      	str	r2, [r7, #0]
 8005266:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005268:	4b0b      	ldr	r3, [pc, #44]	; (8005298 <FLASH_Program_DoubleWord+0x3c>)
 800526a:	695a      	ldr	r2, [r3, #20]
 800526c:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <FLASH_Program_DoubleWord+0x3c>)
 800526e:	2101      	movs	r1, #1
 8005270:	430a      	orrs	r2, r1
 8005272:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800527a:	f3bf 8f6f 	isb	sy
}
 800527e:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	001c      	movs	r4, r3
 8005284:	2300      	movs	r3, #0
 8005286:	001d      	movs	r5, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3304      	adds	r3, #4
 800528c:	0022      	movs	r2, r4
 800528e:	601a      	str	r2, [r3, #0]
}
 8005290:	46c0      	nop			; (mov r8, r8)
 8005292:	46bd      	mov	sp, r7
 8005294:	b004      	add	sp, #16
 8005296:	bdb0      	pop	{r4, r5, r7, pc}
 8005298:	40022000 	.word	0x40022000

0800529c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800529c:	b5b0      	push	{r4, r5, r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80052a6:	4b33      	ldr	r3, [pc, #204]	; (8005374 <HAL_FLASHEx_Erase+0xd8>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d101      	bne.n	80052b2 <HAL_FLASHEx_Erase+0x16>
 80052ae:	2302      	movs	r3, #2
 80052b0:	e05c      	b.n	800536c <HAL_FLASHEx_Erase+0xd0>
 80052b2:	4b30      	ldr	r3, [pc, #192]	; (8005374 <HAL_FLASHEx_Erase+0xd8>)
 80052b4:	2201      	movs	r2, #1
 80052b6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80052b8:	4b2e      	ldr	r3, [pc, #184]	; (8005374 <HAL_FLASHEx_Erase+0xd8>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80052be:	250f      	movs	r5, #15
 80052c0:	197c      	adds	r4, r7, r5
 80052c2:	23fa      	movs	r3, #250	; 0xfa
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	0018      	movs	r0, r3
 80052c8:	f7ff ff7a 	bl	80051c0 <FLASH_WaitForLastOperation>
 80052cc:	0003      	movs	r3, r0
 80052ce:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80052d0:	002c      	movs	r4, r5
 80052d2:	193b      	adds	r3, r7, r4
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d142      	bne.n	8005360 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d10d      	bne.n	80052fe <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	0018      	movs	r0, r3
 80052e8:	f000 f848 	bl	800537c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80052ec:	193c      	adds	r4, r7, r4
 80052ee:	23fa      	movs	r3, #250	; 0xfa
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	0018      	movs	r0, r3
 80052f4:	f7ff ff64 	bl	80051c0 <FLASH_WaitForLastOperation>
 80052f8:	0003      	movs	r3, r0
 80052fa:	7023      	strb	r3, [r4, #0]
 80052fc:	e030      	b.n	8005360 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2201      	movs	r2, #1
 8005302:	4252      	negs	r2, r2
 8005304:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	60bb      	str	r3, [r7, #8]
 800530c:	e01a      	b.n	8005344 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	0011      	movs	r1, r2
 8005316:	0018      	movs	r0, r3
 8005318:	f000 f844 	bl	80053a4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800531c:	250f      	movs	r5, #15
 800531e:	197c      	adds	r4, r7, r5
 8005320:	23fa      	movs	r3, #250	; 0xfa
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	0018      	movs	r0, r3
 8005326:	f7ff ff4b 	bl	80051c0 <FLASH_WaitForLastOperation>
 800532a:	0003      	movs	r3, r0
 800532c:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800532e:	197b      	adds	r3, r7, r5
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	601a      	str	r2, [r3, #0]
          break;
 800533c:	e00a      	b.n	8005354 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	3301      	adds	r3, #1
 8005342:	60bb      	str	r3, [r7, #8]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	18d3      	adds	r3, r2, r3
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	429a      	cmp	r2, r3
 8005352:	d3dc      	bcc.n	800530e <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005354:	4b08      	ldr	r3, [pc, #32]	; (8005378 <HAL_FLASHEx_Erase+0xdc>)
 8005356:	695a      	ldr	r2, [r3, #20]
 8005358:	4b07      	ldr	r3, [pc, #28]	; (8005378 <HAL_FLASHEx_Erase+0xdc>)
 800535a:	2102      	movs	r1, #2
 800535c:	438a      	bics	r2, r1
 800535e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005360:	4b04      	ldr	r3, [pc, #16]	; (8005374 <HAL_FLASHEx_Erase+0xd8>)
 8005362:	2200      	movs	r2, #0
 8005364:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005366:	230f      	movs	r3, #15
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	781b      	ldrb	r3, [r3, #0]
}
 800536c:	0018      	movs	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	b004      	add	sp, #16
 8005372:	bdb0      	pop	{r4, r5, r7, pc}
 8005374:	2000050c 	.word	0x2000050c
 8005378:	40022000 	.word	0x40022000

0800537c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8005384:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <FLASH_MassErase+0x24>)
 8005386:	695a      	ldr	r2, [r3, #20]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	431a      	orrs	r2, r3
 800538c:	4b04      	ldr	r3, [pc, #16]	; (80053a0 <FLASH_MassErase+0x24>)
 800538e:	2180      	movs	r1, #128	; 0x80
 8005390:	0249      	lsls	r1, r1, #9
 8005392:	430a      	orrs	r2, r1
 8005394:	615a      	str	r2, [r3, #20]
}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	46bd      	mov	sp, r7
 800539a:	b002      	add	sp, #8
 800539c:	bd80      	pop	{r7, pc}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	40022000 	.word	0x40022000

080053a4 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80053ae:	4b0f      	ldr	r3, [pc, #60]	; (80053ec <FLASH_PageErase+0x48>)
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	4a0f      	ldr	r2, [pc, #60]	; (80053f0 <FLASH_PageErase+0x4c>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d005      	beq.n	80053ca <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2280      	movs	r2, #128	; 0x80
 80053c2:	0192      	lsls	r2, r2, #6
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	e003      	b.n	80053d2 <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <FLASH_PageErase+0x50>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	00da      	lsls	r2, r3, #3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	431a      	orrs	r2, r3
 80053da:	4b04      	ldr	r3, [pc, #16]	; (80053ec <FLASH_PageErase+0x48>)
 80053dc:	4906      	ldr	r1, [pc, #24]	; (80053f8 <FLASH_PageErase+0x54>)
 80053de:	430a      	orrs	r2, r1
 80053e0:	615a      	str	r2, [r3, #20]
}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	46bd      	mov	sp, r7
 80053e6:	b004      	add	sp, #16
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	40022000 	.word	0x40022000
 80053f0:	ffffe007 	.word	0xffffe007
 80053f4:	ffffdfff 	.word	0xffffdfff
 80053f8:	00010002 	.word	0x00010002

080053fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800540a:	e14d      	b.n	80056a8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2101      	movs	r1, #1
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	4091      	lsls	r1, r2
 8005416:	000a      	movs	r2, r1
 8005418:	4013      	ands	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d100      	bne.n	8005424 <HAL_GPIO_Init+0x28>
 8005422:	e13e      	b.n	80056a2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2203      	movs	r2, #3
 800542a:	4013      	ands	r3, r2
 800542c:	2b01      	cmp	r3, #1
 800542e:	d005      	beq.n	800543c <HAL_GPIO_Init+0x40>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2203      	movs	r2, #3
 8005436:	4013      	ands	r3, r2
 8005438:	2b02      	cmp	r3, #2
 800543a:	d130      	bne.n	800549e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	2203      	movs	r2, #3
 8005448:	409a      	lsls	r2, r3
 800544a:	0013      	movs	r3, r2
 800544c:	43da      	mvns	r2, r3
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	4013      	ands	r3, r2
 8005452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	409a      	lsls	r2, r3
 800545e:	0013      	movs	r3, r2
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005472:	2201      	movs	r2, #1
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	409a      	lsls	r2, r3
 8005478:	0013      	movs	r3, r2
 800547a:	43da      	mvns	r2, r3
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	4013      	ands	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	091b      	lsrs	r3, r3, #4
 8005488:	2201      	movs	r2, #1
 800548a:	401a      	ands	r2, r3
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	409a      	lsls	r2, r3
 8005490:	0013      	movs	r3, r2
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2203      	movs	r2, #3
 80054a4:	4013      	ands	r3, r2
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d017      	beq.n	80054da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	2203      	movs	r2, #3
 80054b6:	409a      	lsls	r2, r3
 80054b8:	0013      	movs	r3, r2
 80054ba:	43da      	mvns	r2, r3
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	4013      	ands	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	409a      	lsls	r2, r3
 80054cc:	0013      	movs	r3, r2
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2203      	movs	r2, #3
 80054e0:	4013      	ands	r3, r2
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d123      	bne.n	800552e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	08da      	lsrs	r2, r3, #3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3208      	adds	r2, #8
 80054ee:	0092      	lsls	r2, r2, #2
 80054f0:	58d3      	ldr	r3, [r2, r3]
 80054f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	2207      	movs	r2, #7
 80054f8:	4013      	ands	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	220f      	movs	r2, #15
 80054fe:	409a      	lsls	r2, r3
 8005500:	0013      	movs	r3, r2
 8005502:	43da      	mvns	r2, r3
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	4013      	ands	r3, r2
 8005508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	691a      	ldr	r2, [r3, #16]
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2107      	movs	r1, #7
 8005512:	400b      	ands	r3, r1
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	409a      	lsls	r2, r3
 8005518:	0013      	movs	r3, r2
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	08da      	lsrs	r2, r3, #3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3208      	adds	r2, #8
 8005528:	0092      	lsls	r2, r2, #2
 800552a:	6939      	ldr	r1, [r7, #16]
 800552c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	2203      	movs	r2, #3
 800553a:	409a      	lsls	r2, r3
 800553c:	0013      	movs	r3, r2
 800553e:	43da      	mvns	r2, r3
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	4013      	ands	r3, r2
 8005544:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2203      	movs	r2, #3
 800554c:	401a      	ands	r2, r3
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	409a      	lsls	r2, r3
 8005554:	0013      	movs	r3, r2
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4313      	orrs	r3, r2
 800555a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	23c0      	movs	r3, #192	; 0xc0
 8005568:	029b      	lsls	r3, r3, #10
 800556a:	4013      	ands	r3, r2
 800556c:	d100      	bne.n	8005570 <HAL_GPIO_Init+0x174>
 800556e:	e098      	b.n	80056a2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005570:	4a53      	ldr	r2, [pc, #332]	; (80056c0 <HAL_GPIO_Init+0x2c4>)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	089b      	lsrs	r3, r3, #2
 8005576:	3318      	adds	r3, #24
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	589b      	ldr	r3, [r3, r2]
 800557c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2203      	movs	r2, #3
 8005582:	4013      	ands	r3, r2
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	220f      	movs	r2, #15
 8005588:	409a      	lsls	r2, r3
 800558a:	0013      	movs	r3, r2
 800558c:	43da      	mvns	r2, r3
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	4013      	ands	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	23a0      	movs	r3, #160	; 0xa0
 8005598:	05db      	lsls	r3, r3, #23
 800559a:	429a      	cmp	r2, r3
 800559c:	d019      	beq.n	80055d2 <HAL_GPIO_Init+0x1d6>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a48      	ldr	r2, [pc, #288]	; (80056c4 <HAL_GPIO_Init+0x2c8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <HAL_GPIO_Init+0x1d2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a47      	ldr	r2, [pc, #284]	; (80056c8 <HAL_GPIO_Init+0x2cc>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00d      	beq.n	80055ca <HAL_GPIO_Init+0x1ce>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a46      	ldr	r2, [pc, #280]	; (80056cc <HAL_GPIO_Init+0x2d0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <HAL_GPIO_Init+0x1ca>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a45      	ldr	r2, [pc, #276]	; (80056d0 <HAL_GPIO_Init+0x2d4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d101      	bne.n	80055c2 <HAL_GPIO_Init+0x1c6>
 80055be:	2304      	movs	r3, #4
 80055c0:	e008      	b.n	80055d4 <HAL_GPIO_Init+0x1d8>
 80055c2:	2305      	movs	r3, #5
 80055c4:	e006      	b.n	80055d4 <HAL_GPIO_Init+0x1d8>
 80055c6:	2303      	movs	r3, #3
 80055c8:	e004      	b.n	80055d4 <HAL_GPIO_Init+0x1d8>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e002      	b.n	80055d4 <HAL_GPIO_Init+0x1d8>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <HAL_GPIO_Init+0x1d8>
 80055d2:	2300      	movs	r3, #0
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	2103      	movs	r1, #3
 80055d8:	400a      	ands	r2, r1
 80055da:	00d2      	lsls	r2, r2, #3
 80055dc:	4093      	lsls	r3, r2
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80055e4:	4936      	ldr	r1, [pc, #216]	; (80056c0 <HAL_GPIO_Init+0x2c4>)
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	089b      	lsrs	r3, r3, #2
 80055ea:	3318      	adds	r3, #24
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055f2:	4b33      	ldr	r3, [pc, #204]	; (80056c0 <HAL_GPIO_Init+0x2c4>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	43da      	mvns	r2, r3
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4013      	ands	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	2380      	movs	r3, #128	; 0x80
 8005608:	035b      	lsls	r3, r3, #13
 800560a:	4013      	ands	r3, r2
 800560c:	d003      	beq.n	8005616 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005616:	4b2a      	ldr	r3, [pc, #168]	; (80056c0 <HAL_GPIO_Init+0x2c4>)
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800561c:	4b28      	ldr	r3, [pc, #160]	; (80056c0 <HAL_GPIO_Init+0x2c4>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	43da      	mvns	r2, r3
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	4013      	ands	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	2380      	movs	r3, #128	; 0x80
 8005632:	039b      	lsls	r3, r3, #14
 8005634:	4013      	ands	r3, r2
 8005636:	d003      	beq.n	8005640 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005640:	4b1f      	ldr	r3, [pc, #124]	; (80056c0 <HAL_GPIO_Init+0x2c4>)
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005646:	4a1e      	ldr	r2, [pc, #120]	; (80056c0 <HAL_GPIO_Init+0x2c4>)
 8005648:	2384      	movs	r3, #132	; 0x84
 800564a:	58d3      	ldr	r3, [r2, r3]
 800564c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	43da      	mvns	r2, r3
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	4013      	ands	r3, r2
 8005656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	2380      	movs	r3, #128	; 0x80
 800565e:	029b      	lsls	r3, r3, #10
 8005660:	4013      	ands	r3, r2
 8005662:	d003      	beq.n	800566c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800566c:	4914      	ldr	r1, [pc, #80]	; (80056c0 <HAL_GPIO_Init+0x2c4>)
 800566e:	2284      	movs	r2, #132	; 0x84
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005674:	4a12      	ldr	r2, [pc, #72]	; (80056c0 <HAL_GPIO_Init+0x2c4>)
 8005676:	2380      	movs	r3, #128	; 0x80
 8005678:	58d3      	ldr	r3, [r2, r3]
 800567a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	43da      	mvns	r2, r3
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	4013      	ands	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	2380      	movs	r3, #128	; 0x80
 800568c:	025b      	lsls	r3, r3, #9
 800568e:	4013      	ands	r3, r2
 8005690:	d003      	beq.n	800569a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800569a:	4909      	ldr	r1, [pc, #36]	; (80056c0 <HAL_GPIO_Init+0x2c4>)
 800569c:	2280      	movs	r2, #128	; 0x80
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	3301      	adds	r3, #1
 80056a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	40da      	lsrs	r2, r3
 80056b0:	1e13      	subs	r3, r2, #0
 80056b2:	d000      	beq.n	80056b6 <HAL_GPIO_Init+0x2ba>
 80056b4:	e6aa      	b.n	800540c <HAL_GPIO_Init+0x10>
  }
}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	46c0      	nop			; (mov r8, r8)
 80056ba:	46bd      	mov	sp, r7
 80056bc:	b006      	add	sp, #24
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40021800 	.word	0x40021800
 80056c4:	50000400 	.word	0x50000400
 80056c8:	50000800 	.word	0x50000800
 80056cc:	50000c00 	.word	0x50000c00
 80056d0:	50001000 	.word	0x50001000

080056d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80056e2:	e0ba      	b.n	800585a <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80056e4:	2201      	movs	r2, #1
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	409a      	lsls	r2, r3
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	4013      	ands	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d100      	bne.n	80056f8 <HAL_GPIO_DeInit+0x24>
 80056f6:	e0ad      	b.n	8005854 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80056f8:	4a5d      	ldr	r2, [pc, #372]	; (8005870 <HAL_GPIO_DeInit+0x19c>)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	089b      	lsrs	r3, r3, #2
 80056fe:	3318      	adds	r3, #24
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	589b      	ldr	r3, [r3, r2]
 8005704:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2203      	movs	r2, #3
 800570a:	4013      	ands	r3, r2
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	220f      	movs	r2, #15
 8005710:	409a      	lsls	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4013      	ands	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	23a0      	movs	r3, #160	; 0xa0
 800571c:	05db      	lsls	r3, r3, #23
 800571e:	429a      	cmp	r2, r3
 8005720:	d019      	beq.n	8005756 <HAL_GPIO_DeInit+0x82>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a53      	ldr	r2, [pc, #332]	; (8005874 <HAL_GPIO_DeInit+0x1a0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <HAL_GPIO_DeInit+0x7e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a52      	ldr	r2, [pc, #328]	; (8005878 <HAL_GPIO_DeInit+0x1a4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00d      	beq.n	800574e <HAL_GPIO_DeInit+0x7a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a51      	ldr	r2, [pc, #324]	; (800587c <HAL_GPIO_DeInit+0x1a8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d007      	beq.n	800574a <HAL_GPIO_DeInit+0x76>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a50      	ldr	r2, [pc, #320]	; (8005880 <HAL_GPIO_DeInit+0x1ac>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d101      	bne.n	8005746 <HAL_GPIO_DeInit+0x72>
 8005742:	2304      	movs	r3, #4
 8005744:	e008      	b.n	8005758 <HAL_GPIO_DeInit+0x84>
 8005746:	2305      	movs	r3, #5
 8005748:	e006      	b.n	8005758 <HAL_GPIO_DeInit+0x84>
 800574a:	2303      	movs	r3, #3
 800574c:	e004      	b.n	8005758 <HAL_GPIO_DeInit+0x84>
 800574e:	2302      	movs	r3, #2
 8005750:	e002      	b.n	8005758 <HAL_GPIO_DeInit+0x84>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <HAL_GPIO_DeInit+0x84>
 8005756:	2300      	movs	r3, #0
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	2103      	movs	r1, #3
 800575c:	400a      	ands	r2, r1
 800575e:	00d2      	lsls	r2, r2, #3
 8005760:	4093      	lsls	r3, r2
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	429a      	cmp	r2, r3
 8005766:	d136      	bne.n	80057d6 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005768:	4a41      	ldr	r2, [pc, #260]	; (8005870 <HAL_GPIO_DeInit+0x19c>)
 800576a:	2380      	movs	r3, #128	; 0x80
 800576c:	58d3      	ldr	r3, [r2, r3]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	43d2      	mvns	r2, r2
 8005772:	493f      	ldr	r1, [pc, #252]	; (8005870 <HAL_GPIO_DeInit+0x19c>)
 8005774:	4013      	ands	r3, r2
 8005776:	2280      	movs	r2, #128	; 0x80
 8005778:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800577a:	4a3d      	ldr	r2, [pc, #244]	; (8005870 <HAL_GPIO_DeInit+0x19c>)
 800577c:	2384      	movs	r3, #132	; 0x84
 800577e:	58d3      	ldr	r3, [r2, r3]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	43d2      	mvns	r2, r2
 8005784:	493a      	ldr	r1, [pc, #232]	; (8005870 <HAL_GPIO_DeInit+0x19c>)
 8005786:	4013      	ands	r3, r2
 8005788:	2284      	movs	r2, #132	; 0x84
 800578a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800578c:	4b38      	ldr	r3, [pc, #224]	; (8005870 <HAL_GPIO_DeInit+0x19c>)
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	43d9      	mvns	r1, r3
 8005794:	4b36      	ldr	r3, [pc, #216]	; (8005870 <HAL_GPIO_DeInit+0x19c>)
 8005796:	400a      	ands	r2, r1
 8005798:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800579a:	4b35      	ldr	r3, [pc, #212]	; (8005870 <HAL_GPIO_DeInit+0x19c>)
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	43d9      	mvns	r1, r3
 80057a2:	4b33      	ldr	r3, [pc, #204]	; (8005870 <HAL_GPIO_DeInit+0x19c>)
 80057a4:	400a      	ands	r2, r1
 80057a6:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2203      	movs	r2, #3
 80057ac:	4013      	ands	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	220f      	movs	r2, #15
 80057b2:	409a      	lsls	r2, r3
 80057b4:	0013      	movs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80057b8:	4a2d      	ldr	r2, [pc, #180]	; (8005870 <HAL_GPIO_DeInit+0x19c>)
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	089b      	lsrs	r3, r3, #2
 80057be:	3318      	adds	r3, #24
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	589a      	ldr	r2, [r3, r2]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	43d9      	mvns	r1, r3
 80057c8:	4829      	ldr	r0, [pc, #164]	; (8005870 <HAL_GPIO_DeInit+0x19c>)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	089b      	lsrs	r3, r3, #2
 80057ce:	400a      	ands	r2, r1
 80057d0:	3318      	adds	r3, #24
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	2103      	movs	r1, #3
 80057e0:	4099      	lsls	r1, r3
 80057e2:	000b      	movs	r3, r1
 80057e4:	431a      	orrs	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	08da      	lsrs	r2, r3, #3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3208      	adds	r2, #8
 80057f2:	0092      	lsls	r2, r2, #2
 80057f4:	58d3      	ldr	r3, [r2, r3]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	2107      	movs	r1, #7
 80057fa:	400a      	ands	r2, r1
 80057fc:	0092      	lsls	r2, r2, #2
 80057fe:	210f      	movs	r1, #15
 8005800:	4091      	lsls	r1, r2
 8005802:	000a      	movs	r2, r1
 8005804:	43d1      	mvns	r1, r2
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	08d2      	lsrs	r2, r2, #3
 800580a:	4019      	ands	r1, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3208      	adds	r2, #8
 8005810:	0092      	lsls	r2, r2, #2
 8005812:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	0052      	lsls	r2, r2, #1
 800581c:	2103      	movs	r1, #3
 800581e:	4091      	lsls	r1, r2
 8005820:	000a      	movs	r2, r1
 8005822:	43d2      	mvns	r2, r2
 8005824:	401a      	ands	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2101      	movs	r1, #1
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4091      	lsls	r1, r2
 8005834:	000a      	movs	r2, r1
 8005836:	43d2      	mvns	r2, r2
 8005838:	401a      	ands	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	0052      	lsls	r2, r2, #1
 8005846:	2103      	movs	r1, #3
 8005848:	4091      	lsls	r1, r2
 800584a:	000a      	movs	r2, r1
 800584c:	43d2      	mvns	r2, r2
 800584e:	401a      	ands	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	3301      	adds	r3, #1
 8005858:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	40da      	lsrs	r2, r3
 8005860:	1e13      	subs	r3, r2, #0
 8005862:	d000      	beq.n	8005866 <HAL_GPIO_DeInit+0x192>
 8005864:	e73e      	b.n	80056e4 <HAL_GPIO_DeInit+0x10>
  }
}
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	46c0      	nop			; (mov r8, r8)
 800586a:	46bd      	mov	sp, r7
 800586c:	b006      	add	sp, #24
 800586e:	bd80      	pop	{r7, pc}
 8005870:	40021800 	.word	0x40021800
 8005874:	50000400 	.word	0x50000400
 8005878:	50000800 	.word	0x50000800
 800587c:	50000c00 	.word	0x50000c00
 8005880:	50001000 	.word	0x50001000

08005884 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	000a      	movs	r2, r1
 800588e:	1cbb      	adds	r3, r7, #2
 8005890:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	1cba      	adds	r2, r7, #2
 8005898:	8812      	ldrh	r2, [r2, #0]
 800589a:	4013      	ands	r3, r2
 800589c:	d004      	beq.n	80058a8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800589e:	230f      	movs	r3, #15
 80058a0:	18fb      	adds	r3, r7, r3
 80058a2:	2201      	movs	r2, #1
 80058a4:	701a      	strb	r2, [r3, #0]
 80058a6:	e003      	b.n	80058b0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058a8:	230f      	movs	r3, #15
 80058aa:	18fb      	adds	r3, r7, r3
 80058ac:	2200      	movs	r2, #0
 80058ae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80058b0:	230f      	movs	r3, #15
 80058b2:	18fb      	adds	r3, r7, r3
 80058b4:	781b      	ldrb	r3, [r3, #0]
}
 80058b6:	0018      	movs	r0, r3
 80058b8:	46bd      	mov	sp, r7
 80058ba:	b004      	add	sp, #16
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	0008      	movs	r0, r1
 80058c8:	0011      	movs	r1, r2
 80058ca:	1cbb      	adds	r3, r7, #2
 80058cc:	1c02      	adds	r2, r0, #0
 80058ce:	801a      	strh	r2, [r3, #0]
 80058d0:	1c7b      	adds	r3, r7, #1
 80058d2:	1c0a      	adds	r2, r1, #0
 80058d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058d6:	1c7b      	adds	r3, r7, #1
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80058de:	1cbb      	adds	r3, r7, #2
 80058e0:	881a      	ldrh	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80058e6:	e003      	b.n	80058f0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80058e8:	1cbb      	adds	r3, r7, #2
 80058ea:	881a      	ldrh	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80058f0:	46c0      	nop			; (mov r8, r8)
 80058f2:	46bd      	mov	sp, r7
 80058f4:	b002      	add	sp, #8
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005900:	4b19      	ldr	r3, [pc, #100]	; (8005968 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a19      	ldr	r2, [pc, #100]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005906:	4013      	ands	r3, r2
 8005908:	0019      	movs	r1, r3
 800590a:	4b17      	ldr	r3, [pc, #92]	; (8005968 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	430a      	orrs	r2, r1
 8005910:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	2380      	movs	r3, #128	; 0x80
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	429a      	cmp	r2, r3
 800591a:	d11f      	bne.n	800595c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800591c:	4b14      	ldr	r3, [pc, #80]	; (8005970 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	0013      	movs	r3, r2
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	189b      	adds	r3, r3, r2
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	4912      	ldr	r1, [pc, #72]	; (8005974 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800592a:	0018      	movs	r0, r3
 800592c:	f7fc fab0 	bl	8001e90 <__udivsi3>
 8005930:	0003      	movs	r3, r0
 8005932:	3301      	adds	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005936:	e008      	b.n	800594a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3b01      	subs	r3, #1
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	e001      	b.n	800594a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e009      	b.n	800595e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800594a:	4b07      	ldr	r3, [pc, #28]	; (8005968 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800594c:	695a      	ldr	r2, [r3, #20]
 800594e:	2380      	movs	r3, #128	; 0x80
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	401a      	ands	r2, r3
 8005954:	2380      	movs	r3, #128	; 0x80
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	429a      	cmp	r2, r3
 800595a:	d0ed      	beq.n	8005938 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	0018      	movs	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	b004      	add	sp, #16
 8005964:	bd80      	pop	{r7, pc}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	40007000 	.word	0x40007000
 800596c:	fffff9ff 	.word	0xfffff9ff
 8005970:	20000050 	.word	0x20000050
 8005974:	000f4240 	.word	0x000f4240

08005978 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800597c:	4b03      	ldr	r3, [pc, #12]	; (800598c <LL_RCC_GetAPB1Prescaler+0x14>)
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	23e0      	movs	r3, #224	; 0xe0
 8005982:	01db      	lsls	r3, r3, #7
 8005984:	4013      	ands	r3, r2
}
 8005986:	0018      	movs	r0, r3
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	40021000 	.word	0x40021000

08005990 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005996:	f7ff f917 	bl	8004bc8 <HAL_GetTick>
 800599a:	0003      	movs	r3, r0
 800599c:	607b      	str	r3, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800599e:	4b35      	ldr	r3, [pc, #212]	; (8005a74 <HAL_RCC_DeInit+0xe4>)
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	4b34      	ldr	r3, [pc, #208]	; (8005a74 <HAL_RCC_DeInit+0xe4>)
 80059a4:	2180      	movs	r1, #128	; 0x80
 80059a6:	0049      	lsls	r1, r1, #1
 80059a8:	430a      	orrs	r2, r1
 80059aa:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059ac:	e008      	b.n	80059c0 <HAL_RCC_DeInit+0x30>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059ae:	f7ff f90b 	bl	8004bc8 <HAL_GetTick>
 80059b2:	0002      	movs	r2, r0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e054      	b.n	8005a6a <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059c0:	4b2c      	ldr	r3, [pc, #176]	; (8005a74 <HAL_RCC_DeInit+0xe4>)
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	2380      	movs	r3, #128	; 0x80
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	4013      	ands	r3, r2
 80059ca:	d0f0      	beq.n	80059ae <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  RCC->ICSCR = RCC_ICSCR_HSITRIM_6;
 80059cc:	4b29      	ldr	r3, [pc, #164]	; (8005a74 <HAL_RCC_DeInit+0xe4>)
 80059ce:	2280      	movs	r2, #128	; 0x80
 80059d0:	01d2      	lsls	r2, r2, #7
 80059d2:	605a      	str	r2, [r3, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80059d4:	f7ff f8f8 	bl	8004bc8 <HAL_GetTick>
 80059d8:	0003      	movs	r3, r0
 80059da:	607b      	str	r3, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000000u;
 80059dc:	4b25      	ldr	r3, [pc, #148]	; (8005a74 <HAL_RCC_DeInit+0xe4>)
 80059de:	2200      	movs	r2, #0
 80059e0:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80059e2:	e009      	b.n	80059f8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059e4:	f7ff f8f0 	bl	8004bc8 <HAL_GetTick>
 80059e8:	0002      	movs	r2, r0
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	4a22      	ldr	r2, [pc, #136]	; (8005a78 <HAL_RCC_DeInit+0xe8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e038      	b.n	8005a6a <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80059f8:	4b1e      	ldr	r3, [pc, #120]	; (8005a74 <HAL_RCC_DeInit+0xe4>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2238      	movs	r2, #56	; 0x38
 80059fe:	4013      	ands	r3, r2
 8005a00:	d1f0      	bne.n	80059e4 <HAL_RCC_DeInit+0x54>
    }
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8005a02:	4b1c      	ldr	r3, [pc, #112]	; (8005a74 <HAL_RCC_DeInit+0xe4>)
 8005a04:	2280      	movs	r2, #128	; 0x80
 8005a06:	0052      	lsls	r2, r2, #1
 8005a08:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8005a0a:	4b1a      	ldr	r3, [pc, #104]	; (8005a74 <HAL_RCC_DeInit+0xe4>)
 8005a0c:	2280      	movs	r2, #128	; 0x80
 8005a0e:	0052      	lsls	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a12:	f7ff f8d9 	bl	8004bc8 <HAL_GetTick>
 8005a16:	0003      	movs	r3, r0
 8005a18:	607b      	str	r3, [r7, #4]

  /* Wait till PLL is ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_DeInit+0x9e>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a1c:	f7ff f8d4 	bl	8004bc8 <HAL_GetTick>
 8005a20:	0002      	movs	r2, r0
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_DeInit+0x9e>
    {
      return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e01d      	b.n	8005a6a <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a2e:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <HAL_RCC_DeInit+0xe4>)
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	2380      	movs	r3, #128	; 0x80
 8005a34:	049b      	lsls	r3, r3, #18
 8005a36:	4013      	ands	r3, r2
 8005a38:	d1f0      	bne.n	8005a1c <HAL_RCC_DeInit+0x8c>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8005a3a:	4b0e      	ldr	r3, [pc, #56]	; (8005a74 <HAL_RCC_DeInit+0xe4>)
 8005a3c:	2280      	movs	r2, #128	; 0x80
 8005a3e:	0152      	lsls	r2, r2, #5
 8005a40:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000u;
 8005a42:	4b0c      	ldr	r3, [pc, #48]	; (8005a74 <HAL_RCC_DeInit+0xe4>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	619a      	str	r2, [r3, #24]

  /* Clear all flags */
  RCC->CICR = 0xFFFFFFFFu;
 8005a48:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <HAL_RCC_DeInit+0xe4>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	4252      	negs	r2, r2
 8005a4e:	621a      	str	r2, [r3, #32]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8005a50:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <HAL_RCC_DeInit+0xec>)
 8005a52:	4a0b      	ldr	r2, [pc, #44]	; (8005a80 <HAL_RCC_DeInit+0xf0>)
 8005a54:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a56:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <HAL_RCC_DeInit+0xf4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f7ff f858 	bl	8004b10 <HAL_InitTick>
 8005a60:	1e03      	subs	r3, r0, #0
 8005a62:	d001      	beq.n	8005a68 <HAL_RCC_DeInit+0xd8>
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e000      	b.n	8005a6a <HAL_RCC_DeInit+0xda>
  }
  else
  {
    return HAL_OK;
 8005a68:	2300      	movs	r3, #0
  }
}
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	b002      	add	sp, #8
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	46c0      	nop			; (mov r8, r8)
 8005a74:	40021000 	.word	0x40021000
 8005a78:	00001388 	.word	0x00001388
 8005a7c:	20000050 	.word	0x20000050
 8005a80:	00f42400 	.word	0x00f42400
 8005a84:	20000054 	.word	0x20000054

08005a88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d102      	bne.n	8005a9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	f000 fb50 	bl	800613c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	d100      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x20>
 8005aa6:	e07c      	b.n	8005ba2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aa8:	4bc3      	ldr	r3, [pc, #780]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	2238      	movs	r2, #56	; 0x38
 8005aae:	4013      	ands	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ab2:	4bc1      	ldr	r3, [pc, #772]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	4013      	ands	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	2b10      	cmp	r3, #16
 8005ac0:	d102      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x40>
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d002      	beq.n	8005ace <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d10b      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ace:	4bba      	ldr	r3, [pc, #744]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	2380      	movs	r3, #128	; 0x80
 8005ad4:	029b      	lsls	r3, r3, #10
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	d062      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x118>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d15e      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e32a      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	2380      	movs	r3, #128	; 0x80
 8005aec:	025b      	lsls	r3, r3, #9
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d107      	bne.n	8005b02 <HAL_RCC_OscConfig+0x7a>
 8005af2:	4bb1      	ldr	r3, [pc, #708]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4bb0      	ldr	r3, [pc, #704]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005af8:	2180      	movs	r1, #128	; 0x80
 8005afa:	0249      	lsls	r1, r1, #9
 8005afc:	430a      	orrs	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	e020      	b.n	8005b44 <HAL_RCC_OscConfig+0xbc>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	23a0      	movs	r3, #160	; 0xa0
 8005b08:	02db      	lsls	r3, r3, #11
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d10e      	bne.n	8005b2c <HAL_RCC_OscConfig+0xa4>
 8005b0e:	4baa      	ldr	r3, [pc, #680]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	4ba9      	ldr	r3, [pc, #676]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005b14:	2180      	movs	r1, #128	; 0x80
 8005b16:	02c9      	lsls	r1, r1, #11
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	4ba6      	ldr	r3, [pc, #664]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	4ba5      	ldr	r3, [pc, #660]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005b22:	2180      	movs	r1, #128	; 0x80
 8005b24:	0249      	lsls	r1, r1, #9
 8005b26:	430a      	orrs	r2, r1
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	e00b      	b.n	8005b44 <HAL_RCC_OscConfig+0xbc>
 8005b2c:	4ba2      	ldr	r3, [pc, #648]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	4ba1      	ldr	r3, [pc, #644]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005b32:	49a2      	ldr	r1, [pc, #648]	; (8005dbc <HAL_RCC_OscConfig+0x334>)
 8005b34:	400a      	ands	r2, r1
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	4b9f      	ldr	r3, [pc, #636]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	4b9e      	ldr	r3, [pc, #632]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005b3e:	49a0      	ldr	r1, [pc, #640]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005b40:	400a      	ands	r2, r1
 8005b42:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d014      	beq.n	8005b76 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4c:	f7ff f83c 	bl	8004bc8 <HAL_GetTick>
 8005b50:	0003      	movs	r3, r0
 8005b52:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b54:	e008      	b.n	8005b68 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b56:	f7ff f837 	bl	8004bc8 <HAL_GetTick>
 8005b5a:	0002      	movs	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b64      	cmp	r3, #100	; 0x64
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e2e9      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b68:	4b93      	ldr	r3, [pc, #588]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	2380      	movs	r3, #128	; 0x80
 8005b6e:	029b      	lsls	r3, r3, #10
 8005b70:	4013      	ands	r3, r2
 8005b72:	d0f0      	beq.n	8005b56 <HAL_RCC_OscConfig+0xce>
 8005b74:	e015      	b.n	8005ba2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b76:	f7ff f827 	bl	8004bc8 <HAL_GetTick>
 8005b7a:	0003      	movs	r3, r0
 8005b7c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b80:	f7ff f822 	bl	8004bc8 <HAL_GetTick>
 8005b84:	0002      	movs	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b64      	cmp	r3, #100	; 0x64
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e2d4      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b92:	4b89      	ldr	r3, [pc, #548]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	2380      	movs	r3, #128	; 0x80
 8005b98:	029b      	lsls	r3, r3, #10
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	d1f0      	bne.n	8005b80 <HAL_RCC_OscConfig+0xf8>
 8005b9e:	e000      	b.n	8005ba2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ba0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	4013      	ands	r3, r2
 8005baa:	d100      	bne.n	8005bae <HAL_RCC_OscConfig+0x126>
 8005bac:	e099      	b.n	8005ce2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bae:	4b82      	ldr	r3, [pc, #520]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	2238      	movs	r2, #56	; 0x38
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bb8:	4b7f      	ldr	r3, [pc, #508]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	2b10      	cmp	r3, #16
 8005bc6:	d102      	bne.n	8005bce <HAL_RCC_OscConfig+0x146>
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d002      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d135      	bne.n	8005c40 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bd4:	4b78      	ldr	r3, [pc, #480]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	2380      	movs	r3, #128	; 0x80
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	4013      	ands	r3, r2
 8005bde:	d005      	beq.n	8005bec <HAL_RCC_OscConfig+0x164>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e2a7      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bec:	4b72      	ldr	r3, [pc, #456]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4a74      	ldr	r2, [pc, #464]	; (8005dc4 <HAL_RCC_OscConfig+0x33c>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	0019      	movs	r1, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	021a      	lsls	r2, r3, #8
 8005bfc:	4b6e      	ldr	r3, [pc, #440]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d112      	bne.n	8005c2e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005c08:	4b6b      	ldr	r3, [pc, #428]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a6e      	ldr	r2, [pc, #440]	; (8005dc8 <HAL_RCC_OscConfig+0x340>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	0019      	movs	r1, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691a      	ldr	r2, [r3, #16]
 8005c16:	4b68      	ldr	r3, [pc, #416]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005c1c:	4b66      	ldr	r3, [pc, #408]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	0adb      	lsrs	r3, r3, #11
 8005c22:	2207      	movs	r2, #7
 8005c24:	4013      	ands	r3, r2
 8005c26:	4a69      	ldr	r2, [pc, #420]	; (8005dcc <HAL_RCC_OscConfig+0x344>)
 8005c28:	40da      	lsrs	r2, r3
 8005c2a:	4b69      	ldr	r3, [pc, #420]	; (8005dd0 <HAL_RCC_OscConfig+0x348>)
 8005c2c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005c2e:	4b69      	ldr	r3, [pc, #420]	; (8005dd4 <HAL_RCC_OscConfig+0x34c>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	0018      	movs	r0, r3
 8005c34:	f7fe ff6c 	bl	8004b10 <HAL_InitTick>
 8005c38:	1e03      	subs	r3, r0, #0
 8005c3a:	d051      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e27d      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d030      	beq.n	8005caa <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005c48:	4b5b      	ldr	r3, [pc, #364]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a5e      	ldr	r2, [pc, #376]	; (8005dc8 <HAL_RCC_OscConfig+0x340>)
 8005c4e:	4013      	ands	r3, r2
 8005c50:	0019      	movs	r1, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691a      	ldr	r2, [r3, #16]
 8005c56:	4b58      	ldr	r3, [pc, #352]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005c5c:	4b56      	ldr	r3, [pc, #344]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	4b55      	ldr	r3, [pc, #340]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005c62:	2180      	movs	r1, #128	; 0x80
 8005c64:	0049      	lsls	r1, r1, #1
 8005c66:	430a      	orrs	r2, r1
 8005c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6a:	f7fe ffad 	bl	8004bc8 <HAL_GetTick>
 8005c6e:	0003      	movs	r3, r0
 8005c70:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c74:	f7fe ffa8 	bl	8004bc8 <HAL_GetTick>
 8005c78:	0002      	movs	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e25a      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c86:	4b4c      	ldr	r3, [pc, #304]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	2380      	movs	r3, #128	; 0x80
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	4013      	ands	r3, r2
 8005c90:	d0f0      	beq.n	8005c74 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c92:	4b49      	ldr	r3, [pc, #292]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	4a4b      	ldr	r2, [pc, #300]	; (8005dc4 <HAL_RCC_OscConfig+0x33c>)
 8005c98:	4013      	ands	r3, r2
 8005c9a:	0019      	movs	r1, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	021a      	lsls	r2, r3, #8
 8005ca2:	4b45      	ldr	r3, [pc, #276]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	605a      	str	r2, [r3, #4]
 8005ca8:	e01b      	b.n	8005ce2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005caa:	4b43      	ldr	r3, [pc, #268]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	4b42      	ldr	r3, [pc, #264]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005cb0:	4949      	ldr	r1, [pc, #292]	; (8005dd8 <HAL_RCC_OscConfig+0x350>)
 8005cb2:	400a      	ands	r2, r1
 8005cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb6:	f7fe ff87 	bl	8004bc8 <HAL_GetTick>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cc0:	f7fe ff82 	bl	8004bc8 <HAL_GetTick>
 8005cc4:	0002      	movs	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e234      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cd2:	4b39      	ldr	r3, [pc, #228]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	2380      	movs	r3, #128	; 0x80
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	4013      	ands	r3, r2
 8005cdc:	d1f0      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x238>
 8005cde:	e000      	b.n	8005ce2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ce0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2208      	movs	r2, #8
 8005ce8:	4013      	ands	r3, r2
 8005cea:	d047      	beq.n	8005d7c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005cec:	4b32      	ldr	r3, [pc, #200]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	2238      	movs	r2, #56	; 0x38
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	2b18      	cmp	r3, #24
 8005cf6:	d10a      	bne.n	8005d0e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005cf8:	4b2f      	ldr	r3, [pc, #188]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	4013      	ands	r3, r2
 8005d00:	d03c      	beq.n	8005d7c <HAL_RCC_OscConfig+0x2f4>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d138      	bne.n	8005d7c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e216      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d019      	beq.n	8005d4a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005d16:	4b28      	ldr	r3, [pc, #160]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005d18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d1a:	4b27      	ldr	r3, [pc, #156]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d22:	f7fe ff51 	bl	8004bc8 <HAL_GetTick>
 8005d26:	0003      	movs	r3, r0
 8005d28:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d2c:	f7fe ff4c 	bl	8004bc8 <HAL_GetTick>
 8005d30:	0002      	movs	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e1fe      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d3e:	4b1e      	ldr	r3, [pc, #120]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d42:	2202      	movs	r2, #2
 8005d44:	4013      	ands	r3, r2
 8005d46:	d0f1      	beq.n	8005d2c <HAL_RCC_OscConfig+0x2a4>
 8005d48:	e018      	b.n	8005d7c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005d4a:	4b1b      	ldr	r3, [pc, #108]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005d4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d4e:	4b1a      	ldr	r3, [pc, #104]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005d50:	2101      	movs	r1, #1
 8005d52:	438a      	bics	r2, r1
 8005d54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d56:	f7fe ff37 	bl	8004bc8 <HAL_GetTick>
 8005d5a:	0003      	movs	r3, r0
 8005d5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d60:	f7fe ff32 	bl	8004bc8 <HAL_GetTick>
 8005d64:	0002      	movs	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e1e4      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d72:	4b11      	ldr	r3, [pc, #68]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d76:	2202      	movs	r2, #2
 8005d78:	4013      	ands	r3, r2
 8005d7a:	d1f1      	bne.n	8005d60 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2204      	movs	r2, #4
 8005d82:	4013      	ands	r3, r2
 8005d84:	d100      	bne.n	8005d88 <HAL_RCC_OscConfig+0x300>
 8005d86:	e0c7      	b.n	8005f18 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d88:	231f      	movs	r3, #31
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005d90:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	2238      	movs	r2, #56	; 0x38
 8005d96:	4013      	ands	r3, r2
 8005d98:	2b20      	cmp	r3, #32
 8005d9a:	d11f      	bne.n	8005ddc <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005d9c:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <HAL_RCC_OscConfig+0x330>)
 8005d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da0:	2202      	movs	r2, #2
 8005da2:	4013      	ands	r3, r2
 8005da4:	d100      	bne.n	8005da8 <HAL_RCC_OscConfig+0x320>
 8005da6:	e0b7      	b.n	8005f18 <HAL_RCC_OscConfig+0x490>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d000      	beq.n	8005db2 <HAL_RCC_OscConfig+0x32a>
 8005db0:	e0b2      	b.n	8005f18 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e1c2      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
 8005db6:	46c0      	nop			; (mov r8, r8)
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	fffeffff 	.word	0xfffeffff
 8005dc0:	fffbffff 	.word	0xfffbffff
 8005dc4:	ffff80ff 	.word	0xffff80ff
 8005dc8:	ffffc7ff 	.word	0xffffc7ff
 8005dcc:	00f42400 	.word	0x00f42400
 8005dd0:	20000050 	.word	0x20000050
 8005dd4:	20000054 	.word	0x20000054
 8005dd8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ddc:	4bb5      	ldr	r3, [pc, #724]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005de0:	2380      	movs	r3, #128	; 0x80
 8005de2:	055b      	lsls	r3, r3, #21
 8005de4:	4013      	ands	r3, r2
 8005de6:	d101      	bne.n	8005dec <HAL_RCC_OscConfig+0x364>
 8005de8:	2301      	movs	r3, #1
 8005dea:	e000      	b.n	8005dee <HAL_RCC_OscConfig+0x366>
 8005dec:	2300      	movs	r3, #0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d011      	beq.n	8005e16 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005df2:	4bb0      	ldr	r3, [pc, #704]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005df4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005df6:	4baf      	ldr	r3, [pc, #700]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005df8:	2180      	movs	r1, #128	; 0x80
 8005dfa:	0549      	lsls	r1, r1, #21
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8005e00:	4bac      	ldr	r3, [pc, #688]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e04:	2380      	movs	r3, #128	; 0x80
 8005e06:	055b      	lsls	r3, r3, #21
 8005e08:	4013      	ands	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005e0e:	231f      	movs	r3, #31
 8005e10:	18fb      	adds	r3, r7, r3
 8005e12:	2201      	movs	r2, #1
 8005e14:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e16:	4ba8      	ldr	r3, [pc, #672]	; (80060b8 <HAL_RCC_OscConfig+0x630>)
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	2380      	movs	r3, #128	; 0x80
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	4013      	ands	r3, r2
 8005e20:	d11a      	bne.n	8005e58 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e22:	4ba5      	ldr	r3, [pc, #660]	; (80060b8 <HAL_RCC_OscConfig+0x630>)
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	4ba4      	ldr	r3, [pc, #656]	; (80060b8 <HAL_RCC_OscConfig+0x630>)
 8005e28:	2180      	movs	r1, #128	; 0x80
 8005e2a:	0049      	lsls	r1, r1, #1
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005e30:	f7fe feca 	bl	8004bc8 <HAL_GetTick>
 8005e34:	0003      	movs	r3, r0
 8005e36:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e38:	e008      	b.n	8005e4c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e3a:	f7fe fec5 	bl	8004bc8 <HAL_GetTick>
 8005e3e:	0002      	movs	r2, r0
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d901      	bls.n	8005e4c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e177      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e4c:	4b9a      	ldr	r3, [pc, #616]	; (80060b8 <HAL_RCC_OscConfig+0x630>)
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	4013      	ands	r3, r2
 8005e56:	d0f0      	beq.n	8005e3a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d106      	bne.n	8005e6e <HAL_RCC_OscConfig+0x3e6>
 8005e60:	4b94      	ldr	r3, [pc, #592]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005e62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e64:	4b93      	ldr	r3, [pc, #588]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005e66:	2101      	movs	r1, #1
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e6c:	e01c      	b.n	8005ea8 <HAL_RCC_OscConfig+0x420>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	2b05      	cmp	r3, #5
 8005e74:	d10c      	bne.n	8005e90 <HAL_RCC_OscConfig+0x408>
 8005e76:	4b8f      	ldr	r3, [pc, #572]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005e78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e7a:	4b8e      	ldr	r3, [pc, #568]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005e7c:	2104      	movs	r1, #4
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e82:	4b8c      	ldr	r3, [pc, #560]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005e84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e86:	4b8b      	ldr	r3, [pc, #556]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005e88:	2101      	movs	r1, #1
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e8e:	e00b      	b.n	8005ea8 <HAL_RCC_OscConfig+0x420>
 8005e90:	4b88      	ldr	r3, [pc, #544]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005e92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e94:	4b87      	ldr	r3, [pc, #540]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005e96:	2101      	movs	r1, #1
 8005e98:	438a      	bics	r2, r1
 8005e9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e9c:	4b85      	ldr	r3, [pc, #532]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005e9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ea0:	4b84      	ldr	r3, [pc, #528]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005ea2:	2104      	movs	r1, #4
 8005ea4:	438a      	bics	r2, r1
 8005ea6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d014      	beq.n	8005eda <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb0:	f7fe fe8a 	bl	8004bc8 <HAL_GetTick>
 8005eb4:	0003      	movs	r3, r0
 8005eb6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eb8:	e009      	b.n	8005ece <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eba:	f7fe fe85 	bl	8004bc8 <HAL_GetTick>
 8005ebe:	0002      	movs	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	4a7d      	ldr	r2, [pc, #500]	; (80060bc <HAL_RCC_OscConfig+0x634>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e136      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ece:	4b79      	ldr	r3, [pc, #484]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	d0f0      	beq.n	8005eba <HAL_RCC_OscConfig+0x432>
 8005ed8:	e013      	b.n	8005f02 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eda:	f7fe fe75 	bl	8004bc8 <HAL_GetTick>
 8005ede:	0003      	movs	r3, r0
 8005ee0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ee2:	e009      	b.n	8005ef8 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ee4:	f7fe fe70 	bl	8004bc8 <HAL_GetTick>
 8005ee8:	0002      	movs	r2, r0
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	4a73      	ldr	r2, [pc, #460]	; (80060bc <HAL_RCC_OscConfig+0x634>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e121      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ef8:	4b6e      	ldr	r3, [pc, #440]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efc:	2202      	movs	r2, #2
 8005efe:	4013      	ands	r3, r2
 8005f00:	d1f0      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005f02:	231f      	movs	r3, #31
 8005f04:	18fb      	adds	r3, r7, r3
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d105      	bne.n	8005f18 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005f0c:	4b69      	ldr	r3, [pc, #420]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005f0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f10:	4b68      	ldr	r3, [pc, #416]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005f12:	496b      	ldr	r1, [pc, #428]	; (80060c0 <HAL_RCC_OscConfig+0x638>)
 8005f14:	400a      	ands	r2, r1
 8005f16:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	4013      	ands	r3, r2
 8005f20:	d039      	beq.n	8005f96 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d01b      	beq.n	8005f62 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f2a:	4b62      	ldr	r3, [pc, #392]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4b61      	ldr	r3, [pc, #388]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005f30:	2180      	movs	r1, #128	; 0x80
 8005f32:	03c9      	lsls	r1, r1, #15
 8005f34:	430a      	orrs	r2, r1
 8005f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f38:	f7fe fe46 	bl	8004bc8 <HAL_GetTick>
 8005f3c:	0003      	movs	r3, r0
 8005f3e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f42:	f7fe fe41 	bl	8004bc8 <HAL_GetTick>
 8005f46:	0002      	movs	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e0f3      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005f54:	4b57      	ldr	r3, [pc, #348]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	2380      	movs	r3, #128	; 0x80
 8005f5a:	041b      	lsls	r3, r3, #16
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	d0f0      	beq.n	8005f42 <HAL_RCC_OscConfig+0x4ba>
 8005f60:	e019      	b.n	8005f96 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f62:	4b54      	ldr	r3, [pc, #336]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	4b53      	ldr	r3, [pc, #332]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005f68:	4956      	ldr	r1, [pc, #344]	; (80060c4 <HAL_RCC_OscConfig+0x63c>)
 8005f6a:	400a      	ands	r2, r1
 8005f6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f6e:	f7fe fe2b 	bl	8004bc8 <HAL_GetTick>
 8005f72:	0003      	movs	r3, r0
 8005f74:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f78:	f7fe fe26 	bl	8004bc8 <HAL_GetTick>
 8005f7c:	0002      	movs	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e0d8      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005f8a:	4b4a      	ldr	r3, [pc, #296]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	2380      	movs	r3, #128	; 0x80
 8005f90:	041b      	lsls	r3, r3, #16
 8005f92:	4013      	ands	r3, r2
 8005f94:	d1f0      	bne.n	8005f78 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d100      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x518>
 8005f9e:	e0cc      	b.n	800613a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fa0:	4b44      	ldr	r3, [pc, #272]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	2238      	movs	r2, #56	; 0x38
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	2b10      	cmp	r3, #16
 8005faa:	d100      	bne.n	8005fae <HAL_RCC_OscConfig+0x526>
 8005fac:	e07b      	b.n	80060a6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d156      	bne.n	8006064 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fb6:	4b3f      	ldr	r3, [pc, #252]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	4b3e      	ldr	r3, [pc, #248]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005fbc:	4942      	ldr	r1, [pc, #264]	; (80060c8 <HAL_RCC_OscConfig+0x640>)
 8005fbe:	400a      	ands	r2, r1
 8005fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc2:	f7fe fe01 	bl	8004bc8 <HAL_GetTick>
 8005fc6:	0003      	movs	r3, r0
 8005fc8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fcc:	f7fe fdfc 	bl	8004bc8 <HAL_GetTick>
 8005fd0:	0002      	movs	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e0ae      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fde:	4b35      	ldr	r3, [pc, #212]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	2380      	movs	r3, #128	; 0x80
 8005fe4:	049b      	lsls	r3, r3, #18
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	d1f0      	bne.n	8005fcc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fea:	4b32      	ldr	r3, [pc, #200]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	4a37      	ldr	r2, [pc, #220]	; (80060cc <HAL_RCC_OscConfig+0x644>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	0019      	movs	r1, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006010:	431a      	orrs	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	431a      	orrs	r2, r3
 8006018:	4b26      	ldr	r3, [pc, #152]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 800601a:	430a      	orrs	r2, r1
 800601c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800601e:	4b25      	ldr	r3, [pc, #148]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	4b24      	ldr	r3, [pc, #144]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8006024:	2180      	movs	r1, #128	; 0x80
 8006026:	0449      	lsls	r1, r1, #17
 8006028:	430a      	orrs	r2, r1
 800602a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800602c:	4b21      	ldr	r3, [pc, #132]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	4b20      	ldr	r3, [pc, #128]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8006032:	2180      	movs	r1, #128	; 0x80
 8006034:	0549      	lsls	r1, r1, #21
 8006036:	430a      	orrs	r2, r1
 8006038:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603a:	f7fe fdc5 	bl	8004bc8 <HAL_GetTick>
 800603e:	0003      	movs	r3, r0
 8006040:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006044:	f7fe fdc0 	bl	8004bc8 <HAL_GetTick>
 8006048:	0002      	movs	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e072      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006056:	4b17      	ldr	r3, [pc, #92]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	2380      	movs	r3, #128	; 0x80
 800605c:	049b      	lsls	r3, r3, #18
 800605e:	4013      	ands	r3, r2
 8006060:	d0f0      	beq.n	8006044 <HAL_RCC_OscConfig+0x5bc>
 8006062:	e06a      	b.n	800613a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006064:	4b13      	ldr	r3, [pc, #76]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	4b12      	ldr	r3, [pc, #72]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 800606a:	4917      	ldr	r1, [pc, #92]	; (80060c8 <HAL_RCC_OscConfig+0x640>)
 800606c:	400a      	ands	r2, r1
 800606e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006070:	f7fe fdaa 	bl	8004bc8 <HAL_GetTick>
 8006074:	0003      	movs	r3, r0
 8006076:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006078:	e008      	b.n	800608c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800607a:	f7fe fda5 	bl	8004bc8 <HAL_GetTick>
 800607e:	0002      	movs	r2, r0
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d901      	bls.n	800608c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e057      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800608c:	4b09      	ldr	r3, [pc, #36]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	2380      	movs	r3, #128	; 0x80
 8006092:	049b      	lsls	r3, r3, #18
 8006094:	4013      	ands	r3, r2
 8006096:	d1f0      	bne.n	800607a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006098:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 800609e:	490c      	ldr	r1, [pc, #48]	; (80060d0 <HAL_RCC_OscConfig+0x648>)
 80060a0:	400a      	ands	r2, r1
 80060a2:	60da      	str	r2, [r3, #12]
 80060a4:	e049      	b.n	800613a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d112      	bne.n	80060d4 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e044      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	40021000 	.word	0x40021000
 80060b8:	40007000 	.word	0x40007000
 80060bc:	00001388 	.word	0x00001388
 80060c0:	efffffff 	.word	0xefffffff
 80060c4:	ffbfffff 	.word	0xffbfffff
 80060c8:	feffffff 	.word	0xfeffffff
 80060cc:	11c1808c 	.word	0x11c1808c
 80060d0:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80060d4:	4b1b      	ldr	r3, [pc, #108]	; (8006144 <HAL_RCC_OscConfig+0x6bc>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2203      	movs	r2, #3
 80060de:	401a      	ands	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d126      	bne.n	8006136 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2270      	movs	r2, #112	; 0x70
 80060ec:	401a      	ands	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d11f      	bne.n	8006136 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	23fe      	movs	r3, #254	; 0xfe
 80060fa:	01db      	lsls	r3, r3, #7
 80060fc:	401a      	ands	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006102:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006104:	429a      	cmp	r2, r3
 8006106:	d116      	bne.n	8006136 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	23f8      	movs	r3, #248	; 0xf8
 800610c:	039b      	lsls	r3, r3, #14
 800610e:	401a      	ands	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006114:	429a      	cmp	r2, r3
 8006116:	d10e      	bne.n	8006136 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	23e0      	movs	r3, #224	; 0xe0
 800611c:	051b      	lsls	r3, r3, #20
 800611e:	401a      	ands	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006124:	429a      	cmp	r2, r3
 8006126:	d106      	bne.n	8006136 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	0f5b      	lsrs	r3, r3, #29
 800612c:	075a      	lsls	r2, r3, #29
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006132:	429a      	cmp	r2, r3
 8006134:	d001      	beq.n	800613a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	0018      	movs	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	b008      	add	sp, #32
 8006142:	bd80      	pop	{r7, pc}
 8006144:	40021000 	.word	0x40021000

08006148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e0e9      	b.n	8006330 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800615c:	4b76      	ldr	r3, [pc, #472]	; (8006338 <HAL_RCC_ClockConfig+0x1f0>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2207      	movs	r2, #7
 8006162:	4013      	ands	r3, r2
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d91e      	bls.n	80061a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800616a:	4b73      	ldr	r3, [pc, #460]	; (8006338 <HAL_RCC_ClockConfig+0x1f0>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2207      	movs	r2, #7
 8006170:	4393      	bics	r3, r2
 8006172:	0019      	movs	r1, r3
 8006174:	4b70      	ldr	r3, [pc, #448]	; (8006338 <HAL_RCC_ClockConfig+0x1f0>)
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800617c:	f7fe fd24 	bl	8004bc8 <HAL_GetTick>
 8006180:	0003      	movs	r3, r0
 8006182:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006184:	e009      	b.n	800619a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006186:	f7fe fd1f 	bl	8004bc8 <HAL_GetTick>
 800618a:	0002      	movs	r2, r0
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	4a6a      	ldr	r2, [pc, #424]	; (800633c <HAL_RCC_ClockConfig+0x1f4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d901      	bls.n	800619a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e0ca      	b.n	8006330 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800619a:	4b67      	ldr	r3, [pc, #412]	; (8006338 <HAL_RCC_ClockConfig+0x1f0>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2207      	movs	r2, #7
 80061a0:	4013      	ands	r3, r2
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d1ee      	bne.n	8006186 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2202      	movs	r2, #2
 80061ae:	4013      	ands	r3, r2
 80061b0:	d015      	beq.n	80061de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2204      	movs	r2, #4
 80061b8:	4013      	ands	r3, r2
 80061ba:	d006      	beq.n	80061ca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80061bc:	4b60      	ldr	r3, [pc, #384]	; (8006340 <HAL_RCC_ClockConfig+0x1f8>)
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	4b5f      	ldr	r3, [pc, #380]	; (8006340 <HAL_RCC_ClockConfig+0x1f8>)
 80061c2:	21e0      	movs	r1, #224	; 0xe0
 80061c4:	01c9      	lsls	r1, r1, #7
 80061c6:	430a      	orrs	r2, r1
 80061c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061ca:	4b5d      	ldr	r3, [pc, #372]	; (8006340 <HAL_RCC_ClockConfig+0x1f8>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	4a5d      	ldr	r2, [pc, #372]	; (8006344 <HAL_RCC_ClockConfig+0x1fc>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	0019      	movs	r1, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	4b59      	ldr	r3, [pc, #356]	; (8006340 <HAL_RCC_ClockConfig+0x1f8>)
 80061da:	430a      	orrs	r2, r1
 80061dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2201      	movs	r2, #1
 80061e4:	4013      	ands	r3, r2
 80061e6:	d057      	beq.n	8006298 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d107      	bne.n	8006200 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061f0:	4b53      	ldr	r3, [pc, #332]	; (8006340 <HAL_RCC_ClockConfig+0x1f8>)
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	2380      	movs	r3, #128	; 0x80
 80061f6:	029b      	lsls	r3, r3, #10
 80061f8:	4013      	ands	r3, r2
 80061fa:	d12b      	bne.n	8006254 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e097      	b.n	8006330 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d107      	bne.n	8006218 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006208:	4b4d      	ldr	r3, [pc, #308]	; (8006340 <HAL_RCC_ClockConfig+0x1f8>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	2380      	movs	r3, #128	; 0x80
 800620e:	049b      	lsls	r3, r3, #18
 8006210:	4013      	ands	r3, r2
 8006212:	d11f      	bne.n	8006254 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e08b      	b.n	8006330 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d107      	bne.n	8006230 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006220:	4b47      	ldr	r3, [pc, #284]	; (8006340 <HAL_RCC_ClockConfig+0x1f8>)
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	2380      	movs	r3, #128	; 0x80
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	4013      	ands	r3, r2
 800622a:	d113      	bne.n	8006254 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e07f      	b.n	8006330 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b03      	cmp	r3, #3
 8006236:	d106      	bne.n	8006246 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006238:	4b41      	ldr	r3, [pc, #260]	; (8006340 <HAL_RCC_ClockConfig+0x1f8>)
 800623a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800623c:	2202      	movs	r2, #2
 800623e:	4013      	ands	r3, r2
 8006240:	d108      	bne.n	8006254 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e074      	b.n	8006330 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006246:	4b3e      	ldr	r3, [pc, #248]	; (8006340 <HAL_RCC_ClockConfig+0x1f8>)
 8006248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624a:	2202      	movs	r2, #2
 800624c:	4013      	ands	r3, r2
 800624e:	d101      	bne.n	8006254 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e06d      	b.n	8006330 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006254:	4b3a      	ldr	r3, [pc, #232]	; (8006340 <HAL_RCC_ClockConfig+0x1f8>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	2207      	movs	r2, #7
 800625a:	4393      	bics	r3, r2
 800625c:	0019      	movs	r1, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	4b37      	ldr	r3, [pc, #220]	; (8006340 <HAL_RCC_ClockConfig+0x1f8>)
 8006264:	430a      	orrs	r2, r1
 8006266:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006268:	f7fe fcae 	bl	8004bc8 <HAL_GetTick>
 800626c:	0003      	movs	r3, r0
 800626e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006270:	e009      	b.n	8006286 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006272:	f7fe fca9 	bl	8004bc8 <HAL_GetTick>
 8006276:	0002      	movs	r2, r0
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	4a2f      	ldr	r2, [pc, #188]	; (800633c <HAL_RCC_ClockConfig+0x1f4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e054      	b.n	8006330 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006286:	4b2e      	ldr	r3, [pc, #184]	; (8006340 <HAL_RCC_ClockConfig+0x1f8>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2238      	movs	r2, #56	; 0x38
 800628c:	401a      	ands	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	429a      	cmp	r2, r3
 8006296:	d1ec      	bne.n	8006272 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006298:	4b27      	ldr	r3, [pc, #156]	; (8006338 <HAL_RCC_ClockConfig+0x1f0>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2207      	movs	r2, #7
 800629e:	4013      	ands	r3, r2
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d21e      	bcs.n	80062e4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a6:	4b24      	ldr	r3, [pc, #144]	; (8006338 <HAL_RCC_ClockConfig+0x1f0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2207      	movs	r2, #7
 80062ac:	4393      	bics	r3, r2
 80062ae:	0019      	movs	r1, r3
 80062b0:	4b21      	ldr	r3, [pc, #132]	; (8006338 <HAL_RCC_ClockConfig+0x1f0>)
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80062b8:	f7fe fc86 	bl	8004bc8 <HAL_GetTick>
 80062bc:	0003      	movs	r3, r0
 80062be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80062c0:	e009      	b.n	80062d6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062c2:	f7fe fc81 	bl	8004bc8 <HAL_GetTick>
 80062c6:	0002      	movs	r2, r0
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	4a1b      	ldr	r2, [pc, #108]	; (800633c <HAL_RCC_ClockConfig+0x1f4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e02c      	b.n	8006330 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80062d6:	4b18      	ldr	r3, [pc, #96]	; (8006338 <HAL_RCC_ClockConfig+0x1f0>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2207      	movs	r2, #7
 80062dc:	4013      	ands	r3, r2
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d1ee      	bne.n	80062c2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2204      	movs	r2, #4
 80062ea:	4013      	ands	r3, r2
 80062ec:	d009      	beq.n	8006302 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80062ee:	4b14      	ldr	r3, [pc, #80]	; (8006340 <HAL_RCC_ClockConfig+0x1f8>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	4a15      	ldr	r2, [pc, #84]	; (8006348 <HAL_RCC_ClockConfig+0x200>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	0019      	movs	r1, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68da      	ldr	r2, [r3, #12]
 80062fc:	4b10      	ldr	r3, [pc, #64]	; (8006340 <HAL_RCC_ClockConfig+0x1f8>)
 80062fe:	430a      	orrs	r2, r1
 8006300:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006302:	f000 f829 	bl	8006358 <HAL_RCC_GetSysClockFreq>
 8006306:	0001      	movs	r1, r0
 8006308:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <HAL_RCC_ClockConfig+0x1f8>)
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	0a1b      	lsrs	r3, r3, #8
 800630e:	220f      	movs	r2, #15
 8006310:	401a      	ands	r2, r3
 8006312:	4b0e      	ldr	r3, [pc, #56]	; (800634c <HAL_RCC_ClockConfig+0x204>)
 8006314:	0092      	lsls	r2, r2, #2
 8006316:	58d3      	ldr	r3, [r2, r3]
 8006318:	221f      	movs	r2, #31
 800631a:	4013      	ands	r3, r2
 800631c:	000a      	movs	r2, r1
 800631e:	40da      	lsrs	r2, r3
 8006320:	4b0b      	ldr	r3, [pc, #44]	; (8006350 <HAL_RCC_ClockConfig+0x208>)
 8006322:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006324:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <HAL_RCC_ClockConfig+0x20c>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	0018      	movs	r0, r3
 800632a:	f7fe fbf1 	bl	8004b10 <HAL_InitTick>
 800632e:	0003      	movs	r3, r0
}
 8006330:	0018      	movs	r0, r3
 8006332:	46bd      	mov	sp, r7
 8006334:	b004      	add	sp, #16
 8006336:	bd80      	pop	{r7, pc}
 8006338:	40022000 	.word	0x40022000
 800633c:	00001388 	.word	0x00001388
 8006340:	40021000 	.word	0x40021000
 8006344:	fffff0ff 	.word	0xfffff0ff
 8006348:	ffff8fff 	.word	0xffff8fff
 800634c:	0800b5f8 	.word	0x0800b5f8
 8006350:	20000050 	.word	0x20000050
 8006354:	20000054 	.word	0x20000054

08006358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800635e:	4b3c      	ldr	r3, [pc, #240]	; (8006450 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	2238      	movs	r2, #56	; 0x38
 8006364:	4013      	ands	r3, r2
 8006366:	d10f      	bne.n	8006388 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006368:	4b39      	ldr	r3, [pc, #228]	; (8006450 <HAL_RCC_GetSysClockFreq+0xf8>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	0adb      	lsrs	r3, r3, #11
 800636e:	2207      	movs	r2, #7
 8006370:	4013      	ands	r3, r2
 8006372:	2201      	movs	r2, #1
 8006374:	409a      	lsls	r2, r3
 8006376:	0013      	movs	r3, r2
 8006378:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	4835      	ldr	r0, [pc, #212]	; (8006454 <HAL_RCC_GetSysClockFreq+0xfc>)
 800637e:	f7fb fd87 	bl	8001e90 <__udivsi3>
 8006382:	0003      	movs	r3, r0
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	e05d      	b.n	8006444 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006388:	4b31      	ldr	r3, [pc, #196]	; (8006450 <HAL_RCC_GetSysClockFreq+0xf8>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	2238      	movs	r2, #56	; 0x38
 800638e:	4013      	ands	r3, r2
 8006390:	2b08      	cmp	r3, #8
 8006392:	d102      	bne.n	800639a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006394:	4b30      	ldr	r3, [pc, #192]	; (8006458 <HAL_RCC_GetSysClockFreq+0x100>)
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	e054      	b.n	8006444 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800639a:	4b2d      	ldr	r3, [pc, #180]	; (8006450 <HAL_RCC_GetSysClockFreq+0xf8>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	2238      	movs	r2, #56	; 0x38
 80063a0:	4013      	ands	r3, r2
 80063a2:	2b10      	cmp	r3, #16
 80063a4:	d138      	bne.n	8006418 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80063a6:	4b2a      	ldr	r3, [pc, #168]	; (8006450 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	2203      	movs	r2, #3
 80063ac:	4013      	ands	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063b0:	4b27      	ldr	r3, [pc, #156]	; (8006450 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	091b      	lsrs	r3, r3, #4
 80063b6:	2207      	movs	r2, #7
 80063b8:	4013      	ands	r3, r2
 80063ba:	3301      	adds	r3, #1
 80063bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d10d      	bne.n	80063e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	4824      	ldr	r0, [pc, #144]	; (8006458 <HAL_RCC_GetSysClockFreq+0x100>)
 80063c8:	f7fb fd62 	bl	8001e90 <__udivsi3>
 80063cc:	0003      	movs	r3, r0
 80063ce:	0019      	movs	r1, r3
 80063d0:	4b1f      	ldr	r3, [pc, #124]	; (8006450 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	0a1b      	lsrs	r3, r3, #8
 80063d6:	227f      	movs	r2, #127	; 0x7f
 80063d8:	4013      	ands	r3, r2
 80063da:	434b      	muls	r3, r1
 80063dc:	617b      	str	r3, [r7, #20]
        break;
 80063de:	e00d      	b.n	80063fc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80063e0:	68b9      	ldr	r1, [r7, #8]
 80063e2:	481c      	ldr	r0, [pc, #112]	; (8006454 <HAL_RCC_GetSysClockFreq+0xfc>)
 80063e4:	f7fb fd54 	bl	8001e90 <__udivsi3>
 80063e8:	0003      	movs	r3, r0
 80063ea:	0019      	movs	r1, r3
 80063ec:	4b18      	ldr	r3, [pc, #96]	; (8006450 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	0a1b      	lsrs	r3, r3, #8
 80063f2:	227f      	movs	r2, #127	; 0x7f
 80063f4:	4013      	ands	r3, r2
 80063f6:	434b      	muls	r3, r1
 80063f8:	617b      	str	r3, [r7, #20]
        break;
 80063fa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80063fc:	4b14      	ldr	r3, [pc, #80]	; (8006450 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	0f5b      	lsrs	r3, r3, #29
 8006402:	2207      	movs	r2, #7
 8006404:	4013      	ands	r3, r2
 8006406:	3301      	adds	r3, #1
 8006408:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	6978      	ldr	r0, [r7, #20]
 800640e:	f7fb fd3f 	bl	8001e90 <__udivsi3>
 8006412:	0003      	movs	r3, r0
 8006414:	613b      	str	r3, [r7, #16]
 8006416:	e015      	b.n	8006444 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006418:	4b0d      	ldr	r3, [pc, #52]	; (8006450 <HAL_RCC_GetSysClockFreq+0xf8>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2238      	movs	r2, #56	; 0x38
 800641e:	4013      	ands	r3, r2
 8006420:	2b20      	cmp	r3, #32
 8006422:	d103      	bne.n	800642c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006424:	2380      	movs	r3, #128	; 0x80
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	e00b      	b.n	8006444 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800642c:	4b08      	ldr	r3, [pc, #32]	; (8006450 <HAL_RCC_GetSysClockFreq+0xf8>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	2238      	movs	r2, #56	; 0x38
 8006432:	4013      	ands	r3, r2
 8006434:	2b18      	cmp	r3, #24
 8006436:	d103      	bne.n	8006440 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006438:	23fa      	movs	r3, #250	; 0xfa
 800643a:	01db      	lsls	r3, r3, #7
 800643c:	613b      	str	r3, [r7, #16]
 800643e:	e001      	b.n	8006444 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006440:	2300      	movs	r3, #0
 8006442:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006444:	693b      	ldr	r3, [r7, #16]
}
 8006446:	0018      	movs	r0, r3
 8006448:	46bd      	mov	sp, r7
 800644a:	b006      	add	sp, #24
 800644c:	bd80      	pop	{r7, pc}
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	40021000 	.word	0x40021000
 8006454:	00f42400 	.word	0x00f42400
 8006458:	007a1200 	.word	0x007a1200

0800645c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006460:	4b02      	ldr	r3, [pc, #8]	; (800646c <HAL_RCC_GetHCLKFreq+0x10>)
 8006462:	681b      	ldr	r3, [r3, #0]
}
 8006464:	0018      	movs	r0, r3
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	46c0      	nop			; (mov r8, r8)
 800646c:	20000050 	.word	0x20000050

08006470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006470:	b5b0      	push	{r4, r5, r7, lr}
 8006472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006474:	f7ff fff2 	bl	800645c <HAL_RCC_GetHCLKFreq>
 8006478:	0004      	movs	r4, r0
 800647a:	f7ff fa7d 	bl	8005978 <LL_RCC_GetAPB1Prescaler>
 800647e:	0003      	movs	r3, r0
 8006480:	0b1a      	lsrs	r2, r3, #12
 8006482:	4b05      	ldr	r3, [pc, #20]	; (8006498 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006484:	0092      	lsls	r2, r2, #2
 8006486:	58d3      	ldr	r3, [r2, r3]
 8006488:	221f      	movs	r2, #31
 800648a:	4013      	ands	r3, r2
 800648c:	40dc      	lsrs	r4, r3
 800648e:	0023      	movs	r3, r4
}
 8006490:	0018      	movs	r0, r3
 8006492:	46bd      	mov	sp, r7
 8006494:	bdb0      	pop	{r4, r5, r7, pc}
 8006496:	46c0      	nop			; (mov r8, r8)
 8006498:	0800b638 	.word	0x0800b638

0800649c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80064a4:	2313      	movs	r3, #19
 80064a6:	18fb      	adds	r3, r7, r3
 80064a8:	2200      	movs	r2, #0
 80064aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064ac:	2312      	movs	r3, #18
 80064ae:	18fb      	adds	r3, r7, r3
 80064b0:	2200      	movs	r2, #0
 80064b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	2380      	movs	r3, #128	; 0x80
 80064ba:	029b      	lsls	r3, r3, #10
 80064bc:	4013      	ands	r3, r2
 80064be:	d100      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80064c0:	e0ad      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064c2:	2011      	movs	r0, #17
 80064c4:	183b      	adds	r3, r7, r0
 80064c6:	2200      	movs	r2, #0
 80064c8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064ca:	4b47      	ldr	r3, [pc, #284]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80064cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064ce:	2380      	movs	r3, #128	; 0x80
 80064d0:	055b      	lsls	r3, r3, #21
 80064d2:	4013      	ands	r3, r2
 80064d4:	d110      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064d6:	4b44      	ldr	r3, [pc, #272]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80064d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064da:	4b43      	ldr	r3, [pc, #268]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80064dc:	2180      	movs	r1, #128	; 0x80
 80064de:	0549      	lsls	r1, r1, #21
 80064e0:	430a      	orrs	r2, r1
 80064e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80064e4:	4b40      	ldr	r3, [pc, #256]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80064e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064e8:	2380      	movs	r3, #128	; 0x80
 80064ea:	055b      	lsls	r3, r3, #21
 80064ec:	4013      	ands	r3, r2
 80064ee:	60bb      	str	r3, [r7, #8]
 80064f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064f2:	183b      	adds	r3, r7, r0
 80064f4:	2201      	movs	r2, #1
 80064f6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064f8:	4b3c      	ldr	r3, [pc, #240]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	4b3b      	ldr	r3, [pc, #236]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80064fe:	2180      	movs	r1, #128	; 0x80
 8006500:	0049      	lsls	r1, r1, #1
 8006502:	430a      	orrs	r2, r1
 8006504:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006506:	f7fe fb5f 	bl	8004bc8 <HAL_GetTick>
 800650a:	0003      	movs	r3, r0
 800650c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800650e:	e00b      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006510:	f7fe fb5a 	bl	8004bc8 <HAL_GetTick>
 8006514:	0002      	movs	r2, r0
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d904      	bls.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800651e:	2313      	movs	r3, #19
 8006520:	18fb      	adds	r3, r7, r3
 8006522:	2203      	movs	r2, #3
 8006524:	701a      	strb	r2, [r3, #0]
        break;
 8006526:	e005      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006528:	4b30      	ldr	r3, [pc, #192]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	2380      	movs	r3, #128	; 0x80
 800652e:	005b      	lsls	r3, r3, #1
 8006530:	4013      	ands	r3, r2
 8006532:	d0ed      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006534:	2313      	movs	r3, #19
 8006536:	18fb      	adds	r3, r7, r3
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d15e      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800653e:	4b2a      	ldr	r3, [pc, #168]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006540:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006542:	23c0      	movs	r3, #192	; 0xc0
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4013      	ands	r3, r2
 8006548:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d019      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	429a      	cmp	r2, r3
 8006558:	d014      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800655a:	4b23      	ldr	r3, [pc, #140]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800655c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800655e:	4a24      	ldr	r2, [pc, #144]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006560:	4013      	ands	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006564:	4b20      	ldr	r3, [pc, #128]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006566:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006568:	4b1f      	ldr	r3, [pc, #124]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800656a:	2180      	movs	r1, #128	; 0x80
 800656c:	0249      	lsls	r1, r1, #9
 800656e:	430a      	orrs	r2, r1
 8006570:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006572:	4b1d      	ldr	r3, [pc, #116]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006574:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006576:	4b1c      	ldr	r3, [pc, #112]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006578:	491e      	ldr	r1, [pc, #120]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800657a:	400a      	ands	r2, r1
 800657c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800657e:	4b1a      	ldr	r3, [pc, #104]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2201      	movs	r2, #1
 8006588:	4013      	ands	r3, r2
 800658a:	d016      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658c:	f7fe fb1c 	bl	8004bc8 <HAL_GetTick>
 8006590:	0003      	movs	r3, r0
 8006592:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006594:	e00c      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006596:	f7fe fb17 	bl	8004bc8 <HAL_GetTick>
 800659a:	0002      	movs	r2, r0
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	4a15      	ldr	r2, [pc, #84]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d904      	bls.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80065a6:	2313      	movs	r3, #19
 80065a8:	18fb      	adds	r3, r7, r3
 80065aa:	2203      	movs	r2, #3
 80065ac:	701a      	strb	r2, [r3, #0]
            break;
 80065ae:	e004      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065b0:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80065b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b4:	2202      	movs	r2, #2
 80065b6:	4013      	ands	r3, r2
 80065b8:	d0ed      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80065ba:	2313      	movs	r3, #19
 80065bc:	18fb      	adds	r3, r7, r3
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10a      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065c4:	4b08      	ldr	r3, [pc, #32]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80065c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c8:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	0019      	movs	r1, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065d2:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80065d4:	430a      	orrs	r2, r1
 80065d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80065d8:	e016      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065da:	2312      	movs	r3, #18
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	2213      	movs	r2, #19
 80065e0:	18ba      	adds	r2, r7, r2
 80065e2:	7812      	ldrb	r2, [r2, #0]
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	e00f      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80065e8:	40021000 	.word	0x40021000
 80065ec:	40007000 	.word	0x40007000
 80065f0:	fffffcff 	.word	0xfffffcff
 80065f4:	fffeffff 	.word	0xfffeffff
 80065f8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fc:	2312      	movs	r3, #18
 80065fe:	18fb      	adds	r3, r7, r3
 8006600:	2213      	movs	r2, #19
 8006602:	18ba      	adds	r2, r7, r2
 8006604:	7812      	ldrb	r2, [r2, #0]
 8006606:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006608:	2311      	movs	r3, #17
 800660a:	18fb      	adds	r3, r7, r3
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d105      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006612:	4bb6      	ldr	r3, [pc, #728]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006616:	4bb5      	ldr	r3, [pc, #724]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006618:	49b5      	ldr	r1, [pc, #724]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800661a:	400a      	ands	r2, r1
 800661c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2201      	movs	r2, #1
 8006624:	4013      	ands	r3, r2
 8006626:	d009      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006628:	4bb0      	ldr	r3, [pc, #704]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800662a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662c:	2203      	movs	r2, #3
 800662e:	4393      	bics	r3, r2
 8006630:	0019      	movs	r1, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	4bad      	ldr	r3, [pc, #692]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006638:	430a      	orrs	r2, r1
 800663a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2202      	movs	r2, #2
 8006642:	4013      	ands	r3, r2
 8006644:	d009      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006646:	4ba9      	ldr	r3, [pc, #676]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664a:	220c      	movs	r2, #12
 800664c:	4393      	bics	r3, r2
 800664e:	0019      	movs	r1, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	4ba5      	ldr	r3, [pc, #660]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006656:	430a      	orrs	r2, r1
 8006658:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2204      	movs	r2, #4
 8006660:	4013      	ands	r3, r2
 8006662:	d009      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006664:	4ba1      	ldr	r3, [pc, #644]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006668:	2230      	movs	r2, #48	; 0x30
 800666a:	4393      	bics	r3, r2
 800666c:	0019      	movs	r1, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	4b9e      	ldr	r3, [pc, #632]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006674:	430a      	orrs	r2, r1
 8006676:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2210      	movs	r2, #16
 800667e:	4013      	ands	r3, r2
 8006680:	d009      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006682:	4b9a      	ldr	r3, [pc, #616]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006686:	4a9b      	ldr	r2, [pc, #620]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006688:	4013      	ands	r3, r2
 800668a:	0019      	movs	r1, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691a      	ldr	r2, [r3, #16]
 8006690:	4b96      	ldr	r3, [pc, #600]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006692:	430a      	orrs	r2, r1
 8006694:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	2380      	movs	r3, #128	; 0x80
 800669c:	015b      	lsls	r3, r3, #5
 800669e:	4013      	ands	r3, r2
 80066a0:	d009      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80066a2:	4b92      	ldr	r3, [pc, #584]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a6:	4a94      	ldr	r2, [pc, #592]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066a8:	4013      	ands	r3, r2
 80066aa:	0019      	movs	r1, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	695a      	ldr	r2, [r3, #20]
 80066b0:	4b8e      	ldr	r3, [pc, #568]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066b2:	430a      	orrs	r2, r1
 80066b4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	2380      	movs	r3, #128	; 0x80
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4013      	ands	r3, r2
 80066c0:	d009      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066c2:	4b8a      	ldr	r3, [pc, #552]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c6:	4a8d      	ldr	r2, [pc, #564]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	0019      	movs	r1, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066d0:	4b86      	ldr	r3, [pc, #536]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066d2:	430a      	orrs	r2, r1
 80066d4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	2380      	movs	r3, #128	; 0x80
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	4013      	ands	r3, r2
 80066e0:	d009      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066e2:	4b82      	ldr	r3, [pc, #520]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e6:	4a86      	ldr	r2, [pc, #536]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80066e8:	4013      	ands	r3, r2
 80066ea:	0019      	movs	r1, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f0:	4b7e      	ldr	r3, [pc, #504]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066f2:	430a      	orrs	r2, r1
 80066f4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2220      	movs	r2, #32
 80066fc:	4013      	ands	r3, r2
 80066fe:	d009      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006700:	4b7a      	ldr	r3, [pc, #488]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006704:	4a7f      	ldr	r2, [pc, #508]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006706:	4013      	ands	r3, r2
 8006708:	0019      	movs	r1, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699a      	ldr	r2, [r3, #24]
 800670e:	4b77      	ldr	r3, [pc, #476]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006710:	430a      	orrs	r2, r1
 8006712:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2240      	movs	r2, #64	; 0x40
 800671a:	4013      	ands	r3, r2
 800671c:	d009      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800671e:	4b73      	ldr	r3, [pc, #460]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006722:	4a79      	ldr	r2, [pc, #484]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006724:	4013      	ands	r3, r2
 8006726:	0019      	movs	r1, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	69da      	ldr	r2, [r3, #28]
 800672c:	4b6f      	ldr	r3, [pc, #444]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800672e:	430a      	orrs	r2, r1
 8006730:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	2380      	movs	r3, #128	; 0x80
 8006738:	01db      	lsls	r3, r3, #7
 800673a:	4013      	ands	r3, r2
 800673c:	d015      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800673e:	4b6b      	ldr	r3, [pc, #428]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	0899      	lsrs	r1, r3, #2
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800674a:	4b68      	ldr	r3, [pc, #416]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800674c:	430a      	orrs	r2, r1
 800674e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006754:	2380      	movs	r3, #128	; 0x80
 8006756:	05db      	lsls	r3, r3, #23
 8006758:	429a      	cmp	r2, r3
 800675a:	d106      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800675c:	4b63      	ldr	r3, [pc, #396]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	4b62      	ldr	r3, [pc, #392]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006762:	2180      	movs	r1, #128	; 0x80
 8006764:	0249      	lsls	r1, r1, #9
 8006766:	430a      	orrs	r2, r1
 8006768:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	2380      	movs	r3, #128	; 0x80
 8006770:	031b      	lsls	r3, r3, #12
 8006772:	4013      	ands	r3, r2
 8006774:	d009      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006776:	4b5d      	ldr	r3, [pc, #372]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677a:	2240      	movs	r2, #64	; 0x40
 800677c:	4393      	bics	r3, r2
 800677e:	0019      	movs	r1, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006784:	4b59      	ldr	r3, [pc, #356]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006786:	430a      	orrs	r2, r1
 8006788:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	2380      	movs	r3, #128	; 0x80
 8006790:	039b      	lsls	r3, r3, #14
 8006792:	4013      	ands	r3, r2
 8006794:	d016      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006796:	4b55      	ldr	r3, [pc, #340]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679a:	4a5c      	ldr	r2, [pc, #368]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800679c:	4013      	ands	r3, r2
 800679e:	0019      	movs	r1, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067a4:	4b51      	ldr	r3, [pc, #324]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067a6:	430a      	orrs	r2, r1
 80067a8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ae:	2380      	movs	r3, #128	; 0x80
 80067b0:	03db      	lsls	r3, r3, #15
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d106      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80067b6:	4b4d      	ldr	r3, [pc, #308]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	4b4c      	ldr	r3, [pc, #304]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067bc:	2180      	movs	r1, #128	; 0x80
 80067be:	0449      	lsls	r1, r1, #17
 80067c0:	430a      	orrs	r2, r1
 80067c2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	2380      	movs	r3, #128	; 0x80
 80067ca:	03db      	lsls	r3, r3, #15
 80067cc:	4013      	ands	r3, r2
 80067ce:	d016      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80067d0:	4b46      	ldr	r3, [pc, #280]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d4:	4a4e      	ldr	r2, [pc, #312]	; (8006910 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067d6:	4013      	ands	r3, r2
 80067d8:	0019      	movs	r1, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067de:	4b43      	ldr	r3, [pc, #268]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067e0:	430a      	orrs	r2, r1
 80067e2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067e8:	2380      	movs	r3, #128	; 0x80
 80067ea:	045b      	lsls	r3, r3, #17
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d106      	bne.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80067f0:	4b3e      	ldr	r3, [pc, #248]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	4b3d      	ldr	r3, [pc, #244]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067f6:	2180      	movs	r1, #128	; 0x80
 80067f8:	0449      	lsls	r1, r1, #17
 80067fa:	430a      	orrs	r2, r1
 80067fc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	2380      	movs	r3, #128	; 0x80
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	4013      	ands	r3, r2
 8006808:	d014      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800680a:	4b38      	ldr	r3, [pc, #224]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800680c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680e:	2203      	movs	r2, #3
 8006810:	4393      	bics	r3, r2
 8006812:	0019      	movs	r1, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a1a      	ldr	r2, [r3, #32]
 8006818:	4b34      	ldr	r3, [pc, #208]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800681a:	430a      	orrs	r2, r1
 800681c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d106      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006826:	4b31      	ldr	r3, [pc, #196]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	4b30      	ldr	r3, [pc, #192]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800682c:	2180      	movs	r1, #128	; 0x80
 800682e:	0249      	lsls	r1, r1, #9
 8006830:	430a      	orrs	r2, r1
 8006832:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	2380      	movs	r3, #128	; 0x80
 800683a:	019b      	lsls	r3, r3, #6
 800683c:	4013      	ands	r3, r2
 800683e:	d014      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006840:	4b2a      	ldr	r3, [pc, #168]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006844:	220c      	movs	r2, #12
 8006846:	4393      	bics	r3, r2
 8006848:	0019      	movs	r1, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800684e:	4b27      	ldr	r3, [pc, #156]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006850:	430a      	orrs	r2, r1
 8006852:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	2b04      	cmp	r3, #4
 800685a:	d106      	bne.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800685c:	4b23      	ldr	r3, [pc, #140]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800685e:	68da      	ldr	r2, [r3, #12]
 8006860:	4b22      	ldr	r3, [pc, #136]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006862:	2180      	movs	r1, #128	; 0x80
 8006864:	0249      	lsls	r1, r1, #9
 8006866:	430a      	orrs	r2, r1
 8006868:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	2380      	movs	r3, #128	; 0x80
 8006870:	045b      	lsls	r3, r3, #17
 8006872:	4013      	ands	r3, r2
 8006874:	d016      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006876:	4b1d      	ldr	r3, [pc, #116]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687a:	4a22      	ldr	r2, [pc, #136]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800687c:	4013      	ands	r3, r2
 800687e:	0019      	movs	r1, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006884:	4b19      	ldr	r3, [pc, #100]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006886:	430a      	orrs	r2, r1
 8006888:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800688e:	2380      	movs	r3, #128	; 0x80
 8006890:	019b      	lsls	r3, r3, #6
 8006892:	429a      	cmp	r2, r3
 8006894:	d106      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006896:	4b15      	ldr	r3, [pc, #84]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	4b14      	ldr	r3, [pc, #80]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800689c:	2180      	movs	r1, #128	; 0x80
 800689e:	0449      	lsls	r1, r1, #17
 80068a0:	430a      	orrs	r2, r1
 80068a2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	2380      	movs	r3, #128	; 0x80
 80068aa:	049b      	lsls	r3, r3, #18
 80068ac:	4013      	ands	r3, r2
 80068ae:	d016      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80068b0:	4b0e      	ldr	r3, [pc, #56]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80068b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b4:	4a10      	ldr	r2, [pc, #64]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80068b6:	4013      	ands	r3, r2
 80068b8:	0019      	movs	r1, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068be:	4b0b      	ldr	r3, [pc, #44]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80068c0:	430a      	orrs	r2, r1
 80068c2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068c8:	2380      	movs	r3, #128	; 0x80
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d106      	bne.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80068d0:	4b06      	ldr	r3, [pc, #24]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	4b05      	ldr	r3, [pc, #20]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80068d6:	2180      	movs	r1, #128	; 0x80
 80068d8:	0449      	lsls	r1, r1, #17
 80068da:	430a      	orrs	r2, r1
 80068dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80068de:	2312      	movs	r3, #18
 80068e0:	18fb      	adds	r3, r7, r3
 80068e2:	781b      	ldrb	r3, [r3, #0]
}
 80068e4:	0018      	movs	r0, r3
 80068e6:	46bd      	mov	sp, r7
 80068e8:	b006      	add	sp, #24
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	40021000 	.word	0x40021000
 80068f0:	efffffff 	.word	0xefffffff
 80068f4:	fffff3ff 	.word	0xfffff3ff
 80068f8:	fffffcff 	.word	0xfffffcff
 80068fc:	fff3ffff 	.word	0xfff3ffff
 8006900:	ffcfffff 	.word	0xffcfffff
 8006904:	ffffcfff 	.word	0xffffcfff
 8006908:	ffff3fff 	.word	0xffff3fff
 800690c:	ffbfffff 	.word	0xffbfffff
 8006910:	feffffff 	.word	0xfeffffff

08006914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e0a8      	b.n	8006a78 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	2382      	movs	r3, #130	; 0x82
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	429a      	cmp	r2, r3
 8006938:	d009      	beq.n	800694e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	61da      	str	r2, [r3, #28]
 8006940:	e005      	b.n	800694e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	225d      	movs	r2, #93	; 0x5d
 8006958:	5c9b      	ldrb	r3, [r3, r2]
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	d107      	bne.n	8006970 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	225c      	movs	r2, #92	; 0x5c
 8006964:	2100      	movs	r1, #0
 8006966:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	0018      	movs	r0, r3
 800696c:	f000 f88a 	bl	8006a84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	225d      	movs	r2, #93	; 0x5d
 8006974:	2102      	movs	r1, #2
 8006976:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2140      	movs	r1, #64	; 0x40
 8006984:	438a      	bics	r2, r1
 8006986:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68da      	ldr	r2, [r3, #12]
 800698c:	23e0      	movs	r3, #224	; 0xe0
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	429a      	cmp	r2, r3
 8006992:	d902      	bls.n	800699a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	e002      	b.n	80069a0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800699a:	2380      	movs	r3, #128	; 0x80
 800699c:	015b      	lsls	r3, r3, #5
 800699e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	23f0      	movs	r3, #240	; 0xf0
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d008      	beq.n	80069be <HAL_SPI_Init+0xaa>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	23e0      	movs	r3, #224	; 0xe0
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d002      	beq.n	80069be <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	2382      	movs	r3, #130	; 0x82
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	401a      	ands	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6899      	ldr	r1, [r3, #8]
 80069cc:	2384      	movs	r3, #132	; 0x84
 80069ce:	021b      	lsls	r3, r3, #8
 80069d0:	400b      	ands	r3, r1
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	2102      	movs	r1, #2
 80069da:	400b      	ands	r3, r1
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	2101      	movs	r1, #1
 80069e4:	400b      	ands	r3, r1
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6999      	ldr	r1, [r3, #24]
 80069ec:	2380      	movs	r3, #128	; 0x80
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	400b      	ands	r3, r1
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	2138      	movs	r1, #56	; 0x38
 80069fa:	400b      	ands	r3, r1
 80069fc:	431a      	orrs	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	2180      	movs	r1, #128	; 0x80
 8006a04:	400b      	ands	r3, r1
 8006a06:	431a      	orrs	r2, r3
 8006a08:	0011      	movs	r1, r2
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a0e:	2380      	movs	r3, #128	; 0x80
 8006a10:	019b      	lsls	r3, r3, #6
 8006a12:	401a      	ands	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	0c1b      	lsrs	r3, r3, #16
 8006a22:	2204      	movs	r2, #4
 8006a24:	401a      	ands	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	2110      	movs	r1, #16
 8006a2c:	400b      	ands	r3, r1
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a34:	2108      	movs	r1, #8
 8006a36:	400b      	ands	r3, r1
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68d9      	ldr	r1, [r3, #12]
 8006a3e:	23f0      	movs	r3, #240	; 0xf0
 8006a40:	011b      	lsls	r3, r3, #4
 8006a42:	400b      	ands	r3, r1
 8006a44:	431a      	orrs	r2, r3
 8006a46:	0011      	movs	r1, r2
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	2380      	movs	r3, #128	; 0x80
 8006a4c:	015b      	lsls	r3, r3, #5
 8006a4e:	401a      	ands	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	69da      	ldr	r2, [r3, #28]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4907      	ldr	r1, [pc, #28]	; (8006a80 <HAL_SPI_Init+0x16c>)
 8006a64:	400a      	ands	r2, r1
 8006a66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	225d      	movs	r2, #93	; 0x5d
 8006a72:	2101      	movs	r1, #1
 8006a74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	0018      	movs	r0, r3
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	b004      	add	sp, #16
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	fffff7ff 	.word	0xfffff7ff

08006a84 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006a8c:	46c0      	nop			; (mov r8, r8)
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	b002      	add	sp, #8
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08a      	sub	sp, #40	; 0x28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	001a      	movs	r2, r3
 8006aa2:	1cbb      	adds	r3, r7, #2
 8006aa4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006aaa:	2323      	movs	r3, #35	; 0x23
 8006aac:	18fb      	adds	r3, r7, r3
 8006aae:	2200      	movs	r2, #0
 8006ab0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	225c      	movs	r2, #92	; 0x5c
 8006ab6:	5c9b      	ldrb	r3, [r3, r2]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <HAL_SPI_TransmitReceive+0x2c>
 8006abc:	2302      	movs	r3, #2
 8006abe:	e1b5      	b.n	8006e2c <HAL_SPI_TransmitReceive+0x398>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	225c      	movs	r2, #92	; 0x5c
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ac8:	f7fe f87e 	bl	8004bc8 <HAL_GetTick>
 8006acc:	0003      	movs	r3, r0
 8006ace:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ad0:	201b      	movs	r0, #27
 8006ad2:	183b      	adds	r3, r7, r0
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	215d      	movs	r1, #93	; 0x5d
 8006ad8:	5c52      	ldrb	r2, [r2, r1]
 8006ada:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006ae2:	2312      	movs	r3, #18
 8006ae4:	18fb      	adds	r3, r7, r3
 8006ae6:	1cba      	adds	r2, r7, #2
 8006ae8:	8812      	ldrh	r2, [r2, #0]
 8006aea:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006aec:	183b      	adds	r3, r7, r0
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d011      	beq.n	8006b18 <HAL_SPI_TransmitReceive+0x84>
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	2382      	movs	r3, #130	; 0x82
 8006af8:	005b      	lsls	r3, r3, #1
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d107      	bne.n	8006b0e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d103      	bne.n	8006b0e <HAL_SPI_TransmitReceive+0x7a>
 8006b06:	183b      	adds	r3, r7, r0
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d004      	beq.n	8006b18 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006b0e:	2323      	movs	r3, #35	; 0x23
 8006b10:	18fb      	adds	r3, r7, r3
 8006b12:	2202      	movs	r2, #2
 8006b14:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b16:	e17e      	b.n	8006e16 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d006      	beq.n	8006b2c <HAL_SPI_TransmitReceive+0x98>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_SPI_TransmitReceive+0x98>
 8006b24:	1cbb      	adds	r3, r7, #2
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d104      	bne.n	8006b36 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006b2c:	2323      	movs	r3, #35	; 0x23
 8006b2e:	18fb      	adds	r3, r7, r3
 8006b30:	2201      	movs	r2, #1
 8006b32:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b34:	e16f      	b.n	8006e16 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	225d      	movs	r2, #93	; 0x5d
 8006b3a:	5c9b      	ldrb	r3, [r3, r2]
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d003      	beq.n	8006b4a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	225d      	movs	r2, #93	; 0x5d
 8006b46:	2105      	movs	r1, #5
 8006b48:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	1cba      	adds	r2, r7, #2
 8006b5a:	2146      	movs	r1, #70	; 0x46
 8006b5c:	8812      	ldrh	r2, [r2, #0]
 8006b5e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	1cba      	adds	r2, r7, #2
 8006b64:	2144      	movs	r1, #68	; 0x44
 8006b66:	8812      	ldrh	r2, [r2, #0]
 8006b68:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	1cba      	adds	r2, r7, #2
 8006b74:	8812      	ldrh	r2, [r2, #0]
 8006b76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	1cba      	adds	r2, r7, #2
 8006b7c:	8812      	ldrh	r2, [r2, #0]
 8006b7e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	23e0      	movs	r3, #224	; 0xe0
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d908      	bls.n	8006baa <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	49a4      	ldr	r1, [pc, #656]	; (8006e34 <HAL_SPI_TransmitReceive+0x3a0>)
 8006ba4:	400a      	ands	r2, r1
 8006ba6:	605a      	str	r2, [r3, #4]
 8006ba8:	e008      	b.n	8006bbc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2180      	movs	r1, #128	; 0x80
 8006bb6:	0149      	lsls	r1, r1, #5
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2240      	movs	r2, #64	; 0x40
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	2b40      	cmp	r3, #64	; 0x40
 8006bc8:	d007      	beq.n	8006bda <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2140      	movs	r1, #64	; 0x40
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	23e0      	movs	r3, #224	; 0xe0
 8006be0:	00db      	lsls	r3, r3, #3
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d800      	bhi.n	8006be8 <HAL_SPI_TransmitReceive+0x154>
 8006be6:	e07f      	b.n	8006ce8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d005      	beq.n	8006bfc <HAL_SPI_TransmitReceive+0x168>
 8006bf0:	2312      	movs	r3, #18
 8006bf2:	18fb      	adds	r3, r7, r3
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d000      	beq.n	8006bfc <HAL_SPI_TransmitReceive+0x168>
 8006bfa:	e069      	b.n	8006cd0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	881a      	ldrh	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	1c9a      	adds	r2, r3, #2
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c20:	e056      	b.n	8006cd0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	2202      	movs	r2, #2
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d11b      	bne.n	8006c68 <HAL_SPI_TransmitReceive+0x1d4>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d016      	beq.n	8006c68 <HAL_SPI_TransmitReceive+0x1d4>
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d113      	bne.n	8006c68 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c44:	881a      	ldrh	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c50:	1c9a      	adds	r2, r3, #2
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	4013      	ands	r3, r2
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d11c      	bne.n	8006cb0 <HAL_SPI_TransmitReceive+0x21c>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2246      	movs	r2, #70	; 0x46
 8006c7a:	5a9b      	ldrh	r3, [r3, r2]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d016      	beq.n	8006cb0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	b292      	uxth	r2, r2
 8006c8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c94:	1c9a      	adds	r2, r3, #2
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2246      	movs	r2, #70	; 0x46
 8006c9e:	5a9b      	ldrh	r3, [r3, r2]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b299      	uxth	r1, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2246      	movs	r2, #70	; 0x46
 8006caa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cac:	2301      	movs	r3, #1
 8006cae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006cb0:	f7fd ff8a 	bl	8004bc8 <HAL_GetTick>
 8006cb4:	0002      	movs	r2, r0
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d807      	bhi.n	8006cd0 <HAL_SPI_TransmitReceive+0x23c>
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	d004      	beq.n	8006cd0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006cc6:	2323      	movs	r3, #35	; 0x23
 8006cc8:	18fb      	adds	r3, r7, r3
 8006cca:	2203      	movs	r2, #3
 8006ccc:	701a      	strb	r2, [r3, #0]
        goto error;
 8006cce:	e0a2      	b.n	8006e16 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1a3      	bne.n	8006c22 <HAL_SPI_TransmitReceive+0x18e>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2246      	movs	r2, #70	; 0x46
 8006cde:	5a9b      	ldrh	r3, [r3, r2]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d19d      	bne.n	8006c22 <HAL_SPI_TransmitReceive+0x18e>
 8006ce6:	e085      	b.n	8006df4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d005      	beq.n	8006cfc <HAL_SPI_TransmitReceive+0x268>
 8006cf0:	2312      	movs	r3, #18
 8006cf2:	18fb      	adds	r3, r7, r3
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d000      	beq.n	8006cfc <HAL_SPI_TransmitReceive+0x268>
 8006cfa:	e070      	b.n	8006dde <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	330c      	adds	r3, #12
 8006d06:	7812      	ldrb	r2, [r2, #0]
 8006d08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d22:	e05c      	b.n	8006dde <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d11c      	bne.n	8006d6c <HAL_SPI_TransmitReceive+0x2d8>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d017      	beq.n	8006d6c <HAL_SPI_TransmitReceive+0x2d8>
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d114      	bne.n	8006d6c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	330c      	adds	r3, #12
 8006d4c:	7812      	ldrb	r2, [r2, #0]
 8006d4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2201      	movs	r2, #1
 8006d74:	4013      	ands	r3, r2
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d11e      	bne.n	8006db8 <HAL_SPI_TransmitReceive+0x324>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2246      	movs	r2, #70	; 0x46
 8006d7e:	5a9b      	ldrh	r3, [r3, r2]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d018      	beq.n	8006db8 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	330c      	adds	r3, #12
 8006d8c:	001a      	movs	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	7812      	ldrb	r2, [r2, #0]
 8006d94:	b2d2      	uxtb	r2, r2
 8006d96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2246      	movs	r2, #70	; 0x46
 8006da6:	5a9b      	ldrh	r3, [r3, r2]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	3b01      	subs	r3, #1
 8006dac:	b299      	uxth	r1, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2246      	movs	r2, #70	; 0x46
 8006db2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006db4:	2301      	movs	r3, #1
 8006db6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006db8:	f7fd ff06 	bl	8004bc8 <HAL_GetTick>
 8006dbc:	0002      	movs	r2, r0
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d802      	bhi.n	8006dce <HAL_SPI_TransmitReceive+0x33a>
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	3301      	adds	r3, #1
 8006dcc:	d102      	bne.n	8006dd4 <HAL_SPI_TransmitReceive+0x340>
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d104      	bne.n	8006dde <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006dd4:	2323      	movs	r3, #35	; 0x23
 8006dd6:	18fb      	adds	r3, r7, r3
 8006dd8:	2203      	movs	r2, #3
 8006dda:	701a      	strb	r2, [r3, #0]
        goto error;
 8006ddc:	e01b      	b.n	8006e16 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d19d      	bne.n	8006d24 <HAL_SPI_TransmitReceive+0x290>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2246      	movs	r2, #70	; 0x46
 8006dec:	5a9b      	ldrh	r3, [r3, r2]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d197      	bne.n	8006d24 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006df4:	69fa      	ldr	r2, [r7, #28]
 8006df6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	0018      	movs	r0, r3
 8006dfc:	f000 f958 	bl	80070b0 <SPI_EndRxTxTransaction>
 8006e00:	1e03      	subs	r3, r0, #0
 8006e02:	d007      	beq.n	8006e14 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006e04:	2323      	movs	r3, #35	; 0x23
 8006e06:	18fb      	adds	r3, r7, r3
 8006e08:	2201      	movs	r2, #1
 8006e0a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	661a      	str	r2, [r3, #96]	; 0x60
 8006e12:	e000      	b.n	8006e16 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006e14:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	225d      	movs	r2, #93	; 0x5d
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	225c      	movs	r2, #92	; 0x5c
 8006e22:	2100      	movs	r1, #0
 8006e24:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006e26:	2323      	movs	r3, #35	; 0x23
 8006e28:	18fb      	adds	r3, r7, r3
 8006e2a:	781b      	ldrb	r3, [r3, #0]
}
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	b00a      	add	sp, #40	; 0x28
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	ffffefff 	.word	0xffffefff

08006e38 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	225d      	movs	r2, #93	; 0x5d
 8006e44:	5c9b      	ldrb	r3, [r3, r2]
 8006e46:	b2db      	uxtb	r3, r3
}
 8006e48:	0018      	movs	r0, r3
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	b002      	add	sp, #8
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	1dfb      	adds	r3, r7, #7
 8006e5e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e60:	f7fd feb2 	bl	8004bc8 <HAL_GetTick>
 8006e64:	0002      	movs	r2, r0
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	1a9b      	subs	r3, r3, r2
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	18d3      	adds	r3, r2, r3
 8006e6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e70:	f7fd feaa 	bl	8004bc8 <HAL_GetTick>
 8006e74:	0003      	movs	r3, r0
 8006e76:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e78:	4b3a      	ldr	r3, [pc, #232]	; (8006f64 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	015b      	lsls	r3, r3, #5
 8006e7e:	0d1b      	lsrs	r3, r3, #20
 8006e80:	69fa      	ldr	r2, [r7, #28]
 8006e82:	4353      	muls	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e86:	e058      	b.n	8006f3a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	d055      	beq.n	8006f3a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e8e:	f7fd fe9b 	bl	8004bc8 <HAL_GetTick>
 8006e92:	0002      	movs	r2, r0
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	69fa      	ldr	r2, [r7, #28]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d902      	bls.n	8006ea4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d142      	bne.n	8006f2a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	21e0      	movs	r1, #224	; 0xe0
 8006eb0:	438a      	bics	r2, r1
 8006eb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	2382      	movs	r3, #130	; 0x82
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d113      	bne.n	8006ee8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	2380      	movs	r3, #128	; 0x80
 8006ec6:	021b      	lsls	r3, r3, #8
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d005      	beq.n	8006ed8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	2380      	movs	r3, #128	; 0x80
 8006ed2:	00db      	lsls	r3, r3, #3
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d107      	bne.n	8006ee8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2140      	movs	r1, #64	; 0x40
 8006ee4:	438a      	bics	r2, r1
 8006ee6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eec:	2380      	movs	r3, #128	; 0x80
 8006eee:	019b      	lsls	r3, r3, #6
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d110      	bne.n	8006f16 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	491a      	ldr	r1, [pc, #104]	; (8006f68 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006f00:	400a      	ands	r2, r1
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2180      	movs	r1, #128	; 0x80
 8006f10:	0189      	lsls	r1, r1, #6
 8006f12:	430a      	orrs	r2, r1
 8006f14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	225d      	movs	r2, #93	; 0x5d
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	225c      	movs	r2, #92	; 0x5c
 8006f22:	2100      	movs	r1, #0
 8006f24:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e017      	b.n	8006f5a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006f30:	2300      	movs	r3, #0
 8006f32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	4013      	ands	r3, r2
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	425a      	negs	r2, r3
 8006f4a:	4153      	adcs	r3, r2
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	001a      	movs	r2, r3
 8006f50:	1dfb      	adds	r3, r7, #7
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d197      	bne.n	8006e88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	0018      	movs	r0, r3
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	b008      	add	sp, #32
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	46c0      	nop			; (mov r8, r8)
 8006f64:	20000050 	.word	0x20000050
 8006f68:	ffffdfff 	.word	0xffffdfff

08006f6c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08a      	sub	sp, #40	; 0x28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006f7a:	2317      	movs	r3, #23
 8006f7c:	18fb      	adds	r3, r7, r3
 8006f7e:	2200      	movs	r2, #0
 8006f80:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f82:	f7fd fe21 	bl	8004bc8 <HAL_GetTick>
 8006f86:	0002      	movs	r2, r0
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	1a9b      	subs	r3, r3, r2
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	18d3      	adds	r3, r2, r3
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006f92:	f7fd fe19 	bl	8004bc8 <HAL_GetTick>
 8006f96:	0003      	movs	r3, r0
 8006f98:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	330c      	adds	r3, #12
 8006fa0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006fa2:	4b41      	ldr	r3, [pc, #260]	; (80070a8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	0013      	movs	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	189b      	adds	r3, r3, r2
 8006fac:	00da      	lsls	r2, r3, #3
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	0d1b      	lsrs	r3, r3, #20
 8006fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fb4:	4353      	muls	r3, r2
 8006fb6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006fb8:	e068      	b.n	800708c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	23c0      	movs	r3, #192	; 0xc0
 8006fbe:	00db      	lsls	r3, r3, #3
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d10a      	bne.n	8006fda <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d107      	bne.n	8006fda <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	2117      	movs	r1, #23
 8006fd2:	187b      	adds	r3, r7, r1
 8006fd4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006fd6:	187b      	adds	r3, r7, r1
 8006fd8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	d055      	beq.n	800708c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fe0:	f7fd fdf2 	bl	8004bc8 <HAL_GetTick>
 8006fe4:	0002      	movs	r2, r0
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d902      	bls.n	8006ff6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d142      	bne.n	800707c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	21e0      	movs	r1, #224	; 0xe0
 8007002:	438a      	bics	r2, r1
 8007004:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	2382      	movs	r3, #130	; 0x82
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	429a      	cmp	r2, r3
 8007010:	d113      	bne.n	800703a <SPI_WaitFifoStateUntilTimeout+0xce>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	2380      	movs	r3, #128	; 0x80
 8007018:	021b      	lsls	r3, r3, #8
 800701a:	429a      	cmp	r2, r3
 800701c:	d005      	beq.n	800702a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	689a      	ldr	r2, [r3, #8]
 8007022:	2380      	movs	r3, #128	; 0x80
 8007024:	00db      	lsls	r3, r3, #3
 8007026:	429a      	cmp	r2, r3
 8007028:	d107      	bne.n	800703a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2140      	movs	r1, #64	; 0x40
 8007036:	438a      	bics	r2, r1
 8007038:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800703e:	2380      	movs	r3, #128	; 0x80
 8007040:	019b      	lsls	r3, r3, #6
 8007042:	429a      	cmp	r2, r3
 8007044:	d110      	bne.n	8007068 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4916      	ldr	r1, [pc, #88]	; (80070ac <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007052:	400a      	ands	r2, r1
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2180      	movs	r1, #128	; 0x80
 8007062:	0189      	lsls	r1, r1, #6
 8007064:	430a      	orrs	r2, r1
 8007066:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	225d      	movs	r2, #93	; 0x5d
 800706c:	2101      	movs	r1, #1
 800706e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	225c      	movs	r2, #92	; 0x5c
 8007074:	2100      	movs	r1, #0
 8007076:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e010      	b.n	800709e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007082:	2300      	movs	r3, #0
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	3b01      	subs	r3, #1
 800708a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	4013      	ands	r3, r2
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	429a      	cmp	r2, r3
 800709a:	d18e      	bne.n	8006fba <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	0018      	movs	r0, r3
 80070a0:	46bd      	mov	sp, r7
 80070a2:	b00a      	add	sp, #40	; 0x28
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	46c0      	nop			; (mov r8, r8)
 80070a8:	20000050 	.word	0x20000050
 80070ac:	ffffdfff 	.word	0xffffdfff

080070b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af02      	add	r7, sp, #8
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	23c0      	movs	r3, #192	; 0xc0
 80070c0:	0159      	lsls	r1, r3, #5
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	0013      	movs	r3, r2
 80070ca:	2200      	movs	r2, #0
 80070cc:	f7ff ff4e 	bl	8006f6c <SPI_WaitFifoStateUntilTimeout>
 80070d0:	1e03      	subs	r3, r0, #0
 80070d2:	d007      	beq.n	80070e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d8:	2220      	movs	r2, #32
 80070da:	431a      	orrs	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e027      	b.n	8007134 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	0013      	movs	r3, r2
 80070ee:	2200      	movs	r2, #0
 80070f0:	2180      	movs	r1, #128	; 0x80
 80070f2:	f7ff fead 	bl	8006e50 <SPI_WaitFlagStateUntilTimeout>
 80070f6:	1e03      	subs	r3, r0, #0
 80070f8:	d007      	beq.n	800710a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070fe:	2220      	movs	r2, #32
 8007100:	431a      	orrs	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e014      	b.n	8007134 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	23c0      	movs	r3, #192	; 0xc0
 800710e:	00d9      	lsls	r1, r3, #3
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	0013      	movs	r3, r2
 8007118:	2200      	movs	r2, #0
 800711a:	f7ff ff27 	bl	8006f6c <SPI_WaitFifoStateUntilTimeout>
 800711e:	1e03      	subs	r3, r0, #0
 8007120:	d007      	beq.n	8007132 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007126:	2220      	movs	r2, #32
 8007128:	431a      	orrs	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e000      	b.n	8007134 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	0018      	movs	r0, r3
 8007136:	46bd      	mov	sp, r7
 8007138:	b004      	add	sp, #16
 800713a:	bd80      	pop	{r7, pc}

0800713c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e04a      	b.n	80071e4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	223d      	movs	r2, #61	; 0x3d
 8007152:	5c9b      	ldrb	r3, [r3, r2]
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d107      	bne.n	800716a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	223c      	movs	r2, #60	; 0x3c
 800715e:	2100      	movs	r1, #0
 8007160:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	0018      	movs	r0, r3
 8007166:	f7fd fb79 	bl	800485c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	223d      	movs	r2, #61	; 0x3d
 800716e:	2102      	movs	r1, #2
 8007170:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	3304      	adds	r3, #4
 800717a:	0019      	movs	r1, r3
 800717c:	0010      	movs	r0, r2
 800717e:	f000 f965 	bl	800744c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2248      	movs	r2, #72	; 0x48
 8007186:	2101      	movs	r1, #1
 8007188:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	223e      	movs	r2, #62	; 0x3e
 800718e:	2101      	movs	r1, #1
 8007190:	5499      	strb	r1, [r3, r2]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	223f      	movs	r2, #63	; 0x3f
 8007196:	2101      	movs	r1, #1
 8007198:	5499      	strb	r1, [r3, r2]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2240      	movs	r2, #64	; 0x40
 800719e:	2101      	movs	r1, #1
 80071a0:	5499      	strb	r1, [r3, r2]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2241      	movs	r2, #65	; 0x41
 80071a6:	2101      	movs	r1, #1
 80071a8:	5499      	strb	r1, [r3, r2]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2242      	movs	r2, #66	; 0x42
 80071ae:	2101      	movs	r1, #1
 80071b0:	5499      	strb	r1, [r3, r2]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2243      	movs	r2, #67	; 0x43
 80071b6:	2101      	movs	r1, #1
 80071b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2244      	movs	r2, #68	; 0x44
 80071be:	2101      	movs	r1, #1
 80071c0:	5499      	strb	r1, [r3, r2]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2245      	movs	r2, #69	; 0x45
 80071c6:	2101      	movs	r1, #1
 80071c8:	5499      	strb	r1, [r3, r2]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2246      	movs	r2, #70	; 0x46
 80071ce:	2101      	movs	r1, #1
 80071d0:	5499      	strb	r1, [r3, r2]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2247      	movs	r2, #71	; 0x47
 80071d6:	2101      	movs	r1, #1
 80071d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	223d      	movs	r2, #61	; 0x3d
 80071de:	2101      	movs	r1, #1
 80071e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	0018      	movs	r0, r3
 80071e6:	46bd      	mov	sp, r7
 80071e8:	b002      	add	sp, #8
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	223d      	movs	r2, #61	; 0x3d
 80071f8:	5c9b      	ldrb	r3, [r3, r2]
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d001      	beq.n	8007204 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e03f      	b.n	8007284 <HAL_TIM_Base_Start+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	223d      	movs	r2, #61	; 0x3d
 8007208:	2102      	movs	r1, #2
 800720a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a1e      	ldr	r2, [pc, #120]	; (800728c <HAL_TIM_Base_Start+0xa0>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d014      	beq.n	8007240 <HAL_TIM_Base_Start+0x54>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	2380      	movs	r3, #128	; 0x80
 800721c:	05db      	lsls	r3, r3, #23
 800721e:	429a      	cmp	r2, r3
 8007220:	d00e      	beq.n	8007240 <HAL_TIM_Base_Start+0x54>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a1a      	ldr	r2, [pc, #104]	; (8007290 <HAL_TIM_Base_Start+0xa4>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d009      	beq.n	8007240 <HAL_TIM_Base_Start+0x54>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a18      	ldr	r2, [pc, #96]	; (8007294 <HAL_TIM_Base_Start+0xa8>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d004      	beq.n	8007240 <HAL_TIM_Base_Start+0x54>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a17      	ldr	r2, [pc, #92]	; (8007298 <HAL_TIM_Base_Start+0xac>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d116      	bne.n	800726e <HAL_TIM_Base_Start+0x82>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	4a15      	ldr	r2, [pc, #84]	; (800729c <HAL_TIM_Base_Start+0xb0>)
 8007248:	4013      	ands	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b06      	cmp	r3, #6
 8007250:	d016      	beq.n	8007280 <HAL_TIM_Base_Start+0x94>
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	2380      	movs	r3, #128	; 0x80
 8007256:	025b      	lsls	r3, r3, #9
 8007258:	429a      	cmp	r2, r3
 800725a:	d011      	beq.n	8007280 <HAL_TIM_Base_Start+0x94>
    {
      __HAL_TIM_ENABLE(htim);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2101      	movs	r1, #1
 8007268:	430a      	orrs	r2, r1
 800726a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800726c:	e008      	b.n	8007280 <HAL_TIM_Base_Start+0x94>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2101      	movs	r1, #1
 800727a:	430a      	orrs	r2, r1
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	e000      	b.n	8007282 <HAL_TIM_Base_Start+0x96>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007280:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	0018      	movs	r0, r3
 8007286:	46bd      	mov	sp, r7
 8007288:	b004      	add	sp, #16
 800728a:	bd80      	pop	{r7, pc}
 800728c:	40012c00 	.word	0x40012c00
 8007290:	40000400 	.word	0x40000400
 8007294:	40000800 	.word	0x40000800
 8007298:	40014000 	.word	0x40014000
 800729c:	00010007 	.word	0x00010007

080072a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072aa:	230f      	movs	r3, #15
 80072ac:	18fb      	adds	r3, r7, r3
 80072ae:	2200      	movs	r2, #0
 80072b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	223c      	movs	r2, #60	; 0x3c
 80072b6:	5c9b      	ldrb	r3, [r3, r2]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d101      	bne.n	80072c0 <HAL_TIM_ConfigClockSource+0x20>
 80072bc:	2302      	movs	r3, #2
 80072be:	e0bc      	b.n	800743a <HAL_TIM_ConfigClockSource+0x19a>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	223c      	movs	r2, #60	; 0x3c
 80072c4:	2101      	movs	r1, #1
 80072c6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	223d      	movs	r2, #61	; 0x3d
 80072cc:	2102      	movs	r1, #2
 80072ce:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4a5a      	ldr	r2, [pc, #360]	; (8007444 <HAL_TIM_ConfigClockSource+0x1a4>)
 80072dc:	4013      	ands	r3, r2
 80072de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	4a59      	ldr	r2, [pc, #356]	; (8007448 <HAL_TIM_ConfigClockSource+0x1a8>)
 80072e4:	4013      	ands	r3, r2
 80072e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2280      	movs	r2, #128	; 0x80
 80072f6:	0192      	lsls	r2, r2, #6
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d040      	beq.n	800737e <HAL_TIM_ConfigClockSource+0xde>
 80072fc:	2280      	movs	r2, #128	; 0x80
 80072fe:	0192      	lsls	r2, r2, #6
 8007300:	4293      	cmp	r3, r2
 8007302:	d900      	bls.n	8007306 <HAL_TIM_ConfigClockSource+0x66>
 8007304:	e088      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x178>
 8007306:	2280      	movs	r2, #128	; 0x80
 8007308:	0152      	lsls	r2, r2, #5
 800730a:	4293      	cmp	r3, r2
 800730c:	d100      	bne.n	8007310 <HAL_TIM_ConfigClockSource+0x70>
 800730e:	e088      	b.n	8007422 <HAL_TIM_ConfigClockSource+0x182>
 8007310:	2280      	movs	r2, #128	; 0x80
 8007312:	0152      	lsls	r2, r2, #5
 8007314:	4293      	cmp	r3, r2
 8007316:	d900      	bls.n	800731a <HAL_TIM_ConfigClockSource+0x7a>
 8007318:	e07e      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x178>
 800731a:	2b70      	cmp	r3, #112	; 0x70
 800731c:	d018      	beq.n	8007350 <HAL_TIM_ConfigClockSource+0xb0>
 800731e:	d900      	bls.n	8007322 <HAL_TIM_ConfigClockSource+0x82>
 8007320:	e07a      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x178>
 8007322:	2b60      	cmp	r3, #96	; 0x60
 8007324:	d04f      	beq.n	80073c6 <HAL_TIM_ConfigClockSource+0x126>
 8007326:	d900      	bls.n	800732a <HAL_TIM_ConfigClockSource+0x8a>
 8007328:	e076      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x178>
 800732a:	2b50      	cmp	r3, #80	; 0x50
 800732c:	d03b      	beq.n	80073a6 <HAL_TIM_ConfigClockSource+0x106>
 800732e:	d900      	bls.n	8007332 <HAL_TIM_ConfigClockSource+0x92>
 8007330:	e072      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x178>
 8007332:	2b40      	cmp	r3, #64	; 0x40
 8007334:	d057      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0x146>
 8007336:	d900      	bls.n	800733a <HAL_TIM_ConfigClockSource+0x9a>
 8007338:	e06e      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x178>
 800733a:	2b30      	cmp	r3, #48	; 0x30
 800733c:	d063      	beq.n	8007406 <HAL_TIM_ConfigClockSource+0x166>
 800733e:	d86b      	bhi.n	8007418 <HAL_TIM_ConfigClockSource+0x178>
 8007340:	2b20      	cmp	r3, #32
 8007342:	d060      	beq.n	8007406 <HAL_TIM_ConfigClockSource+0x166>
 8007344:	d868      	bhi.n	8007418 <HAL_TIM_ConfigClockSource+0x178>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d05d      	beq.n	8007406 <HAL_TIM_ConfigClockSource+0x166>
 800734a:	2b10      	cmp	r3, #16
 800734c:	d05b      	beq.n	8007406 <HAL_TIM_ConfigClockSource+0x166>
 800734e:	e063      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6818      	ldr	r0, [r3, #0]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	6899      	ldr	r1, [r3, #8]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f000 f97a 	bl	8007658 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2277      	movs	r2, #119	; 0x77
 8007370:	4313      	orrs	r3, r2
 8007372:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	609a      	str	r2, [r3, #8]
      break;
 800737c:	e052      	b.n	8007424 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6818      	ldr	r0, [r3, #0]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	6899      	ldr	r1, [r3, #8]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f000 f963 	bl	8007658 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2180      	movs	r1, #128	; 0x80
 800739e:	01c9      	lsls	r1, r1, #7
 80073a0:	430a      	orrs	r2, r1
 80073a2:	609a      	str	r2, [r3, #8]
      break;
 80073a4:	e03e      	b.n	8007424 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	6859      	ldr	r1, [r3, #4]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	001a      	movs	r2, r3
 80073b4:	f000 f8d4 	bl	8007560 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2150      	movs	r1, #80	; 0x50
 80073be:	0018      	movs	r0, r3
 80073c0:	f000 f92e 	bl	8007620 <TIM_ITRx_SetConfig>
      break;
 80073c4:	e02e      	b.n	8007424 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6818      	ldr	r0, [r3, #0]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	6859      	ldr	r1, [r3, #4]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	001a      	movs	r2, r3
 80073d4:	f000 f8f2 	bl	80075bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2160      	movs	r1, #96	; 0x60
 80073de:	0018      	movs	r0, r3
 80073e0:	f000 f91e 	bl	8007620 <TIM_ITRx_SetConfig>
      break;
 80073e4:	e01e      	b.n	8007424 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6818      	ldr	r0, [r3, #0]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	6859      	ldr	r1, [r3, #4]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	001a      	movs	r2, r3
 80073f4:	f000 f8b4 	bl	8007560 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2140      	movs	r1, #64	; 0x40
 80073fe:	0018      	movs	r0, r3
 8007400:	f000 f90e 	bl	8007620 <TIM_ITRx_SetConfig>
      break;
 8007404:	e00e      	b.n	8007424 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	0019      	movs	r1, r3
 8007410:	0010      	movs	r0, r2
 8007412:	f000 f905 	bl	8007620 <TIM_ITRx_SetConfig>
      break;
 8007416:	e005      	b.n	8007424 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007418:	230f      	movs	r3, #15
 800741a:	18fb      	adds	r3, r7, r3
 800741c:	2201      	movs	r2, #1
 800741e:	701a      	strb	r2, [r3, #0]
      break;
 8007420:	e000      	b.n	8007424 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007422:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	223d      	movs	r2, #61	; 0x3d
 8007428:	2101      	movs	r1, #1
 800742a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	223c      	movs	r2, #60	; 0x3c
 8007430:	2100      	movs	r1, #0
 8007432:	5499      	strb	r1, [r3, r2]

  return status;
 8007434:	230f      	movs	r3, #15
 8007436:	18fb      	adds	r3, r7, r3
 8007438:	781b      	ldrb	r3, [r3, #0]
}
 800743a:	0018      	movs	r0, r3
 800743c:	46bd      	mov	sp, r7
 800743e:	b004      	add	sp, #16
 8007440:	bd80      	pop	{r7, pc}
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	ffceff88 	.word	0xffceff88
 8007448:	ffff00ff 	.word	0xffff00ff

0800744c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a38      	ldr	r2, [pc, #224]	; (8007540 <TIM_Base_SetConfig+0xf4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d00c      	beq.n	800747e <TIM_Base_SetConfig+0x32>
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	2380      	movs	r3, #128	; 0x80
 8007468:	05db      	lsls	r3, r3, #23
 800746a:	429a      	cmp	r2, r3
 800746c:	d007      	beq.n	800747e <TIM_Base_SetConfig+0x32>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a34      	ldr	r2, [pc, #208]	; (8007544 <TIM_Base_SetConfig+0xf8>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d003      	beq.n	800747e <TIM_Base_SetConfig+0x32>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a33      	ldr	r2, [pc, #204]	; (8007548 <TIM_Base_SetConfig+0xfc>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d108      	bne.n	8007490 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2270      	movs	r2, #112	; 0x70
 8007482:	4393      	bics	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	4313      	orrs	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a2b      	ldr	r2, [pc, #172]	; (8007540 <TIM_Base_SetConfig+0xf4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d01c      	beq.n	80074d2 <TIM_Base_SetConfig+0x86>
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	2380      	movs	r3, #128	; 0x80
 800749c:	05db      	lsls	r3, r3, #23
 800749e:	429a      	cmp	r2, r3
 80074a0:	d017      	beq.n	80074d2 <TIM_Base_SetConfig+0x86>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a27      	ldr	r2, [pc, #156]	; (8007544 <TIM_Base_SetConfig+0xf8>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d013      	beq.n	80074d2 <TIM_Base_SetConfig+0x86>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a26      	ldr	r2, [pc, #152]	; (8007548 <TIM_Base_SetConfig+0xfc>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d00f      	beq.n	80074d2 <TIM_Base_SetConfig+0x86>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a25      	ldr	r2, [pc, #148]	; (800754c <TIM_Base_SetConfig+0x100>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00b      	beq.n	80074d2 <TIM_Base_SetConfig+0x86>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a24      	ldr	r2, [pc, #144]	; (8007550 <TIM_Base_SetConfig+0x104>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d007      	beq.n	80074d2 <TIM_Base_SetConfig+0x86>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a23      	ldr	r2, [pc, #140]	; (8007554 <TIM_Base_SetConfig+0x108>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d003      	beq.n	80074d2 <TIM_Base_SetConfig+0x86>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a22      	ldr	r2, [pc, #136]	; (8007558 <TIM_Base_SetConfig+0x10c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d108      	bne.n	80074e4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	4a21      	ldr	r2, [pc, #132]	; (800755c <TIM_Base_SetConfig+0x110>)
 80074d6:	4013      	ands	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2280      	movs	r2, #128	; 0x80
 80074e8:	4393      	bics	r3, r2
 80074ea:	001a      	movs	r2, r3
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	689a      	ldr	r2, [r3, #8]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a0c      	ldr	r2, [pc, #48]	; (8007540 <TIM_Base_SetConfig+0xf4>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d00b      	beq.n	800752a <TIM_Base_SetConfig+0xde>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a0e      	ldr	r2, [pc, #56]	; (8007550 <TIM_Base_SetConfig+0x104>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d007      	beq.n	800752a <TIM_Base_SetConfig+0xde>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a0d      	ldr	r2, [pc, #52]	; (8007554 <TIM_Base_SetConfig+0x108>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d003      	beq.n	800752a <TIM_Base_SetConfig+0xde>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a0c      	ldr	r2, [pc, #48]	; (8007558 <TIM_Base_SetConfig+0x10c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d103      	bne.n	8007532 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	691a      	ldr	r2, [r3, #16]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	615a      	str	r2, [r3, #20]
}
 8007538:	46c0      	nop			; (mov r8, r8)
 800753a:	46bd      	mov	sp, r7
 800753c:	b004      	add	sp, #16
 800753e:	bd80      	pop	{r7, pc}
 8007540:	40012c00 	.word	0x40012c00
 8007544:	40000400 	.word	0x40000400
 8007548:	40000800 	.word	0x40000800
 800754c:	40002000 	.word	0x40002000
 8007550:	40014000 	.word	0x40014000
 8007554:	40014400 	.word	0x40014400
 8007558:	40014800 	.word	0x40014800
 800755c:	fffffcff 	.word	0xfffffcff

08007560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	2201      	movs	r2, #1
 8007578:	4393      	bics	r3, r2
 800757a:	001a      	movs	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	22f0      	movs	r2, #240	; 0xf0
 800758a:	4393      	bics	r3, r2
 800758c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	4313      	orrs	r3, r2
 8007596:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	220a      	movs	r2, #10
 800759c:	4393      	bics	r3, r2
 800759e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	621a      	str	r2, [r3, #32]
}
 80075b4:	46c0      	nop			; (mov r8, r8)
 80075b6:	46bd      	mov	sp, r7
 80075b8:	b006      	add	sp, #24
 80075ba:	bd80      	pop	{r7, pc}

080075bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	2210      	movs	r2, #16
 80075ce:	4393      	bics	r3, r2
 80075d0:	001a      	movs	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	4a0d      	ldr	r2, [pc, #52]	; (800761c <TIM_TI2_ConfigInputStage+0x60>)
 80075e6:	4013      	ands	r3, r2
 80075e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	031b      	lsls	r3, r3, #12
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	22a0      	movs	r2, #160	; 0xa0
 80075f8:	4393      	bics	r3, r2
 80075fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	011b      	lsls	r3, r3, #4
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	4313      	orrs	r3, r2
 8007604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	621a      	str	r2, [r3, #32]
}
 8007612:	46c0      	nop			; (mov r8, r8)
 8007614:	46bd      	mov	sp, r7
 8007616:	b006      	add	sp, #24
 8007618:	bd80      	pop	{r7, pc}
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	ffff0fff 	.word	0xffff0fff

08007620 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4a08      	ldr	r2, [pc, #32]	; (8007654 <TIM_ITRx_SetConfig+0x34>)
 8007634:	4013      	ands	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	4313      	orrs	r3, r2
 800763e:	2207      	movs	r2, #7
 8007640:	4313      	orrs	r3, r2
 8007642:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	609a      	str	r2, [r3, #8]
}
 800764a:	46c0      	nop			; (mov r8, r8)
 800764c:	46bd      	mov	sp, r7
 800764e:	b004      	add	sp, #16
 8007650:	bd80      	pop	{r7, pc}
 8007652:	46c0      	nop			; (mov r8, r8)
 8007654:	ffcfff8f 	.word	0xffcfff8f

08007658 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	4a09      	ldr	r2, [pc, #36]	; (8007694 <TIM_ETR_SetConfig+0x3c>)
 8007670:	4013      	ands	r3, r2
 8007672:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	021a      	lsls	r2, r3, #8
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	431a      	orrs	r2, r3
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4313      	orrs	r3, r2
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	4313      	orrs	r3, r2
 8007684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	609a      	str	r2, [r3, #8]
}
 800768c:	46c0      	nop			; (mov r8, r8)
 800768e:	46bd      	mov	sp, r7
 8007690:	b006      	add	sp, #24
 8007692:	bd80      	pop	{r7, pc}
 8007694:	ffff00ff 	.word	0xffff00ff

08007698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	223c      	movs	r2, #60	; 0x3c
 80076a6:	5c9b      	ldrb	r3, [r3, r2]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d101      	bne.n	80076b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076ac:	2302      	movs	r3, #2
 80076ae:	e05a      	b.n	8007766 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	223c      	movs	r2, #60	; 0x3c
 80076b4:	2101      	movs	r1, #1
 80076b6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	223d      	movs	r2, #61	; 0x3d
 80076bc:	2102      	movs	r1, #2
 80076be:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a26      	ldr	r2, [pc, #152]	; (8007770 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d108      	bne.n	80076ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4a25      	ldr	r2, [pc, #148]	; (8007774 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80076de:	4013      	ands	r3, r2
 80076e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2270      	movs	r2, #112	; 0x70
 80076f0:	4393      	bics	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a19      	ldr	r2, [pc, #100]	; (8007770 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d014      	beq.n	800773a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	2380      	movs	r3, #128	; 0x80
 8007716:	05db      	lsls	r3, r3, #23
 8007718:	429a      	cmp	r2, r3
 800771a:	d00e      	beq.n	800773a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a15      	ldr	r2, [pc, #84]	; (8007778 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d009      	beq.n	800773a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a14      	ldr	r2, [pc, #80]	; (800777c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d004      	beq.n	800773a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a12      	ldr	r2, [pc, #72]	; (8007780 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d10c      	bne.n	8007754 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2280      	movs	r2, #128	; 0x80
 800773e:	4393      	bics	r3, r2
 8007740:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	4313      	orrs	r3, r2
 800774a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	223d      	movs	r2, #61	; 0x3d
 8007758:	2101      	movs	r1, #1
 800775a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	223c      	movs	r2, #60	; 0x3c
 8007760:	2100      	movs	r1, #0
 8007762:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	0018      	movs	r0, r3
 8007768:	46bd      	mov	sp, r7
 800776a:	b004      	add	sp, #16
 800776c:	bd80      	pop	{r7, pc}
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	40012c00 	.word	0x40012c00
 8007774:	ff0fffff 	.word	0xff0fffff
 8007778:	40000400 	.word	0x40000400
 800777c:	40000800 	.word	0x40000800
 8007780:	40014000 	.word	0x40014000

08007784 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e046      	b.n	8007824 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2288      	movs	r2, #136	; 0x88
 800779a:	589b      	ldr	r3, [r3, r2]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d107      	bne.n	80077b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2284      	movs	r2, #132	; 0x84
 80077a4:	2100      	movs	r1, #0
 80077a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	0018      	movs	r0, r3
 80077ac:	f7fd f8da 	bl	8004964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2288      	movs	r2, #136	; 0x88
 80077b4:	2124      	movs	r1, #36	; 0x24
 80077b6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2101      	movs	r1, #1
 80077c4:	438a      	bics	r2, r1
 80077c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	0018      	movs	r0, r3
 80077cc:	f000 f8cc 	bl	8007968 <UART_SetConfig>
 80077d0:	0003      	movs	r3, r0
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d101      	bne.n	80077da <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e024      	b.n	8007824 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	0018      	movs	r0, r3
 80077e6:	f000 fc15 	bl	8008014 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	490d      	ldr	r1, [pc, #52]	; (800782c <HAL_UART_Init+0xa8>)
 80077f6:	400a      	ands	r2, r1
 80077f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	212a      	movs	r1, #42	; 0x2a
 8007806:	438a      	bics	r2, r1
 8007808:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2101      	movs	r1, #1
 8007816:	430a      	orrs	r2, r1
 8007818:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	0018      	movs	r0, r3
 800781e:	f000 fcad 	bl	800817c <UART_CheckIdleState>
 8007822:	0003      	movs	r3, r0
}
 8007824:	0018      	movs	r0, r3
 8007826:	46bd      	mov	sp, r7
 8007828:	b002      	add	sp, #8
 800782a:	bd80      	pop	{r7, pc}
 800782c:	ffffb7ff 	.word	0xffffb7ff

08007830 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08a      	sub	sp, #40	; 0x28
 8007834:	af02      	add	r7, sp, #8
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	1dbb      	adds	r3, r7, #6
 800783e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2288      	movs	r2, #136	; 0x88
 8007844:	589b      	ldr	r3, [r3, r2]
 8007846:	2b20      	cmp	r3, #32
 8007848:	d000      	beq.n	800784c <HAL_UART_Transmit+0x1c>
 800784a:	e088      	b.n	800795e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <HAL_UART_Transmit+0x2a>
 8007852:	1dbb      	adds	r3, r7, #6
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d101      	bne.n	800785e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e080      	b.n	8007960 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	2380      	movs	r3, #128	; 0x80
 8007864:	015b      	lsls	r3, r3, #5
 8007866:	429a      	cmp	r2, r3
 8007868:	d109      	bne.n	800787e <HAL_UART_Transmit+0x4e>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d105      	bne.n	800787e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2201      	movs	r2, #1
 8007876:	4013      	ands	r3, r2
 8007878:	d001      	beq.n	800787e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e070      	b.n	8007960 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2290      	movs	r2, #144	; 0x90
 8007882:	2100      	movs	r1, #0
 8007884:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2288      	movs	r2, #136	; 0x88
 800788a:	2121      	movs	r1, #33	; 0x21
 800788c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800788e:	f7fd f99b 	bl	8004bc8 <HAL_GetTick>
 8007892:	0003      	movs	r3, r0
 8007894:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	1dba      	adds	r2, r7, #6
 800789a:	2154      	movs	r1, #84	; 0x54
 800789c:	8812      	ldrh	r2, [r2, #0]
 800789e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	1dba      	adds	r2, r7, #6
 80078a4:	2156      	movs	r1, #86	; 0x56
 80078a6:	8812      	ldrh	r2, [r2, #0]
 80078a8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	689a      	ldr	r2, [r3, #8]
 80078ae:	2380      	movs	r3, #128	; 0x80
 80078b0:	015b      	lsls	r3, r3, #5
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d108      	bne.n	80078c8 <HAL_UART_Transmit+0x98>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d104      	bne.n	80078c8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	61bb      	str	r3, [r7, #24]
 80078c6:	e003      	b.n	80078d0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078cc:	2300      	movs	r3, #0
 80078ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078d0:	e02c      	b.n	800792c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	0013      	movs	r3, r2
 80078dc:	2200      	movs	r2, #0
 80078de:	2180      	movs	r1, #128	; 0x80
 80078e0:	f000 fc9a 	bl	8008218 <UART_WaitOnFlagUntilTimeout>
 80078e4:	1e03      	subs	r3, r0, #0
 80078e6:	d001      	beq.n	80078ec <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e039      	b.n	8007960 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10b      	bne.n	800790a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	001a      	movs	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	05d2      	lsls	r2, r2, #23
 80078fe:	0dd2      	lsrs	r2, r2, #23
 8007900:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	3302      	adds	r3, #2
 8007906:	61bb      	str	r3, [r7, #24]
 8007908:	e007      	b.n	800791a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	781a      	ldrb	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	3301      	adds	r3, #1
 8007918:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2256      	movs	r2, #86	; 0x56
 800791e:	5a9b      	ldrh	r3, [r3, r2]
 8007920:	b29b      	uxth	r3, r3
 8007922:	3b01      	subs	r3, #1
 8007924:	b299      	uxth	r1, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2256      	movs	r2, #86	; 0x56
 800792a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2256      	movs	r2, #86	; 0x56
 8007930:	5a9b      	ldrh	r3, [r3, r2]
 8007932:	b29b      	uxth	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1cc      	bne.n	80078d2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	0013      	movs	r3, r2
 8007942:	2200      	movs	r2, #0
 8007944:	2140      	movs	r1, #64	; 0x40
 8007946:	f000 fc67 	bl	8008218 <UART_WaitOnFlagUntilTimeout>
 800794a:	1e03      	subs	r3, r0, #0
 800794c:	d001      	beq.n	8007952 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e006      	b.n	8007960 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2288      	movs	r2, #136	; 0x88
 8007956:	2120      	movs	r1, #32
 8007958:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	e000      	b.n	8007960 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800795e:	2302      	movs	r3, #2
  }
}
 8007960:	0018      	movs	r0, r3
 8007962:	46bd      	mov	sp, r7
 8007964:	b008      	add	sp, #32
 8007966:	bd80      	pop	{r7, pc}

08007968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007968:	b5b0      	push	{r4, r5, r7, lr}
 800796a:	b090      	sub	sp, #64	; 0x40
 800796c:	af00      	add	r7, sp, #0
 800796e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007970:	231a      	movs	r3, #26
 8007972:	2220      	movs	r2, #32
 8007974:	189b      	adds	r3, r3, r2
 8007976:	19db      	adds	r3, r3, r7
 8007978:	2200      	movs	r2, #0
 800797a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	431a      	orrs	r2, r3
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	431a      	orrs	r2, r3
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	4313      	orrs	r3, r2
 8007992:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4ac1      	ldr	r2, [pc, #772]	; (8007ca0 <UART_SetConfig+0x338>)
 800799c:	4013      	ands	r3, r2
 800799e:	0019      	movs	r1, r3
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a6:	430b      	orrs	r3, r1
 80079a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	4abc      	ldr	r2, [pc, #752]	; (8007ca4 <UART_SetConfig+0x33c>)
 80079b2:	4013      	ands	r3, r2
 80079b4:	0018      	movs	r0, r3
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	68d9      	ldr	r1, [r3, #12]
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	0003      	movs	r3, r0
 80079c0:	430b      	orrs	r3, r1
 80079c2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4ab6      	ldr	r2, [pc, #728]	; (8007ca8 <UART_SetConfig+0x340>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d009      	beq.n	80079e8 <UART_SetConfig+0x80>
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4ab4      	ldr	r2, [pc, #720]	; (8007cac <UART_SetConfig+0x344>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d004      	beq.n	80079e8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80079e4:	4313      	orrs	r3, r2
 80079e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	4ab0      	ldr	r2, [pc, #704]	; (8007cb0 <UART_SetConfig+0x348>)
 80079f0:	4013      	ands	r3, r2
 80079f2:	0019      	movs	r1, r3
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079fa:	430b      	orrs	r3, r1
 80079fc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a04:	220f      	movs	r2, #15
 8007a06:	4393      	bics	r3, r2
 8007a08:	0018      	movs	r0, r3
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	0003      	movs	r3, r0
 8007a14:	430b      	orrs	r3, r1
 8007a16:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4aa5      	ldr	r2, [pc, #660]	; (8007cb4 <UART_SetConfig+0x34c>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d131      	bne.n	8007a86 <UART_SetConfig+0x11e>
 8007a22:	4ba5      	ldr	r3, [pc, #660]	; (8007cb8 <UART_SetConfig+0x350>)
 8007a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a26:	2203      	movs	r2, #3
 8007a28:	4013      	ands	r3, r2
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d01d      	beq.n	8007a6a <UART_SetConfig+0x102>
 8007a2e:	d823      	bhi.n	8007a78 <UART_SetConfig+0x110>
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d00c      	beq.n	8007a4e <UART_SetConfig+0xe6>
 8007a34:	d820      	bhi.n	8007a78 <UART_SetConfig+0x110>
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d002      	beq.n	8007a40 <UART_SetConfig+0xd8>
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d00e      	beq.n	8007a5c <UART_SetConfig+0xf4>
 8007a3e:	e01b      	b.n	8007a78 <UART_SetConfig+0x110>
 8007a40:	231b      	movs	r3, #27
 8007a42:	2220      	movs	r2, #32
 8007a44:	189b      	adds	r3, r3, r2
 8007a46:	19db      	adds	r3, r3, r7
 8007a48:	2200      	movs	r2, #0
 8007a4a:	701a      	strb	r2, [r3, #0]
 8007a4c:	e154      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007a4e:	231b      	movs	r3, #27
 8007a50:	2220      	movs	r2, #32
 8007a52:	189b      	adds	r3, r3, r2
 8007a54:	19db      	adds	r3, r3, r7
 8007a56:	2202      	movs	r2, #2
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	e14d      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007a5c:	231b      	movs	r3, #27
 8007a5e:	2220      	movs	r2, #32
 8007a60:	189b      	adds	r3, r3, r2
 8007a62:	19db      	adds	r3, r3, r7
 8007a64:	2204      	movs	r2, #4
 8007a66:	701a      	strb	r2, [r3, #0]
 8007a68:	e146      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007a6a:	231b      	movs	r3, #27
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	189b      	adds	r3, r3, r2
 8007a70:	19db      	adds	r3, r3, r7
 8007a72:	2208      	movs	r2, #8
 8007a74:	701a      	strb	r2, [r3, #0]
 8007a76:	e13f      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007a78:	231b      	movs	r3, #27
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	189b      	adds	r3, r3, r2
 8007a7e:	19db      	adds	r3, r3, r7
 8007a80:	2210      	movs	r2, #16
 8007a82:	701a      	strb	r2, [r3, #0]
 8007a84:	e138      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a8c      	ldr	r2, [pc, #560]	; (8007cbc <UART_SetConfig+0x354>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d131      	bne.n	8007af4 <UART_SetConfig+0x18c>
 8007a90:	4b89      	ldr	r3, [pc, #548]	; (8007cb8 <UART_SetConfig+0x350>)
 8007a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a94:	220c      	movs	r2, #12
 8007a96:	4013      	ands	r3, r2
 8007a98:	2b0c      	cmp	r3, #12
 8007a9a:	d01d      	beq.n	8007ad8 <UART_SetConfig+0x170>
 8007a9c:	d823      	bhi.n	8007ae6 <UART_SetConfig+0x17e>
 8007a9e:	2b08      	cmp	r3, #8
 8007aa0:	d00c      	beq.n	8007abc <UART_SetConfig+0x154>
 8007aa2:	d820      	bhi.n	8007ae6 <UART_SetConfig+0x17e>
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <UART_SetConfig+0x146>
 8007aa8:	2b04      	cmp	r3, #4
 8007aaa:	d00e      	beq.n	8007aca <UART_SetConfig+0x162>
 8007aac:	e01b      	b.n	8007ae6 <UART_SetConfig+0x17e>
 8007aae:	231b      	movs	r3, #27
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	189b      	adds	r3, r3, r2
 8007ab4:	19db      	adds	r3, r3, r7
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	701a      	strb	r2, [r3, #0]
 8007aba:	e11d      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007abc:	231b      	movs	r3, #27
 8007abe:	2220      	movs	r2, #32
 8007ac0:	189b      	adds	r3, r3, r2
 8007ac2:	19db      	adds	r3, r3, r7
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	701a      	strb	r2, [r3, #0]
 8007ac8:	e116      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007aca:	231b      	movs	r3, #27
 8007acc:	2220      	movs	r2, #32
 8007ace:	189b      	adds	r3, r3, r2
 8007ad0:	19db      	adds	r3, r3, r7
 8007ad2:	2204      	movs	r2, #4
 8007ad4:	701a      	strb	r2, [r3, #0]
 8007ad6:	e10f      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007ad8:	231b      	movs	r3, #27
 8007ada:	2220      	movs	r2, #32
 8007adc:	189b      	adds	r3, r3, r2
 8007ade:	19db      	adds	r3, r3, r7
 8007ae0:	2208      	movs	r2, #8
 8007ae2:	701a      	strb	r2, [r3, #0]
 8007ae4:	e108      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007ae6:	231b      	movs	r3, #27
 8007ae8:	2220      	movs	r2, #32
 8007aea:	189b      	adds	r3, r3, r2
 8007aec:	19db      	adds	r3, r3, r7
 8007aee:	2210      	movs	r2, #16
 8007af0:	701a      	strb	r2, [r3, #0]
 8007af2:	e101      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a71      	ldr	r2, [pc, #452]	; (8007cc0 <UART_SetConfig+0x358>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d131      	bne.n	8007b62 <UART_SetConfig+0x1fa>
 8007afe:	4b6e      	ldr	r3, [pc, #440]	; (8007cb8 <UART_SetConfig+0x350>)
 8007b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b02:	2230      	movs	r2, #48	; 0x30
 8007b04:	4013      	ands	r3, r2
 8007b06:	2b30      	cmp	r3, #48	; 0x30
 8007b08:	d01d      	beq.n	8007b46 <UART_SetConfig+0x1de>
 8007b0a:	d823      	bhi.n	8007b54 <UART_SetConfig+0x1ec>
 8007b0c:	2b20      	cmp	r3, #32
 8007b0e:	d00c      	beq.n	8007b2a <UART_SetConfig+0x1c2>
 8007b10:	d820      	bhi.n	8007b54 <UART_SetConfig+0x1ec>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d002      	beq.n	8007b1c <UART_SetConfig+0x1b4>
 8007b16:	2b10      	cmp	r3, #16
 8007b18:	d00e      	beq.n	8007b38 <UART_SetConfig+0x1d0>
 8007b1a:	e01b      	b.n	8007b54 <UART_SetConfig+0x1ec>
 8007b1c:	231b      	movs	r3, #27
 8007b1e:	2220      	movs	r2, #32
 8007b20:	189b      	adds	r3, r3, r2
 8007b22:	19db      	adds	r3, r3, r7
 8007b24:	2200      	movs	r2, #0
 8007b26:	701a      	strb	r2, [r3, #0]
 8007b28:	e0e6      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007b2a:	231b      	movs	r3, #27
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	189b      	adds	r3, r3, r2
 8007b30:	19db      	adds	r3, r3, r7
 8007b32:	2202      	movs	r2, #2
 8007b34:	701a      	strb	r2, [r3, #0]
 8007b36:	e0df      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007b38:	231b      	movs	r3, #27
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	189b      	adds	r3, r3, r2
 8007b3e:	19db      	adds	r3, r3, r7
 8007b40:	2204      	movs	r2, #4
 8007b42:	701a      	strb	r2, [r3, #0]
 8007b44:	e0d8      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007b46:	231b      	movs	r3, #27
 8007b48:	2220      	movs	r2, #32
 8007b4a:	189b      	adds	r3, r3, r2
 8007b4c:	19db      	adds	r3, r3, r7
 8007b4e:	2208      	movs	r2, #8
 8007b50:	701a      	strb	r2, [r3, #0]
 8007b52:	e0d1      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007b54:	231b      	movs	r3, #27
 8007b56:	2220      	movs	r2, #32
 8007b58:	189b      	adds	r3, r3, r2
 8007b5a:	19db      	adds	r3, r3, r7
 8007b5c:	2210      	movs	r2, #16
 8007b5e:	701a      	strb	r2, [r3, #0]
 8007b60:	e0ca      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a57      	ldr	r2, [pc, #348]	; (8007cc4 <UART_SetConfig+0x35c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d106      	bne.n	8007b7a <UART_SetConfig+0x212>
 8007b6c:	231b      	movs	r3, #27
 8007b6e:	2220      	movs	r2, #32
 8007b70:	189b      	adds	r3, r3, r2
 8007b72:	19db      	adds	r3, r3, r7
 8007b74:	2200      	movs	r2, #0
 8007b76:	701a      	strb	r2, [r3, #0]
 8007b78:	e0be      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a52      	ldr	r2, [pc, #328]	; (8007cc8 <UART_SetConfig+0x360>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d106      	bne.n	8007b92 <UART_SetConfig+0x22a>
 8007b84:	231b      	movs	r3, #27
 8007b86:	2220      	movs	r2, #32
 8007b88:	189b      	adds	r3, r3, r2
 8007b8a:	19db      	adds	r3, r3, r7
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	701a      	strb	r2, [r3, #0]
 8007b90:	e0b2      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a4d      	ldr	r2, [pc, #308]	; (8007ccc <UART_SetConfig+0x364>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d106      	bne.n	8007baa <UART_SetConfig+0x242>
 8007b9c:	231b      	movs	r3, #27
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	189b      	adds	r3, r3, r2
 8007ba2:	19db      	adds	r3, r3, r7
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	701a      	strb	r2, [r3, #0]
 8007ba8:	e0a6      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a3e      	ldr	r2, [pc, #248]	; (8007ca8 <UART_SetConfig+0x340>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d13e      	bne.n	8007c32 <UART_SetConfig+0x2ca>
 8007bb4:	4b40      	ldr	r3, [pc, #256]	; (8007cb8 <UART_SetConfig+0x350>)
 8007bb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bb8:	23c0      	movs	r3, #192	; 0xc0
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	22c0      	movs	r2, #192	; 0xc0
 8007bc0:	0112      	lsls	r2, r2, #4
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d027      	beq.n	8007c16 <UART_SetConfig+0x2ae>
 8007bc6:	22c0      	movs	r2, #192	; 0xc0
 8007bc8:	0112      	lsls	r2, r2, #4
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d82a      	bhi.n	8007c24 <UART_SetConfig+0x2bc>
 8007bce:	2280      	movs	r2, #128	; 0x80
 8007bd0:	0112      	lsls	r2, r2, #4
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d011      	beq.n	8007bfa <UART_SetConfig+0x292>
 8007bd6:	2280      	movs	r2, #128	; 0x80
 8007bd8:	0112      	lsls	r2, r2, #4
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d822      	bhi.n	8007c24 <UART_SetConfig+0x2bc>
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d004      	beq.n	8007bec <UART_SetConfig+0x284>
 8007be2:	2280      	movs	r2, #128	; 0x80
 8007be4:	00d2      	lsls	r2, r2, #3
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d00e      	beq.n	8007c08 <UART_SetConfig+0x2a0>
 8007bea:	e01b      	b.n	8007c24 <UART_SetConfig+0x2bc>
 8007bec:	231b      	movs	r3, #27
 8007bee:	2220      	movs	r2, #32
 8007bf0:	189b      	adds	r3, r3, r2
 8007bf2:	19db      	adds	r3, r3, r7
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	701a      	strb	r2, [r3, #0]
 8007bf8:	e07e      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007bfa:	231b      	movs	r3, #27
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	189b      	adds	r3, r3, r2
 8007c00:	19db      	adds	r3, r3, r7
 8007c02:	2202      	movs	r2, #2
 8007c04:	701a      	strb	r2, [r3, #0]
 8007c06:	e077      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007c08:	231b      	movs	r3, #27
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	189b      	adds	r3, r3, r2
 8007c0e:	19db      	adds	r3, r3, r7
 8007c10:	2204      	movs	r2, #4
 8007c12:	701a      	strb	r2, [r3, #0]
 8007c14:	e070      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007c16:	231b      	movs	r3, #27
 8007c18:	2220      	movs	r2, #32
 8007c1a:	189b      	adds	r3, r3, r2
 8007c1c:	19db      	adds	r3, r3, r7
 8007c1e:	2208      	movs	r2, #8
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	e069      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007c24:	231b      	movs	r3, #27
 8007c26:	2220      	movs	r2, #32
 8007c28:	189b      	adds	r3, r3, r2
 8007c2a:	19db      	adds	r3, r3, r7
 8007c2c:	2210      	movs	r2, #16
 8007c2e:	701a      	strb	r2, [r3, #0]
 8007c30:	e062      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a1d      	ldr	r2, [pc, #116]	; (8007cac <UART_SetConfig+0x344>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d157      	bne.n	8007cec <UART_SetConfig+0x384>
 8007c3c:	4b1e      	ldr	r3, [pc, #120]	; (8007cb8 <UART_SetConfig+0x350>)
 8007c3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c40:	23c0      	movs	r3, #192	; 0xc0
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4013      	ands	r3, r2
 8007c46:	22c0      	movs	r2, #192	; 0xc0
 8007c48:	0092      	lsls	r2, r2, #2
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d040      	beq.n	8007cd0 <UART_SetConfig+0x368>
 8007c4e:	22c0      	movs	r2, #192	; 0xc0
 8007c50:	0092      	lsls	r2, r2, #2
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d843      	bhi.n	8007cde <UART_SetConfig+0x376>
 8007c56:	2280      	movs	r2, #128	; 0x80
 8007c58:	0092      	lsls	r2, r2, #2
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d011      	beq.n	8007c82 <UART_SetConfig+0x31a>
 8007c5e:	2280      	movs	r2, #128	; 0x80
 8007c60:	0092      	lsls	r2, r2, #2
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d83b      	bhi.n	8007cde <UART_SetConfig+0x376>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d004      	beq.n	8007c74 <UART_SetConfig+0x30c>
 8007c6a:	2280      	movs	r2, #128	; 0x80
 8007c6c:	0052      	lsls	r2, r2, #1
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d00e      	beq.n	8007c90 <UART_SetConfig+0x328>
 8007c72:	e034      	b.n	8007cde <UART_SetConfig+0x376>
 8007c74:	231b      	movs	r3, #27
 8007c76:	2220      	movs	r2, #32
 8007c78:	189b      	adds	r3, r3, r2
 8007c7a:	19db      	adds	r3, r3, r7
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	701a      	strb	r2, [r3, #0]
 8007c80:	e03a      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007c82:	231b      	movs	r3, #27
 8007c84:	2220      	movs	r2, #32
 8007c86:	189b      	adds	r3, r3, r2
 8007c88:	19db      	adds	r3, r3, r7
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	701a      	strb	r2, [r3, #0]
 8007c8e:	e033      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007c90:	231b      	movs	r3, #27
 8007c92:	2220      	movs	r2, #32
 8007c94:	189b      	adds	r3, r3, r2
 8007c96:	19db      	adds	r3, r3, r7
 8007c98:	2204      	movs	r2, #4
 8007c9a:	701a      	strb	r2, [r3, #0]
 8007c9c:	e02c      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007c9e:	46c0      	nop			; (mov r8, r8)
 8007ca0:	cfff69f3 	.word	0xcfff69f3
 8007ca4:	ffffcfff 	.word	0xffffcfff
 8007ca8:	40008000 	.word	0x40008000
 8007cac:	40008400 	.word	0x40008400
 8007cb0:	11fff4ff 	.word	0x11fff4ff
 8007cb4:	40013800 	.word	0x40013800
 8007cb8:	40021000 	.word	0x40021000
 8007cbc:	40004400 	.word	0x40004400
 8007cc0:	40004800 	.word	0x40004800
 8007cc4:	40004c00 	.word	0x40004c00
 8007cc8:	40005000 	.word	0x40005000
 8007ccc:	40013c00 	.word	0x40013c00
 8007cd0:	231b      	movs	r3, #27
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	189b      	adds	r3, r3, r2
 8007cd6:	19db      	adds	r3, r3, r7
 8007cd8:	2208      	movs	r2, #8
 8007cda:	701a      	strb	r2, [r3, #0]
 8007cdc:	e00c      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007cde:	231b      	movs	r3, #27
 8007ce0:	2220      	movs	r2, #32
 8007ce2:	189b      	adds	r3, r3, r2
 8007ce4:	19db      	adds	r3, r3, r7
 8007ce6:	2210      	movs	r2, #16
 8007ce8:	701a      	strb	r2, [r3, #0]
 8007cea:	e005      	b.n	8007cf8 <UART_SetConfig+0x390>
 8007cec:	231b      	movs	r3, #27
 8007cee:	2220      	movs	r2, #32
 8007cf0:	189b      	adds	r3, r3, r2
 8007cf2:	19db      	adds	r3, r3, r7
 8007cf4:	2210      	movs	r2, #16
 8007cf6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4ac1      	ldr	r2, [pc, #772]	; (8008004 <UART_SetConfig+0x69c>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d005      	beq.n	8007d0e <UART_SetConfig+0x3a6>
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4ac0      	ldr	r2, [pc, #768]	; (8008008 <UART_SetConfig+0x6a0>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d000      	beq.n	8007d0e <UART_SetConfig+0x3a6>
 8007d0c:	e093      	b.n	8007e36 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d0e:	231b      	movs	r3, #27
 8007d10:	2220      	movs	r2, #32
 8007d12:	189b      	adds	r3, r3, r2
 8007d14:	19db      	adds	r3, r3, r7
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	d015      	beq.n	8007d48 <UART_SetConfig+0x3e0>
 8007d1c:	dc18      	bgt.n	8007d50 <UART_SetConfig+0x3e8>
 8007d1e:	2b04      	cmp	r3, #4
 8007d20:	d00d      	beq.n	8007d3e <UART_SetConfig+0x3d6>
 8007d22:	dc15      	bgt.n	8007d50 <UART_SetConfig+0x3e8>
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <UART_SetConfig+0x3c6>
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d005      	beq.n	8007d38 <UART_SetConfig+0x3d0>
 8007d2c:	e010      	b.n	8007d50 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d2e:	f7fe fb9f 	bl	8006470 <HAL_RCC_GetPCLK1Freq>
 8007d32:	0003      	movs	r3, r0
 8007d34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d36:	e014      	b.n	8007d62 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d38:	4bb4      	ldr	r3, [pc, #720]	; (800800c <UART_SetConfig+0x6a4>)
 8007d3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d3c:	e011      	b.n	8007d62 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d3e:	f7fe fb0b 	bl	8006358 <HAL_RCC_GetSysClockFreq>
 8007d42:	0003      	movs	r3, r0
 8007d44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d46:	e00c      	b.n	8007d62 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d48:	2380      	movs	r3, #128	; 0x80
 8007d4a:	021b      	lsls	r3, r3, #8
 8007d4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d4e:	e008      	b.n	8007d62 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8007d50:	2300      	movs	r3, #0
 8007d52:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007d54:	231a      	movs	r3, #26
 8007d56:	2220      	movs	r2, #32
 8007d58:	189b      	adds	r3, r3, r2
 8007d5a:	19db      	adds	r3, r3, r7
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	701a      	strb	r2, [r3, #0]
        break;
 8007d60:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d100      	bne.n	8007d6a <UART_SetConfig+0x402>
 8007d68:	e135      	b.n	8007fd6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d6e:	4ba8      	ldr	r3, [pc, #672]	; (8008010 <UART_SetConfig+0x6a8>)
 8007d70:	0052      	lsls	r2, r2, #1
 8007d72:	5ad3      	ldrh	r3, [r2, r3]
 8007d74:	0019      	movs	r1, r3
 8007d76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007d78:	f7fa f88a 	bl	8001e90 <__udivsi3>
 8007d7c:	0003      	movs	r3, r0
 8007d7e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	0013      	movs	r3, r2
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	189b      	adds	r3, r3, r2
 8007d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d305      	bcc.n	8007d9c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d906      	bls.n	8007daa <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8007d9c:	231a      	movs	r3, #26
 8007d9e:	2220      	movs	r2, #32
 8007da0:	189b      	adds	r3, r3, r2
 8007da2:	19db      	adds	r3, r3, r7
 8007da4:	2201      	movs	r2, #1
 8007da6:	701a      	strb	r2, [r3, #0]
 8007da8:	e044      	b.n	8007e34 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dac:	61bb      	str	r3, [r7, #24]
 8007dae:	2300      	movs	r3, #0
 8007db0:	61fb      	str	r3, [r7, #28]
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007db6:	4b96      	ldr	r3, [pc, #600]	; (8008010 <UART_SetConfig+0x6a8>)
 8007db8:	0052      	lsls	r2, r2, #1
 8007dba:	5ad3      	ldrh	r3, [r2, r3]
 8007dbc:	613b      	str	r3, [r7, #16]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	617b      	str	r3, [r7, #20]
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	69b8      	ldr	r0, [r7, #24]
 8007dc8:	69f9      	ldr	r1, [r7, #28]
 8007dca:	f7fa f9d7 	bl	800217c <__aeabi_uldivmod>
 8007dce:	0002      	movs	r2, r0
 8007dd0:	000b      	movs	r3, r1
 8007dd2:	0e11      	lsrs	r1, r2, #24
 8007dd4:	021d      	lsls	r5, r3, #8
 8007dd6:	430d      	orrs	r5, r1
 8007dd8:	0214      	lsls	r4, r2, #8
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	085b      	lsrs	r3, r3, #1
 8007de0:	60bb      	str	r3, [r7, #8]
 8007de2:	2300      	movs	r3, #0
 8007de4:	60fb      	str	r3, [r7, #12]
 8007de6:	68b8      	ldr	r0, [r7, #8]
 8007de8:	68f9      	ldr	r1, [r7, #12]
 8007dea:	1900      	adds	r0, r0, r4
 8007dec:	4169      	adcs	r1, r5
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	2300      	movs	r3, #0
 8007df6:	607b      	str	r3, [r7, #4]
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f7fa f9be 	bl	800217c <__aeabi_uldivmod>
 8007e00:	0002      	movs	r2, r0
 8007e02:	000b      	movs	r3, r1
 8007e04:	0013      	movs	r3, r2
 8007e06:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e0a:	23c0      	movs	r3, #192	; 0xc0
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d309      	bcc.n	8007e26 <UART_SetConfig+0x4be>
 8007e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e14:	2380      	movs	r3, #128	; 0x80
 8007e16:	035b      	lsls	r3, r3, #13
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d204      	bcs.n	8007e26 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e22:	60da      	str	r2, [r3, #12]
 8007e24:	e006      	b.n	8007e34 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8007e26:	231a      	movs	r3, #26
 8007e28:	2220      	movs	r2, #32
 8007e2a:	189b      	adds	r3, r3, r2
 8007e2c:	19db      	adds	r3, r3, r7
 8007e2e:	2201      	movs	r2, #1
 8007e30:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8007e32:	e0d0      	b.n	8007fd6 <UART_SetConfig+0x66e>
 8007e34:	e0cf      	b.n	8007fd6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	69da      	ldr	r2, [r3, #28]
 8007e3a:	2380      	movs	r3, #128	; 0x80
 8007e3c:	021b      	lsls	r3, r3, #8
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d000      	beq.n	8007e44 <UART_SetConfig+0x4dc>
 8007e42:	e070      	b.n	8007f26 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8007e44:	231b      	movs	r3, #27
 8007e46:	2220      	movs	r2, #32
 8007e48:	189b      	adds	r3, r3, r2
 8007e4a:	19db      	adds	r3, r3, r7
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	2b08      	cmp	r3, #8
 8007e50:	d015      	beq.n	8007e7e <UART_SetConfig+0x516>
 8007e52:	dc18      	bgt.n	8007e86 <UART_SetConfig+0x51e>
 8007e54:	2b04      	cmp	r3, #4
 8007e56:	d00d      	beq.n	8007e74 <UART_SetConfig+0x50c>
 8007e58:	dc15      	bgt.n	8007e86 <UART_SetConfig+0x51e>
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <UART_SetConfig+0x4fc>
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d005      	beq.n	8007e6e <UART_SetConfig+0x506>
 8007e62:	e010      	b.n	8007e86 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e64:	f7fe fb04 	bl	8006470 <HAL_RCC_GetPCLK1Freq>
 8007e68:	0003      	movs	r3, r0
 8007e6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e6c:	e014      	b.n	8007e98 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e6e:	4b67      	ldr	r3, [pc, #412]	; (800800c <UART_SetConfig+0x6a4>)
 8007e70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e72:	e011      	b.n	8007e98 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e74:	f7fe fa70 	bl	8006358 <HAL_RCC_GetSysClockFreq>
 8007e78:	0003      	movs	r3, r0
 8007e7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e7c:	e00c      	b.n	8007e98 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e7e:	2380      	movs	r3, #128	; 0x80
 8007e80:	021b      	lsls	r3, r3, #8
 8007e82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e84:	e008      	b.n	8007e98 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007e8a:	231a      	movs	r3, #26
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	189b      	adds	r3, r3, r2
 8007e90:	19db      	adds	r3, r3, r7
 8007e92:	2201      	movs	r2, #1
 8007e94:	701a      	strb	r2, [r3, #0]
        break;
 8007e96:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d100      	bne.n	8007ea0 <UART_SetConfig+0x538>
 8007e9e:	e09a      	b.n	8007fd6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ea4:	4b5a      	ldr	r3, [pc, #360]	; (8008010 <UART_SetConfig+0x6a8>)
 8007ea6:	0052      	lsls	r2, r2, #1
 8007ea8:	5ad3      	ldrh	r3, [r2, r3]
 8007eaa:	0019      	movs	r1, r3
 8007eac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007eae:	f7f9 ffef 	bl	8001e90 <__udivsi3>
 8007eb2:	0003      	movs	r3, r0
 8007eb4:	005a      	lsls	r2, r3, #1
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	085b      	lsrs	r3, r3, #1
 8007ebc:	18d2      	adds	r2, r2, r3
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	0019      	movs	r1, r3
 8007ec4:	0010      	movs	r0, r2
 8007ec6:	f7f9 ffe3 	bl	8001e90 <__udivsi3>
 8007eca:	0003      	movs	r3, r0
 8007ecc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed0:	2b0f      	cmp	r3, #15
 8007ed2:	d921      	bls.n	8007f18 <UART_SetConfig+0x5b0>
 8007ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ed6:	2380      	movs	r3, #128	; 0x80
 8007ed8:	025b      	lsls	r3, r3, #9
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d21c      	bcs.n	8007f18 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	200e      	movs	r0, #14
 8007ee4:	2420      	movs	r4, #32
 8007ee6:	1903      	adds	r3, r0, r4
 8007ee8:	19db      	adds	r3, r3, r7
 8007eea:	210f      	movs	r1, #15
 8007eec:	438a      	bics	r2, r1
 8007eee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef2:	085b      	lsrs	r3, r3, #1
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	2207      	movs	r2, #7
 8007ef8:	4013      	ands	r3, r2
 8007efa:	b299      	uxth	r1, r3
 8007efc:	1903      	adds	r3, r0, r4
 8007efe:	19db      	adds	r3, r3, r7
 8007f00:	1902      	adds	r2, r0, r4
 8007f02:	19d2      	adds	r2, r2, r7
 8007f04:	8812      	ldrh	r2, [r2, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	1902      	adds	r2, r0, r4
 8007f10:	19d2      	adds	r2, r2, r7
 8007f12:	8812      	ldrh	r2, [r2, #0]
 8007f14:	60da      	str	r2, [r3, #12]
 8007f16:	e05e      	b.n	8007fd6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007f18:	231a      	movs	r3, #26
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	189b      	adds	r3, r3, r2
 8007f1e:	19db      	adds	r3, r3, r7
 8007f20:	2201      	movs	r2, #1
 8007f22:	701a      	strb	r2, [r3, #0]
 8007f24:	e057      	b.n	8007fd6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f26:	231b      	movs	r3, #27
 8007f28:	2220      	movs	r2, #32
 8007f2a:	189b      	adds	r3, r3, r2
 8007f2c:	19db      	adds	r3, r3, r7
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	2b08      	cmp	r3, #8
 8007f32:	d015      	beq.n	8007f60 <UART_SetConfig+0x5f8>
 8007f34:	dc18      	bgt.n	8007f68 <UART_SetConfig+0x600>
 8007f36:	2b04      	cmp	r3, #4
 8007f38:	d00d      	beq.n	8007f56 <UART_SetConfig+0x5ee>
 8007f3a:	dc15      	bgt.n	8007f68 <UART_SetConfig+0x600>
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <UART_SetConfig+0x5de>
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d005      	beq.n	8007f50 <UART_SetConfig+0x5e8>
 8007f44:	e010      	b.n	8007f68 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f46:	f7fe fa93 	bl	8006470 <HAL_RCC_GetPCLK1Freq>
 8007f4a:	0003      	movs	r3, r0
 8007f4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f4e:	e014      	b.n	8007f7a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f50:	4b2e      	ldr	r3, [pc, #184]	; (800800c <UART_SetConfig+0x6a4>)
 8007f52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f54:	e011      	b.n	8007f7a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f56:	f7fe f9ff 	bl	8006358 <HAL_RCC_GetSysClockFreq>
 8007f5a:	0003      	movs	r3, r0
 8007f5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f5e:	e00c      	b.n	8007f7a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f60:	2380      	movs	r3, #128	; 0x80
 8007f62:	021b      	lsls	r3, r3, #8
 8007f64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f66:	e008      	b.n	8007f7a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007f6c:	231a      	movs	r3, #26
 8007f6e:	2220      	movs	r2, #32
 8007f70:	189b      	adds	r3, r3, r2
 8007f72:	19db      	adds	r3, r3, r7
 8007f74:	2201      	movs	r2, #1
 8007f76:	701a      	strb	r2, [r3, #0]
        break;
 8007f78:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d02a      	beq.n	8007fd6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f84:	4b22      	ldr	r3, [pc, #136]	; (8008010 <UART_SetConfig+0x6a8>)
 8007f86:	0052      	lsls	r2, r2, #1
 8007f88:	5ad3      	ldrh	r3, [r2, r3]
 8007f8a:	0019      	movs	r1, r3
 8007f8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007f8e:	f7f9 ff7f 	bl	8001e90 <__udivsi3>
 8007f92:	0003      	movs	r3, r0
 8007f94:	001a      	movs	r2, r3
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	085b      	lsrs	r3, r3, #1
 8007f9c:	18d2      	adds	r2, r2, r3
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	0019      	movs	r1, r3
 8007fa4:	0010      	movs	r0, r2
 8007fa6:	f7f9 ff73 	bl	8001e90 <__udivsi3>
 8007faa:	0003      	movs	r3, r0
 8007fac:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	2b0f      	cmp	r3, #15
 8007fb2:	d90a      	bls.n	8007fca <UART_SetConfig+0x662>
 8007fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fb6:	2380      	movs	r3, #128	; 0x80
 8007fb8:	025b      	lsls	r3, r3, #9
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d205      	bcs.n	8007fca <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	60da      	str	r2, [r3, #12]
 8007fc8:	e005      	b.n	8007fd6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007fca:	231a      	movs	r3, #26
 8007fcc:	2220      	movs	r2, #32
 8007fce:	189b      	adds	r3, r3, r2
 8007fd0:	19db      	adds	r3, r3, r7
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd8:	226a      	movs	r2, #106	; 0x6a
 8007fda:	2101      	movs	r1, #1
 8007fdc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	2268      	movs	r2, #104	; 0x68
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	2200      	movs	r2, #0
 8007fea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	2200      	movs	r2, #0
 8007ff0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007ff2:	231a      	movs	r3, #26
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	189b      	adds	r3, r3, r2
 8007ff8:	19db      	adds	r3, r3, r7
 8007ffa:	781b      	ldrb	r3, [r3, #0]
}
 8007ffc:	0018      	movs	r0, r3
 8007ffe:	46bd      	mov	sp, r7
 8008000:	b010      	add	sp, #64	; 0x40
 8008002:	bdb0      	pop	{r4, r5, r7, pc}
 8008004:	40008000 	.word	0x40008000
 8008008:	40008400 	.word	0x40008400
 800800c:	00f42400 	.word	0x00f42400
 8008010:	0800b658 	.word	0x0800b658

08008014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008020:	2201      	movs	r2, #1
 8008022:	4013      	ands	r3, r2
 8008024:	d00b      	beq.n	800803e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	4a4a      	ldr	r2, [pc, #296]	; (8008158 <UART_AdvFeatureConfig+0x144>)
 800802e:	4013      	ands	r3, r2
 8008030:	0019      	movs	r1, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	430a      	orrs	r2, r1
 800803c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008042:	2202      	movs	r2, #2
 8008044:	4013      	ands	r3, r2
 8008046:	d00b      	beq.n	8008060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	4a43      	ldr	r2, [pc, #268]	; (800815c <UART_AdvFeatureConfig+0x148>)
 8008050:	4013      	ands	r3, r2
 8008052:	0019      	movs	r1, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	430a      	orrs	r2, r1
 800805e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008064:	2204      	movs	r2, #4
 8008066:	4013      	ands	r3, r2
 8008068:	d00b      	beq.n	8008082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	4a3b      	ldr	r2, [pc, #236]	; (8008160 <UART_AdvFeatureConfig+0x14c>)
 8008072:	4013      	ands	r3, r2
 8008074:	0019      	movs	r1, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	430a      	orrs	r2, r1
 8008080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008086:	2208      	movs	r2, #8
 8008088:	4013      	ands	r3, r2
 800808a:	d00b      	beq.n	80080a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	4a34      	ldr	r2, [pc, #208]	; (8008164 <UART_AdvFeatureConfig+0x150>)
 8008094:	4013      	ands	r3, r2
 8008096:	0019      	movs	r1, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	430a      	orrs	r2, r1
 80080a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a8:	2210      	movs	r2, #16
 80080aa:	4013      	ands	r3, r2
 80080ac:	d00b      	beq.n	80080c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	4a2c      	ldr	r2, [pc, #176]	; (8008168 <UART_AdvFeatureConfig+0x154>)
 80080b6:	4013      	ands	r3, r2
 80080b8:	0019      	movs	r1, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ca:	2220      	movs	r2, #32
 80080cc:	4013      	ands	r3, r2
 80080ce:	d00b      	beq.n	80080e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	4a25      	ldr	r2, [pc, #148]	; (800816c <UART_AdvFeatureConfig+0x158>)
 80080d8:	4013      	ands	r3, r2
 80080da:	0019      	movs	r1, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	430a      	orrs	r2, r1
 80080e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ec:	2240      	movs	r2, #64	; 0x40
 80080ee:	4013      	ands	r3, r2
 80080f0:	d01d      	beq.n	800812e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	4a1d      	ldr	r2, [pc, #116]	; (8008170 <UART_AdvFeatureConfig+0x15c>)
 80080fa:	4013      	ands	r3, r2
 80080fc:	0019      	movs	r1, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800810e:	2380      	movs	r3, #128	; 0x80
 8008110:	035b      	lsls	r3, r3, #13
 8008112:	429a      	cmp	r2, r3
 8008114:	d10b      	bne.n	800812e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	4a15      	ldr	r2, [pc, #84]	; (8008174 <UART_AdvFeatureConfig+0x160>)
 800811e:	4013      	ands	r3, r2
 8008120:	0019      	movs	r1, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	2280      	movs	r2, #128	; 0x80
 8008134:	4013      	ands	r3, r2
 8008136:	d00b      	beq.n	8008150 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	4a0e      	ldr	r2, [pc, #56]	; (8008178 <UART_AdvFeatureConfig+0x164>)
 8008140:	4013      	ands	r3, r2
 8008142:	0019      	movs	r1, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	430a      	orrs	r2, r1
 800814e:	605a      	str	r2, [r3, #4]
  }
}
 8008150:	46c0      	nop			; (mov r8, r8)
 8008152:	46bd      	mov	sp, r7
 8008154:	b002      	add	sp, #8
 8008156:	bd80      	pop	{r7, pc}
 8008158:	fffdffff 	.word	0xfffdffff
 800815c:	fffeffff 	.word	0xfffeffff
 8008160:	fffbffff 	.word	0xfffbffff
 8008164:	ffff7fff 	.word	0xffff7fff
 8008168:	ffffefff 	.word	0xffffefff
 800816c:	ffffdfff 	.word	0xffffdfff
 8008170:	ffefffff 	.word	0xffefffff
 8008174:	ff9fffff 	.word	0xff9fffff
 8008178:	fff7ffff 	.word	0xfff7ffff

0800817c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af02      	add	r7, sp, #8
 8008182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2290      	movs	r2, #144	; 0x90
 8008188:	2100      	movs	r1, #0
 800818a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800818c:	f7fc fd1c 	bl	8004bc8 <HAL_GetTick>
 8008190:	0003      	movs	r3, r0
 8008192:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2208      	movs	r2, #8
 800819c:	4013      	ands	r3, r2
 800819e:	2b08      	cmp	r3, #8
 80081a0:	d10c      	bne.n	80081bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2280      	movs	r2, #128	; 0x80
 80081a6:	0391      	lsls	r1, r2, #14
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	4a1a      	ldr	r2, [pc, #104]	; (8008214 <UART_CheckIdleState+0x98>)
 80081ac:	9200      	str	r2, [sp, #0]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f000 f832 	bl	8008218 <UART_WaitOnFlagUntilTimeout>
 80081b4:	1e03      	subs	r3, r0, #0
 80081b6:	d001      	beq.n	80081bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e026      	b.n	800820a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2204      	movs	r2, #4
 80081c4:	4013      	ands	r3, r2
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d10c      	bne.n	80081e4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2280      	movs	r2, #128	; 0x80
 80081ce:	03d1      	lsls	r1, r2, #15
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	4a10      	ldr	r2, [pc, #64]	; (8008214 <UART_CheckIdleState+0x98>)
 80081d4:	9200      	str	r2, [sp, #0]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f000 f81e 	bl	8008218 <UART_WaitOnFlagUntilTimeout>
 80081dc:	1e03      	subs	r3, r0, #0
 80081de:	d001      	beq.n	80081e4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e012      	b.n	800820a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2288      	movs	r2, #136	; 0x88
 80081e8:	2120      	movs	r1, #32
 80081ea:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	228c      	movs	r2, #140	; 0x8c
 80081f0:	2120      	movs	r1, #32
 80081f2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2284      	movs	r2, #132	; 0x84
 8008204:	2100      	movs	r1, #0
 8008206:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	0018      	movs	r0, r3
 800820c:	46bd      	mov	sp, r7
 800820e:	b004      	add	sp, #16
 8008210:	bd80      	pop	{r7, pc}
 8008212:	46c0      	nop			; (mov r8, r8)
 8008214:	01ffffff 	.word	0x01ffffff

08008218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b094      	sub	sp, #80	; 0x50
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	1dfb      	adds	r3, r7, #7
 8008226:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008228:	e0a7      	b.n	800837a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800822a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800822c:	3301      	adds	r3, #1
 800822e:	d100      	bne.n	8008232 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008230:	e0a3      	b.n	800837a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008232:	f7fc fcc9 	bl	8004bc8 <HAL_GetTick>
 8008236:	0002      	movs	r2, r0
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800823e:	429a      	cmp	r2, r3
 8008240:	d302      	bcc.n	8008248 <UART_WaitOnFlagUntilTimeout+0x30>
 8008242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008244:	2b00      	cmp	r3, #0
 8008246:	d13f      	bne.n	80082c8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008248:	f3ef 8310 	mrs	r3, PRIMASK
 800824c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800824e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008250:	647b      	str	r3, [r7, #68]	; 0x44
 8008252:	2301      	movs	r3, #1
 8008254:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008258:	f383 8810 	msr	PRIMASK, r3
}
 800825c:	46c0      	nop			; (mov r8, r8)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	494e      	ldr	r1, [pc, #312]	; (80083a4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800826a:	400a      	ands	r2, r1
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008270:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008274:	f383 8810 	msr	PRIMASK, r3
}
 8008278:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800827a:	f3ef 8310 	mrs	r3, PRIMASK
 800827e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008282:	643b      	str	r3, [r7, #64]	; 0x40
 8008284:	2301      	movs	r3, #1
 8008286:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	f383 8810 	msr	PRIMASK, r3
}
 800828e:	46c0      	nop			; (mov r8, r8)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689a      	ldr	r2, [r3, #8]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2101      	movs	r1, #1
 800829c:	438a      	bics	r2, r1
 800829e:	609a      	str	r2, [r3, #8]
 80082a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a6:	f383 8810 	msr	PRIMASK, r3
}
 80082aa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2288      	movs	r2, #136	; 0x88
 80082b0:	2120      	movs	r1, #32
 80082b2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	228c      	movs	r2, #140	; 0x8c
 80082b8:	2120      	movs	r1, #32
 80082ba:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2284      	movs	r2, #132	; 0x84
 80082c0:	2100      	movs	r1, #0
 80082c2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e069      	b.n	800839c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2204      	movs	r2, #4
 80082d0:	4013      	ands	r3, r2
 80082d2:	d052      	beq.n	800837a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	69da      	ldr	r2, [r3, #28]
 80082da:	2380      	movs	r3, #128	; 0x80
 80082dc:	011b      	lsls	r3, r3, #4
 80082de:	401a      	ands	r2, r3
 80082e0:	2380      	movs	r3, #128	; 0x80
 80082e2:	011b      	lsls	r3, r3, #4
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d148      	bne.n	800837a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2280      	movs	r2, #128	; 0x80
 80082ee:	0112      	lsls	r2, r2, #4
 80082f0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082f2:	f3ef 8310 	mrs	r3, PRIMASK
 80082f6:	613b      	str	r3, [r7, #16]
  return(result);
 80082f8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80082fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082fc:	2301      	movs	r3, #1
 80082fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f383 8810 	msr	PRIMASK, r3
}
 8008306:	46c0      	nop			; (mov r8, r8)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4924      	ldr	r1, [pc, #144]	; (80083a4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008314:	400a      	ands	r2, r1
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800831a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	f383 8810 	msr	PRIMASK, r3
}
 8008322:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008324:	f3ef 8310 	mrs	r3, PRIMASK
 8008328:	61fb      	str	r3, [r7, #28]
  return(result);
 800832a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800832c:	64bb      	str	r3, [r7, #72]	; 0x48
 800832e:	2301      	movs	r3, #1
 8008330:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	f383 8810 	msr	PRIMASK, r3
}
 8008338:	46c0      	nop			; (mov r8, r8)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	689a      	ldr	r2, [r3, #8]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2101      	movs	r1, #1
 8008346:	438a      	bics	r2, r1
 8008348:	609a      	str	r2, [r3, #8]
 800834a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800834c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	f383 8810 	msr	PRIMASK, r3
}
 8008354:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2288      	movs	r2, #136	; 0x88
 800835a:	2120      	movs	r1, #32
 800835c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	228c      	movs	r2, #140	; 0x8c
 8008362:	2120      	movs	r1, #32
 8008364:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2290      	movs	r2, #144	; 0x90
 800836a:	2120      	movs	r1, #32
 800836c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2284      	movs	r2, #132	; 0x84
 8008372:	2100      	movs	r1, #0
 8008374:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e010      	b.n	800839c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	69db      	ldr	r3, [r3, #28]
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	4013      	ands	r3, r2
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	425a      	negs	r2, r3
 800838a:	4153      	adcs	r3, r2
 800838c:	b2db      	uxtb	r3, r3
 800838e:	001a      	movs	r2, r3
 8008390:	1dfb      	adds	r3, r7, #7
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	429a      	cmp	r2, r3
 8008396:	d100      	bne.n	800839a <UART_WaitOnFlagUntilTimeout+0x182>
 8008398:	e747      	b.n	800822a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	0018      	movs	r0, r3
 800839e:	46bd      	mov	sp, r7
 80083a0:	b014      	add	sp, #80	; 0x50
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	fffffe5f 	.word	0xfffffe5f

080083a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2284      	movs	r2, #132	; 0x84
 80083b4:	5c9b      	ldrb	r3, [r3, r2]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d101      	bne.n	80083be <HAL_UARTEx_DisableFifoMode+0x16>
 80083ba:	2302      	movs	r3, #2
 80083bc:	e027      	b.n	800840e <HAL_UARTEx_DisableFifoMode+0x66>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2284      	movs	r2, #132	; 0x84
 80083c2:	2101      	movs	r1, #1
 80083c4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2288      	movs	r2, #136	; 0x88
 80083ca:	2124      	movs	r1, #36	; 0x24
 80083cc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2101      	movs	r1, #1
 80083e2:	438a      	bics	r2, r1
 80083e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	4a0b      	ldr	r2, [pc, #44]	; (8008418 <HAL_UARTEx_DisableFifoMode+0x70>)
 80083ea:	4013      	ands	r3, r2
 80083ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2288      	movs	r2, #136	; 0x88
 8008400:	2120      	movs	r1, #32
 8008402:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2284      	movs	r2, #132	; 0x84
 8008408:	2100      	movs	r1, #0
 800840a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	0018      	movs	r0, r3
 8008410:	46bd      	mov	sp, r7
 8008412:	b004      	add	sp, #16
 8008414:	bd80      	pop	{r7, pc}
 8008416:	46c0      	nop			; (mov r8, r8)
 8008418:	dfffffff 	.word	0xdfffffff

0800841c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2284      	movs	r2, #132	; 0x84
 800842a:	5c9b      	ldrb	r3, [r3, r2]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d101      	bne.n	8008434 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008430:	2302      	movs	r3, #2
 8008432:	e02e      	b.n	8008492 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2284      	movs	r2, #132	; 0x84
 8008438:	2101      	movs	r1, #1
 800843a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2288      	movs	r2, #136	; 0x88
 8008440:	2124      	movs	r1, #36	; 0x24
 8008442:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2101      	movs	r1, #1
 8008458:	438a      	bics	r2, r1
 800845a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	00db      	lsls	r3, r3, #3
 8008464:	08d9      	lsrs	r1, r3, #3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	430a      	orrs	r2, r1
 800846e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	0018      	movs	r0, r3
 8008474:	f000 f854 	bl	8008520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2288      	movs	r2, #136	; 0x88
 8008484:	2120      	movs	r1, #32
 8008486:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2284      	movs	r2, #132	; 0x84
 800848c:	2100      	movs	r1, #0
 800848e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	0018      	movs	r0, r3
 8008494:	46bd      	mov	sp, r7
 8008496:	b004      	add	sp, #16
 8008498:	bd80      	pop	{r7, pc}
	...

0800849c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2284      	movs	r2, #132	; 0x84
 80084aa:	5c9b      	ldrb	r3, [r3, r2]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d101      	bne.n	80084b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084b0:	2302      	movs	r3, #2
 80084b2:	e02f      	b.n	8008514 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2284      	movs	r2, #132	; 0x84
 80084b8:	2101      	movs	r1, #1
 80084ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2288      	movs	r2, #136	; 0x88
 80084c0:	2124      	movs	r1, #36	; 0x24
 80084c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2101      	movs	r1, #1
 80084d8:	438a      	bics	r2, r1
 80084da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	4a0e      	ldr	r2, [pc, #56]	; (800851c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80084e4:	4013      	ands	r3, r2
 80084e6:	0019      	movs	r1, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	0018      	movs	r0, r3
 80084f6:	f000 f813 	bl	8008520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2288      	movs	r2, #136	; 0x88
 8008506:	2120      	movs	r1, #32
 8008508:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2284      	movs	r2, #132	; 0x84
 800850e:	2100      	movs	r1, #0
 8008510:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	0018      	movs	r0, r3
 8008516:	46bd      	mov	sp, r7
 8008518:	b004      	add	sp, #16
 800851a:	bd80      	pop	{r7, pc}
 800851c:	f1ffffff 	.word	0xf1ffffff

08008520 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800852c:	2b00      	cmp	r3, #0
 800852e:	d108      	bne.n	8008542 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	226a      	movs	r2, #106	; 0x6a
 8008534:	2101      	movs	r1, #1
 8008536:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2268      	movs	r2, #104	; 0x68
 800853c:	2101      	movs	r1, #1
 800853e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008540:	e043      	b.n	80085ca <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008542:	260f      	movs	r6, #15
 8008544:	19bb      	adds	r3, r7, r6
 8008546:	2208      	movs	r2, #8
 8008548:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800854a:	200e      	movs	r0, #14
 800854c:	183b      	adds	r3, r7, r0
 800854e:	2208      	movs	r2, #8
 8008550:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	0e5b      	lsrs	r3, r3, #25
 800855a:	b2da      	uxtb	r2, r3
 800855c:	240d      	movs	r4, #13
 800855e:	193b      	adds	r3, r7, r4
 8008560:	2107      	movs	r1, #7
 8008562:	400a      	ands	r2, r1
 8008564:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	0f5b      	lsrs	r3, r3, #29
 800856e:	b2da      	uxtb	r2, r3
 8008570:	250c      	movs	r5, #12
 8008572:	197b      	adds	r3, r7, r5
 8008574:	2107      	movs	r1, #7
 8008576:	400a      	ands	r2, r1
 8008578:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800857a:	183b      	adds	r3, r7, r0
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	197a      	adds	r2, r7, r5
 8008580:	7812      	ldrb	r2, [r2, #0]
 8008582:	4914      	ldr	r1, [pc, #80]	; (80085d4 <UARTEx_SetNbDataToProcess+0xb4>)
 8008584:	5c8a      	ldrb	r2, [r1, r2]
 8008586:	435a      	muls	r2, r3
 8008588:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800858a:	197b      	adds	r3, r7, r5
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	4a12      	ldr	r2, [pc, #72]	; (80085d8 <UARTEx_SetNbDataToProcess+0xb8>)
 8008590:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008592:	0019      	movs	r1, r3
 8008594:	f7f9 fd06 	bl	8001fa4 <__divsi3>
 8008598:	0003      	movs	r3, r0
 800859a:	b299      	uxth	r1, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	226a      	movs	r2, #106	; 0x6a
 80085a0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085a2:	19bb      	adds	r3, r7, r6
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	193a      	adds	r2, r7, r4
 80085a8:	7812      	ldrb	r2, [r2, #0]
 80085aa:	490a      	ldr	r1, [pc, #40]	; (80085d4 <UARTEx_SetNbDataToProcess+0xb4>)
 80085ac:	5c8a      	ldrb	r2, [r1, r2]
 80085ae:	435a      	muls	r2, r3
 80085b0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80085b2:	193b      	adds	r3, r7, r4
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	4a08      	ldr	r2, [pc, #32]	; (80085d8 <UARTEx_SetNbDataToProcess+0xb8>)
 80085b8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085ba:	0019      	movs	r1, r3
 80085bc:	f7f9 fcf2 	bl	8001fa4 <__divsi3>
 80085c0:	0003      	movs	r3, r0
 80085c2:	b299      	uxth	r1, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2268      	movs	r2, #104	; 0x68
 80085c8:	5299      	strh	r1, [r3, r2]
}
 80085ca:	46c0      	nop			; (mov r8, r8)
 80085cc:	46bd      	mov	sp, r7
 80085ce:	b005      	add	sp, #20
 80085d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085d2:	46c0      	nop			; (mov r8, r8)
 80085d4:	0800b670 	.word	0x0800b670
 80085d8:	0800b678 	.word	0x0800b678

080085dc <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80085dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085de:	b08d      	sub	sp, #52	; 0x34
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	0004      	movs	r4, r0
 80085e4:	0008      	movs	r0, r1
 80085e6:	0011      	movs	r1, r2
 80085e8:	603b      	str	r3, [r7, #0]
 80085ea:	1dfb      	adds	r3, r7, #7
 80085ec:	1c22      	adds	r2, r4, #0
 80085ee:	701a      	strb	r2, [r3, #0]
 80085f0:	1dbb      	adds	r3, r7, #6
 80085f2:	1c02      	adds	r2, r0, #0
 80085f4:	701a      	strb	r2, [r3, #0]
 80085f6:	1d7b      	adds	r3, r7, #5
 80085f8:	1c0a      	adds	r2, r1, #0
 80085fa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80085fc:	2514      	movs	r5, #20
 80085fe:	197b      	adds	r3, r7, r5
 8008600:	1dfa      	adds	r2, r7, #7
 8008602:	7812      	ldrb	r2, [r2, #0]
 8008604:	701a      	strb	r2, [r3, #0]
  cp.privacy_enabled = privacy_enabled;
 8008606:	197b      	adds	r3, r7, r5
 8008608:	1dba      	adds	r2, r7, #6
 800860a:	7812      	ldrb	r2, [r2, #0]
 800860c:	705a      	strb	r2, [r3, #1]
  cp.device_name_char_len = device_name_char_len;
 800860e:	197b      	adds	r3, r7, r5
 8008610:	1d7a      	adds	r2, r7, #5
 8008612:	7812      	ldrb	r2, [r2, #0]
 8008614:	709a      	strb	r2, [r3, #2]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008616:	260c      	movs	r6, #12
 8008618:	19bb      	adds	r3, r7, r6
 800861a:	2207      	movs	r2, #7
 800861c:	2100      	movs	r1, #0
 800861e:	0018      	movs	r0, r3
 8008620:	f001 fa8e 	bl	8009b40 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008624:	2418      	movs	r4, #24
 8008626:	193b      	adds	r3, r7, r4
 8008628:	2218      	movs	r2, #24
 800862a:	2100      	movs	r1, #0
 800862c:	0018      	movs	r0, r3
 800862e:	f001 fa87 	bl	8009b40 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008632:	0021      	movs	r1, r4
 8008634:	187b      	adds	r3, r7, r1
 8008636:	223f      	movs	r2, #63	; 0x3f
 8008638:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GAP_INIT;
 800863a:	187b      	adds	r3, r7, r1
 800863c:	228a      	movs	r2, #138	; 0x8a
 800863e:	805a      	strh	r2, [r3, #2]
  rq.cparam = &cp;
 8008640:	187b      	adds	r3, r7, r1
 8008642:	197a      	adds	r2, r7, r5
 8008644:	609a      	str	r2, [r3, #8]
  rq.clen = sizeof(cp);
 8008646:	187b      	adds	r3, r7, r1
 8008648:	2203      	movs	r2, #3
 800864a:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 800864c:	187b      	adds	r3, r7, r1
 800864e:	19ba      	adds	r2, r7, r6
 8008650:	611a      	str	r2, [r3, #16]
  rq.rlen = GAP_INIT_RP_SIZE;
 8008652:	187b      	adds	r3, r7, r1
 8008654:	2207      	movs	r2, #7
 8008656:	615a      	str	r2, [r3, #20]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008658:	187b      	adds	r3, r7, r1
 800865a:	2100      	movs	r1, #0
 800865c:	0018      	movs	r0, r3
 800865e:	f000 fd83 	bl	8009168 <hci_send_req>
 8008662:	1e03      	subs	r3, r0, #0
 8008664:	da01      	bge.n	800866a <aci_gap_init_IDB05A1+0x8e>
    return BLE_STATUS_TIMEOUT;
 8008666:	23ff      	movs	r3, #255	; 0xff
 8008668:	e01f      	b.n	80086aa <aci_gap_init_IDB05A1+0xce>
  
  if (resp.status) {
 800866a:	220c      	movs	r2, #12
 800866c:	18bb      	adds	r3, r7, r2
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <aci_gap_init_IDB05A1+0x9e>
    return resp.status;
 8008674:	18bb      	adds	r3, r7, r2
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	e017      	b.n	80086aa <aci_gap_init_IDB05A1+0xce>
  }
  
  *service_handle = btohs(resp.service_handle);
 800867a:	210c      	movs	r1, #12
 800867c:	187b      	adds	r3, r7, r1
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	021b      	lsls	r3, r3, #8
 8008682:	0c1b      	lsrs	r3, r3, #16
 8008684:	b29a      	uxth	r2, r3
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800868a:	187b      	adds	r3, r7, r1
 800868c:	78da      	ldrb	r2, [r3, #3]
 800868e:	791b      	ldrb	r3, [r3, #4]
 8008690:	021b      	lsls	r3, r3, #8
 8008692:	4313      	orrs	r3, r2
 8008694:	b29a      	uxth	r2, r3
 8008696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008698:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800869a:	187b      	adds	r3, r7, r1
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	021b      	lsls	r3, r3, #8
 80086a0:	0c1b      	lsrs	r3, r3, #16
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086a6:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	0018      	movs	r0, r3
 80086ac:	46bd      	mov	sp, r7
 80086ae:	b00d      	add	sp, #52	; 0x34
 80086b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086b2 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80086b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086b4:	b095      	sub	sp, #84	; 0x54
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	0005      	movs	r5, r0
 80086ba:	000c      	movs	r4, r1
 80086bc:	0010      	movs	r0, r2
 80086be:	0019      	movs	r1, r3
 80086c0:	1dfb      	adds	r3, r7, #7
 80086c2:	1c2a      	adds	r2, r5, #0
 80086c4:	701a      	strb	r2, [r3, #0]
 80086c6:	1d3b      	adds	r3, r7, #4
 80086c8:	1c22      	adds	r2, r4, #0
 80086ca:	801a      	strh	r2, [r3, #0]
 80086cc:	1cbb      	adds	r3, r7, #2
 80086ce:	1c02      	adds	r2, r0, #0
 80086d0:	801a      	strh	r2, [r3, #0]
 80086d2:	1dbb      	adds	r3, r7, #6
 80086d4:	1c0a      	adds	r2, r1, #0
 80086d6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 80086d8:	234f      	movs	r3, #79	; 0x4f
 80086da:	18fb      	adds	r3, r7, r3
 80086dc:	2200      	movs	r2, #0
 80086de:	701a      	strb	r2, [r3, #0]
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80086e0:	2364      	movs	r3, #100	; 0x64
 80086e2:	2108      	movs	r1, #8
 80086e4:	185b      	adds	r3, r3, r1
 80086e6:	19db      	adds	r3, r3, r7
 80086e8:	781a      	ldrb	r2, [r3, #0]
 80086ea:	236c      	movs	r3, #108	; 0x6c
 80086ec:	185b      	adds	r3, r3, r1
 80086ee:	19db      	adds	r3, r3, r7
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	18d3      	adds	r3, r2, r3
 80086f4:	330e      	adds	r3, #14
 80086f6:	2b28      	cmp	r3, #40	; 0x28
 80086f8:	d901      	bls.n	80086fe <aci_gap_set_discoverable+0x4c>
    return BLE_STATUS_INVALID_PARAMS;
 80086fa:	2342      	movs	r3, #66	; 0x42
 80086fc:	e0f0      	b.n	80088e0 <aci_gap_set_discoverable+0x22e>

  buffer[indx] = AdvType;
 80086fe:	204f      	movs	r0, #79	; 0x4f
 8008700:	183b      	adds	r3, r7, r0
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	2508      	movs	r5, #8
 8008706:	197a      	adds	r2, r7, r5
 8008708:	1df9      	adds	r1, r7, #7
 800870a:	7809      	ldrb	r1, [r1, #0]
 800870c:	54d1      	strb	r1, [r2, r3]
  indx++;
 800870e:	0001      	movs	r1, r0
 8008710:	187b      	adds	r3, r7, r1
 8008712:	781a      	ldrb	r2, [r3, #0]
 8008714:	187b      	adds	r3, r7, r1
 8008716:	3201      	adds	r2, #1
 8008718:	701a      	strb	r2, [r3, #0]
  
  AdvIntervMin = htobs(AdvIntervMin);
 800871a:	1d3b      	adds	r3, r7, #4
 800871c:	881a      	ldrh	r2, [r3, #0]
 800871e:	1d3b      	adds	r3, r7, #4
 8008720:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8008722:	000c      	movs	r4, r1
 8008724:	187b      	adds	r3, r7, r1
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	197a      	adds	r2, r7, r5
 800872a:	18d3      	adds	r3, r2, r3
 800872c:	1d39      	adds	r1, r7, #4
 800872e:	2202      	movs	r2, #2
 8008730:	0018      	movs	r0, r3
 8008732:	f001 f9fc 	bl	8009b2e <memcpy>
  indx +=  2;
 8008736:	0021      	movs	r1, r4
 8008738:	187b      	adds	r3, r7, r1
 800873a:	187a      	adds	r2, r7, r1
 800873c:	7812      	ldrb	r2, [r2, #0]
 800873e:	3202      	adds	r2, #2
 8008740:	701a      	strb	r2, [r3, #0]
    
  AdvIntervMax = htobs(AdvIntervMax);
 8008742:	1cbb      	adds	r3, r7, #2
 8008744:	881a      	ldrh	r2, [r3, #0]
 8008746:	1cbb      	adds	r3, r7, #2
 8008748:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800874a:	000c      	movs	r4, r1
 800874c:	187b      	adds	r3, r7, r1
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	197a      	adds	r2, r7, r5
 8008752:	18d3      	adds	r3, r2, r3
 8008754:	1cb9      	adds	r1, r7, #2
 8008756:	2202      	movs	r2, #2
 8008758:	0018      	movs	r0, r3
 800875a:	f001 f9e8 	bl	8009b2e <memcpy>
  indx +=  2;
 800875e:	193b      	adds	r3, r7, r4
 8008760:	193a      	adds	r2, r7, r4
 8008762:	7812      	ldrb	r2, [r2, #0]
 8008764:	3202      	adds	r2, #2
 8008766:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = OwnAddrType;
 8008768:	193b      	adds	r3, r7, r4
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	197a      	adds	r2, r7, r5
 800876e:	1db9      	adds	r1, r7, #6
 8008770:	7809      	ldrb	r1, [r1, #0]
 8008772:	54d1      	strb	r1, [r2, r3]
  indx++;
 8008774:	193b      	adds	r3, r7, r4
 8008776:	781a      	ldrb	r2, [r3, #0]
 8008778:	193b      	adds	r3, r7, r4
 800877a:	3201      	adds	r2, #1
 800877c:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = AdvFilterPolicy;
 800877e:	193b      	adds	r3, r7, r4
 8008780:	781a      	ldrb	r2, [r3, #0]
 8008782:	1979      	adds	r1, r7, r5
 8008784:	2360      	movs	r3, #96	; 0x60
 8008786:	2008      	movs	r0, #8
 8008788:	181b      	adds	r3, r3, r0
 800878a:	19db      	adds	r3, r3, r7
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	548b      	strb	r3, [r1, r2]
  indx++;
 8008790:	193b      	adds	r3, r7, r4
 8008792:	781a      	ldrb	r2, [r3, #0]
 8008794:	193b      	adds	r3, r7, r4
 8008796:	3201      	adds	r2, #1
 8008798:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = LocalNameLen;
 800879a:	193b      	adds	r3, r7, r4
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	197a      	adds	r2, r7, r5
 80087a0:	2664      	movs	r6, #100	; 0x64
 80087a2:	1831      	adds	r1, r6, r0
 80087a4:	19c9      	adds	r1, r1, r7
 80087a6:	7809      	ldrb	r1, [r1, #0]
 80087a8:	54d1      	strb	r1, [r2, r3]
  indx++;
 80087aa:	193b      	adds	r3, r7, r4
 80087ac:	781a      	ldrb	r2, [r3, #0]
 80087ae:	193b      	adds	r3, r7, r4
 80087b0:	3201      	adds	r2, #1
 80087b2:	701a      	strb	r2, [r3, #0]
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80087b4:	193b      	adds	r3, r7, r4
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	197a      	adds	r2, r7, r5
 80087ba:	18d0      	adds	r0, r2, r3
 80087bc:	2308      	movs	r3, #8
 80087be:	18f2      	adds	r2, r6, r3
 80087c0:	19d3      	adds	r3, r2, r7
 80087c2:	781a      	ldrb	r2, [r3, #0]
 80087c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087c6:	0019      	movs	r1, r3
 80087c8:	f001 f9b1 	bl	8009b2e <memcpy>
  indx +=  LocalNameLen;
 80087cc:	193b      	adds	r3, r7, r4
 80087ce:	1939      	adds	r1, r7, r4
 80087d0:	2008      	movs	r0, #8
 80087d2:	1832      	adds	r2, r6, r0
 80087d4:	19d2      	adds	r2, r2, r7
 80087d6:	7809      	ldrb	r1, [r1, #0]
 80087d8:	7812      	ldrb	r2, [r2, #0]
 80087da:	188a      	adds	r2, r1, r2
 80087dc:	701a      	strb	r2, [r3, #0]
  
  buffer[indx] = ServiceUUIDLen;
 80087de:	193b      	adds	r3, r7, r4
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	197a      	adds	r2, r7, r5
 80087e4:	266c      	movs	r6, #108	; 0x6c
 80087e6:	1831      	adds	r1, r6, r0
 80087e8:	19c9      	adds	r1, r1, r7
 80087ea:	7809      	ldrb	r1, [r1, #0]
 80087ec:	54d1      	strb	r1, [r2, r3]
  indx++;
 80087ee:	193b      	adds	r3, r7, r4
 80087f0:	781a      	ldrb	r2, [r3, #0]
 80087f2:	193b      	adds	r3, r7, r4
 80087f4:	3201      	adds	r2, #1
 80087f6:	701a      	strb	r2, [r3, #0]

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80087f8:	193b      	adds	r3, r7, r4
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	197a      	adds	r2, r7, r5
 80087fe:	18d0      	adds	r0, r2, r3
 8008800:	2308      	movs	r3, #8
 8008802:	18f2      	adds	r2, r6, r3
 8008804:	19d3      	adds	r3, r2, r7
 8008806:	781a      	ldrb	r2, [r3, #0]
 8008808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800880a:	0019      	movs	r1, r3
 800880c:	f001 f98f 	bl	8009b2e <memcpy>
  indx +=  ServiceUUIDLen;  
 8008810:	0020      	movs	r0, r4
 8008812:	183b      	adds	r3, r7, r0
 8008814:	1839      	adds	r1, r7, r0
 8008816:	2408      	movs	r4, #8
 8008818:	1932      	adds	r2, r6, r4
 800881a:	19d2      	adds	r2, r2, r7
 800881c:	7809      	ldrb	r1, [r1, #0]
 800881e:	7812      	ldrb	r2, [r2, #0]
 8008820:	188a      	adds	r2, r1, r2
 8008822:	701a      	strb	r2, [r3, #0]

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8008824:	2174      	movs	r1, #116	; 0x74
 8008826:	0026      	movs	r6, r4
 8008828:	198b      	adds	r3, r1, r6
 800882a:	19db      	adds	r3, r3, r7
 800882c:	881a      	ldrh	r2, [r3, #0]
 800882e:	198b      	adds	r3, r1, r6
 8008830:	19db      	adds	r3, r3, r7
 8008832:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8008834:	0004      	movs	r4, r0
 8008836:	183b      	adds	r3, r7, r0
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	197a      	adds	r2, r7, r5
 800883c:	18d3      	adds	r3, r2, r3
 800883e:	198a      	adds	r2, r1, r6
 8008840:	19d1      	adds	r1, r2, r7
 8008842:	2202      	movs	r2, #2
 8008844:	0018      	movs	r0, r3
 8008846:	f001 f972 	bl	8009b2e <memcpy>
  indx +=  2;
 800884a:	0020      	movs	r0, r4
 800884c:	183b      	adds	r3, r7, r0
 800884e:	183a      	adds	r2, r7, r0
 8008850:	7812      	ldrb	r2, [r2, #0]
 8008852:	3202      	adds	r2, #2
 8008854:	701a      	strb	r2, [r3, #0]
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8008856:	2178      	movs	r1, #120	; 0x78
 8008858:	198b      	adds	r3, r1, r6
 800885a:	19db      	adds	r3, r3, r7
 800885c:	881a      	ldrh	r2, [r3, #0]
 800885e:	198b      	adds	r3, r1, r6
 8008860:	19db      	adds	r3, r3, r7
 8008862:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8008864:	0004      	movs	r4, r0
 8008866:	193b      	adds	r3, r7, r4
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	197a      	adds	r2, r7, r5
 800886c:	18d3      	adds	r3, r2, r3
 800886e:	198a      	adds	r2, r1, r6
 8008870:	19d1      	adds	r1, r2, r7
 8008872:	2202      	movs	r2, #2
 8008874:	0018      	movs	r0, r3
 8008876:	f001 f95a 	bl	8009b2e <memcpy>
  indx +=  2;    
 800887a:	193b      	adds	r3, r7, r4
 800887c:	193a      	adds	r2, r7, r4
 800887e:	7812      	ldrb	r2, [r2, #0]
 8008880:	3202      	adds	r2, #2
 8008882:	701a      	strb	r2, [r3, #0]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008884:	2634      	movs	r6, #52	; 0x34
 8008886:	19bb      	adds	r3, r7, r6
 8008888:	2218      	movs	r2, #24
 800888a:	2100      	movs	r1, #0
 800888c:	0018      	movs	r0, r3
 800888e:	f001 f957 	bl	8009b40 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008892:	0031      	movs	r1, r6
 8008894:	187b      	adds	r3, r7, r1
 8008896:	223f      	movs	r2, #63	; 0x3f
 8008898:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800889a:	187b      	adds	r3, r7, r1
 800889c:	2283      	movs	r2, #131	; 0x83
 800889e:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 80088a0:	187b      	adds	r3, r7, r1
 80088a2:	197a      	adds	r2, r7, r5
 80088a4:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 80088a6:	193b      	adds	r3, r7, r4
 80088a8:	781a      	ldrb	r2, [r3, #0]
 80088aa:	187b      	adds	r3, r7, r1
 80088ac:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 80088ae:	187b      	adds	r3, r7, r1
 80088b0:	2233      	movs	r2, #51	; 0x33
 80088b2:	18ba      	adds	r2, r7, r2
 80088b4:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 80088b6:	187b      	adds	r3, r7, r1
 80088b8:	2201      	movs	r2, #1
 80088ba:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 80088bc:	187b      	adds	r3, r7, r1
 80088be:	2100      	movs	r1, #0
 80088c0:	0018      	movs	r0, r3
 80088c2:	f000 fc51 	bl	8009168 <hci_send_req>
 80088c6:	1e03      	subs	r3, r0, #0
 80088c8:	da01      	bge.n	80088ce <aci_gap_set_discoverable+0x21c>
    return BLE_STATUS_TIMEOUT;
 80088ca:	23ff      	movs	r3, #255	; 0xff
 80088cc:	e008      	b.n	80088e0 <aci_gap_set_discoverable+0x22e>

  if (status) {
 80088ce:	2233      	movs	r2, #51	; 0x33
 80088d0:	18bb      	adds	r3, r7, r2
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <aci_gap_set_discoverable+0x22c>
    return status;
 80088d8:	18bb      	adds	r3, r7, r2
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	e000      	b.n	80088e0 <aci_gap_set_discoverable+0x22e>
  }

  return 0;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	0018      	movs	r0, r3
 80088e2:	46bd      	mov	sp, r7
 80088e4:	b015      	add	sp, #84	; 0x54
 80088e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080088e8 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80088e8:	b590      	push	{r4, r7, lr}
 80088ea:	b089      	sub	sp, #36	; 0x24
 80088ec:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80088ee:	2408      	movs	r4, #8
 80088f0:	193b      	adds	r3, r7, r4
 80088f2:	2218      	movs	r2, #24
 80088f4:	2100      	movs	r1, #0
 80088f6:	0018      	movs	r0, r3
 80088f8:	f001 f922 	bl	8009b40 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80088fc:	0021      	movs	r1, r4
 80088fe:	187b      	adds	r3, r7, r1
 8008900:	223f      	movs	r2, #63	; 0x3f
 8008902:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_INIT;
 8008904:	187b      	adds	r3, r7, r1
 8008906:	2202      	movs	r2, #2
 8008908:	32ff      	adds	r2, #255	; 0xff
 800890a:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 800890c:	187b      	adds	r3, r7, r1
 800890e:	1dfa      	adds	r2, r7, #7
 8008910:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8008912:	187b      	adds	r3, r7, r1
 8008914:	2201      	movs	r2, #1
 8008916:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8008918:	187b      	adds	r3, r7, r1
 800891a:	2100      	movs	r1, #0
 800891c:	0018      	movs	r0, r3
 800891e:	f000 fc23 	bl	8009168 <hci_send_req>
 8008922:	1e03      	subs	r3, r0, #0
 8008924:	da01      	bge.n	800892a <aci_gatt_init+0x42>
    return BLE_STATUS_TIMEOUT;
 8008926:	23ff      	movs	r3, #255	; 0xff
 8008928:	e001      	b.n	800892e <aci_gatt_init+0x46>

  return status;
 800892a:	1dfb      	adds	r3, r7, #7
 800892c:	781b      	ldrb	r3, [r3, #0]
}
 800892e:	0018      	movs	r0, r3
 8008930:	46bd      	mov	sp, r7
 8008932:	b009      	add	sp, #36	; 0x24
 8008934:	bd90      	pop	{r4, r7, pc}

08008936 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8008936:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008938:	b091      	sub	sp, #68	; 0x44
 800893a:	af00      	add	r7, sp, #0
 800893c:	0004      	movs	r4, r0
 800893e:	6039      	str	r1, [r7, #0]
 8008940:	0010      	movs	r0, r2
 8008942:	0019      	movs	r1, r3
 8008944:	1dfb      	adds	r3, r7, #7
 8008946:	1c22      	adds	r2, r4, #0
 8008948:	701a      	strb	r2, [r3, #0]
 800894a:	1dbb      	adds	r3, r7, #6
 800894c:	1c02      	adds	r2, r0, #0
 800894e:	701a      	strb	r2, [r3, #0]
 8008950:	1d7b      	adds	r3, r7, #5
 8008952:	1c0a      	adds	r2, r1, #0
 8008954:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008956:	203e      	movs	r0, #62	; 0x3e
 8008958:	183b      	adds	r3, r7, r0
 800895a:	2200      	movs	r2, #0
 800895c:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = service_uuid_type;
 800895e:	183b      	adds	r3, r7, r0
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	220c      	movs	r2, #12
 8008964:	18ba      	adds	r2, r7, r2
 8008966:	1df9      	adds	r1, r7, #7
 8008968:	7809      	ldrb	r1, [r1, #0]
 800896a:	54d1      	strb	r1, [r2, r3]
  indx++;
 800896c:	183b      	adds	r3, r7, r0
 800896e:	781a      	ldrb	r2, [r3, #0]
 8008970:	183b      	adds	r3, r7, r0
 8008972:	3201      	adds	r2, #1
 8008974:	701a      	strb	r2, [r3, #0]
    
  if(service_uuid_type == UUID_TYPE_16){
 8008976:	1dfb      	adds	r3, r7, #7
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d104      	bne.n	8008988 <aci_gatt_add_serv+0x52>
    uuid_len = 2;
 800897e:	233f      	movs	r3, #63	; 0x3f
 8008980:	18fb      	adds	r3, r7, r3
 8008982:	2202      	movs	r2, #2
 8008984:	701a      	strb	r2, [r3, #0]
 8008986:	e003      	b.n	8008990 <aci_gatt_add_serv+0x5a>
  }
  else {
    uuid_len = 16;
 8008988:	233f      	movs	r3, #63	; 0x3f
 800898a:	18fb      	adds	r3, r7, r3
 800898c:	2210      	movs	r2, #16
 800898e:	701a      	strb	r2, [r3, #0]
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8008990:	243e      	movs	r4, #62	; 0x3e
 8008992:	193b      	adds	r3, r7, r4
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	260c      	movs	r6, #12
 8008998:	19ba      	adds	r2, r7, r6
 800899a:	18d0      	adds	r0, r2, r3
 800899c:	253f      	movs	r5, #63	; 0x3f
 800899e:	197b      	adds	r3, r7, r5
 80089a0:	781a      	ldrb	r2, [r3, #0]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	0019      	movs	r1, r3
 80089a6:	f001 f8c2 	bl	8009b2e <memcpy>
  indx +=  uuid_len;
 80089aa:	0020      	movs	r0, r4
 80089ac:	183b      	adds	r3, r7, r0
 80089ae:	1839      	adds	r1, r7, r0
 80089b0:	197a      	adds	r2, r7, r5
 80089b2:	7809      	ldrb	r1, [r1, #0]
 80089b4:	7812      	ldrb	r2, [r2, #0]
 80089b6:	188a      	adds	r2, r1, r2
 80089b8:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = service_type;
 80089ba:	183b      	adds	r3, r7, r0
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	19ba      	adds	r2, r7, r6
 80089c0:	1db9      	adds	r1, r7, #6
 80089c2:	7809      	ldrb	r1, [r1, #0]
 80089c4:	54d1      	strb	r1, [r2, r3]
  indx++;
 80089c6:	183b      	adds	r3, r7, r0
 80089c8:	781a      	ldrb	r2, [r3, #0]
 80089ca:	0004      	movs	r4, r0
 80089cc:	183b      	adds	r3, r7, r0
 80089ce:	3201      	adds	r2, #1
 80089d0:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = max_attr_records;
 80089d2:	193b      	adds	r3, r7, r4
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	19ba      	adds	r2, r7, r6
 80089d8:	1d79      	adds	r1, r7, #5
 80089da:	7809      	ldrb	r1, [r1, #0]
 80089dc:	54d1      	strb	r1, [r2, r3]
  indx++;
 80089de:	193b      	adds	r3, r7, r4
 80089e0:	781a      	ldrb	r2, [r3, #0]
 80089e2:	193b      	adds	r3, r7, r4
 80089e4:	3201      	adds	r2, #1
 80089e6:	701a      	strb	r2, [r3, #0]
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80089e8:	2320      	movs	r3, #32
 80089ea:	18fb      	adds	r3, r7, r3
 80089ec:	2203      	movs	r2, #3
 80089ee:	2100      	movs	r1, #0
 80089f0:	0018      	movs	r0, r3
 80089f2:	f001 f8a5 	bl	8009b40 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80089f6:	2524      	movs	r5, #36	; 0x24
 80089f8:	197b      	adds	r3, r7, r5
 80089fa:	2218      	movs	r2, #24
 80089fc:	2100      	movs	r1, #0
 80089fe:	0018      	movs	r0, r3
 8008a00:	f001 f89e 	bl	8009b40 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008a04:	0029      	movs	r1, r5
 8008a06:	187b      	adds	r3, r7, r1
 8008a08:	223f      	movs	r2, #63	; 0x3f
 8008a0a:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_ADD_SERV;
 8008a0c:	187b      	adds	r3, r7, r1
 8008a0e:	2281      	movs	r2, #129	; 0x81
 8008a10:	0052      	lsls	r2, r2, #1
 8008a12:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 8008a14:	187b      	adds	r3, r7, r1
 8008a16:	19ba      	adds	r2, r7, r6
 8008a18:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 8008a1a:	193b      	adds	r3, r7, r4
 8008a1c:	781a      	ldrb	r2, [r3, #0]
 8008a1e:	187b      	adds	r3, r7, r1
 8008a20:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 8008a22:	187b      	adds	r3, r7, r1
 8008a24:	2220      	movs	r2, #32
 8008a26:	18ba      	adds	r2, r7, r2
 8008a28:	611a      	str	r2, [r3, #16]
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8008a2a:	187b      	adds	r3, r7, r1
 8008a2c:	2203      	movs	r2, #3
 8008a2e:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8008a30:	187b      	adds	r3, r7, r1
 8008a32:	2100      	movs	r1, #0
 8008a34:	0018      	movs	r0, r3
 8008a36:	f000 fb97 	bl	8009168 <hci_send_req>
 8008a3a:	1e03      	subs	r3, r0, #0
 8008a3c:	da01      	bge.n	8008a42 <aci_gatt_add_serv+0x10c>
    return BLE_STATUS_TIMEOUT;
 8008a3e:	23ff      	movs	r3, #255	; 0xff
 8008a40:	e010      	b.n	8008a64 <aci_gatt_add_serv+0x12e>

  if (resp.status) {
 8008a42:	2220      	movs	r2, #32
 8008a44:	18bb      	adds	r3, r7, r2
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d002      	beq.n	8008a52 <aci_gatt_add_serv+0x11c>
    return resp.status;
 8008a4c:	18bb      	adds	r3, r7, r2
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	e008      	b.n	8008a64 <aci_gatt_add_serv+0x12e>
  }
    
  *serviceHandle = btohs(resp.handle);
 8008a52:	2320      	movs	r3, #32
 8008a54:	18fb      	adds	r3, r7, r3
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	021b      	lsls	r3, r3, #8
 8008a5a:	0c1b      	lsrs	r3, r3, #16
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a60:	801a      	strh	r2, [r3, #0]

  return 0;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	0018      	movs	r0, r3
 8008a66:	46bd      	mov	sp, r7
 8008a68:	b011      	add	sp, #68	; 0x44
 8008a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a6c <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8008a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a6e:	b093      	sub	sp, #76	; 0x4c
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	0004      	movs	r4, r0
 8008a74:	0008      	movs	r0, r1
 8008a76:	603a      	str	r2, [r7, #0]
 8008a78:	0019      	movs	r1, r3
 8008a7a:	1dbb      	adds	r3, r7, #6
 8008a7c:	1c22      	adds	r2, r4, #0
 8008a7e:	801a      	strh	r2, [r3, #0]
 8008a80:	1d7b      	adds	r3, r7, #5
 8008a82:	1c02      	adds	r2, r0, #0
 8008a84:	701a      	strb	r2, [r3, #0]
 8008a86:	1d3b      	adds	r3, r7, #4
 8008a88:	1c0a      	adds	r2, r1, #0
 8008a8a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008a8c:	2146      	movs	r1, #70	; 0x46
 8008a8e:	187b      	adds	r3, r7, r1
 8008a90:	2200      	movs	r2, #0
 8008a92:	701a      	strb	r2, [r3, #0]
    
  serviceHandle = htobs(serviceHandle);
 8008a94:	1dbb      	adds	r3, r7, #6
 8008a96:	881a      	ldrh	r2, [r3, #0]
 8008a98:	1dbb      	adds	r3, r7, #6
 8008a9a:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8008a9c:	000c      	movs	r4, r1
 8008a9e:	187b      	adds	r3, r7, r1
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	250c      	movs	r5, #12
 8008aa4:	197a      	adds	r2, r7, r5
 8008aa6:	18d3      	adds	r3, r2, r3
 8008aa8:	1db9      	adds	r1, r7, #6
 8008aaa:	2202      	movs	r2, #2
 8008aac:	0018      	movs	r0, r3
 8008aae:	f001 f83e 	bl	8009b2e <memcpy>
  indx += 2;
 8008ab2:	0020      	movs	r0, r4
 8008ab4:	183b      	adds	r3, r7, r0
 8008ab6:	183a      	adds	r2, r7, r0
 8008ab8:	7812      	ldrb	r2, [r2, #0]
 8008aba:	3202      	adds	r2, #2
 8008abc:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charUuidType;
 8008abe:	183b      	adds	r3, r7, r0
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	197a      	adds	r2, r7, r5
 8008ac4:	1d79      	adds	r1, r7, #5
 8008ac6:	7809      	ldrb	r1, [r1, #0]
 8008ac8:	54d1      	strb	r1, [r2, r3]
  indx++;
 8008aca:	183b      	adds	r3, r7, r0
 8008acc:	781a      	ldrb	r2, [r3, #0]
 8008ace:	183b      	adds	r3, r7, r0
 8008ad0:	3201      	adds	r2, #1
 8008ad2:	701a      	strb	r2, [r3, #0]
    
  if(charUuidType == UUID_TYPE_16){
 8008ad4:	1d7b      	adds	r3, r7, #5
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d104      	bne.n	8008ae6 <aci_gatt_add_char+0x7a>
    uuid_len = 2;
 8008adc:	2347      	movs	r3, #71	; 0x47
 8008ade:	18fb      	adds	r3, r7, r3
 8008ae0:	2202      	movs	r2, #2
 8008ae2:	701a      	strb	r2, [r3, #0]
 8008ae4:	e003      	b.n	8008aee <aci_gatt_add_char+0x82>
  }
  else {
    uuid_len = 16;
 8008ae6:	2347      	movs	r3, #71	; 0x47
 8008ae8:	18fb      	adds	r3, r7, r3
 8008aea:	2210      	movs	r2, #16
 8008aec:	701a      	strb	r2, [r3, #0]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8008aee:	2446      	movs	r4, #70	; 0x46
 8008af0:	193b      	adds	r3, r7, r4
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	250c      	movs	r5, #12
 8008af6:	197a      	adds	r2, r7, r5
 8008af8:	18d0      	adds	r0, r2, r3
 8008afa:	2647      	movs	r6, #71	; 0x47
 8008afc:	19bb      	adds	r3, r7, r6
 8008afe:	781a      	ldrb	r2, [r3, #0]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	0019      	movs	r1, r3
 8008b04:	f001 f813 	bl	8009b2e <memcpy>
  indx +=  uuid_len;
 8008b08:	0020      	movs	r0, r4
 8008b0a:	183b      	adds	r3, r7, r0
 8008b0c:	1839      	adds	r1, r7, r0
 8008b0e:	19ba      	adds	r2, r7, r6
 8008b10:	7809      	ldrb	r1, [r1, #0]
 8008b12:	7812      	ldrb	r2, [r2, #0]
 8008b14:	188a      	adds	r2, r1, r2
 8008b16:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charValueLen;
 8008b18:	183b      	adds	r3, r7, r0
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	197a      	adds	r2, r7, r5
 8008b1e:	1d39      	adds	r1, r7, #4
 8008b20:	7809      	ldrb	r1, [r1, #0]
 8008b22:	54d1      	strb	r1, [r2, r3]
  indx++;
 8008b24:	183b      	adds	r3, r7, r0
 8008b26:	781a      	ldrb	r2, [r3, #0]
 8008b28:	0004      	movs	r4, r0
 8008b2a:	183b      	adds	r3, r7, r0
 8008b2c:	3201      	adds	r2, #1
 8008b2e:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charProperties;
 8008b30:	193b      	adds	r3, r7, r4
 8008b32:	781a      	ldrb	r2, [r3, #0]
 8008b34:	1979      	adds	r1, r7, r5
 8008b36:	2358      	movs	r3, #88	; 0x58
 8008b38:	2008      	movs	r0, #8
 8008b3a:	181b      	adds	r3, r3, r0
 8008b3c:	19db      	adds	r3, r3, r7
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	548b      	strb	r3, [r1, r2]
  indx++;
 8008b42:	193b      	adds	r3, r7, r4
 8008b44:	781a      	ldrb	r2, [r3, #0]
 8008b46:	193b      	adds	r3, r7, r4
 8008b48:	3201      	adds	r2, #1
 8008b4a:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = secPermissions;
 8008b4c:	193b      	adds	r3, r7, r4
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	197a      	adds	r2, r7, r5
 8008b52:	215c      	movs	r1, #92	; 0x5c
 8008b54:	1809      	adds	r1, r1, r0
 8008b56:	19c9      	adds	r1, r1, r7
 8008b58:	7809      	ldrb	r1, [r1, #0]
 8008b5a:	54d1      	strb	r1, [r2, r3]
  indx++;
 8008b5c:	193b      	adds	r3, r7, r4
 8008b5e:	781a      	ldrb	r2, [r3, #0]
 8008b60:	193b      	adds	r3, r7, r4
 8008b62:	3201      	adds	r2, #1
 8008b64:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = gattEvtMask;
 8008b66:	193b      	adds	r3, r7, r4
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	197a      	adds	r2, r7, r5
 8008b6c:	2160      	movs	r1, #96	; 0x60
 8008b6e:	1809      	adds	r1, r1, r0
 8008b70:	19c9      	adds	r1, r1, r7
 8008b72:	7809      	ldrb	r1, [r1, #0]
 8008b74:	54d1      	strb	r1, [r2, r3]
  indx++;
 8008b76:	193b      	adds	r3, r7, r4
 8008b78:	781a      	ldrb	r2, [r3, #0]
 8008b7a:	193b      	adds	r3, r7, r4
 8008b7c:	3201      	adds	r2, #1
 8008b7e:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = encryKeySize;
 8008b80:	193b      	adds	r3, r7, r4
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	197a      	adds	r2, r7, r5
 8008b86:	2164      	movs	r1, #100	; 0x64
 8008b88:	1809      	adds	r1, r1, r0
 8008b8a:	19c9      	adds	r1, r1, r7
 8008b8c:	7809      	ldrb	r1, [r1, #0]
 8008b8e:	54d1      	strb	r1, [r2, r3]
  indx++;
 8008b90:	193b      	adds	r3, r7, r4
 8008b92:	781a      	ldrb	r2, [r3, #0]
 8008b94:	193b      	adds	r3, r7, r4
 8008b96:	3201      	adds	r2, #1
 8008b98:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = isVariable;
 8008b9a:	193b      	adds	r3, r7, r4
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	197a      	adds	r2, r7, r5
 8008ba0:	2168      	movs	r1, #104	; 0x68
 8008ba2:	1809      	adds	r1, r1, r0
 8008ba4:	19c9      	adds	r1, r1, r7
 8008ba6:	7809      	ldrb	r1, [r1, #0]
 8008ba8:	54d1      	strb	r1, [r2, r3]
  indx++;
 8008baa:	193b      	adds	r3, r7, r4
 8008bac:	781a      	ldrb	r2, [r3, #0]
 8008bae:	193b      	adds	r3, r7, r4
 8008bb0:	3201      	adds	r2, #1
 8008bb2:	701a      	strb	r2, [r3, #0]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008bb4:	2328      	movs	r3, #40	; 0x28
 8008bb6:	18fb      	adds	r3, r7, r3
 8008bb8:	2203      	movs	r2, #3
 8008bba:	2100      	movs	r1, #0
 8008bbc:	0018      	movs	r0, r3
 8008bbe:	f000 ffbf 	bl	8009b40 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008bc2:	262c      	movs	r6, #44	; 0x2c
 8008bc4:	19bb      	adds	r3, r7, r6
 8008bc6:	2218      	movs	r2, #24
 8008bc8:	2100      	movs	r1, #0
 8008bca:	0018      	movs	r0, r3
 8008bcc:	f000 ffb8 	bl	8009b40 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008bd0:	0031      	movs	r1, r6
 8008bd2:	187b      	adds	r3, r7, r1
 8008bd4:	223f      	movs	r2, #63	; 0x3f
 8008bd6:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_ADD_CHAR;
 8008bd8:	187b      	adds	r3, r7, r1
 8008bda:	2282      	movs	r2, #130	; 0x82
 8008bdc:	0052      	lsls	r2, r2, #1
 8008bde:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 8008be0:	187b      	adds	r3, r7, r1
 8008be2:	197a      	adds	r2, r7, r5
 8008be4:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 8008be6:	193b      	adds	r3, r7, r4
 8008be8:	781a      	ldrb	r2, [r3, #0]
 8008bea:	187b      	adds	r3, r7, r1
 8008bec:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 8008bee:	187b      	adds	r3, r7, r1
 8008bf0:	2228      	movs	r2, #40	; 0x28
 8008bf2:	18ba      	adds	r2, r7, r2
 8008bf4:	611a      	str	r2, [r3, #16]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8008bf6:	187b      	adds	r3, r7, r1
 8008bf8:	2203      	movs	r2, #3
 8008bfa:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8008bfc:	187b      	adds	r3, r7, r1
 8008bfe:	2100      	movs	r1, #0
 8008c00:	0018      	movs	r0, r3
 8008c02:	f000 fab1 	bl	8009168 <hci_send_req>
 8008c06:	1e03      	subs	r3, r0, #0
 8008c08:	da01      	bge.n	8008c0e <aci_gatt_add_char+0x1a2>
    return BLE_STATUS_TIMEOUT;
 8008c0a:	23ff      	movs	r3, #255	; 0xff
 8008c0c:	e010      	b.n	8008c30 <aci_gatt_add_char+0x1c4>

  if (resp.status) {
 8008c0e:	2228      	movs	r2, #40	; 0x28
 8008c10:	18bb      	adds	r3, r7, r2
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d002      	beq.n	8008c1e <aci_gatt_add_char+0x1b2>
    return resp.status;
 8008c18:	18bb      	adds	r3, r7, r2
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	e008      	b.n	8008c30 <aci_gatt_add_char+0x1c4>
  }
    
  *charHandle = btohs(resp.handle);
 8008c1e:	2328      	movs	r3, #40	; 0x28
 8008c20:	18fb      	adds	r3, r7, r3
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	021b      	lsls	r3, r3, #8
 8008c26:	0c1b      	lsrs	r3, r3, #16
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c2c:	801a      	strh	r2, [r3, #0]

  return 0;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	0018      	movs	r0, r3
 8008c32:	46bd      	mov	sp, r7
 8008c34:	b013      	add	sp, #76	; 0x4c
 8008c36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c38 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8008c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c3a:	b0ab      	sub	sp, #172	; 0xac
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	0005      	movs	r5, r0
 8008c40:	000c      	movs	r4, r1
 8008c42:	0010      	movs	r0, r2
 8008c44:	0019      	movs	r1, r3
 8008c46:	1dbb      	adds	r3, r7, #6
 8008c48:	1c2a      	adds	r2, r5, #0
 8008c4a:	801a      	strh	r2, [r3, #0]
 8008c4c:	1d3b      	adds	r3, r7, #4
 8008c4e:	1c22      	adds	r2, r4, #0
 8008c50:	801a      	strh	r2, [r3, #0]
 8008c52:	1cfb      	adds	r3, r7, #3
 8008c54:	1c02      	adds	r2, r0, #0
 8008c56:	701a      	strb	r2, [r3, #0]
 8008c58:	1cbb      	adds	r3, r7, #2
 8008c5a:	1c0a      	adds	r2, r1, #0
 8008c5c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8008c5e:	23a7      	movs	r3, #167	; 0xa7
 8008c60:	18fb      	adds	r3, r7, r3
 8008c62:	2200      	movs	r2, #0
 8008c64:	701a      	strb	r2, [r3, #0]
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8008c66:	1cbb      	adds	r3, r7, #2
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	2b7a      	cmp	r3, #122	; 0x7a
 8008c6c:	d901      	bls.n	8008c72 <aci_gatt_update_char_value+0x3a>
    return BLE_STATUS_INVALID_PARAMS;
 8008c6e:	2342      	movs	r3, #66	; 0x42
 8008c70:	e082      	b.n	8008d78 <aci_gatt_update_char_value+0x140>

  servHandle = htobs(servHandle);
 8008c72:	1dbb      	adds	r3, r7, #6
 8008c74:	881a      	ldrh	r2, [r3, #0]
 8008c76:	1dbb      	adds	r3, r7, #6
 8008c78:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8008c7a:	24a7      	movs	r4, #167	; 0xa7
 8008c7c:	193b      	adds	r3, r7, r4
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	2508      	movs	r5, #8
 8008c82:	197a      	adds	r2, r7, r5
 8008c84:	18d3      	adds	r3, r2, r3
 8008c86:	1db9      	adds	r1, r7, #6
 8008c88:	2202      	movs	r2, #2
 8008c8a:	0018      	movs	r0, r3
 8008c8c:	f000 ff4f 	bl	8009b2e <memcpy>
  indx += 2;
 8008c90:	0021      	movs	r1, r4
 8008c92:	187b      	adds	r3, r7, r1
 8008c94:	187a      	adds	r2, r7, r1
 8008c96:	7812      	ldrb	r2, [r2, #0]
 8008c98:	3202      	adds	r2, #2
 8008c9a:	701a      	strb	r2, [r3, #0]
    
  charHandle = htobs(charHandle);
 8008c9c:	1d3b      	adds	r3, r7, #4
 8008c9e:	881a      	ldrh	r2, [r3, #0]
 8008ca0:	1d3b      	adds	r3, r7, #4
 8008ca2:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8008ca4:	000c      	movs	r4, r1
 8008ca6:	187b      	adds	r3, r7, r1
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	002e      	movs	r6, r5
 8008cac:	19ba      	adds	r2, r7, r6
 8008cae:	18d3      	adds	r3, r2, r3
 8008cb0:	1d39      	adds	r1, r7, #4
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	0018      	movs	r0, r3
 8008cb6:	f000 ff3a 	bl	8009b2e <memcpy>
  indx += 2;
 8008cba:	193b      	adds	r3, r7, r4
 8008cbc:	193a      	adds	r2, r7, r4
 8008cbe:	7812      	ldrb	r2, [r2, #0]
 8008cc0:	3202      	adds	r2, #2
 8008cc2:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charValOffset;
 8008cc4:	193b      	adds	r3, r7, r4
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	19ba      	adds	r2, r7, r6
 8008cca:	1cf9      	adds	r1, r7, #3
 8008ccc:	7809      	ldrb	r1, [r1, #0]
 8008cce:	54d1      	strb	r1, [r2, r3]
  indx++;
 8008cd0:	193b      	adds	r3, r7, r4
 8008cd2:	781a      	ldrb	r2, [r3, #0]
 8008cd4:	193b      	adds	r3, r7, r4
 8008cd6:	3201      	adds	r2, #1
 8008cd8:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charValueLen;
 8008cda:	193b      	adds	r3, r7, r4
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	19ba      	adds	r2, r7, r6
 8008ce0:	1cb9      	adds	r1, r7, #2
 8008ce2:	7809      	ldrb	r1, [r1, #0]
 8008ce4:	54d1      	strb	r1, [r2, r3]
  indx++;
 8008ce6:	193b      	adds	r3, r7, r4
 8008ce8:	781a      	ldrb	r2, [r3, #0]
 8008cea:	193b      	adds	r3, r7, r4
 8008cec:	3201      	adds	r2, #1
 8008cee:	701a      	strb	r2, [r3, #0]
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8008cf0:	193b      	adds	r3, r7, r4
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	19ba      	adds	r2, r7, r6
 8008cf6:	18d0      	adds	r0, r2, r3
 8008cf8:	1cbb      	adds	r3, r7, #2
 8008cfa:	781a      	ldrb	r2, [r3, #0]
 8008cfc:	23b8      	movs	r3, #184	; 0xb8
 8008cfe:	2108      	movs	r1, #8
 8008d00:	185b      	adds	r3, r3, r1
 8008d02:	19db      	adds	r3, r3, r7
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	0019      	movs	r1, r3
 8008d08:	f000 ff11 	bl	8009b2e <memcpy>
  indx +=  charValueLen;
 8008d0c:	193b      	adds	r3, r7, r4
 8008d0e:	1939      	adds	r1, r7, r4
 8008d10:	1cba      	adds	r2, r7, #2
 8008d12:	7809      	ldrb	r1, [r1, #0]
 8008d14:	7812      	ldrb	r2, [r2, #0]
 8008d16:	188a      	adds	r2, r1, r2
 8008d18:	701a      	strb	r2, [r3, #0]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008d1a:	258c      	movs	r5, #140	; 0x8c
 8008d1c:	197b      	adds	r3, r7, r5
 8008d1e:	2218      	movs	r2, #24
 8008d20:	2100      	movs	r1, #0
 8008d22:	0018      	movs	r0, r3
 8008d24:	f000 ff0c 	bl	8009b40 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008d28:	0029      	movs	r1, r5
 8008d2a:	187b      	adds	r3, r7, r1
 8008d2c:	223f      	movs	r2, #63	; 0x3f
 8008d2e:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8008d30:	187b      	adds	r3, r7, r1
 8008d32:	2283      	movs	r2, #131	; 0x83
 8008d34:	0052      	lsls	r2, r2, #1
 8008d36:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 8008d38:	187b      	adds	r3, r7, r1
 8008d3a:	19ba      	adds	r2, r7, r6
 8008d3c:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 8008d3e:	193b      	adds	r3, r7, r4
 8008d40:	781a      	ldrb	r2, [r3, #0]
 8008d42:	187b      	adds	r3, r7, r1
 8008d44:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8008d46:	187b      	adds	r3, r7, r1
 8008d48:	228b      	movs	r2, #139	; 0x8b
 8008d4a:	18ba      	adds	r2, r7, r2
 8008d4c:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8008d4e:	187b      	adds	r3, r7, r1
 8008d50:	2201      	movs	r2, #1
 8008d52:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8008d54:	187b      	adds	r3, r7, r1
 8008d56:	2100      	movs	r1, #0
 8008d58:	0018      	movs	r0, r3
 8008d5a:	f000 fa05 	bl	8009168 <hci_send_req>
 8008d5e:	1e03      	subs	r3, r0, #0
 8008d60:	da01      	bge.n	8008d66 <aci_gatt_update_char_value+0x12e>
    return BLE_STATUS_TIMEOUT;
 8008d62:	23ff      	movs	r3, #255	; 0xff
 8008d64:	e008      	b.n	8008d78 <aci_gatt_update_char_value+0x140>

  if (status) {
 8008d66:	228b      	movs	r2, #139	; 0x8b
 8008d68:	18bb      	adds	r3, r7, r2
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d002      	beq.n	8008d76 <aci_gatt_update_char_value+0x13e>
    return status;
 8008d70:	18bb      	adds	r3, r7, r2
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	e000      	b.n	8008d78 <aci_gatt_update_char_value+0x140>
  }

  return 0;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	0018      	movs	r0, r3
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	b02b      	add	sp, #172	; 0xac
 8008d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d80 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8008d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d82:	b0ab      	sub	sp, #172	; 0xac
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	603a      	str	r2, [r7, #0]
 8008d88:	1dfb      	adds	r3, r7, #7
 8008d8a:	1c02      	adds	r2, r0, #0
 8008d8c:	701a      	strb	r2, [r3, #0]
 8008d8e:	1dbb      	adds	r3, r7, #6
 8008d90:	1c0a      	adds	r2, r1, #0
 8008d92:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8008d94:	23a7      	movs	r3, #167	; 0xa7
 8008d96:	18fb      	adds	r3, r7, r3
 8008d98:	2200      	movs	r2, #0
 8008d9a:	701a      	strb	r2, [r3, #0]
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8008d9c:	1dbb      	adds	r3, r7, #6
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	2b7e      	cmp	r3, #126	; 0x7e
 8008da2:	d901      	bls.n	8008da8 <aci_hal_write_config_data+0x28>
    return BLE_STATUS_INVALID_PARAMS;
 8008da4:	2342      	movs	r3, #66	; 0x42
 8008da6:	e050      	b.n	8008e4a <aci_hal_write_config_data+0xca>

  buffer[indx] = offset;
 8008da8:	24a7      	movs	r4, #167	; 0xa7
 8008daa:	193b      	adds	r3, r7, r4
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	2608      	movs	r6, #8
 8008db0:	19ba      	adds	r2, r7, r6
 8008db2:	1df9      	adds	r1, r7, #7
 8008db4:	7809      	ldrb	r1, [r1, #0]
 8008db6:	54d1      	strb	r1, [r2, r3]
  indx++;
 8008db8:	193b      	adds	r3, r7, r4
 8008dba:	781a      	ldrb	r2, [r3, #0]
 8008dbc:	193b      	adds	r3, r7, r4
 8008dbe:	3201      	adds	r2, #1
 8008dc0:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = len;
 8008dc2:	193b      	adds	r3, r7, r4
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	19ba      	adds	r2, r7, r6
 8008dc8:	1db9      	adds	r1, r7, #6
 8008dca:	7809      	ldrb	r1, [r1, #0]
 8008dcc:	54d1      	strb	r1, [r2, r3]
  indx++;
 8008dce:	193b      	adds	r3, r7, r4
 8008dd0:	781a      	ldrb	r2, [r3, #0]
 8008dd2:	193b      	adds	r3, r7, r4
 8008dd4:	3201      	adds	r2, #1
 8008dd6:	701a      	strb	r2, [r3, #0]
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8008dd8:	193b      	adds	r3, r7, r4
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	19ba      	adds	r2, r7, r6
 8008dde:	18d0      	adds	r0, r2, r3
 8008de0:	1dbb      	adds	r3, r7, #6
 8008de2:	781a      	ldrb	r2, [r3, #0]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	0019      	movs	r1, r3
 8008de8:	f000 fea1 	bl	8009b2e <memcpy>
  indx +=  len;
 8008dec:	193b      	adds	r3, r7, r4
 8008dee:	1939      	adds	r1, r7, r4
 8008df0:	1dba      	adds	r2, r7, #6
 8008df2:	7809      	ldrb	r1, [r1, #0]
 8008df4:	7812      	ldrb	r2, [r2, #0]
 8008df6:	188a      	adds	r2, r1, r2
 8008df8:	701a      	strb	r2, [r3, #0]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008dfa:	258c      	movs	r5, #140	; 0x8c
 8008dfc:	197b      	adds	r3, r7, r5
 8008dfe:	2218      	movs	r2, #24
 8008e00:	2100      	movs	r1, #0
 8008e02:	0018      	movs	r0, r3
 8008e04:	f000 fe9c 	bl	8009b40 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008e08:	0029      	movs	r1, r5
 8008e0a:	187b      	adds	r3, r7, r1
 8008e0c:	223f      	movs	r2, #63	; 0x3f
 8008e0e:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8008e10:	187b      	adds	r3, r7, r1
 8008e12:	220c      	movs	r2, #12
 8008e14:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 8008e16:	187b      	adds	r3, r7, r1
 8008e18:	19ba      	adds	r2, r7, r6
 8008e1a:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 8008e1c:	193b      	adds	r3, r7, r4
 8008e1e:	781a      	ldrb	r2, [r3, #0]
 8008e20:	187b      	adds	r3, r7, r1
 8008e22:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8008e24:	187b      	adds	r3, r7, r1
 8008e26:	228b      	movs	r2, #139	; 0x8b
 8008e28:	18ba      	adds	r2, r7, r2
 8008e2a:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8008e2c:	187b      	adds	r3, r7, r1
 8008e2e:	2201      	movs	r2, #1
 8008e30:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8008e32:	187b      	adds	r3, r7, r1
 8008e34:	2100      	movs	r1, #0
 8008e36:	0018      	movs	r0, r3
 8008e38:	f000 f996 	bl	8009168 <hci_send_req>
 8008e3c:	1e03      	subs	r3, r0, #0
 8008e3e:	da01      	bge.n	8008e44 <aci_hal_write_config_data+0xc4>
    return BLE_STATUS_TIMEOUT;
 8008e40:	23ff      	movs	r3, #255	; 0xff
 8008e42:	e002      	b.n	8008e4a <aci_hal_write_config_data+0xca>

  return status;
 8008e44:	238b      	movs	r3, #139	; 0x8b
 8008e46:	18fb      	adds	r3, r7, r3
 8008e48:	781b      	ldrb	r3, [r3, #0]
}
 8008e4a:	0018      	movs	r0, r3
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	b02b      	add	sp, #172	; 0xac
 8008e50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e52 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8008e52:	b590      	push	{r4, r7, lr}
 8008e54:	b089      	sub	sp, #36	; 0x24
 8008e56:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008e58:	2408      	movs	r4, #8
 8008e5a:	193b      	adds	r3, r7, r4
 8008e5c:	2218      	movs	r2, #24
 8008e5e:	2100      	movs	r1, #0
 8008e60:	0018      	movs	r0, r3
 8008e62:	f000 fe6d 	bl	8009b40 <memset>
  rq.ogf = OGF_HOST_CTL;
 8008e66:	0021      	movs	r1, r4
 8008e68:	187b      	adds	r3, r7, r1
 8008e6a:	2203      	movs	r2, #3
 8008e6c:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_RESET;
 8008e6e:	187b      	adds	r3, r7, r1
 8008e70:	2203      	movs	r2, #3
 8008e72:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 8008e74:	187b      	adds	r3, r7, r1
 8008e76:	1dfa      	adds	r2, r7, #7
 8008e78:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8008e7a:	187b      	adds	r3, r7, r1
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	615a      	str	r2, [r3, #20]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008e80:	187b      	adds	r3, r7, r1
 8008e82:	2100      	movs	r1, #0
 8008e84:	0018      	movs	r0, r3
 8008e86:	f000 f96f 	bl	8009168 <hci_send_req>
 8008e8a:	1e03      	subs	r3, r0, #0
 8008e8c:	da01      	bge.n	8008e92 <hci_reset+0x40>
    return BLE_STATUS_TIMEOUT;
 8008e8e:	23ff      	movs	r3, #255	; 0xff
 8008e90:	e001      	b.n	8008e96 <hci_reset+0x44>
  
  return status;  
 8008e92:	1dfb      	adds	r3, r7, #7
 8008e94:	781b      	ldrb	r3, [r3, #0]
}
 8008e96:	0018      	movs	r0, r3
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	b009      	add	sp, #36	; 0x24
 8008e9c:	bd90      	pop	{r4, r7, pc}

08008e9e <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8008e9e:	b5b0      	push	{r4, r5, r7, lr}
 8008ea0:	b092      	sub	sp, #72	; 0x48
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	0002      	movs	r2, r0
 8008ea6:	6039      	str	r1, [r7, #0]
 8008ea8:	1dfb      	adds	r3, r7, #7
 8008eaa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8008eac:	2410      	movs	r4, #16
 8008eae:	193b      	adds	r3, r7, r4
 8008eb0:	2220      	movs	r2, #32
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	0018      	movs	r0, r3
 8008eb6:	f000 fe43 	bl	8009b40 <memset>
  scan_resp_cp.length = length;
 8008eba:	193b      	adds	r3, r7, r4
 8008ebc:	1dfa      	adds	r2, r7, #7
 8008ebe:	7812      	ldrb	r2, [r2, #0]
 8008ec0:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8008ec2:	1dfb      	adds	r3, r7, #7
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	2a1f      	cmp	r2, #31
 8008eca:	d900      	bls.n	8008ece <hci_le_set_scan_resp_data+0x30>
 8008ecc:	231f      	movs	r3, #31
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	001a      	movs	r2, r3
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	2510      	movs	r5, #16
 8008ed6:	197b      	adds	r3, r7, r5
 8008ed8:	3301      	adds	r3, #1
 8008eda:	0018      	movs	r0, r3
 8008edc:	f000 fe27 	bl	8009b2e <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008ee0:	2430      	movs	r4, #48	; 0x30
 8008ee2:	193b      	adds	r3, r7, r4
 8008ee4:	2218      	movs	r2, #24
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	0018      	movs	r0, r3
 8008eea:	f000 fe29 	bl	8009b40 <memset>
  rq.ogf = OGF_LE_CTL;
 8008eee:	0021      	movs	r1, r4
 8008ef0:	187b      	adds	r3, r7, r1
 8008ef2:	2208      	movs	r2, #8
 8008ef4:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8008ef6:	187b      	adds	r3, r7, r1
 8008ef8:	2209      	movs	r2, #9
 8008efa:	805a      	strh	r2, [r3, #2]
  rq.cparam = &scan_resp_cp;
 8008efc:	187b      	adds	r3, r7, r1
 8008efe:	197a      	adds	r2, r7, r5
 8008f00:	609a      	str	r2, [r3, #8]
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8008f02:	187b      	adds	r3, r7, r1
 8008f04:	2220      	movs	r2, #32
 8008f06:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8008f08:	187b      	adds	r3, r7, r1
 8008f0a:	220f      	movs	r2, #15
 8008f0c:	18ba      	adds	r2, r7, r2
 8008f0e:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8008f10:	187b      	adds	r3, r7, r1
 8008f12:	2201      	movs	r2, #1
 8008f14:	615a      	str	r2, [r3, #20]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008f16:	187b      	adds	r3, r7, r1
 8008f18:	2100      	movs	r1, #0
 8008f1a:	0018      	movs	r0, r3
 8008f1c:	f000 f924 	bl	8009168 <hci_send_req>
 8008f20:	1e03      	subs	r3, r0, #0
 8008f22:	da01      	bge.n	8008f28 <hci_le_set_scan_resp_data+0x8a>
    return BLE_STATUS_TIMEOUT;
 8008f24:	23ff      	movs	r3, #255	; 0xff
 8008f26:	e002      	b.n	8008f2e <hci_le_set_scan_resp_data+0x90>
  
  return status;
 8008f28:	230f      	movs	r3, #15
 8008f2a:	18fb      	adds	r3, r7, r3
 8008f2c:	781b      	ldrb	r3, [r3, #0]
}
 8008f2e:	0018      	movs	r0, r3
 8008f30:	46bd      	mov	sp, r7
 8008f32:	b012      	add	sp, #72	; 0x48
 8008f34:	bdb0      	pop	{r4, r5, r7, pc}

08008f36 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b084      	sub	sp, #16
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	3308      	adds	r3, #8
 8008f42:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	d001      	beq.n	8008f50 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e00c      	b.n	8008f6a <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	3302      	adds	r3, #2
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	0019      	movs	r1, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2288      	movs	r2, #136	; 0x88
 8008f5c:	5c9b      	ldrb	r3, [r3, r2]
 8008f5e:	3b03      	subs	r3, #3
 8008f60:	4299      	cmp	r1, r3
 8008f62:	d001      	beq.n	8008f68 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8008f64:	2302      	movs	r3, #2
 8008f66:	e000      	b.n	8008f6a <verify_packet+0x34>
  
  return 0;      
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	0018      	movs	r0, r3
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	b004      	add	sp, #16
 8008f70:	bd80      	pop	{r7, pc}
	...

08008f74 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8008f74:	b5b0      	push	{r4, r5, r7, lr}
 8008f76:	b0a6      	sub	sp, #152	; 0x98
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	0004      	movs	r4, r0
 8008f7c:	0008      	movs	r0, r1
 8008f7e:	0011      	movs	r1, r2
 8008f80:	607b      	str	r3, [r7, #4]
 8008f82:	250e      	movs	r5, #14
 8008f84:	197b      	adds	r3, r7, r5
 8008f86:	1c22      	adds	r2, r4, #0
 8008f88:	801a      	strh	r2, [r3, #0]
 8008f8a:	240c      	movs	r4, #12
 8008f8c:	193b      	adds	r3, r7, r4
 8008f8e:	1c02      	adds	r2, r0, #0
 8008f90:	801a      	strh	r2, [r3, #0]
 8008f92:	200b      	movs	r0, #11
 8008f94:	183b      	adds	r3, r7, r0
 8008f96:	1c0a      	adds	r2, r1, #0
 8008f98:	701a      	strb	r2, [r3, #0]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8008f9a:	193b      	adds	r3, r7, r4
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	5e9b      	ldrsh	r3, [r3, r2]
 8008fa0:	059b      	lsls	r3, r3, #22
 8008fa2:	0d9b      	lsrs	r3, r3, #22
 8008fa4:	b21a      	sxth	r2, r3
 8008fa6:	197b      	adds	r3, r7, r5
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	029b      	lsls	r3, r3, #10
 8008fac:	b21b      	sxth	r3, r3
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	b21b      	sxth	r3, r3
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	2114      	movs	r1, #20
 8008fb6:	187b      	adds	r3, r7, r1
 8008fb8:	801a      	strh	r2, [r3, #0]
  hc.plen = plen;
 8008fba:	187b      	adds	r3, r7, r1
 8008fbc:	0004      	movs	r4, r0
 8008fbe:	183a      	adds	r2, r7, r0
 8008fc0:	7812      	ldrb	r2, [r2, #0]
 8008fc2:	709a      	strb	r2, [r3, #2]

  payload[0] = HCI_COMMAND_PKT;
 8008fc4:	2518      	movs	r5, #24
 8008fc6:	197b      	adds	r3, r7, r5
 8008fc8:	2201      	movs	r2, #1
 8008fca:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8008fcc:	197b      	adds	r3, r7, r5
 8008fce:	3301      	adds	r3, #1
 8008fd0:	187a      	adds	r2, r7, r1
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	0011      	movs	r1, r2
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	001a      	movs	r2, r3
 8008fda:	f000 fda8 	bl	8009b2e <memcpy>
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8008fde:	197b      	adds	r3, r7, r5
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	193a      	adds	r2, r7, r4
 8008fe4:	7812      	ldrb	r2, [r2, #0]
 8008fe6:	6879      	ldr	r1, [r7, #4]
 8008fe8:	0018      	movs	r0, r3
 8008fea:	f000 fda0 	bl	8009b2e <memcpy>
  
  if (hciContext.io.Send)
 8008fee:	4b09      	ldr	r3, [pc, #36]	; (8009014 <send_cmd+0xa0>)
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d009      	beq.n	800900a <send_cmd+0x96>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8008ff6:	4b07      	ldr	r3, [pc, #28]	; (8009014 <send_cmd+0xa0>)
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	193a      	adds	r2, r7, r4
 8008ffc:	7812      	ldrb	r2, [r2, #0]
 8008ffe:	b292      	uxth	r2, r2
 8009000:	3204      	adds	r2, #4
 8009002:	b291      	uxth	r1, r2
 8009004:	197a      	adds	r2, r7, r5
 8009006:	0010      	movs	r0, r2
 8009008:	4798      	blx	r3
  }
}
 800900a:	46c0      	nop			; (mov r8, r8)
 800900c:	46bd      	mov	sp, r7
 800900e:	b026      	add	sp, #152	; 0x98
 8009010:	bdb0      	pop	{r4, r5, r7, pc}
 8009012:	46c0      	nop			; (mov r8, r8)
 8009014:	200007f4 	.word	0x200007f4

08009018 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8009022:	e00c      	b.n	800903e <move_list+0x26>
  {
    list_remove_tail(src_list, &tmp_node);
 8009024:	230c      	movs	r3, #12
 8009026:	18fa      	adds	r2, r7, r3
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	0011      	movs	r1, r2
 800902c:	0018      	movs	r0, r3
 800902e:	f000 fb13 	bl	8009658 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	0011      	movs	r1, r2
 8009038:	0018      	movs	r0, r3
 800903a:	f000 fa7f 	bl	800953c <list_insert_head>
  while (!list_is_empty(src_list))
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	0018      	movs	r0, r3
 8009042:	f000 fa55 	bl	80094f0 <list_is_empty>
 8009046:	1e03      	subs	r3, r0, #0
 8009048:	d0ec      	beq.n	8009024 <move_list+0xc>
  }
}
 800904a:	46c0      	nop			; (mov r8, r8)
 800904c:	46c0      	nop			; (mov r8, r8)
 800904e:	46bd      	mov	sp, r7
 8009050:	b004      	add	sp, #16
 8009052:	bd80      	pop	{r7, pc}

08009054 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800905a:	e00b      	b.n	8009074 <free_event_list+0x20>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800905c:	1d3a      	adds	r2, r7, #4
 800905e:	4b0b      	ldr	r3, [pc, #44]	; (800908c <free_event_list+0x38>)
 8009060:	0011      	movs	r1, r2
 8009062:	0018      	movs	r0, r3
 8009064:	f000 fad1 	bl	800960a <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	4b09      	ldr	r3, [pc, #36]	; (8009090 <free_event_list+0x3c>)
 800906c:	0011      	movs	r1, r2
 800906e:	0018      	movs	r0, r3
 8009070:	f000 fa88 	bl	8009584 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009074:	4b06      	ldr	r3, [pc, #24]	; (8009090 <free_event_list+0x3c>)
 8009076:	0018      	movs	r0, r3
 8009078:	f000 fb15 	bl	80096a6 <list_get_size>
 800907c:	0003      	movs	r3, r0
 800907e:	2b01      	cmp	r3, #1
 8009080:	ddec      	ble.n	800905c <free_event_list+0x8>
  }
}
 8009082:	46c0      	nop			; (mov r8, r8)
 8009084:	46c0      	nop			; (mov r8, r8)
 8009086:	46bd      	mov	sp, r7
 8009088:	b002      	add	sp, #8
 800908a:	bd80      	pop	{r7, pc}
 800908c:	20000530 	.word	0x20000530
 8009090:	20000528 	.word	0x20000528

08009094 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009094:	b590      	push	{r4, r7, lr}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 80090a4:	4b1d      	ldr	r3, [pc, #116]	; (800911c <hci_init+0x88>)
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	61da      	str	r2, [r3, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80090aa:	4b1d      	ldr	r3, [pc, #116]	; (8009120 <hci_init+0x8c>)
 80090ac:	0018      	movs	r0, r3
 80090ae:	f000 fa11 	bl	80094d4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 80090b2:	4b1c      	ldr	r3, [pc, #112]	; (8009124 <hci_init+0x90>)
 80090b4:	0018      	movs	r0, r3
 80090b6:	f000 fa0d 	bl	80094d4 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 80090ba:	f7f9 faed 	bl	8002698 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80090be:	230f      	movs	r3, #15
 80090c0:	18fb      	adds	r3, r7, r3
 80090c2:	2200      	movs	r2, #0
 80090c4:	701a      	strb	r2, [r3, #0]
 80090c6:	e010      	b.n	80090ea <hci_init+0x56>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80090c8:	240f      	movs	r4, #15
 80090ca:	193b      	adds	r3, r7, r4
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	228c      	movs	r2, #140	; 0x8c
 80090d0:	435a      	muls	r2, r3
 80090d2:	4b15      	ldr	r3, [pc, #84]	; (8009128 <hci_init+0x94>)
 80090d4:	18d2      	adds	r2, r2, r3
 80090d6:	4b12      	ldr	r3, [pc, #72]	; (8009120 <hci_init+0x8c>)
 80090d8:	0011      	movs	r1, r2
 80090da:	0018      	movs	r0, r3
 80090dc:	f000 fa52 	bl	8009584 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80090e0:	193b      	adds	r3, r7, r4
 80090e2:	781a      	ldrb	r2, [r3, #0]
 80090e4:	193b      	adds	r3, r7, r4
 80090e6:	3201      	adds	r2, #1
 80090e8:	701a      	strb	r2, [r3, #0]
 80090ea:	230f      	movs	r3, #15
 80090ec:	18fb      	adds	r3, r7, r3
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	2b04      	cmp	r3, #4
 80090f2:	d9e9      	bls.n	80090c8 <hci_init+0x34>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 80090f4:	4b09      	ldr	r3, [pc, #36]	; (800911c <hci_init+0x88>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d003      	beq.n	8009104 <hci_init+0x70>
 80090fc:	4b07      	ldr	r3, [pc, #28]	; (800911c <hci_init+0x88>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2000      	movs	r0, #0
 8009102:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8009104:	4b05      	ldr	r3, [pc, #20]	; (800911c <hci_init+0x88>)
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d002      	beq.n	8009112 <hci_init+0x7e>
 800910c:	4b03      	ldr	r3, [pc, #12]	; (800911c <hci_init+0x88>)
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	4798      	blx	r3
}
 8009112:	46c0      	nop			; (mov r8, r8)
 8009114:	46bd      	mov	sp, r7
 8009116:	b005      	add	sp, #20
 8009118:	bd90      	pop	{r4, r7, pc}
 800911a:	46c0      	nop			; (mov r8, r8)
 800911c:	200007f4 	.word	0x200007f4
 8009120:	20000528 	.word	0x20000528
 8009124:	20000530 	.word	0x20000530
 8009128:	20000538 	.word	0x20000538

0800912c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	4b0a      	ldr	r3, [pc, #40]	; (8009164 <hci_register_io_bus+0x38>)
 800913a:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	68da      	ldr	r2, [r3, #12]
 8009140:	4b08      	ldr	r3, [pc, #32]	; (8009164 <hci_register_io_bus+0x38>)
 8009142:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	691a      	ldr	r2, [r3, #16]
 8009148:	4b06      	ldr	r3, [pc, #24]	; (8009164 <hci_register_io_bus+0x38>)
 800914a:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	699a      	ldr	r2, [r3, #24]
 8009150:	4b04      	ldr	r3, [pc, #16]	; (8009164 <hci_register_io_bus+0x38>)
 8009152:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	689a      	ldr	r2, [r3, #8]
 8009158:	4b02      	ldr	r3, [pc, #8]	; (8009164 <hci_register_io_bus+0x38>)
 800915a:	609a      	str	r2, [r3, #8]
}
 800915c:	46c0      	nop			; (mov r8, r8)
 800915e:	46bd      	mov	sp, r7
 8009160:	b002      	add	sp, #8
 8009162:	bd80      	pop	{r7, pc}
 8009164:	200007f4 	.word	0x200007f4

08009168 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08e      	sub	sp, #56	; 0x38
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	000a      	movs	r2, r1
 8009172:	1cfb      	adds	r3, r7, #3
 8009174:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	885b      	ldrh	r3, [r3, #2]
 800917a:	b21b      	sxth	r3, r3
 800917c:	059b      	lsls	r3, r3, #22
 800917e:	0d9b      	lsrs	r3, r3, #22
 8009180:	b21a      	sxth	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	881b      	ldrh	r3, [r3, #0]
 8009186:	029b      	lsls	r3, r3, #10
 8009188:	b21b      	sxth	r3, r3
 800918a:	4313      	orrs	r3, r2
 800918c:	b21a      	sxth	r2, r3
 800918e:	2336      	movs	r3, #54	; 0x36
 8009190:	18fb      	adds	r3, r7, r3
 8009192:	801a      	strh	r2, [r3, #0]
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8009194:	2300      	movs	r3, #0
 8009196:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8009198:	2308      	movs	r3, #8
 800919a:	18fb      	adds	r3, r7, r3
 800919c:	0018      	movs	r0, r3
 800919e:	f000 f999 	bl	80094d4 <list_init_head>

  free_event_list();
 80091a2:	f7ff ff57 	bl	8009054 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	8818      	ldrh	r0, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	8859      	ldrh	r1, [r3, #2]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	b2da      	uxtb	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	f7ff fedc 	bl	8008f74 <send_cmd>
  
  if (async)
 80091bc:	1cfb      	adds	r3, r7, #3
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <hci_send_req+0x60>
  {
    return 0;
 80091c4:	2300      	movs	r3, #0
 80091c6:	e0f8      	b.n	80093ba <hci_send_req+0x252>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 80091c8:	f7fb fcfe 	bl	8004bc8 <HAL_GetTick>
 80091cc:	0003      	movs	r3, r0
 80091ce:	633b      	str	r3, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80091d0:	f7fb fcfa 	bl	8004bc8 <HAL_GetTick>
 80091d4:	0002      	movs	r2, r0
 80091d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d8:	1ad2      	subs	r2, r2, r3
 80091da:	23fa      	movs	r3, #250	; 0xfa
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	429a      	cmp	r2, r3
 80091e0:	d900      	bls.n	80091e4 <hci_send_req+0x7c>
 80091e2:	e0c2      	b.n	800936a <hci_send_req+0x202>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80091e4:	4b77      	ldr	r3, [pc, #476]	; (80093c4 <hci_send_req+0x25c>)
 80091e6:	0018      	movs	r0, r3
 80091e8:	f000 f982 	bl	80094f0 <list_is_empty>
 80091ec:	1e03      	subs	r3, r0, #0
 80091ee:	d000      	beq.n	80091f2 <hci_send_req+0x8a>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80091f0:	e7ee      	b.n	80091d0 <hci_send_req+0x68>
      {
        break;
 80091f2:	46c0      	nop			; (mov r8, r8)
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80091f4:	2310      	movs	r3, #16
 80091f6:	18fa      	adds	r2, r7, r3
 80091f8:	4b72      	ldr	r3, [pc, #456]	; (80093c4 <hci_send_req+0x25c>)
 80091fa:	0011      	movs	r1, r2
 80091fc:	0018      	movs	r0, r3
 80091fe:	f000 fa04 	bl	800960a <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	3308      	adds	r3, #8
 8009206:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8009208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	2b04      	cmp	r3, #4
 800920e:	d000      	beq.n	8009212 <hci_send_req+0xaa>
 8009210:	e085      	b.n	800931e <hci_send_req+0x1b6>
    {
      event_pckt = (void *)(hci_hdr->data);
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009214:	3301      	adds	r3, #1
 8009216:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	3308      	adds	r3, #8
 800921c:	3303      	adds	r3, #3
 800921e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	2288      	movs	r2, #136	; 0x88
 8009224:	5c9b      	ldrb	r3, [r3, r2]
 8009226:	3b03      	subs	r3, #3
 8009228:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800922a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	2b3e      	cmp	r3, #62	; 0x3e
 8009230:	d057      	beq.n	80092e2 <hci_send_req+0x17a>
 8009232:	dd00      	ble.n	8009236 <hci_send_req+0xce>
 8009234:	e075      	b.n	8009322 <hci_send_req+0x1ba>
 8009236:	2b10      	cmp	r3, #16
 8009238:	d100      	bne.n	800923c <hci_send_req+0xd4>
 800923a:	e098      	b.n	800936e <hci_send_req+0x206>
 800923c:	dd00      	ble.n	8009240 <hci_send_req+0xd8>
 800923e:	e070      	b.n	8009322 <hci_send_req+0x1ba>
 8009240:	2b0e      	cmp	r3, #14
 8009242:	d02a      	beq.n	800929a <hci_send_req+0x132>
 8009244:	2b0f      	cmp	r3, #15
 8009246:	d000      	beq.n	800924a <hci_send_req+0xe2>
 8009248:	e06b      	b.n	8009322 <hci_send_req+0x1ba>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	789a      	ldrb	r2, [r3, #2]
 8009252:	78db      	ldrb	r3, [r3, #3]
 8009254:	021b      	lsls	r3, r3, #8
 8009256:	4313      	orrs	r3, r2
 8009258:	b29b      	uxth	r3, r3
 800925a:	2236      	movs	r2, #54	; 0x36
 800925c:	18ba      	adds	r2, r7, r2
 800925e:	8812      	ldrh	r2, [r2, #0]
 8009260:	429a      	cmp	r2, r3
 8009262:	d000      	beq.n	8009266 <hci_send_req+0xfe>
 8009264:	e085      	b.n	8009372 <hci_send_req+0x20a>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	2b0f      	cmp	r3, #15
 800926c:	d004      	beq.n	8009278 <hci_send_req+0x110>
          if (cs->status) {
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d057      	beq.n	8009326 <hci_send_req+0x1be>
            goto failed;
 8009276:	e07f      	b.n	8009378 <hci_send_req+0x210>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	695a      	ldr	r2, [r3, #20]
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	4293      	cmp	r3, r2
 8009280:	d900      	bls.n	8009284 <hci_send_req+0x11c>
 8009282:	0013      	movs	r3, r2
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6918      	ldr	r0, [r3, #16]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	695a      	ldr	r2, [r3, #20]
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	0019      	movs	r1, r3
 8009294:	f000 fc4b 	bl	8009b2e <memcpy>
        goto done;
 8009298:	e081      	b.n	800939e <hci_send_req+0x236>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800929a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929c:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	785a      	ldrb	r2, [r3, #1]
 80092a2:	789b      	ldrb	r3, [r3, #2]
 80092a4:	021b      	lsls	r3, r3, #8
 80092a6:	4313      	orrs	r3, r2
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	2236      	movs	r2, #54	; 0x36
 80092ac:	18ba      	adds	r2, r7, r2
 80092ae:	8812      	ldrh	r2, [r2, #0]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d160      	bne.n	8009376 <hci_send_req+0x20e>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	3303      	adds	r3, #3
 80092b8:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	3b03      	subs	r3, #3
 80092be:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	695a      	ldr	r2, [r3, #20]
 80092c4:	6a3b      	ldr	r3, [r7, #32]
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d900      	bls.n	80092cc <hci_send_req+0x164>
 80092ca:	0013      	movs	r3, r2
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6918      	ldr	r0, [r3, #16]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	695a      	ldr	r2, [r3, #20]
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	0019      	movs	r1, r3
 80092dc:	f000 fc27 	bl	8009b2e <memcpy>
        goto done;
 80092e0:	e05d      	b.n	800939e <hci_send_req+0x236>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	001a      	movs	r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d11a      	bne.n	800932a <hci_send_req+0x1c2>
          break;
      
        len -= 1;
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	3b01      	subs	r3, #1
 80092f8:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	695a      	ldr	r2, [r3, #20]
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	4293      	cmp	r3, r2
 8009302:	d900      	bls.n	8009306 <hci_send_req+0x19e>
 8009304:	0013      	movs	r3, r2
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6918      	ldr	r0, [r3, #16]
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	1c59      	adds	r1, r3, #1
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	001a      	movs	r2, r3
 8009318:	f000 fc09 	bl	8009b2e <memcpy>
        goto done;
 800931c:	e03f      	b.n	800939e <hci_send_req+0x236>
        goto failed;
      
      default:      
        break;
      }
    }
 800931e:	46c0      	nop			; (mov r8, r8)
 8009320:	e004      	b.n	800932c <hci_send_req+0x1c4>
        break;
 8009322:	46c0      	nop			; (mov r8, r8)
 8009324:	e002      	b.n	800932c <hci_send_req+0x1c4>
          break;
 8009326:	46c0      	nop			; (mov r8, r8)
 8009328:	e000      	b.n	800932c <hci_send_req+0x1c4>
          break;
 800932a:	46c0      	nop			; (mov r8, r8)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800932c:	4b26      	ldr	r3, [pc, #152]	; (80093c8 <hci_send_req+0x260>)
 800932e:	0018      	movs	r0, r3
 8009330:	f000 f8de 	bl	80094f0 <list_is_empty>
 8009334:	1e03      	subs	r3, r0, #0
 8009336:	d00e      	beq.n	8009356 <hci_send_req+0x1ee>
 8009338:	4b22      	ldr	r3, [pc, #136]	; (80093c4 <hci_send_req+0x25c>)
 800933a:	0018      	movs	r0, r3
 800933c:	f000 f8d8 	bl	80094f0 <list_is_empty>
 8009340:	1e03      	subs	r3, r0, #0
 8009342:	d008      	beq.n	8009356 <hci_send_req+0x1ee>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	4b20      	ldr	r3, [pc, #128]	; (80093c8 <hci_send_req+0x260>)
 8009348:	0011      	movs	r1, r2
 800934a:	0018      	movs	r0, r3
 800934c:	f000 f91a 	bl	8009584 <list_insert_tail>
      hciReadPacket=NULL;
 8009350:	2300      	movs	r3, #0
 8009352:	613b      	str	r3, [r7, #16]
 8009354:	e008      	b.n	8009368 <hci_send_req+0x200>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	2308      	movs	r3, #8
 800935a:	18fb      	adds	r3, r7, r3
 800935c:	0011      	movs	r1, r2
 800935e:	0018      	movs	r0, r3
 8009360:	f000 f910 	bl	8009584 <list_insert_tail>
      hciReadPacket=NULL;
 8009364:	2300      	movs	r3, #0
 8009366:	613b      	str	r3, [r7, #16]
  {
 8009368:	e72e      	b.n	80091c8 <hci_send_req+0x60>
        goto failed;
 800936a:	46c0      	nop			; (mov r8, r8)
 800936c:	e004      	b.n	8009378 <hci_send_req+0x210>
        goto failed;
 800936e:	46c0      	nop			; (mov r8, r8)
 8009370:	e002      	b.n	8009378 <hci_send_req+0x210>
          goto failed;
 8009372:	46c0      	nop			; (mov r8, r8)
 8009374:	e000      	b.n	8009378 <hci_send_req+0x210>
          goto failed;
 8009376:	46c0      	nop			; (mov r8, r8)
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d005      	beq.n	800938a <hci_send_req+0x222>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	4b11      	ldr	r3, [pc, #68]	; (80093c8 <hci_send_req+0x260>)
 8009382:	0011      	movs	r1, r2
 8009384:	0018      	movs	r0, r3
 8009386:	f000 f8d9 	bl	800953c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800938a:	2308      	movs	r3, #8
 800938c:	18fa      	adds	r2, r7, r3
 800938e:	4b0d      	ldr	r3, [pc, #52]	; (80093c4 <hci_send_req+0x25c>)
 8009390:	0011      	movs	r1, r2
 8009392:	0018      	movs	r0, r3
 8009394:	f7ff fe40 	bl	8009018 <move_list>

  return -1;
 8009398:	2301      	movs	r3, #1
 800939a:	425b      	negs	r3, r3
 800939c:	e00d      	b.n	80093ba <hci_send_req+0x252>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	4b09      	ldr	r3, [pc, #36]	; (80093c8 <hci_send_req+0x260>)
 80093a2:	0011      	movs	r1, r2
 80093a4:	0018      	movs	r0, r3
 80093a6:	f000 f8c9 	bl	800953c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80093aa:	2308      	movs	r3, #8
 80093ac:	18fa      	adds	r2, r7, r3
 80093ae:	4b05      	ldr	r3, [pc, #20]	; (80093c4 <hci_send_req+0x25c>)
 80093b0:	0011      	movs	r1, r2
 80093b2:	0018      	movs	r0, r3
 80093b4:	f7ff fe30 	bl	8009018 <move_list>

  return 0;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	0018      	movs	r0, r3
 80093bc:	46bd      	mov	sp, r7
 80093be:	b00e      	add	sp, #56	; 0x38
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	46c0      	nop			; (mov r8, r8)
 80093c4:	20000530 	.word	0x20000530
 80093c8:	20000528 	.word	0x20000528

080093cc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80093d2:	2300      	movs	r3, #0
 80093d4:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80093d6:	e015      	b.n	8009404 <hci_user_evt_proc+0x38>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80093d8:	1d3a      	adds	r2, r7, #4
 80093da:	4b10      	ldr	r3, [pc, #64]	; (800941c <hci_user_evt_proc+0x50>)
 80093dc:	0011      	movs	r1, r2
 80093de:	0018      	movs	r0, r3
 80093e0:	f000 f913 	bl	800960a <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80093e4:	4b0e      	ldr	r3, [pc, #56]	; (8009420 <hci_user_evt_proc+0x54>)
 80093e6:	69db      	ldr	r3, [r3, #28]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d005      	beq.n	80093f8 <hci_user_evt_proc+0x2c>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80093ec:	4b0c      	ldr	r3, [pc, #48]	; (8009420 <hci_user_evt_proc+0x54>)
 80093ee:	69db      	ldr	r3, [r3, #28]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	3208      	adds	r2, #8
 80093f4:	0010      	movs	r0, r2
 80093f6:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	4b0a      	ldr	r3, [pc, #40]	; (8009424 <hci_user_evt_proc+0x58>)
 80093fc:	0011      	movs	r1, r2
 80093fe:	0018      	movs	r0, r3
 8009400:	f000 f8c0 	bl	8009584 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009404:	4b05      	ldr	r3, [pc, #20]	; (800941c <hci_user_evt_proc+0x50>)
 8009406:	0018      	movs	r0, r3
 8009408:	f000 f872 	bl	80094f0 <list_is_empty>
 800940c:	1e03      	subs	r3, r0, #0
 800940e:	d0e3      	beq.n	80093d8 <hci_user_evt_proc+0xc>
  }
}
 8009410:	46c0      	nop			; (mov r8, r8)
 8009412:	46c0      	nop			; (mov r8, r8)
 8009414:	46bd      	mov	sp, r7
 8009416:	b002      	add	sp, #8
 8009418:	bd80      	pop	{r7, pc}
 800941a:	46c0      	nop			; (mov r8, r8)
 800941c:	20000530 	.word	0x20000530
 8009420:	200007f4 	.word	0x200007f4
 8009424:	20000528 	.word	0x20000528

08009428 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8009430:	2300      	movs	r3, #0
 8009432:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009438:	4b23      	ldr	r3, [pc, #140]	; (80094c8 <hci_notify_asynch_evt+0xa0>)
 800943a:	0018      	movs	r0, r3
 800943c:	f000 f858 	bl	80094f0 <list_is_empty>
 8009440:	1e03      	subs	r3, r0, #0
 8009442:	d13a      	bne.n	80094ba <hci_notify_asynch_evt+0x92>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8009444:	230c      	movs	r3, #12
 8009446:	18fa      	adds	r2, r7, r3
 8009448:	4b1f      	ldr	r3, [pc, #124]	; (80094c8 <hci_notify_asynch_evt+0xa0>)
 800944a:	0011      	movs	r1, r2
 800944c:	0018      	movs	r0, r3
 800944e:	f000 f8dc 	bl	800960a <list_remove_head>
    
    if (hciContext.io.Receive)
 8009452:	4b1e      	ldr	r3, [pc, #120]	; (80094cc <hci_notify_asynch_evt+0xa4>)
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d031      	beq.n	80094be <hci_notify_asynch_evt+0x96>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800945a:	4b1c      	ldr	r3, [pc, #112]	; (80094cc <hci_notify_asynch_evt+0xa4>)
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	3208      	adds	r2, #8
 8009462:	2180      	movs	r1, #128	; 0x80
 8009464:	0010      	movs	r0, r2
 8009466:	4798      	blx	r3
 8009468:	0002      	movs	r2, r0
 800946a:	2113      	movs	r1, #19
 800946c:	187b      	adds	r3, r7, r1
 800946e:	701a      	strb	r2, [r3, #0]
      if (data_len > 0)
 8009470:	000a      	movs	r2, r1
 8009472:	18bb      	adds	r3, r7, r2
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d018      	beq.n	80094ac <hci_notify_asynch_evt+0x84>
      {                    
        hciReadPacket->data_len = data_len;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	18ba      	adds	r2, r7, r2
 800947e:	2188      	movs	r1, #136	; 0x88
 8009480:	7812      	ldrb	r2, [r2, #0]
 8009482:	545a      	strb	r2, [r3, r1]
        if (verify_packet(hciReadPacket) == 0)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	0018      	movs	r0, r3
 8009488:	f7ff fd55 	bl	8008f36 <verify_packet>
 800948c:	1e03      	subs	r3, r0, #0
 800948e:	d106      	bne.n	800949e <hci_notify_asynch_evt+0x76>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	4b0f      	ldr	r3, [pc, #60]	; (80094d0 <hci_notify_asynch_evt+0xa8>)
 8009494:	0011      	movs	r1, r2
 8009496:	0018      	movs	r0, r3
 8009498:	f000 f874 	bl	8009584 <list_insert_tail>
 800949c:	e00f      	b.n	80094be <hci_notify_asynch_evt+0x96>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	4b09      	ldr	r3, [pc, #36]	; (80094c8 <hci_notify_asynch_evt+0xa0>)
 80094a2:	0011      	movs	r1, r2
 80094a4:	0018      	movs	r0, r3
 80094a6:	f000 f849 	bl	800953c <list_insert_head>
 80094aa:	e008      	b.n	80094be <hci_notify_asynch_evt+0x96>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	4b06      	ldr	r3, [pc, #24]	; (80094c8 <hci_notify_asynch_evt+0xa0>)
 80094b0:	0011      	movs	r1, r2
 80094b2:	0018      	movs	r0, r3
 80094b4:	f000 f842 	bl	800953c <list_insert_head>
 80094b8:	e001      	b.n	80094be <hci_notify_asynch_evt+0x96>
      }
    }
  }
  else 
  {
    ret = 1;
 80094ba:	2301      	movs	r3, #1
 80094bc:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80094be:	697b      	ldr	r3, [r7, #20]

}
 80094c0:	0018      	movs	r0, r3
 80094c2:	46bd      	mov	sp, r7
 80094c4:	b006      	add	sp, #24
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	20000528 	.word	0x20000528
 80094cc:	200007f4 	.word	0x200007f4
 80094d0:	20000530 	.word	0x20000530

080094d4 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	605a      	str	r2, [r3, #4]
}
 80094e8:	46c0      	nop			; (mov r8, r8)
 80094ea:	46bd      	mov	sp, r7
 80094ec:	b002      	add	sp, #8
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094f8:	f3ef 8310 	mrs	r3, PRIMASK
 80094fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80094fe:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009500:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009502:	b672      	cpsid	i
}
 8009504:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	429a      	cmp	r2, r3
 800950e:	d104      	bne.n	800951a <list_is_empty+0x2a>
  {
    return_value = 1;
 8009510:	2317      	movs	r3, #23
 8009512:	18fb      	adds	r3, r7, r3
 8009514:	2201      	movs	r2, #1
 8009516:	701a      	strb	r2, [r3, #0]
 8009518:	e003      	b.n	8009522 <list_is_empty+0x32>
  }
  else
  {
    return_value = 0;
 800951a:	2317      	movs	r3, #23
 800951c:	18fb      	adds	r3, r7, r3
 800951e:	2200      	movs	r2, #0
 8009520:	701a      	strb	r2, [r3, #0]
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	f383 8810 	msr	PRIMASK, r3
}
 800952c:	46c0      	nop			; (mov r8, r8)
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800952e:	2317      	movs	r3, #23
 8009530:	18fb      	adds	r3, r7, r3
 8009532:	781b      	ldrb	r3, [r3, #0]
}
 8009534:	0018      	movs	r0, r3
 8009536:	46bd      	mov	sp, r7
 8009538:	b006      	add	sp, #24
 800953a:	bd80      	pop	{r7, pc}

0800953c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009546:	f3ef 8310 	mrs	r3, PRIMASK
 800954a:	60fb      	str	r3, [r7, #12]
  return(result);
 800954c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800954e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009550:	b672      	cpsid	i
}
 8009552:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	683a      	ldr	r2, [r7, #0]
 8009566:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	605a      	str	r2, [r3, #4]
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	f383 8810 	msr	PRIMASK, r3
}
 800957a:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800957c:	46c0      	nop			; (mov r8, r8)
 800957e:	46bd      	mov	sp, r7
 8009580:	b006      	add	sp, #24
 8009582:	bd80      	pop	{r7, pc}

08009584 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800958e:	f3ef 8310 	mrs	r3, PRIMASK
 8009592:	60fb      	str	r3, [r7, #12]
  return(result);
 8009594:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009596:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009598:	b672      	cpsid	i
}
 800959a:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	685a      	ldr	r2, [r3, #4]
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	683a      	ldr	r2, [r7, #0]
 80095ae:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	601a      	str	r2, [r3, #0]
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	f383 8810 	msr	PRIMASK, r3
}
 80095c2:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80095c4:	46c0      	nop			; (mov r8, r8)
 80095c6:	46bd      	mov	sp, r7
 80095c8:	b006      	add	sp, #24
 80095ca:	bd80      	pop	{r7, pc}

080095cc <list_remove_node>:

void list_remove_node (tListNode * node)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095d4:	f3ef 8310 	mrs	r3, PRIMASK
 80095d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80095da:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80095dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80095de:	b672      	cpsid	i
}
 80095e0:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	6812      	ldr	r2, [r2, #0]
 80095ea:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	6852      	ldr	r2, [r2, #4]
 80095f4:	605a      	str	r2, [r3, #4]
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	f383 8810 	msr	PRIMASK, r3
}
 8009600:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009602:	46c0      	nop			; (mov r8, r8)
 8009604:	46bd      	mov	sp, r7
 8009606:	b006      	add	sp, #24
 8009608:	bd80      	pop	{r7, pc}

0800960a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b086      	sub	sp, #24
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009614:	f3ef 8310 	mrs	r3, PRIMASK
 8009618:	60fb      	str	r3, [r7, #12]
  return(result);
 800961a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800961c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800961e:	b672      	cpsid	i
}
 8009620:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	0018      	movs	r0, r3
 8009630:	f7ff ffcc 	bl	80095cc <list_remove_node>
  (*node)->next = NULL;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2200      	movs	r2, #0
 800963a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2200      	movs	r2, #0
 8009642:	605a      	str	r2, [r3, #4]
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	f383 8810 	msr	PRIMASK, r3
}
 800964e:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009650:	46c0      	nop			; (mov r8, r8)
 8009652:	46bd      	mov	sp, r7
 8009654:	b006      	add	sp, #24
 8009656:	bd80      	pop	{r7, pc}

08009658 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009662:	f3ef 8310 	mrs	r3, PRIMASK
 8009666:	60fb      	str	r3, [r7, #12]
  return(result);
 8009668:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800966a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800966c:	b672      	cpsid	i
}
 800966e:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	0018      	movs	r0, r3
 800967e:	f7ff ffa5 	bl	80095cc <list_remove_node>
  (*node)->next = NULL;
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2200      	movs	r2, #0
 8009688:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2200      	movs	r2, #0
 8009690:	605a      	str	r2, [r3, #4]
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	f383 8810 	msr	PRIMASK, r3
}
 800969c:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800969e:	46c0      	nop			; (mov r8, r8)
 80096a0:	46bd      	mov	sp, r7
 80096a2:	b006      	add	sp, #24
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b088      	sub	sp, #32
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  int size = 0;
 80096ae:	2300      	movs	r3, #0
 80096b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096b2:	f3ef 8310 	mrs	r3, PRIMASK
 80096b6:	613b      	str	r3, [r7, #16]
  return(result);
 80096b8:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80096ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80096bc:	b672      	cpsid	i
}
 80096be:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80096c6:	e005      	b.n	80096d4 <list_get_size+0x2e>
  {
    size++;
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	3301      	adds	r3, #1
 80096cc:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80096d4:	69ba      	ldr	r2, [r7, #24]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d1f5      	bne.n	80096c8 <list_get_size+0x22>
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f383 8810 	msr	PRIMASK, r3
}
 80096e6:	46c0      	nop			; (mov r8, r8)
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80096e8:	69fb      	ldr	r3, [r7, #28]
}
 80096ea:	0018      	movs	r0, r3
 80096ec:	46bd      	mov	sp, r7
 80096ee:	b008      	add	sp, #32
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <__aeabi_memclr>:
 80096f2:	b510      	push	{r4, lr}
 80096f4:	2200      	movs	r2, #0
 80096f6:	f000 f801 	bl	80096fc <__aeabi_memset>
 80096fa:	bd10      	pop	{r4, pc}

080096fc <__aeabi_memset>:
 80096fc:	000b      	movs	r3, r1
 80096fe:	b510      	push	{r4, lr}
 8009700:	0011      	movs	r1, r2
 8009702:	001a      	movs	r2, r3
 8009704:	f000 fa1c 	bl	8009b40 <memset>
 8009708:	bd10      	pop	{r4, pc}
	...

0800970c <__errno>:
 800970c:	4b01      	ldr	r3, [pc, #4]	; (8009714 <__errno+0x8>)
 800970e:	6818      	ldr	r0, [r3, #0]
 8009710:	4770      	bx	lr
 8009712:	46c0      	nop			; (mov r8, r8)
 8009714:	2000005c 	.word	0x2000005c

08009718 <__sflush_r>:
 8009718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800971a:	898b      	ldrh	r3, [r1, #12]
 800971c:	0005      	movs	r5, r0
 800971e:	000c      	movs	r4, r1
 8009720:	071a      	lsls	r2, r3, #28
 8009722:	d45f      	bmi.n	80097e4 <__sflush_r+0xcc>
 8009724:	684a      	ldr	r2, [r1, #4]
 8009726:	2a00      	cmp	r2, #0
 8009728:	dc04      	bgt.n	8009734 <__sflush_r+0x1c>
 800972a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800972c:	2a00      	cmp	r2, #0
 800972e:	dc01      	bgt.n	8009734 <__sflush_r+0x1c>
 8009730:	2000      	movs	r0, #0
 8009732:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009734:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009736:	2f00      	cmp	r7, #0
 8009738:	d0fa      	beq.n	8009730 <__sflush_r+0x18>
 800973a:	2200      	movs	r2, #0
 800973c:	2180      	movs	r1, #128	; 0x80
 800973e:	682e      	ldr	r6, [r5, #0]
 8009740:	602a      	str	r2, [r5, #0]
 8009742:	001a      	movs	r2, r3
 8009744:	0149      	lsls	r1, r1, #5
 8009746:	400a      	ands	r2, r1
 8009748:	420b      	tst	r3, r1
 800974a:	d034      	beq.n	80097b6 <__sflush_r+0x9e>
 800974c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800974e:	89a3      	ldrh	r3, [r4, #12]
 8009750:	075b      	lsls	r3, r3, #29
 8009752:	d506      	bpl.n	8009762 <__sflush_r+0x4a>
 8009754:	6863      	ldr	r3, [r4, #4]
 8009756:	1ac0      	subs	r0, r0, r3
 8009758:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <__sflush_r+0x4a>
 800975e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009760:	1ac0      	subs	r0, r0, r3
 8009762:	0002      	movs	r2, r0
 8009764:	6a21      	ldr	r1, [r4, #32]
 8009766:	2300      	movs	r3, #0
 8009768:	0028      	movs	r0, r5
 800976a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800976c:	47b8      	blx	r7
 800976e:	89a1      	ldrh	r1, [r4, #12]
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d106      	bne.n	8009782 <__sflush_r+0x6a>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	2b1d      	cmp	r3, #29
 8009778:	d831      	bhi.n	80097de <__sflush_r+0xc6>
 800977a:	4a2c      	ldr	r2, [pc, #176]	; (800982c <__sflush_r+0x114>)
 800977c:	40da      	lsrs	r2, r3
 800977e:	07d3      	lsls	r3, r2, #31
 8009780:	d52d      	bpl.n	80097de <__sflush_r+0xc6>
 8009782:	2300      	movs	r3, #0
 8009784:	6063      	str	r3, [r4, #4]
 8009786:	6923      	ldr	r3, [r4, #16]
 8009788:	6023      	str	r3, [r4, #0]
 800978a:	04cb      	lsls	r3, r1, #19
 800978c:	d505      	bpl.n	800979a <__sflush_r+0x82>
 800978e:	1c43      	adds	r3, r0, #1
 8009790:	d102      	bne.n	8009798 <__sflush_r+0x80>
 8009792:	682b      	ldr	r3, [r5, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d100      	bne.n	800979a <__sflush_r+0x82>
 8009798:	6560      	str	r0, [r4, #84]	; 0x54
 800979a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800979c:	602e      	str	r6, [r5, #0]
 800979e:	2900      	cmp	r1, #0
 80097a0:	d0c6      	beq.n	8009730 <__sflush_r+0x18>
 80097a2:	0023      	movs	r3, r4
 80097a4:	3344      	adds	r3, #68	; 0x44
 80097a6:	4299      	cmp	r1, r3
 80097a8:	d002      	beq.n	80097b0 <__sflush_r+0x98>
 80097aa:	0028      	movs	r0, r5
 80097ac:	f000 f9d0 	bl	8009b50 <_free_r>
 80097b0:	2000      	movs	r0, #0
 80097b2:	6360      	str	r0, [r4, #52]	; 0x34
 80097b4:	e7bd      	b.n	8009732 <__sflush_r+0x1a>
 80097b6:	2301      	movs	r3, #1
 80097b8:	0028      	movs	r0, r5
 80097ba:	6a21      	ldr	r1, [r4, #32]
 80097bc:	47b8      	blx	r7
 80097be:	1c43      	adds	r3, r0, #1
 80097c0:	d1c5      	bne.n	800974e <__sflush_r+0x36>
 80097c2:	682b      	ldr	r3, [r5, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d0c2      	beq.n	800974e <__sflush_r+0x36>
 80097c8:	2b1d      	cmp	r3, #29
 80097ca:	d001      	beq.n	80097d0 <__sflush_r+0xb8>
 80097cc:	2b16      	cmp	r3, #22
 80097ce:	d101      	bne.n	80097d4 <__sflush_r+0xbc>
 80097d0:	602e      	str	r6, [r5, #0]
 80097d2:	e7ad      	b.n	8009730 <__sflush_r+0x18>
 80097d4:	2340      	movs	r3, #64	; 0x40
 80097d6:	89a2      	ldrh	r2, [r4, #12]
 80097d8:	4313      	orrs	r3, r2
 80097da:	81a3      	strh	r3, [r4, #12]
 80097dc:	e7a9      	b.n	8009732 <__sflush_r+0x1a>
 80097de:	2340      	movs	r3, #64	; 0x40
 80097e0:	430b      	orrs	r3, r1
 80097e2:	e7fa      	b.n	80097da <__sflush_r+0xc2>
 80097e4:	690f      	ldr	r7, [r1, #16]
 80097e6:	2f00      	cmp	r7, #0
 80097e8:	d0a2      	beq.n	8009730 <__sflush_r+0x18>
 80097ea:	680a      	ldr	r2, [r1, #0]
 80097ec:	600f      	str	r7, [r1, #0]
 80097ee:	1bd2      	subs	r2, r2, r7
 80097f0:	9201      	str	r2, [sp, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	079b      	lsls	r3, r3, #30
 80097f6:	d100      	bne.n	80097fa <__sflush_r+0xe2>
 80097f8:	694a      	ldr	r2, [r1, #20]
 80097fa:	60a2      	str	r2, [r4, #8]
 80097fc:	9b01      	ldr	r3, [sp, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	dc00      	bgt.n	8009804 <__sflush_r+0xec>
 8009802:	e795      	b.n	8009730 <__sflush_r+0x18>
 8009804:	003a      	movs	r2, r7
 8009806:	0028      	movs	r0, r5
 8009808:	9b01      	ldr	r3, [sp, #4]
 800980a:	6a21      	ldr	r1, [r4, #32]
 800980c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800980e:	47b0      	blx	r6
 8009810:	2800      	cmp	r0, #0
 8009812:	dc06      	bgt.n	8009822 <__sflush_r+0x10a>
 8009814:	2340      	movs	r3, #64	; 0x40
 8009816:	2001      	movs	r0, #1
 8009818:	89a2      	ldrh	r2, [r4, #12]
 800981a:	4240      	negs	r0, r0
 800981c:	4313      	orrs	r3, r2
 800981e:	81a3      	strh	r3, [r4, #12]
 8009820:	e787      	b.n	8009732 <__sflush_r+0x1a>
 8009822:	9b01      	ldr	r3, [sp, #4]
 8009824:	183f      	adds	r7, r7, r0
 8009826:	1a1b      	subs	r3, r3, r0
 8009828:	9301      	str	r3, [sp, #4]
 800982a:	e7e7      	b.n	80097fc <__sflush_r+0xe4>
 800982c:	20400001 	.word	0x20400001

08009830 <_fflush_r>:
 8009830:	690b      	ldr	r3, [r1, #16]
 8009832:	b570      	push	{r4, r5, r6, lr}
 8009834:	0005      	movs	r5, r0
 8009836:	000c      	movs	r4, r1
 8009838:	2b00      	cmp	r3, #0
 800983a:	d102      	bne.n	8009842 <_fflush_r+0x12>
 800983c:	2500      	movs	r5, #0
 800983e:	0028      	movs	r0, r5
 8009840:	bd70      	pop	{r4, r5, r6, pc}
 8009842:	2800      	cmp	r0, #0
 8009844:	d004      	beq.n	8009850 <_fflush_r+0x20>
 8009846:	6983      	ldr	r3, [r0, #24]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d101      	bne.n	8009850 <_fflush_r+0x20>
 800984c:	f000 f8a8 	bl	80099a0 <__sinit>
 8009850:	4b14      	ldr	r3, [pc, #80]	; (80098a4 <_fflush_r+0x74>)
 8009852:	429c      	cmp	r4, r3
 8009854:	d11b      	bne.n	800988e <_fflush_r+0x5e>
 8009856:	686c      	ldr	r4, [r5, #4]
 8009858:	220c      	movs	r2, #12
 800985a:	5ea3      	ldrsh	r3, [r4, r2]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d0ed      	beq.n	800983c <_fflush_r+0xc>
 8009860:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009862:	07d2      	lsls	r2, r2, #31
 8009864:	d404      	bmi.n	8009870 <_fflush_r+0x40>
 8009866:	059b      	lsls	r3, r3, #22
 8009868:	d402      	bmi.n	8009870 <_fflush_r+0x40>
 800986a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800986c:	f000 f95d 	bl	8009b2a <__retarget_lock_acquire_recursive>
 8009870:	0028      	movs	r0, r5
 8009872:	0021      	movs	r1, r4
 8009874:	f7ff ff50 	bl	8009718 <__sflush_r>
 8009878:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800987a:	0005      	movs	r5, r0
 800987c:	07db      	lsls	r3, r3, #31
 800987e:	d4de      	bmi.n	800983e <_fflush_r+0xe>
 8009880:	89a3      	ldrh	r3, [r4, #12]
 8009882:	059b      	lsls	r3, r3, #22
 8009884:	d4db      	bmi.n	800983e <_fflush_r+0xe>
 8009886:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009888:	f000 f950 	bl	8009b2c <__retarget_lock_release_recursive>
 800988c:	e7d7      	b.n	800983e <_fflush_r+0xe>
 800988e:	4b06      	ldr	r3, [pc, #24]	; (80098a8 <_fflush_r+0x78>)
 8009890:	429c      	cmp	r4, r3
 8009892:	d101      	bne.n	8009898 <_fflush_r+0x68>
 8009894:	68ac      	ldr	r4, [r5, #8]
 8009896:	e7df      	b.n	8009858 <_fflush_r+0x28>
 8009898:	4b04      	ldr	r3, [pc, #16]	; (80098ac <_fflush_r+0x7c>)
 800989a:	429c      	cmp	r4, r3
 800989c:	d1dc      	bne.n	8009858 <_fflush_r+0x28>
 800989e:	68ec      	ldr	r4, [r5, #12]
 80098a0:	e7da      	b.n	8009858 <_fflush_r+0x28>
 80098a2:	46c0      	nop			; (mov r8, r8)
 80098a4:	0800b6a0 	.word	0x0800b6a0
 80098a8:	0800b6c0 	.word	0x0800b6c0
 80098ac:	0800b680 	.word	0x0800b680

080098b0 <fflush>:
 80098b0:	0001      	movs	r1, r0
 80098b2:	b510      	push	{r4, lr}
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d105      	bne.n	80098c4 <fflush+0x14>
 80098b8:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <fflush+0x20>)
 80098ba:	4906      	ldr	r1, [pc, #24]	; (80098d4 <fflush+0x24>)
 80098bc:	6818      	ldr	r0, [r3, #0]
 80098be:	f000 f8ef 	bl	8009aa0 <_fwalk_reent>
 80098c2:	bd10      	pop	{r4, pc}
 80098c4:	4b04      	ldr	r3, [pc, #16]	; (80098d8 <fflush+0x28>)
 80098c6:	6818      	ldr	r0, [r3, #0]
 80098c8:	f7ff ffb2 	bl	8009830 <_fflush_r>
 80098cc:	e7f9      	b.n	80098c2 <fflush+0x12>
 80098ce:	46c0      	nop			; (mov r8, r8)
 80098d0:	0800b6e0 	.word	0x0800b6e0
 80098d4:	08009831 	.word	0x08009831
 80098d8:	2000005c 	.word	0x2000005c

080098dc <std>:
 80098dc:	2300      	movs	r3, #0
 80098de:	b510      	push	{r4, lr}
 80098e0:	0004      	movs	r4, r0
 80098e2:	6003      	str	r3, [r0, #0]
 80098e4:	6043      	str	r3, [r0, #4]
 80098e6:	6083      	str	r3, [r0, #8]
 80098e8:	8181      	strh	r1, [r0, #12]
 80098ea:	6643      	str	r3, [r0, #100]	; 0x64
 80098ec:	0019      	movs	r1, r3
 80098ee:	81c2      	strh	r2, [r0, #14]
 80098f0:	6103      	str	r3, [r0, #16]
 80098f2:	6143      	str	r3, [r0, #20]
 80098f4:	6183      	str	r3, [r0, #24]
 80098f6:	2208      	movs	r2, #8
 80098f8:	305c      	adds	r0, #92	; 0x5c
 80098fa:	f000 f921 	bl	8009b40 <memset>
 80098fe:	4b05      	ldr	r3, [pc, #20]	; (8009914 <std+0x38>)
 8009900:	6224      	str	r4, [r4, #32]
 8009902:	6263      	str	r3, [r4, #36]	; 0x24
 8009904:	4b04      	ldr	r3, [pc, #16]	; (8009918 <std+0x3c>)
 8009906:	62a3      	str	r3, [r4, #40]	; 0x28
 8009908:	4b04      	ldr	r3, [pc, #16]	; (800991c <std+0x40>)
 800990a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800990c:	4b04      	ldr	r3, [pc, #16]	; (8009920 <std+0x44>)
 800990e:	6323      	str	r3, [r4, #48]	; 0x30
 8009910:	bd10      	pop	{r4, pc}
 8009912:	46c0      	nop			; (mov r8, r8)
 8009914:	08009ea5 	.word	0x08009ea5
 8009918:	08009ecd 	.word	0x08009ecd
 800991c:	08009f05 	.word	0x08009f05
 8009920:	08009f31 	.word	0x08009f31

08009924 <_cleanup_r>:
 8009924:	b510      	push	{r4, lr}
 8009926:	4902      	ldr	r1, [pc, #8]	; (8009930 <_cleanup_r+0xc>)
 8009928:	f000 f8ba 	bl	8009aa0 <_fwalk_reent>
 800992c:	bd10      	pop	{r4, pc}
 800992e:	46c0      	nop			; (mov r8, r8)
 8009930:	08009831 	.word	0x08009831

08009934 <__sfmoreglue>:
 8009934:	b570      	push	{r4, r5, r6, lr}
 8009936:	2568      	movs	r5, #104	; 0x68
 8009938:	1e4a      	subs	r2, r1, #1
 800993a:	4355      	muls	r5, r2
 800993c:	000e      	movs	r6, r1
 800993e:	0029      	movs	r1, r5
 8009940:	3174      	adds	r1, #116	; 0x74
 8009942:	f000 f971 	bl	8009c28 <_malloc_r>
 8009946:	1e04      	subs	r4, r0, #0
 8009948:	d008      	beq.n	800995c <__sfmoreglue+0x28>
 800994a:	2100      	movs	r1, #0
 800994c:	002a      	movs	r2, r5
 800994e:	6001      	str	r1, [r0, #0]
 8009950:	6046      	str	r6, [r0, #4]
 8009952:	300c      	adds	r0, #12
 8009954:	60a0      	str	r0, [r4, #8]
 8009956:	3268      	adds	r2, #104	; 0x68
 8009958:	f000 f8f2 	bl	8009b40 <memset>
 800995c:	0020      	movs	r0, r4
 800995e:	bd70      	pop	{r4, r5, r6, pc}

08009960 <__sfp_lock_acquire>:
 8009960:	b510      	push	{r4, lr}
 8009962:	4802      	ldr	r0, [pc, #8]	; (800996c <__sfp_lock_acquire+0xc>)
 8009964:	f000 f8e1 	bl	8009b2a <__retarget_lock_acquire_recursive>
 8009968:	bd10      	pop	{r4, pc}
 800996a:	46c0      	nop			; (mov r8, r8)
 800996c:	20000815 	.word	0x20000815

08009970 <__sfp_lock_release>:
 8009970:	b510      	push	{r4, lr}
 8009972:	4802      	ldr	r0, [pc, #8]	; (800997c <__sfp_lock_release+0xc>)
 8009974:	f000 f8da 	bl	8009b2c <__retarget_lock_release_recursive>
 8009978:	bd10      	pop	{r4, pc}
 800997a:	46c0      	nop			; (mov r8, r8)
 800997c:	20000815 	.word	0x20000815

08009980 <__sinit_lock_acquire>:
 8009980:	b510      	push	{r4, lr}
 8009982:	4802      	ldr	r0, [pc, #8]	; (800998c <__sinit_lock_acquire+0xc>)
 8009984:	f000 f8d1 	bl	8009b2a <__retarget_lock_acquire_recursive>
 8009988:	bd10      	pop	{r4, pc}
 800998a:	46c0      	nop			; (mov r8, r8)
 800998c:	20000816 	.word	0x20000816

08009990 <__sinit_lock_release>:
 8009990:	b510      	push	{r4, lr}
 8009992:	4802      	ldr	r0, [pc, #8]	; (800999c <__sinit_lock_release+0xc>)
 8009994:	f000 f8ca 	bl	8009b2c <__retarget_lock_release_recursive>
 8009998:	bd10      	pop	{r4, pc}
 800999a:	46c0      	nop			; (mov r8, r8)
 800999c:	20000816 	.word	0x20000816

080099a0 <__sinit>:
 80099a0:	b513      	push	{r0, r1, r4, lr}
 80099a2:	0004      	movs	r4, r0
 80099a4:	f7ff ffec 	bl	8009980 <__sinit_lock_acquire>
 80099a8:	69a3      	ldr	r3, [r4, #24]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d002      	beq.n	80099b4 <__sinit+0x14>
 80099ae:	f7ff ffef 	bl	8009990 <__sinit_lock_release>
 80099b2:	bd13      	pop	{r0, r1, r4, pc}
 80099b4:	64a3      	str	r3, [r4, #72]	; 0x48
 80099b6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80099b8:	6523      	str	r3, [r4, #80]	; 0x50
 80099ba:	4b13      	ldr	r3, [pc, #76]	; (8009a08 <__sinit+0x68>)
 80099bc:	4a13      	ldr	r2, [pc, #76]	; (8009a0c <__sinit+0x6c>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80099c2:	9301      	str	r3, [sp, #4]
 80099c4:	42a3      	cmp	r3, r4
 80099c6:	d101      	bne.n	80099cc <__sinit+0x2c>
 80099c8:	2301      	movs	r3, #1
 80099ca:	61a3      	str	r3, [r4, #24]
 80099cc:	0020      	movs	r0, r4
 80099ce:	f000 f81f 	bl	8009a10 <__sfp>
 80099d2:	6060      	str	r0, [r4, #4]
 80099d4:	0020      	movs	r0, r4
 80099d6:	f000 f81b 	bl	8009a10 <__sfp>
 80099da:	60a0      	str	r0, [r4, #8]
 80099dc:	0020      	movs	r0, r4
 80099de:	f000 f817 	bl	8009a10 <__sfp>
 80099e2:	2200      	movs	r2, #0
 80099e4:	2104      	movs	r1, #4
 80099e6:	60e0      	str	r0, [r4, #12]
 80099e8:	6860      	ldr	r0, [r4, #4]
 80099ea:	f7ff ff77 	bl	80098dc <std>
 80099ee:	2201      	movs	r2, #1
 80099f0:	2109      	movs	r1, #9
 80099f2:	68a0      	ldr	r0, [r4, #8]
 80099f4:	f7ff ff72 	bl	80098dc <std>
 80099f8:	2202      	movs	r2, #2
 80099fa:	2112      	movs	r1, #18
 80099fc:	68e0      	ldr	r0, [r4, #12]
 80099fe:	f7ff ff6d 	bl	80098dc <std>
 8009a02:	2301      	movs	r3, #1
 8009a04:	61a3      	str	r3, [r4, #24]
 8009a06:	e7d2      	b.n	80099ae <__sinit+0xe>
 8009a08:	0800b6e0 	.word	0x0800b6e0
 8009a0c:	08009925 	.word	0x08009925

08009a10 <__sfp>:
 8009a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a12:	0007      	movs	r7, r0
 8009a14:	f7ff ffa4 	bl	8009960 <__sfp_lock_acquire>
 8009a18:	4b1f      	ldr	r3, [pc, #124]	; (8009a98 <__sfp+0x88>)
 8009a1a:	681e      	ldr	r6, [r3, #0]
 8009a1c:	69b3      	ldr	r3, [r6, #24]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d102      	bne.n	8009a28 <__sfp+0x18>
 8009a22:	0030      	movs	r0, r6
 8009a24:	f7ff ffbc 	bl	80099a0 <__sinit>
 8009a28:	3648      	adds	r6, #72	; 0x48
 8009a2a:	68b4      	ldr	r4, [r6, #8]
 8009a2c:	6873      	ldr	r3, [r6, #4]
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	d504      	bpl.n	8009a3c <__sfp+0x2c>
 8009a32:	6833      	ldr	r3, [r6, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d022      	beq.n	8009a7e <__sfp+0x6e>
 8009a38:	6836      	ldr	r6, [r6, #0]
 8009a3a:	e7f6      	b.n	8009a2a <__sfp+0x1a>
 8009a3c:	220c      	movs	r2, #12
 8009a3e:	5ea5      	ldrsh	r5, [r4, r2]
 8009a40:	2d00      	cmp	r5, #0
 8009a42:	d11a      	bne.n	8009a7a <__sfp+0x6a>
 8009a44:	0020      	movs	r0, r4
 8009a46:	4b15      	ldr	r3, [pc, #84]	; (8009a9c <__sfp+0x8c>)
 8009a48:	3058      	adds	r0, #88	; 0x58
 8009a4a:	60e3      	str	r3, [r4, #12]
 8009a4c:	6665      	str	r5, [r4, #100]	; 0x64
 8009a4e:	f000 f86b 	bl	8009b28 <__retarget_lock_init_recursive>
 8009a52:	f7ff ff8d 	bl	8009970 <__sfp_lock_release>
 8009a56:	0020      	movs	r0, r4
 8009a58:	2208      	movs	r2, #8
 8009a5a:	0029      	movs	r1, r5
 8009a5c:	6025      	str	r5, [r4, #0]
 8009a5e:	60a5      	str	r5, [r4, #8]
 8009a60:	6065      	str	r5, [r4, #4]
 8009a62:	6125      	str	r5, [r4, #16]
 8009a64:	6165      	str	r5, [r4, #20]
 8009a66:	61a5      	str	r5, [r4, #24]
 8009a68:	305c      	adds	r0, #92	; 0x5c
 8009a6a:	f000 f869 	bl	8009b40 <memset>
 8009a6e:	6365      	str	r5, [r4, #52]	; 0x34
 8009a70:	63a5      	str	r5, [r4, #56]	; 0x38
 8009a72:	64a5      	str	r5, [r4, #72]	; 0x48
 8009a74:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009a76:	0020      	movs	r0, r4
 8009a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a7a:	3468      	adds	r4, #104	; 0x68
 8009a7c:	e7d7      	b.n	8009a2e <__sfp+0x1e>
 8009a7e:	2104      	movs	r1, #4
 8009a80:	0038      	movs	r0, r7
 8009a82:	f7ff ff57 	bl	8009934 <__sfmoreglue>
 8009a86:	1e04      	subs	r4, r0, #0
 8009a88:	6030      	str	r0, [r6, #0]
 8009a8a:	d1d5      	bne.n	8009a38 <__sfp+0x28>
 8009a8c:	f7ff ff70 	bl	8009970 <__sfp_lock_release>
 8009a90:	230c      	movs	r3, #12
 8009a92:	603b      	str	r3, [r7, #0]
 8009a94:	e7ef      	b.n	8009a76 <__sfp+0x66>
 8009a96:	46c0      	nop			; (mov r8, r8)
 8009a98:	0800b6e0 	.word	0x0800b6e0
 8009a9c:	ffff0001 	.word	0xffff0001

08009aa0 <_fwalk_reent>:
 8009aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aa2:	0004      	movs	r4, r0
 8009aa4:	0006      	movs	r6, r0
 8009aa6:	2700      	movs	r7, #0
 8009aa8:	9101      	str	r1, [sp, #4]
 8009aaa:	3448      	adds	r4, #72	; 0x48
 8009aac:	6863      	ldr	r3, [r4, #4]
 8009aae:	68a5      	ldr	r5, [r4, #8]
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	9b00      	ldr	r3, [sp, #0]
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	d504      	bpl.n	8009ac4 <_fwalk_reent+0x24>
 8009aba:	6824      	ldr	r4, [r4, #0]
 8009abc:	2c00      	cmp	r4, #0
 8009abe:	d1f5      	bne.n	8009aac <_fwalk_reent+0xc>
 8009ac0:	0038      	movs	r0, r7
 8009ac2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ac4:	89ab      	ldrh	r3, [r5, #12]
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d908      	bls.n	8009adc <_fwalk_reent+0x3c>
 8009aca:	220e      	movs	r2, #14
 8009acc:	5eab      	ldrsh	r3, [r5, r2]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	d004      	beq.n	8009adc <_fwalk_reent+0x3c>
 8009ad2:	0029      	movs	r1, r5
 8009ad4:	0030      	movs	r0, r6
 8009ad6:	9b01      	ldr	r3, [sp, #4]
 8009ad8:	4798      	blx	r3
 8009ada:	4307      	orrs	r7, r0
 8009adc:	3568      	adds	r5, #104	; 0x68
 8009ade:	e7e8      	b.n	8009ab2 <_fwalk_reent+0x12>

08009ae0 <__libc_init_array>:
 8009ae0:	b570      	push	{r4, r5, r6, lr}
 8009ae2:	2600      	movs	r6, #0
 8009ae4:	4d0c      	ldr	r5, [pc, #48]	; (8009b18 <__libc_init_array+0x38>)
 8009ae6:	4c0d      	ldr	r4, [pc, #52]	; (8009b1c <__libc_init_array+0x3c>)
 8009ae8:	1b64      	subs	r4, r4, r5
 8009aea:	10a4      	asrs	r4, r4, #2
 8009aec:	42a6      	cmp	r6, r4
 8009aee:	d109      	bne.n	8009b04 <__libc_init_array+0x24>
 8009af0:	2600      	movs	r6, #0
 8009af2:	f001 f87b 	bl	800abec <_init>
 8009af6:	4d0a      	ldr	r5, [pc, #40]	; (8009b20 <__libc_init_array+0x40>)
 8009af8:	4c0a      	ldr	r4, [pc, #40]	; (8009b24 <__libc_init_array+0x44>)
 8009afa:	1b64      	subs	r4, r4, r5
 8009afc:	10a4      	asrs	r4, r4, #2
 8009afe:	42a6      	cmp	r6, r4
 8009b00:	d105      	bne.n	8009b0e <__libc_init_array+0x2e>
 8009b02:	bd70      	pop	{r4, r5, r6, pc}
 8009b04:	00b3      	lsls	r3, r6, #2
 8009b06:	58eb      	ldr	r3, [r5, r3]
 8009b08:	4798      	blx	r3
 8009b0a:	3601      	adds	r6, #1
 8009b0c:	e7ee      	b.n	8009aec <__libc_init_array+0xc>
 8009b0e:	00b3      	lsls	r3, r6, #2
 8009b10:	58eb      	ldr	r3, [r5, r3]
 8009b12:	4798      	blx	r3
 8009b14:	3601      	adds	r6, #1
 8009b16:	e7f2      	b.n	8009afe <__libc_init_array+0x1e>
 8009b18:	0800bc20 	.word	0x0800bc20
 8009b1c:	0800bc20 	.word	0x0800bc20
 8009b20:	0800bc20 	.word	0x0800bc20
 8009b24:	0800bc24 	.word	0x0800bc24

08009b28 <__retarget_lock_init_recursive>:
 8009b28:	4770      	bx	lr

08009b2a <__retarget_lock_acquire_recursive>:
 8009b2a:	4770      	bx	lr

08009b2c <__retarget_lock_release_recursive>:
 8009b2c:	4770      	bx	lr

08009b2e <memcpy>:
 8009b2e:	2300      	movs	r3, #0
 8009b30:	b510      	push	{r4, lr}
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d100      	bne.n	8009b38 <memcpy+0xa>
 8009b36:	bd10      	pop	{r4, pc}
 8009b38:	5ccc      	ldrb	r4, [r1, r3]
 8009b3a:	54c4      	strb	r4, [r0, r3]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	e7f8      	b.n	8009b32 <memcpy+0x4>

08009b40 <memset>:
 8009b40:	0003      	movs	r3, r0
 8009b42:	1882      	adds	r2, r0, r2
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d100      	bne.n	8009b4a <memset+0xa>
 8009b48:	4770      	bx	lr
 8009b4a:	7019      	strb	r1, [r3, #0]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	e7f9      	b.n	8009b44 <memset+0x4>

08009b50 <_free_r>:
 8009b50:	b570      	push	{r4, r5, r6, lr}
 8009b52:	0005      	movs	r5, r0
 8009b54:	2900      	cmp	r1, #0
 8009b56:	d010      	beq.n	8009b7a <_free_r+0x2a>
 8009b58:	1f0c      	subs	r4, r1, #4
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	da00      	bge.n	8009b62 <_free_r+0x12>
 8009b60:	18e4      	adds	r4, r4, r3
 8009b62:	0028      	movs	r0, r5
 8009b64:	f000 fb5e 	bl	800a224 <__malloc_lock>
 8009b68:	4a1d      	ldr	r2, [pc, #116]	; (8009be0 <_free_r+0x90>)
 8009b6a:	6813      	ldr	r3, [r2, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d105      	bne.n	8009b7c <_free_r+0x2c>
 8009b70:	6063      	str	r3, [r4, #4]
 8009b72:	6014      	str	r4, [r2, #0]
 8009b74:	0028      	movs	r0, r5
 8009b76:	f000 fb5d 	bl	800a234 <__malloc_unlock>
 8009b7a:	bd70      	pop	{r4, r5, r6, pc}
 8009b7c:	42a3      	cmp	r3, r4
 8009b7e:	d908      	bls.n	8009b92 <_free_r+0x42>
 8009b80:	6821      	ldr	r1, [r4, #0]
 8009b82:	1860      	adds	r0, r4, r1
 8009b84:	4283      	cmp	r3, r0
 8009b86:	d1f3      	bne.n	8009b70 <_free_r+0x20>
 8009b88:	6818      	ldr	r0, [r3, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	1841      	adds	r1, r0, r1
 8009b8e:	6021      	str	r1, [r4, #0]
 8009b90:	e7ee      	b.n	8009b70 <_free_r+0x20>
 8009b92:	001a      	movs	r2, r3
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <_free_r+0x4e>
 8009b9a:	42a3      	cmp	r3, r4
 8009b9c:	d9f9      	bls.n	8009b92 <_free_r+0x42>
 8009b9e:	6811      	ldr	r1, [r2, #0]
 8009ba0:	1850      	adds	r0, r2, r1
 8009ba2:	42a0      	cmp	r0, r4
 8009ba4:	d10b      	bne.n	8009bbe <_free_r+0x6e>
 8009ba6:	6820      	ldr	r0, [r4, #0]
 8009ba8:	1809      	adds	r1, r1, r0
 8009baa:	1850      	adds	r0, r2, r1
 8009bac:	6011      	str	r1, [r2, #0]
 8009bae:	4283      	cmp	r3, r0
 8009bb0:	d1e0      	bne.n	8009b74 <_free_r+0x24>
 8009bb2:	6818      	ldr	r0, [r3, #0]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	1841      	adds	r1, r0, r1
 8009bb8:	6011      	str	r1, [r2, #0]
 8009bba:	6053      	str	r3, [r2, #4]
 8009bbc:	e7da      	b.n	8009b74 <_free_r+0x24>
 8009bbe:	42a0      	cmp	r0, r4
 8009bc0:	d902      	bls.n	8009bc8 <_free_r+0x78>
 8009bc2:	230c      	movs	r3, #12
 8009bc4:	602b      	str	r3, [r5, #0]
 8009bc6:	e7d5      	b.n	8009b74 <_free_r+0x24>
 8009bc8:	6821      	ldr	r1, [r4, #0]
 8009bca:	1860      	adds	r0, r4, r1
 8009bcc:	4283      	cmp	r3, r0
 8009bce:	d103      	bne.n	8009bd8 <_free_r+0x88>
 8009bd0:	6818      	ldr	r0, [r3, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	1841      	adds	r1, r0, r1
 8009bd6:	6021      	str	r1, [r4, #0]
 8009bd8:	6063      	str	r3, [r4, #4]
 8009bda:	6054      	str	r4, [r2, #4]
 8009bdc:	e7ca      	b.n	8009b74 <_free_r+0x24>
 8009bde:	46c0      	nop			; (mov r8, r8)
 8009be0:	20000818 	.word	0x20000818

08009be4 <sbrk_aligned>:
 8009be4:	b570      	push	{r4, r5, r6, lr}
 8009be6:	4e0f      	ldr	r6, [pc, #60]	; (8009c24 <sbrk_aligned+0x40>)
 8009be8:	000d      	movs	r5, r1
 8009bea:	6831      	ldr	r1, [r6, #0]
 8009bec:	0004      	movs	r4, r0
 8009bee:	2900      	cmp	r1, #0
 8009bf0:	d102      	bne.n	8009bf8 <sbrk_aligned+0x14>
 8009bf2:	f000 f925 	bl	8009e40 <_sbrk_r>
 8009bf6:	6030      	str	r0, [r6, #0]
 8009bf8:	0029      	movs	r1, r5
 8009bfa:	0020      	movs	r0, r4
 8009bfc:	f000 f920 	bl	8009e40 <_sbrk_r>
 8009c00:	1c43      	adds	r3, r0, #1
 8009c02:	d00a      	beq.n	8009c1a <sbrk_aligned+0x36>
 8009c04:	2303      	movs	r3, #3
 8009c06:	1cc5      	adds	r5, r0, #3
 8009c08:	439d      	bics	r5, r3
 8009c0a:	42a8      	cmp	r0, r5
 8009c0c:	d007      	beq.n	8009c1e <sbrk_aligned+0x3a>
 8009c0e:	1a29      	subs	r1, r5, r0
 8009c10:	0020      	movs	r0, r4
 8009c12:	f000 f915 	bl	8009e40 <_sbrk_r>
 8009c16:	1c43      	adds	r3, r0, #1
 8009c18:	d101      	bne.n	8009c1e <sbrk_aligned+0x3a>
 8009c1a:	2501      	movs	r5, #1
 8009c1c:	426d      	negs	r5, r5
 8009c1e:	0028      	movs	r0, r5
 8009c20:	bd70      	pop	{r4, r5, r6, pc}
 8009c22:	46c0      	nop			; (mov r8, r8)
 8009c24:	2000081c 	.word	0x2000081c

08009c28 <_malloc_r>:
 8009c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c2a:	2203      	movs	r2, #3
 8009c2c:	1ccb      	adds	r3, r1, #3
 8009c2e:	4393      	bics	r3, r2
 8009c30:	3308      	adds	r3, #8
 8009c32:	0006      	movs	r6, r0
 8009c34:	001f      	movs	r7, r3
 8009c36:	2b0c      	cmp	r3, #12
 8009c38:	d232      	bcs.n	8009ca0 <_malloc_r+0x78>
 8009c3a:	270c      	movs	r7, #12
 8009c3c:	42b9      	cmp	r1, r7
 8009c3e:	d831      	bhi.n	8009ca4 <_malloc_r+0x7c>
 8009c40:	0030      	movs	r0, r6
 8009c42:	f000 faef 	bl	800a224 <__malloc_lock>
 8009c46:	4d32      	ldr	r5, [pc, #200]	; (8009d10 <_malloc_r+0xe8>)
 8009c48:	682b      	ldr	r3, [r5, #0]
 8009c4a:	001c      	movs	r4, r3
 8009c4c:	2c00      	cmp	r4, #0
 8009c4e:	d12e      	bne.n	8009cae <_malloc_r+0x86>
 8009c50:	0039      	movs	r1, r7
 8009c52:	0030      	movs	r0, r6
 8009c54:	f7ff ffc6 	bl	8009be4 <sbrk_aligned>
 8009c58:	0004      	movs	r4, r0
 8009c5a:	1c43      	adds	r3, r0, #1
 8009c5c:	d11e      	bne.n	8009c9c <_malloc_r+0x74>
 8009c5e:	682c      	ldr	r4, [r5, #0]
 8009c60:	0025      	movs	r5, r4
 8009c62:	2d00      	cmp	r5, #0
 8009c64:	d14a      	bne.n	8009cfc <_malloc_r+0xd4>
 8009c66:	6823      	ldr	r3, [r4, #0]
 8009c68:	0029      	movs	r1, r5
 8009c6a:	18e3      	adds	r3, r4, r3
 8009c6c:	0030      	movs	r0, r6
 8009c6e:	9301      	str	r3, [sp, #4]
 8009c70:	f000 f8e6 	bl	8009e40 <_sbrk_r>
 8009c74:	9b01      	ldr	r3, [sp, #4]
 8009c76:	4283      	cmp	r3, r0
 8009c78:	d143      	bne.n	8009d02 <_malloc_r+0xda>
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	3703      	adds	r7, #3
 8009c7e:	1aff      	subs	r7, r7, r3
 8009c80:	2303      	movs	r3, #3
 8009c82:	439f      	bics	r7, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	2f0c      	cmp	r7, #12
 8009c88:	d200      	bcs.n	8009c8c <_malloc_r+0x64>
 8009c8a:	270c      	movs	r7, #12
 8009c8c:	0039      	movs	r1, r7
 8009c8e:	0030      	movs	r0, r6
 8009c90:	f7ff ffa8 	bl	8009be4 <sbrk_aligned>
 8009c94:	1c43      	adds	r3, r0, #1
 8009c96:	d034      	beq.n	8009d02 <_malloc_r+0xda>
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	19df      	adds	r7, r3, r7
 8009c9c:	6027      	str	r7, [r4, #0]
 8009c9e:	e013      	b.n	8009cc8 <_malloc_r+0xa0>
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	dacb      	bge.n	8009c3c <_malloc_r+0x14>
 8009ca4:	230c      	movs	r3, #12
 8009ca6:	2500      	movs	r5, #0
 8009ca8:	6033      	str	r3, [r6, #0]
 8009caa:	0028      	movs	r0, r5
 8009cac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009cae:	6822      	ldr	r2, [r4, #0]
 8009cb0:	1bd1      	subs	r1, r2, r7
 8009cb2:	d420      	bmi.n	8009cf6 <_malloc_r+0xce>
 8009cb4:	290b      	cmp	r1, #11
 8009cb6:	d917      	bls.n	8009ce8 <_malloc_r+0xc0>
 8009cb8:	19e2      	adds	r2, r4, r7
 8009cba:	6027      	str	r7, [r4, #0]
 8009cbc:	42a3      	cmp	r3, r4
 8009cbe:	d111      	bne.n	8009ce4 <_malloc_r+0xbc>
 8009cc0:	602a      	str	r2, [r5, #0]
 8009cc2:	6863      	ldr	r3, [r4, #4]
 8009cc4:	6011      	str	r1, [r2, #0]
 8009cc6:	6053      	str	r3, [r2, #4]
 8009cc8:	0030      	movs	r0, r6
 8009cca:	0025      	movs	r5, r4
 8009ccc:	f000 fab2 	bl	800a234 <__malloc_unlock>
 8009cd0:	2207      	movs	r2, #7
 8009cd2:	350b      	adds	r5, #11
 8009cd4:	1d23      	adds	r3, r4, #4
 8009cd6:	4395      	bics	r5, r2
 8009cd8:	1aea      	subs	r2, r5, r3
 8009cda:	429d      	cmp	r5, r3
 8009cdc:	d0e5      	beq.n	8009caa <_malloc_r+0x82>
 8009cde:	1b5b      	subs	r3, r3, r5
 8009ce0:	50a3      	str	r3, [r4, r2]
 8009ce2:	e7e2      	b.n	8009caa <_malloc_r+0x82>
 8009ce4:	605a      	str	r2, [r3, #4]
 8009ce6:	e7ec      	b.n	8009cc2 <_malloc_r+0x9a>
 8009ce8:	6862      	ldr	r2, [r4, #4]
 8009cea:	42a3      	cmp	r3, r4
 8009cec:	d101      	bne.n	8009cf2 <_malloc_r+0xca>
 8009cee:	602a      	str	r2, [r5, #0]
 8009cf0:	e7ea      	b.n	8009cc8 <_malloc_r+0xa0>
 8009cf2:	605a      	str	r2, [r3, #4]
 8009cf4:	e7e8      	b.n	8009cc8 <_malloc_r+0xa0>
 8009cf6:	0023      	movs	r3, r4
 8009cf8:	6864      	ldr	r4, [r4, #4]
 8009cfa:	e7a7      	b.n	8009c4c <_malloc_r+0x24>
 8009cfc:	002c      	movs	r4, r5
 8009cfe:	686d      	ldr	r5, [r5, #4]
 8009d00:	e7af      	b.n	8009c62 <_malloc_r+0x3a>
 8009d02:	230c      	movs	r3, #12
 8009d04:	0030      	movs	r0, r6
 8009d06:	6033      	str	r3, [r6, #0]
 8009d08:	f000 fa94 	bl	800a234 <__malloc_unlock>
 8009d0c:	e7cd      	b.n	8009caa <_malloc_r+0x82>
 8009d0e:	46c0      	nop			; (mov r8, r8)
 8009d10:	20000818 	.word	0x20000818

08009d14 <iprintf>:
 8009d14:	b40f      	push	{r0, r1, r2, r3}
 8009d16:	4b0b      	ldr	r3, [pc, #44]	; (8009d44 <iprintf+0x30>)
 8009d18:	b513      	push	{r0, r1, r4, lr}
 8009d1a:	681c      	ldr	r4, [r3, #0]
 8009d1c:	2c00      	cmp	r4, #0
 8009d1e:	d005      	beq.n	8009d2c <iprintf+0x18>
 8009d20:	69a3      	ldr	r3, [r4, #24]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d102      	bne.n	8009d2c <iprintf+0x18>
 8009d26:	0020      	movs	r0, r4
 8009d28:	f7ff fe3a 	bl	80099a0 <__sinit>
 8009d2c:	ab05      	add	r3, sp, #20
 8009d2e:	0020      	movs	r0, r4
 8009d30:	9a04      	ldr	r2, [sp, #16]
 8009d32:	68a1      	ldr	r1, [r4, #8]
 8009d34:	9301      	str	r3, [sp, #4]
 8009d36:	f000 fc0f 	bl	800a558 <_vfiprintf_r>
 8009d3a:	bc16      	pop	{r1, r2, r4}
 8009d3c:	bc08      	pop	{r3}
 8009d3e:	b004      	add	sp, #16
 8009d40:	4718      	bx	r3
 8009d42:	46c0      	nop			; (mov r8, r8)
 8009d44:	2000005c 	.word	0x2000005c

08009d48 <_puts_r>:
 8009d48:	b570      	push	{r4, r5, r6, lr}
 8009d4a:	0005      	movs	r5, r0
 8009d4c:	000e      	movs	r6, r1
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d004      	beq.n	8009d5c <_puts_r+0x14>
 8009d52:	6983      	ldr	r3, [r0, #24]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d101      	bne.n	8009d5c <_puts_r+0x14>
 8009d58:	f7ff fe22 	bl	80099a0 <__sinit>
 8009d5c:	69ab      	ldr	r3, [r5, #24]
 8009d5e:	68ac      	ldr	r4, [r5, #8]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d102      	bne.n	8009d6a <_puts_r+0x22>
 8009d64:	0028      	movs	r0, r5
 8009d66:	f7ff fe1b 	bl	80099a0 <__sinit>
 8009d6a:	4b2d      	ldr	r3, [pc, #180]	; (8009e20 <_puts_r+0xd8>)
 8009d6c:	429c      	cmp	r4, r3
 8009d6e:	d122      	bne.n	8009db6 <_puts_r+0x6e>
 8009d70:	686c      	ldr	r4, [r5, #4]
 8009d72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d74:	07db      	lsls	r3, r3, #31
 8009d76:	d405      	bmi.n	8009d84 <_puts_r+0x3c>
 8009d78:	89a3      	ldrh	r3, [r4, #12]
 8009d7a:	059b      	lsls	r3, r3, #22
 8009d7c:	d402      	bmi.n	8009d84 <_puts_r+0x3c>
 8009d7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d80:	f7ff fed3 	bl	8009b2a <__retarget_lock_acquire_recursive>
 8009d84:	89a3      	ldrh	r3, [r4, #12]
 8009d86:	071b      	lsls	r3, r3, #28
 8009d88:	d502      	bpl.n	8009d90 <_puts_r+0x48>
 8009d8a:	6923      	ldr	r3, [r4, #16]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d129      	bne.n	8009de4 <_puts_r+0x9c>
 8009d90:	0021      	movs	r1, r4
 8009d92:	0028      	movs	r0, r5
 8009d94:	f000 f93c 	bl	800a010 <__swsetup_r>
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	d023      	beq.n	8009de4 <_puts_r+0x9c>
 8009d9c:	2501      	movs	r5, #1
 8009d9e:	426d      	negs	r5, r5
 8009da0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009da2:	07db      	lsls	r3, r3, #31
 8009da4:	d405      	bmi.n	8009db2 <_puts_r+0x6a>
 8009da6:	89a3      	ldrh	r3, [r4, #12]
 8009da8:	059b      	lsls	r3, r3, #22
 8009daa:	d402      	bmi.n	8009db2 <_puts_r+0x6a>
 8009dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dae:	f7ff febd 	bl	8009b2c <__retarget_lock_release_recursive>
 8009db2:	0028      	movs	r0, r5
 8009db4:	bd70      	pop	{r4, r5, r6, pc}
 8009db6:	4b1b      	ldr	r3, [pc, #108]	; (8009e24 <_puts_r+0xdc>)
 8009db8:	429c      	cmp	r4, r3
 8009dba:	d101      	bne.n	8009dc0 <_puts_r+0x78>
 8009dbc:	68ac      	ldr	r4, [r5, #8]
 8009dbe:	e7d8      	b.n	8009d72 <_puts_r+0x2a>
 8009dc0:	4b19      	ldr	r3, [pc, #100]	; (8009e28 <_puts_r+0xe0>)
 8009dc2:	429c      	cmp	r4, r3
 8009dc4:	d1d5      	bne.n	8009d72 <_puts_r+0x2a>
 8009dc6:	68ec      	ldr	r4, [r5, #12]
 8009dc8:	e7d3      	b.n	8009d72 <_puts_r+0x2a>
 8009dca:	3601      	adds	r6, #1
 8009dcc:	60a3      	str	r3, [r4, #8]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	da04      	bge.n	8009ddc <_puts_r+0x94>
 8009dd2:	69a2      	ldr	r2, [r4, #24]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	dc16      	bgt.n	8009e06 <_puts_r+0xbe>
 8009dd8:	290a      	cmp	r1, #10
 8009dda:	d014      	beq.n	8009e06 <_puts_r+0xbe>
 8009ddc:	6823      	ldr	r3, [r4, #0]
 8009dde:	1c5a      	adds	r2, r3, #1
 8009de0:	6022      	str	r2, [r4, #0]
 8009de2:	7019      	strb	r1, [r3, #0]
 8009de4:	68a3      	ldr	r3, [r4, #8]
 8009de6:	7831      	ldrb	r1, [r6, #0]
 8009de8:	3b01      	subs	r3, #1
 8009dea:	2900      	cmp	r1, #0
 8009dec:	d1ed      	bne.n	8009dca <_puts_r+0x82>
 8009dee:	60a3      	str	r3, [r4, #8]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	da0f      	bge.n	8009e14 <_puts_r+0xcc>
 8009df4:	0028      	movs	r0, r5
 8009df6:	0022      	movs	r2, r4
 8009df8:	310a      	adds	r1, #10
 8009dfa:	f000 f89f 	bl	8009f3c <__swbuf_r>
 8009dfe:	250a      	movs	r5, #10
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d1cd      	bne.n	8009da0 <_puts_r+0x58>
 8009e04:	e7ca      	b.n	8009d9c <_puts_r+0x54>
 8009e06:	0022      	movs	r2, r4
 8009e08:	0028      	movs	r0, r5
 8009e0a:	f000 f897 	bl	8009f3c <__swbuf_r>
 8009e0e:	1c43      	adds	r3, r0, #1
 8009e10:	d1e8      	bne.n	8009de4 <_puts_r+0x9c>
 8009e12:	e7c3      	b.n	8009d9c <_puts_r+0x54>
 8009e14:	250a      	movs	r5, #10
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	1c5a      	adds	r2, r3, #1
 8009e1a:	6022      	str	r2, [r4, #0]
 8009e1c:	701d      	strb	r5, [r3, #0]
 8009e1e:	e7bf      	b.n	8009da0 <_puts_r+0x58>
 8009e20:	0800b6a0 	.word	0x0800b6a0
 8009e24:	0800b6c0 	.word	0x0800b6c0
 8009e28:	0800b680 	.word	0x0800b680

08009e2c <puts>:
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	4b03      	ldr	r3, [pc, #12]	; (8009e3c <puts+0x10>)
 8009e30:	0001      	movs	r1, r0
 8009e32:	6818      	ldr	r0, [r3, #0]
 8009e34:	f7ff ff88 	bl	8009d48 <_puts_r>
 8009e38:	bd10      	pop	{r4, pc}
 8009e3a:	46c0      	nop			; (mov r8, r8)
 8009e3c:	2000005c 	.word	0x2000005c

08009e40 <_sbrk_r>:
 8009e40:	2300      	movs	r3, #0
 8009e42:	b570      	push	{r4, r5, r6, lr}
 8009e44:	4d06      	ldr	r5, [pc, #24]	; (8009e60 <_sbrk_r+0x20>)
 8009e46:	0004      	movs	r4, r0
 8009e48:	0008      	movs	r0, r1
 8009e4a:	602b      	str	r3, [r5, #0]
 8009e4c:	f7fa fc6e 	bl	800472c <_sbrk>
 8009e50:	1c43      	adds	r3, r0, #1
 8009e52:	d103      	bne.n	8009e5c <_sbrk_r+0x1c>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d000      	beq.n	8009e5c <_sbrk_r+0x1c>
 8009e5a:	6023      	str	r3, [r4, #0]
 8009e5c:	bd70      	pop	{r4, r5, r6, pc}
 8009e5e:	46c0      	nop			; (mov r8, r8)
 8009e60:	20000820 	.word	0x20000820

08009e64 <siprintf>:
 8009e64:	b40e      	push	{r1, r2, r3}
 8009e66:	b500      	push	{lr}
 8009e68:	490b      	ldr	r1, [pc, #44]	; (8009e98 <siprintf+0x34>)
 8009e6a:	b09c      	sub	sp, #112	; 0x70
 8009e6c:	ab1d      	add	r3, sp, #116	; 0x74
 8009e6e:	9002      	str	r0, [sp, #8]
 8009e70:	9006      	str	r0, [sp, #24]
 8009e72:	9107      	str	r1, [sp, #28]
 8009e74:	9104      	str	r1, [sp, #16]
 8009e76:	4809      	ldr	r0, [pc, #36]	; (8009e9c <siprintf+0x38>)
 8009e78:	4909      	ldr	r1, [pc, #36]	; (8009ea0 <siprintf+0x3c>)
 8009e7a:	cb04      	ldmia	r3!, {r2}
 8009e7c:	9105      	str	r1, [sp, #20]
 8009e7e:	6800      	ldr	r0, [r0, #0]
 8009e80:	a902      	add	r1, sp, #8
 8009e82:	9301      	str	r3, [sp, #4]
 8009e84:	f000 fa40 	bl	800a308 <_svfiprintf_r>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	9a02      	ldr	r2, [sp, #8]
 8009e8c:	7013      	strb	r3, [r2, #0]
 8009e8e:	b01c      	add	sp, #112	; 0x70
 8009e90:	bc08      	pop	{r3}
 8009e92:	b003      	add	sp, #12
 8009e94:	4718      	bx	r3
 8009e96:	46c0      	nop			; (mov r8, r8)
 8009e98:	7fffffff 	.word	0x7fffffff
 8009e9c:	2000005c 	.word	0x2000005c
 8009ea0:	ffff0208 	.word	0xffff0208

08009ea4 <__sread>:
 8009ea4:	b570      	push	{r4, r5, r6, lr}
 8009ea6:	000c      	movs	r4, r1
 8009ea8:	250e      	movs	r5, #14
 8009eaa:	5f49      	ldrsh	r1, [r1, r5]
 8009eac:	f000 fe10 	bl	800aad0 <_read_r>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	db03      	blt.n	8009ebc <__sread+0x18>
 8009eb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009eb6:	181b      	adds	r3, r3, r0
 8009eb8:	6563      	str	r3, [r4, #84]	; 0x54
 8009eba:	bd70      	pop	{r4, r5, r6, pc}
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	4a02      	ldr	r2, [pc, #8]	; (8009ec8 <__sread+0x24>)
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	81a3      	strh	r3, [r4, #12]
 8009ec4:	e7f9      	b.n	8009eba <__sread+0x16>
 8009ec6:	46c0      	nop			; (mov r8, r8)
 8009ec8:	ffffefff 	.word	0xffffefff

08009ecc <__swrite>:
 8009ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ece:	001f      	movs	r7, r3
 8009ed0:	898b      	ldrh	r3, [r1, #12]
 8009ed2:	0005      	movs	r5, r0
 8009ed4:	000c      	movs	r4, r1
 8009ed6:	0016      	movs	r6, r2
 8009ed8:	05db      	lsls	r3, r3, #23
 8009eda:	d505      	bpl.n	8009ee8 <__swrite+0x1c>
 8009edc:	230e      	movs	r3, #14
 8009ede:	5ec9      	ldrsh	r1, [r1, r3]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	f000 f91e 	bl	800a124 <_lseek_r>
 8009ee8:	89a3      	ldrh	r3, [r4, #12]
 8009eea:	4a05      	ldr	r2, [pc, #20]	; (8009f00 <__swrite+0x34>)
 8009eec:	0028      	movs	r0, r5
 8009eee:	4013      	ands	r3, r2
 8009ef0:	81a3      	strh	r3, [r4, #12]
 8009ef2:	0032      	movs	r2, r6
 8009ef4:	230e      	movs	r3, #14
 8009ef6:	5ee1      	ldrsh	r1, [r4, r3]
 8009ef8:	003b      	movs	r3, r7
 8009efa:	f000 f875 	bl	8009fe8 <_write_r>
 8009efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f00:	ffffefff 	.word	0xffffefff

08009f04 <__sseek>:
 8009f04:	b570      	push	{r4, r5, r6, lr}
 8009f06:	000c      	movs	r4, r1
 8009f08:	250e      	movs	r5, #14
 8009f0a:	5f49      	ldrsh	r1, [r1, r5]
 8009f0c:	f000 f90a 	bl	800a124 <_lseek_r>
 8009f10:	89a3      	ldrh	r3, [r4, #12]
 8009f12:	1c42      	adds	r2, r0, #1
 8009f14:	d103      	bne.n	8009f1e <__sseek+0x1a>
 8009f16:	4a05      	ldr	r2, [pc, #20]	; (8009f2c <__sseek+0x28>)
 8009f18:	4013      	ands	r3, r2
 8009f1a:	81a3      	strh	r3, [r4, #12]
 8009f1c:	bd70      	pop	{r4, r5, r6, pc}
 8009f1e:	2280      	movs	r2, #128	; 0x80
 8009f20:	0152      	lsls	r2, r2, #5
 8009f22:	4313      	orrs	r3, r2
 8009f24:	81a3      	strh	r3, [r4, #12]
 8009f26:	6560      	str	r0, [r4, #84]	; 0x54
 8009f28:	e7f8      	b.n	8009f1c <__sseek+0x18>
 8009f2a:	46c0      	nop			; (mov r8, r8)
 8009f2c:	ffffefff 	.word	0xffffefff

08009f30 <__sclose>:
 8009f30:	b510      	push	{r4, lr}
 8009f32:	230e      	movs	r3, #14
 8009f34:	5ec9      	ldrsh	r1, [r1, r3]
 8009f36:	f000 f8e3 	bl	800a100 <_close_r>
 8009f3a:	bd10      	pop	{r4, pc}

08009f3c <__swbuf_r>:
 8009f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3e:	0005      	movs	r5, r0
 8009f40:	000e      	movs	r6, r1
 8009f42:	0014      	movs	r4, r2
 8009f44:	2800      	cmp	r0, #0
 8009f46:	d004      	beq.n	8009f52 <__swbuf_r+0x16>
 8009f48:	6983      	ldr	r3, [r0, #24]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <__swbuf_r+0x16>
 8009f4e:	f7ff fd27 	bl	80099a0 <__sinit>
 8009f52:	4b22      	ldr	r3, [pc, #136]	; (8009fdc <__swbuf_r+0xa0>)
 8009f54:	429c      	cmp	r4, r3
 8009f56:	d12e      	bne.n	8009fb6 <__swbuf_r+0x7a>
 8009f58:	686c      	ldr	r4, [r5, #4]
 8009f5a:	69a3      	ldr	r3, [r4, #24]
 8009f5c:	60a3      	str	r3, [r4, #8]
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	071b      	lsls	r3, r3, #28
 8009f62:	d532      	bpl.n	8009fca <__swbuf_r+0x8e>
 8009f64:	6923      	ldr	r3, [r4, #16]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d02f      	beq.n	8009fca <__swbuf_r+0x8e>
 8009f6a:	6823      	ldr	r3, [r4, #0]
 8009f6c:	6922      	ldr	r2, [r4, #16]
 8009f6e:	b2f7      	uxtb	r7, r6
 8009f70:	1a98      	subs	r0, r3, r2
 8009f72:	6963      	ldr	r3, [r4, #20]
 8009f74:	b2f6      	uxtb	r6, r6
 8009f76:	4283      	cmp	r3, r0
 8009f78:	dc05      	bgt.n	8009f86 <__swbuf_r+0x4a>
 8009f7a:	0021      	movs	r1, r4
 8009f7c:	0028      	movs	r0, r5
 8009f7e:	f7ff fc57 	bl	8009830 <_fflush_r>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	d127      	bne.n	8009fd6 <__swbuf_r+0x9a>
 8009f86:	68a3      	ldr	r3, [r4, #8]
 8009f88:	3001      	adds	r0, #1
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	60a3      	str	r3, [r4, #8]
 8009f8e:	6823      	ldr	r3, [r4, #0]
 8009f90:	1c5a      	adds	r2, r3, #1
 8009f92:	6022      	str	r2, [r4, #0]
 8009f94:	701f      	strb	r7, [r3, #0]
 8009f96:	6963      	ldr	r3, [r4, #20]
 8009f98:	4283      	cmp	r3, r0
 8009f9a:	d004      	beq.n	8009fa6 <__swbuf_r+0x6a>
 8009f9c:	89a3      	ldrh	r3, [r4, #12]
 8009f9e:	07db      	lsls	r3, r3, #31
 8009fa0:	d507      	bpl.n	8009fb2 <__swbuf_r+0x76>
 8009fa2:	2e0a      	cmp	r6, #10
 8009fa4:	d105      	bne.n	8009fb2 <__swbuf_r+0x76>
 8009fa6:	0021      	movs	r1, r4
 8009fa8:	0028      	movs	r0, r5
 8009faa:	f7ff fc41 	bl	8009830 <_fflush_r>
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	d111      	bne.n	8009fd6 <__swbuf_r+0x9a>
 8009fb2:	0030      	movs	r0, r6
 8009fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fb6:	4b0a      	ldr	r3, [pc, #40]	; (8009fe0 <__swbuf_r+0xa4>)
 8009fb8:	429c      	cmp	r4, r3
 8009fba:	d101      	bne.n	8009fc0 <__swbuf_r+0x84>
 8009fbc:	68ac      	ldr	r4, [r5, #8]
 8009fbe:	e7cc      	b.n	8009f5a <__swbuf_r+0x1e>
 8009fc0:	4b08      	ldr	r3, [pc, #32]	; (8009fe4 <__swbuf_r+0xa8>)
 8009fc2:	429c      	cmp	r4, r3
 8009fc4:	d1c9      	bne.n	8009f5a <__swbuf_r+0x1e>
 8009fc6:	68ec      	ldr	r4, [r5, #12]
 8009fc8:	e7c7      	b.n	8009f5a <__swbuf_r+0x1e>
 8009fca:	0021      	movs	r1, r4
 8009fcc:	0028      	movs	r0, r5
 8009fce:	f000 f81f 	bl	800a010 <__swsetup_r>
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	d0c9      	beq.n	8009f6a <__swbuf_r+0x2e>
 8009fd6:	2601      	movs	r6, #1
 8009fd8:	4276      	negs	r6, r6
 8009fda:	e7ea      	b.n	8009fb2 <__swbuf_r+0x76>
 8009fdc:	0800b6a0 	.word	0x0800b6a0
 8009fe0:	0800b6c0 	.word	0x0800b6c0
 8009fe4:	0800b680 	.word	0x0800b680

08009fe8 <_write_r>:
 8009fe8:	b570      	push	{r4, r5, r6, lr}
 8009fea:	0004      	movs	r4, r0
 8009fec:	0008      	movs	r0, r1
 8009fee:	0011      	movs	r1, r2
 8009ff0:	001a      	movs	r2, r3
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	4d05      	ldr	r5, [pc, #20]	; (800a00c <_write_r+0x24>)
 8009ff6:	602b      	str	r3, [r5, #0]
 8009ff8:	f7fa fb4f 	bl	800469a <_write>
 8009ffc:	1c43      	adds	r3, r0, #1
 8009ffe:	d103      	bne.n	800a008 <_write_r+0x20>
 800a000:	682b      	ldr	r3, [r5, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d000      	beq.n	800a008 <_write_r+0x20>
 800a006:	6023      	str	r3, [r4, #0]
 800a008:	bd70      	pop	{r4, r5, r6, pc}
 800a00a:	46c0      	nop			; (mov r8, r8)
 800a00c:	20000820 	.word	0x20000820

0800a010 <__swsetup_r>:
 800a010:	4b37      	ldr	r3, [pc, #220]	; (800a0f0 <__swsetup_r+0xe0>)
 800a012:	b570      	push	{r4, r5, r6, lr}
 800a014:	681d      	ldr	r5, [r3, #0]
 800a016:	0006      	movs	r6, r0
 800a018:	000c      	movs	r4, r1
 800a01a:	2d00      	cmp	r5, #0
 800a01c:	d005      	beq.n	800a02a <__swsetup_r+0x1a>
 800a01e:	69ab      	ldr	r3, [r5, #24]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d102      	bne.n	800a02a <__swsetup_r+0x1a>
 800a024:	0028      	movs	r0, r5
 800a026:	f7ff fcbb 	bl	80099a0 <__sinit>
 800a02a:	4b32      	ldr	r3, [pc, #200]	; (800a0f4 <__swsetup_r+0xe4>)
 800a02c:	429c      	cmp	r4, r3
 800a02e:	d10f      	bne.n	800a050 <__swsetup_r+0x40>
 800a030:	686c      	ldr	r4, [r5, #4]
 800a032:	230c      	movs	r3, #12
 800a034:	5ee2      	ldrsh	r2, [r4, r3]
 800a036:	b293      	uxth	r3, r2
 800a038:	0711      	lsls	r1, r2, #28
 800a03a:	d42d      	bmi.n	800a098 <__swsetup_r+0x88>
 800a03c:	06d9      	lsls	r1, r3, #27
 800a03e:	d411      	bmi.n	800a064 <__swsetup_r+0x54>
 800a040:	2309      	movs	r3, #9
 800a042:	2001      	movs	r0, #1
 800a044:	6033      	str	r3, [r6, #0]
 800a046:	3337      	adds	r3, #55	; 0x37
 800a048:	4313      	orrs	r3, r2
 800a04a:	81a3      	strh	r3, [r4, #12]
 800a04c:	4240      	negs	r0, r0
 800a04e:	bd70      	pop	{r4, r5, r6, pc}
 800a050:	4b29      	ldr	r3, [pc, #164]	; (800a0f8 <__swsetup_r+0xe8>)
 800a052:	429c      	cmp	r4, r3
 800a054:	d101      	bne.n	800a05a <__swsetup_r+0x4a>
 800a056:	68ac      	ldr	r4, [r5, #8]
 800a058:	e7eb      	b.n	800a032 <__swsetup_r+0x22>
 800a05a:	4b28      	ldr	r3, [pc, #160]	; (800a0fc <__swsetup_r+0xec>)
 800a05c:	429c      	cmp	r4, r3
 800a05e:	d1e8      	bne.n	800a032 <__swsetup_r+0x22>
 800a060:	68ec      	ldr	r4, [r5, #12]
 800a062:	e7e6      	b.n	800a032 <__swsetup_r+0x22>
 800a064:	075b      	lsls	r3, r3, #29
 800a066:	d513      	bpl.n	800a090 <__swsetup_r+0x80>
 800a068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a06a:	2900      	cmp	r1, #0
 800a06c:	d008      	beq.n	800a080 <__swsetup_r+0x70>
 800a06e:	0023      	movs	r3, r4
 800a070:	3344      	adds	r3, #68	; 0x44
 800a072:	4299      	cmp	r1, r3
 800a074:	d002      	beq.n	800a07c <__swsetup_r+0x6c>
 800a076:	0030      	movs	r0, r6
 800a078:	f7ff fd6a 	bl	8009b50 <_free_r>
 800a07c:	2300      	movs	r3, #0
 800a07e:	6363      	str	r3, [r4, #52]	; 0x34
 800a080:	2224      	movs	r2, #36	; 0x24
 800a082:	89a3      	ldrh	r3, [r4, #12]
 800a084:	4393      	bics	r3, r2
 800a086:	81a3      	strh	r3, [r4, #12]
 800a088:	2300      	movs	r3, #0
 800a08a:	6063      	str	r3, [r4, #4]
 800a08c:	6923      	ldr	r3, [r4, #16]
 800a08e:	6023      	str	r3, [r4, #0]
 800a090:	2308      	movs	r3, #8
 800a092:	89a2      	ldrh	r2, [r4, #12]
 800a094:	4313      	orrs	r3, r2
 800a096:	81a3      	strh	r3, [r4, #12]
 800a098:	6923      	ldr	r3, [r4, #16]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10b      	bne.n	800a0b6 <__swsetup_r+0xa6>
 800a09e:	21a0      	movs	r1, #160	; 0xa0
 800a0a0:	2280      	movs	r2, #128	; 0x80
 800a0a2:	89a3      	ldrh	r3, [r4, #12]
 800a0a4:	0089      	lsls	r1, r1, #2
 800a0a6:	0092      	lsls	r2, r2, #2
 800a0a8:	400b      	ands	r3, r1
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d003      	beq.n	800a0b6 <__swsetup_r+0xa6>
 800a0ae:	0021      	movs	r1, r4
 800a0b0:	0030      	movs	r0, r6
 800a0b2:	f000 f873 	bl	800a19c <__smakebuf_r>
 800a0b6:	220c      	movs	r2, #12
 800a0b8:	5ea3      	ldrsh	r3, [r4, r2]
 800a0ba:	2001      	movs	r0, #1
 800a0bc:	001a      	movs	r2, r3
 800a0be:	b299      	uxth	r1, r3
 800a0c0:	4002      	ands	r2, r0
 800a0c2:	4203      	tst	r3, r0
 800a0c4:	d00f      	beq.n	800a0e6 <__swsetup_r+0xd6>
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	60a2      	str	r2, [r4, #8]
 800a0ca:	6962      	ldr	r2, [r4, #20]
 800a0cc:	4252      	negs	r2, r2
 800a0ce:	61a2      	str	r2, [r4, #24]
 800a0d0:	2000      	movs	r0, #0
 800a0d2:	6922      	ldr	r2, [r4, #16]
 800a0d4:	4282      	cmp	r2, r0
 800a0d6:	d1ba      	bne.n	800a04e <__swsetup_r+0x3e>
 800a0d8:	060a      	lsls	r2, r1, #24
 800a0da:	d5b8      	bpl.n	800a04e <__swsetup_r+0x3e>
 800a0dc:	2240      	movs	r2, #64	; 0x40
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	81a3      	strh	r3, [r4, #12]
 800a0e2:	3801      	subs	r0, #1
 800a0e4:	e7b3      	b.n	800a04e <__swsetup_r+0x3e>
 800a0e6:	0788      	lsls	r0, r1, #30
 800a0e8:	d400      	bmi.n	800a0ec <__swsetup_r+0xdc>
 800a0ea:	6962      	ldr	r2, [r4, #20]
 800a0ec:	60a2      	str	r2, [r4, #8]
 800a0ee:	e7ef      	b.n	800a0d0 <__swsetup_r+0xc0>
 800a0f0:	2000005c 	.word	0x2000005c
 800a0f4:	0800b6a0 	.word	0x0800b6a0
 800a0f8:	0800b6c0 	.word	0x0800b6c0
 800a0fc:	0800b680 	.word	0x0800b680

0800a100 <_close_r>:
 800a100:	2300      	movs	r3, #0
 800a102:	b570      	push	{r4, r5, r6, lr}
 800a104:	4d06      	ldr	r5, [pc, #24]	; (800a120 <_close_r+0x20>)
 800a106:	0004      	movs	r4, r0
 800a108:	0008      	movs	r0, r1
 800a10a:	602b      	str	r3, [r5, #0]
 800a10c:	f7fa fae1 	bl	80046d2 <_close>
 800a110:	1c43      	adds	r3, r0, #1
 800a112:	d103      	bne.n	800a11c <_close_r+0x1c>
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d000      	beq.n	800a11c <_close_r+0x1c>
 800a11a:	6023      	str	r3, [r4, #0]
 800a11c:	bd70      	pop	{r4, r5, r6, pc}
 800a11e:	46c0      	nop			; (mov r8, r8)
 800a120:	20000820 	.word	0x20000820

0800a124 <_lseek_r>:
 800a124:	b570      	push	{r4, r5, r6, lr}
 800a126:	0004      	movs	r4, r0
 800a128:	0008      	movs	r0, r1
 800a12a:	0011      	movs	r1, r2
 800a12c:	001a      	movs	r2, r3
 800a12e:	2300      	movs	r3, #0
 800a130:	4d05      	ldr	r5, [pc, #20]	; (800a148 <_lseek_r+0x24>)
 800a132:	602b      	str	r3, [r5, #0]
 800a134:	f7fa faee 	bl	8004714 <_lseek>
 800a138:	1c43      	adds	r3, r0, #1
 800a13a:	d103      	bne.n	800a144 <_lseek_r+0x20>
 800a13c:	682b      	ldr	r3, [r5, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d000      	beq.n	800a144 <_lseek_r+0x20>
 800a142:	6023      	str	r3, [r4, #0]
 800a144:	bd70      	pop	{r4, r5, r6, pc}
 800a146:	46c0      	nop			; (mov r8, r8)
 800a148:	20000820 	.word	0x20000820

0800a14c <__swhatbuf_r>:
 800a14c:	b570      	push	{r4, r5, r6, lr}
 800a14e:	000e      	movs	r6, r1
 800a150:	001d      	movs	r5, r3
 800a152:	230e      	movs	r3, #14
 800a154:	5ec9      	ldrsh	r1, [r1, r3]
 800a156:	0014      	movs	r4, r2
 800a158:	b096      	sub	sp, #88	; 0x58
 800a15a:	2900      	cmp	r1, #0
 800a15c:	da08      	bge.n	800a170 <__swhatbuf_r+0x24>
 800a15e:	220c      	movs	r2, #12
 800a160:	5eb3      	ldrsh	r3, [r6, r2]
 800a162:	2200      	movs	r2, #0
 800a164:	602a      	str	r2, [r5, #0]
 800a166:	061b      	lsls	r3, r3, #24
 800a168:	d411      	bmi.n	800a18e <__swhatbuf_r+0x42>
 800a16a:	2380      	movs	r3, #128	; 0x80
 800a16c:	00db      	lsls	r3, r3, #3
 800a16e:	e00f      	b.n	800a190 <__swhatbuf_r+0x44>
 800a170:	466a      	mov	r2, sp
 800a172:	f000 fcc1 	bl	800aaf8 <_fstat_r>
 800a176:	2800      	cmp	r0, #0
 800a178:	dbf1      	blt.n	800a15e <__swhatbuf_r+0x12>
 800a17a:	23f0      	movs	r3, #240	; 0xf0
 800a17c:	9901      	ldr	r1, [sp, #4]
 800a17e:	021b      	lsls	r3, r3, #8
 800a180:	4019      	ands	r1, r3
 800a182:	4b05      	ldr	r3, [pc, #20]	; (800a198 <__swhatbuf_r+0x4c>)
 800a184:	18c9      	adds	r1, r1, r3
 800a186:	424b      	negs	r3, r1
 800a188:	4159      	adcs	r1, r3
 800a18a:	6029      	str	r1, [r5, #0]
 800a18c:	e7ed      	b.n	800a16a <__swhatbuf_r+0x1e>
 800a18e:	2340      	movs	r3, #64	; 0x40
 800a190:	2000      	movs	r0, #0
 800a192:	6023      	str	r3, [r4, #0]
 800a194:	b016      	add	sp, #88	; 0x58
 800a196:	bd70      	pop	{r4, r5, r6, pc}
 800a198:	ffffe000 	.word	0xffffe000

0800a19c <__smakebuf_r>:
 800a19c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a19e:	2602      	movs	r6, #2
 800a1a0:	898b      	ldrh	r3, [r1, #12]
 800a1a2:	0005      	movs	r5, r0
 800a1a4:	000c      	movs	r4, r1
 800a1a6:	4233      	tst	r3, r6
 800a1a8:	d006      	beq.n	800a1b8 <__smakebuf_r+0x1c>
 800a1aa:	0023      	movs	r3, r4
 800a1ac:	3347      	adds	r3, #71	; 0x47
 800a1ae:	6023      	str	r3, [r4, #0]
 800a1b0:	6123      	str	r3, [r4, #16]
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	6163      	str	r3, [r4, #20]
 800a1b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a1b8:	466a      	mov	r2, sp
 800a1ba:	ab01      	add	r3, sp, #4
 800a1bc:	f7ff ffc6 	bl	800a14c <__swhatbuf_r>
 800a1c0:	9900      	ldr	r1, [sp, #0]
 800a1c2:	0007      	movs	r7, r0
 800a1c4:	0028      	movs	r0, r5
 800a1c6:	f7ff fd2f 	bl	8009c28 <_malloc_r>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	d108      	bne.n	800a1e0 <__smakebuf_r+0x44>
 800a1ce:	220c      	movs	r2, #12
 800a1d0:	5ea3      	ldrsh	r3, [r4, r2]
 800a1d2:	059a      	lsls	r2, r3, #22
 800a1d4:	d4ef      	bmi.n	800a1b6 <__smakebuf_r+0x1a>
 800a1d6:	2203      	movs	r2, #3
 800a1d8:	4393      	bics	r3, r2
 800a1da:	431e      	orrs	r6, r3
 800a1dc:	81a6      	strh	r6, [r4, #12]
 800a1de:	e7e4      	b.n	800a1aa <__smakebuf_r+0xe>
 800a1e0:	4b0f      	ldr	r3, [pc, #60]	; (800a220 <__smakebuf_r+0x84>)
 800a1e2:	62ab      	str	r3, [r5, #40]	; 0x28
 800a1e4:	2380      	movs	r3, #128	; 0x80
 800a1e6:	89a2      	ldrh	r2, [r4, #12]
 800a1e8:	6020      	str	r0, [r4, #0]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	81a3      	strh	r3, [r4, #12]
 800a1ee:	9b00      	ldr	r3, [sp, #0]
 800a1f0:	6120      	str	r0, [r4, #16]
 800a1f2:	6163      	str	r3, [r4, #20]
 800a1f4:	9b01      	ldr	r3, [sp, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00d      	beq.n	800a216 <__smakebuf_r+0x7a>
 800a1fa:	0028      	movs	r0, r5
 800a1fc:	230e      	movs	r3, #14
 800a1fe:	5ee1      	ldrsh	r1, [r4, r3]
 800a200:	f000 fc8c 	bl	800ab1c <_isatty_r>
 800a204:	2800      	cmp	r0, #0
 800a206:	d006      	beq.n	800a216 <__smakebuf_r+0x7a>
 800a208:	2203      	movs	r2, #3
 800a20a:	89a3      	ldrh	r3, [r4, #12]
 800a20c:	4393      	bics	r3, r2
 800a20e:	001a      	movs	r2, r3
 800a210:	2301      	movs	r3, #1
 800a212:	4313      	orrs	r3, r2
 800a214:	81a3      	strh	r3, [r4, #12]
 800a216:	89a0      	ldrh	r0, [r4, #12]
 800a218:	4307      	orrs	r7, r0
 800a21a:	81a7      	strh	r7, [r4, #12]
 800a21c:	e7cb      	b.n	800a1b6 <__smakebuf_r+0x1a>
 800a21e:	46c0      	nop			; (mov r8, r8)
 800a220:	08009925 	.word	0x08009925

0800a224 <__malloc_lock>:
 800a224:	b510      	push	{r4, lr}
 800a226:	4802      	ldr	r0, [pc, #8]	; (800a230 <__malloc_lock+0xc>)
 800a228:	f7ff fc7f 	bl	8009b2a <__retarget_lock_acquire_recursive>
 800a22c:	bd10      	pop	{r4, pc}
 800a22e:	46c0      	nop			; (mov r8, r8)
 800a230:	20000814 	.word	0x20000814

0800a234 <__malloc_unlock>:
 800a234:	b510      	push	{r4, lr}
 800a236:	4802      	ldr	r0, [pc, #8]	; (800a240 <__malloc_unlock+0xc>)
 800a238:	f7ff fc78 	bl	8009b2c <__retarget_lock_release_recursive>
 800a23c:	bd10      	pop	{r4, pc}
 800a23e:	46c0      	nop			; (mov r8, r8)
 800a240:	20000814 	.word	0x20000814

0800a244 <__ssputs_r>:
 800a244:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a246:	688e      	ldr	r6, [r1, #8]
 800a248:	b085      	sub	sp, #20
 800a24a:	0007      	movs	r7, r0
 800a24c:	000c      	movs	r4, r1
 800a24e:	9203      	str	r2, [sp, #12]
 800a250:	9301      	str	r3, [sp, #4]
 800a252:	429e      	cmp	r6, r3
 800a254:	d83c      	bhi.n	800a2d0 <__ssputs_r+0x8c>
 800a256:	2390      	movs	r3, #144	; 0x90
 800a258:	898a      	ldrh	r2, [r1, #12]
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	421a      	tst	r2, r3
 800a25e:	d034      	beq.n	800a2ca <__ssputs_r+0x86>
 800a260:	6909      	ldr	r1, [r1, #16]
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	6960      	ldr	r0, [r4, #20]
 800a266:	1a5b      	subs	r3, r3, r1
 800a268:	9302      	str	r3, [sp, #8]
 800a26a:	2303      	movs	r3, #3
 800a26c:	4343      	muls	r3, r0
 800a26e:	0fdd      	lsrs	r5, r3, #31
 800a270:	18ed      	adds	r5, r5, r3
 800a272:	9b01      	ldr	r3, [sp, #4]
 800a274:	9802      	ldr	r0, [sp, #8]
 800a276:	3301      	adds	r3, #1
 800a278:	181b      	adds	r3, r3, r0
 800a27a:	106d      	asrs	r5, r5, #1
 800a27c:	42ab      	cmp	r3, r5
 800a27e:	d900      	bls.n	800a282 <__ssputs_r+0x3e>
 800a280:	001d      	movs	r5, r3
 800a282:	0553      	lsls	r3, r2, #21
 800a284:	d532      	bpl.n	800a2ec <__ssputs_r+0xa8>
 800a286:	0029      	movs	r1, r5
 800a288:	0038      	movs	r0, r7
 800a28a:	f7ff fccd 	bl	8009c28 <_malloc_r>
 800a28e:	1e06      	subs	r6, r0, #0
 800a290:	d109      	bne.n	800a2a6 <__ssputs_r+0x62>
 800a292:	230c      	movs	r3, #12
 800a294:	603b      	str	r3, [r7, #0]
 800a296:	2340      	movs	r3, #64	; 0x40
 800a298:	2001      	movs	r0, #1
 800a29a:	89a2      	ldrh	r2, [r4, #12]
 800a29c:	4240      	negs	r0, r0
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	81a3      	strh	r3, [r4, #12]
 800a2a2:	b005      	add	sp, #20
 800a2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2a6:	9a02      	ldr	r2, [sp, #8]
 800a2a8:	6921      	ldr	r1, [r4, #16]
 800a2aa:	f7ff fc40 	bl	8009b2e <memcpy>
 800a2ae:	89a3      	ldrh	r3, [r4, #12]
 800a2b0:	4a14      	ldr	r2, [pc, #80]	; (800a304 <__ssputs_r+0xc0>)
 800a2b2:	401a      	ands	r2, r3
 800a2b4:	2380      	movs	r3, #128	; 0x80
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	81a3      	strh	r3, [r4, #12]
 800a2ba:	9b02      	ldr	r3, [sp, #8]
 800a2bc:	6126      	str	r6, [r4, #16]
 800a2be:	18f6      	adds	r6, r6, r3
 800a2c0:	6026      	str	r6, [r4, #0]
 800a2c2:	6165      	str	r5, [r4, #20]
 800a2c4:	9e01      	ldr	r6, [sp, #4]
 800a2c6:	1aed      	subs	r5, r5, r3
 800a2c8:	60a5      	str	r5, [r4, #8]
 800a2ca:	9b01      	ldr	r3, [sp, #4]
 800a2cc:	429e      	cmp	r6, r3
 800a2ce:	d900      	bls.n	800a2d2 <__ssputs_r+0x8e>
 800a2d0:	9e01      	ldr	r6, [sp, #4]
 800a2d2:	0032      	movs	r2, r6
 800a2d4:	9903      	ldr	r1, [sp, #12]
 800a2d6:	6820      	ldr	r0, [r4, #0]
 800a2d8:	f000 fc3d 	bl	800ab56 <memmove>
 800a2dc:	68a3      	ldr	r3, [r4, #8]
 800a2de:	2000      	movs	r0, #0
 800a2e0:	1b9b      	subs	r3, r3, r6
 800a2e2:	60a3      	str	r3, [r4, #8]
 800a2e4:	6823      	ldr	r3, [r4, #0]
 800a2e6:	199e      	adds	r6, r3, r6
 800a2e8:	6026      	str	r6, [r4, #0]
 800a2ea:	e7da      	b.n	800a2a2 <__ssputs_r+0x5e>
 800a2ec:	002a      	movs	r2, r5
 800a2ee:	0038      	movs	r0, r7
 800a2f0:	f000 fc44 	bl	800ab7c <_realloc_r>
 800a2f4:	1e06      	subs	r6, r0, #0
 800a2f6:	d1e0      	bne.n	800a2ba <__ssputs_r+0x76>
 800a2f8:	0038      	movs	r0, r7
 800a2fa:	6921      	ldr	r1, [r4, #16]
 800a2fc:	f7ff fc28 	bl	8009b50 <_free_r>
 800a300:	e7c7      	b.n	800a292 <__ssputs_r+0x4e>
 800a302:	46c0      	nop			; (mov r8, r8)
 800a304:	fffffb7f 	.word	0xfffffb7f

0800a308 <_svfiprintf_r>:
 800a308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a30a:	b0a1      	sub	sp, #132	; 0x84
 800a30c:	9003      	str	r0, [sp, #12]
 800a30e:	001d      	movs	r5, r3
 800a310:	898b      	ldrh	r3, [r1, #12]
 800a312:	000f      	movs	r7, r1
 800a314:	0016      	movs	r6, r2
 800a316:	061b      	lsls	r3, r3, #24
 800a318:	d511      	bpl.n	800a33e <_svfiprintf_r+0x36>
 800a31a:	690b      	ldr	r3, [r1, #16]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10e      	bne.n	800a33e <_svfiprintf_r+0x36>
 800a320:	2140      	movs	r1, #64	; 0x40
 800a322:	f7ff fc81 	bl	8009c28 <_malloc_r>
 800a326:	6038      	str	r0, [r7, #0]
 800a328:	6138      	str	r0, [r7, #16]
 800a32a:	2800      	cmp	r0, #0
 800a32c:	d105      	bne.n	800a33a <_svfiprintf_r+0x32>
 800a32e:	230c      	movs	r3, #12
 800a330:	9a03      	ldr	r2, [sp, #12]
 800a332:	3801      	subs	r0, #1
 800a334:	6013      	str	r3, [r2, #0]
 800a336:	b021      	add	sp, #132	; 0x84
 800a338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a33a:	2340      	movs	r3, #64	; 0x40
 800a33c:	617b      	str	r3, [r7, #20]
 800a33e:	2300      	movs	r3, #0
 800a340:	ac08      	add	r4, sp, #32
 800a342:	6163      	str	r3, [r4, #20]
 800a344:	3320      	adds	r3, #32
 800a346:	7663      	strb	r3, [r4, #25]
 800a348:	3310      	adds	r3, #16
 800a34a:	76a3      	strb	r3, [r4, #26]
 800a34c:	9507      	str	r5, [sp, #28]
 800a34e:	0035      	movs	r5, r6
 800a350:	782b      	ldrb	r3, [r5, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d001      	beq.n	800a35a <_svfiprintf_r+0x52>
 800a356:	2b25      	cmp	r3, #37	; 0x25
 800a358:	d147      	bne.n	800a3ea <_svfiprintf_r+0xe2>
 800a35a:	1bab      	subs	r3, r5, r6
 800a35c:	9305      	str	r3, [sp, #20]
 800a35e:	42b5      	cmp	r5, r6
 800a360:	d00c      	beq.n	800a37c <_svfiprintf_r+0x74>
 800a362:	0032      	movs	r2, r6
 800a364:	0039      	movs	r1, r7
 800a366:	9803      	ldr	r0, [sp, #12]
 800a368:	f7ff ff6c 	bl	800a244 <__ssputs_r>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	d100      	bne.n	800a372 <_svfiprintf_r+0x6a>
 800a370:	e0ae      	b.n	800a4d0 <_svfiprintf_r+0x1c8>
 800a372:	6962      	ldr	r2, [r4, #20]
 800a374:	9b05      	ldr	r3, [sp, #20]
 800a376:	4694      	mov	ip, r2
 800a378:	4463      	add	r3, ip
 800a37a:	6163      	str	r3, [r4, #20]
 800a37c:	782b      	ldrb	r3, [r5, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d100      	bne.n	800a384 <_svfiprintf_r+0x7c>
 800a382:	e0a5      	b.n	800a4d0 <_svfiprintf_r+0x1c8>
 800a384:	2201      	movs	r2, #1
 800a386:	2300      	movs	r3, #0
 800a388:	4252      	negs	r2, r2
 800a38a:	6062      	str	r2, [r4, #4]
 800a38c:	a904      	add	r1, sp, #16
 800a38e:	3254      	adds	r2, #84	; 0x54
 800a390:	1852      	adds	r2, r2, r1
 800a392:	1c6e      	adds	r6, r5, #1
 800a394:	6023      	str	r3, [r4, #0]
 800a396:	60e3      	str	r3, [r4, #12]
 800a398:	60a3      	str	r3, [r4, #8]
 800a39a:	7013      	strb	r3, [r2, #0]
 800a39c:	65a3      	str	r3, [r4, #88]	; 0x58
 800a39e:	2205      	movs	r2, #5
 800a3a0:	7831      	ldrb	r1, [r6, #0]
 800a3a2:	4854      	ldr	r0, [pc, #336]	; (800a4f4 <_svfiprintf_r+0x1ec>)
 800a3a4:	f000 fbcc 	bl	800ab40 <memchr>
 800a3a8:	1c75      	adds	r5, r6, #1
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d11f      	bne.n	800a3ee <_svfiprintf_r+0xe6>
 800a3ae:	6822      	ldr	r2, [r4, #0]
 800a3b0:	06d3      	lsls	r3, r2, #27
 800a3b2:	d504      	bpl.n	800a3be <_svfiprintf_r+0xb6>
 800a3b4:	2353      	movs	r3, #83	; 0x53
 800a3b6:	a904      	add	r1, sp, #16
 800a3b8:	185b      	adds	r3, r3, r1
 800a3ba:	2120      	movs	r1, #32
 800a3bc:	7019      	strb	r1, [r3, #0]
 800a3be:	0713      	lsls	r3, r2, #28
 800a3c0:	d504      	bpl.n	800a3cc <_svfiprintf_r+0xc4>
 800a3c2:	2353      	movs	r3, #83	; 0x53
 800a3c4:	a904      	add	r1, sp, #16
 800a3c6:	185b      	adds	r3, r3, r1
 800a3c8:	212b      	movs	r1, #43	; 0x2b
 800a3ca:	7019      	strb	r1, [r3, #0]
 800a3cc:	7833      	ldrb	r3, [r6, #0]
 800a3ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a3d0:	d016      	beq.n	800a400 <_svfiprintf_r+0xf8>
 800a3d2:	0035      	movs	r5, r6
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	200a      	movs	r0, #10
 800a3d8:	68e3      	ldr	r3, [r4, #12]
 800a3da:	782a      	ldrb	r2, [r5, #0]
 800a3dc:	1c6e      	adds	r6, r5, #1
 800a3de:	3a30      	subs	r2, #48	; 0x30
 800a3e0:	2a09      	cmp	r2, #9
 800a3e2:	d94e      	bls.n	800a482 <_svfiprintf_r+0x17a>
 800a3e4:	2900      	cmp	r1, #0
 800a3e6:	d111      	bne.n	800a40c <_svfiprintf_r+0x104>
 800a3e8:	e017      	b.n	800a41a <_svfiprintf_r+0x112>
 800a3ea:	3501      	adds	r5, #1
 800a3ec:	e7b0      	b.n	800a350 <_svfiprintf_r+0x48>
 800a3ee:	4b41      	ldr	r3, [pc, #260]	; (800a4f4 <_svfiprintf_r+0x1ec>)
 800a3f0:	6822      	ldr	r2, [r4, #0]
 800a3f2:	1ac0      	subs	r0, r0, r3
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	4083      	lsls	r3, r0
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	002e      	movs	r6, r5
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	e7ce      	b.n	800a39e <_svfiprintf_r+0x96>
 800a400:	9b07      	ldr	r3, [sp, #28]
 800a402:	1d19      	adds	r1, r3, #4
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	9107      	str	r1, [sp, #28]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	db01      	blt.n	800a410 <_svfiprintf_r+0x108>
 800a40c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a40e:	e004      	b.n	800a41a <_svfiprintf_r+0x112>
 800a410:	425b      	negs	r3, r3
 800a412:	60e3      	str	r3, [r4, #12]
 800a414:	2302      	movs	r3, #2
 800a416:	4313      	orrs	r3, r2
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	782b      	ldrb	r3, [r5, #0]
 800a41c:	2b2e      	cmp	r3, #46	; 0x2e
 800a41e:	d10a      	bne.n	800a436 <_svfiprintf_r+0x12e>
 800a420:	786b      	ldrb	r3, [r5, #1]
 800a422:	2b2a      	cmp	r3, #42	; 0x2a
 800a424:	d135      	bne.n	800a492 <_svfiprintf_r+0x18a>
 800a426:	9b07      	ldr	r3, [sp, #28]
 800a428:	3502      	adds	r5, #2
 800a42a:	1d1a      	adds	r2, r3, #4
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	9207      	str	r2, [sp, #28]
 800a430:	2b00      	cmp	r3, #0
 800a432:	db2b      	blt.n	800a48c <_svfiprintf_r+0x184>
 800a434:	9309      	str	r3, [sp, #36]	; 0x24
 800a436:	4e30      	ldr	r6, [pc, #192]	; (800a4f8 <_svfiprintf_r+0x1f0>)
 800a438:	2203      	movs	r2, #3
 800a43a:	0030      	movs	r0, r6
 800a43c:	7829      	ldrb	r1, [r5, #0]
 800a43e:	f000 fb7f 	bl	800ab40 <memchr>
 800a442:	2800      	cmp	r0, #0
 800a444:	d006      	beq.n	800a454 <_svfiprintf_r+0x14c>
 800a446:	2340      	movs	r3, #64	; 0x40
 800a448:	1b80      	subs	r0, r0, r6
 800a44a:	4083      	lsls	r3, r0
 800a44c:	6822      	ldr	r2, [r4, #0]
 800a44e:	3501      	adds	r5, #1
 800a450:	4313      	orrs	r3, r2
 800a452:	6023      	str	r3, [r4, #0]
 800a454:	7829      	ldrb	r1, [r5, #0]
 800a456:	2206      	movs	r2, #6
 800a458:	4828      	ldr	r0, [pc, #160]	; (800a4fc <_svfiprintf_r+0x1f4>)
 800a45a:	1c6e      	adds	r6, r5, #1
 800a45c:	7621      	strb	r1, [r4, #24]
 800a45e:	f000 fb6f 	bl	800ab40 <memchr>
 800a462:	2800      	cmp	r0, #0
 800a464:	d03c      	beq.n	800a4e0 <_svfiprintf_r+0x1d8>
 800a466:	4b26      	ldr	r3, [pc, #152]	; (800a500 <_svfiprintf_r+0x1f8>)
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d125      	bne.n	800a4b8 <_svfiprintf_r+0x1b0>
 800a46c:	2207      	movs	r2, #7
 800a46e:	9b07      	ldr	r3, [sp, #28]
 800a470:	3307      	adds	r3, #7
 800a472:	4393      	bics	r3, r2
 800a474:	3308      	adds	r3, #8
 800a476:	9307      	str	r3, [sp, #28]
 800a478:	6963      	ldr	r3, [r4, #20]
 800a47a:	9a04      	ldr	r2, [sp, #16]
 800a47c:	189b      	adds	r3, r3, r2
 800a47e:	6163      	str	r3, [r4, #20]
 800a480:	e765      	b.n	800a34e <_svfiprintf_r+0x46>
 800a482:	4343      	muls	r3, r0
 800a484:	0035      	movs	r5, r6
 800a486:	2101      	movs	r1, #1
 800a488:	189b      	adds	r3, r3, r2
 800a48a:	e7a6      	b.n	800a3da <_svfiprintf_r+0xd2>
 800a48c:	2301      	movs	r3, #1
 800a48e:	425b      	negs	r3, r3
 800a490:	e7d0      	b.n	800a434 <_svfiprintf_r+0x12c>
 800a492:	2300      	movs	r3, #0
 800a494:	200a      	movs	r0, #10
 800a496:	001a      	movs	r2, r3
 800a498:	3501      	adds	r5, #1
 800a49a:	6063      	str	r3, [r4, #4]
 800a49c:	7829      	ldrb	r1, [r5, #0]
 800a49e:	1c6e      	adds	r6, r5, #1
 800a4a0:	3930      	subs	r1, #48	; 0x30
 800a4a2:	2909      	cmp	r1, #9
 800a4a4:	d903      	bls.n	800a4ae <_svfiprintf_r+0x1a6>
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d0c5      	beq.n	800a436 <_svfiprintf_r+0x12e>
 800a4aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a4ac:	e7c3      	b.n	800a436 <_svfiprintf_r+0x12e>
 800a4ae:	4342      	muls	r2, r0
 800a4b0:	0035      	movs	r5, r6
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	1852      	adds	r2, r2, r1
 800a4b6:	e7f1      	b.n	800a49c <_svfiprintf_r+0x194>
 800a4b8:	ab07      	add	r3, sp, #28
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	003a      	movs	r2, r7
 800a4be:	0021      	movs	r1, r4
 800a4c0:	4b10      	ldr	r3, [pc, #64]	; (800a504 <_svfiprintf_r+0x1fc>)
 800a4c2:	9803      	ldr	r0, [sp, #12]
 800a4c4:	e000      	b.n	800a4c8 <_svfiprintf_r+0x1c0>
 800a4c6:	bf00      	nop
 800a4c8:	9004      	str	r0, [sp, #16]
 800a4ca:	9b04      	ldr	r3, [sp, #16]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	d1d3      	bne.n	800a478 <_svfiprintf_r+0x170>
 800a4d0:	89bb      	ldrh	r3, [r7, #12]
 800a4d2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a4d4:	065b      	lsls	r3, r3, #25
 800a4d6:	d400      	bmi.n	800a4da <_svfiprintf_r+0x1d2>
 800a4d8:	e72d      	b.n	800a336 <_svfiprintf_r+0x2e>
 800a4da:	2001      	movs	r0, #1
 800a4dc:	4240      	negs	r0, r0
 800a4de:	e72a      	b.n	800a336 <_svfiprintf_r+0x2e>
 800a4e0:	ab07      	add	r3, sp, #28
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	003a      	movs	r2, r7
 800a4e6:	0021      	movs	r1, r4
 800a4e8:	4b06      	ldr	r3, [pc, #24]	; (800a504 <_svfiprintf_r+0x1fc>)
 800a4ea:	9803      	ldr	r0, [sp, #12]
 800a4ec:	f000 f9de 	bl	800a8ac <_printf_i>
 800a4f0:	e7ea      	b.n	800a4c8 <_svfiprintf_r+0x1c0>
 800a4f2:	46c0      	nop			; (mov r8, r8)
 800a4f4:	0800b6e4 	.word	0x0800b6e4
 800a4f8:	0800b6ea 	.word	0x0800b6ea
 800a4fc:	0800b6ee 	.word	0x0800b6ee
 800a500:	00000000 	.word	0x00000000
 800a504:	0800a245 	.word	0x0800a245

0800a508 <__sfputc_r>:
 800a508:	6893      	ldr	r3, [r2, #8]
 800a50a:	b510      	push	{r4, lr}
 800a50c:	3b01      	subs	r3, #1
 800a50e:	6093      	str	r3, [r2, #8]
 800a510:	2b00      	cmp	r3, #0
 800a512:	da04      	bge.n	800a51e <__sfputc_r+0x16>
 800a514:	6994      	ldr	r4, [r2, #24]
 800a516:	42a3      	cmp	r3, r4
 800a518:	db07      	blt.n	800a52a <__sfputc_r+0x22>
 800a51a:	290a      	cmp	r1, #10
 800a51c:	d005      	beq.n	800a52a <__sfputc_r+0x22>
 800a51e:	6813      	ldr	r3, [r2, #0]
 800a520:	1c58      	adds	r0, r3, #1
 800a522:	6010      	str	r0, [r2, #0]
 800a524:	7019      	strb	r1, [r3, #0]
 800a526:	0008      	movs	r0, r1
 800a528:	bd10      	pop	{r4, pc}
 800a52a:	f7ff fd07 	bl	8009f3c <__swbuf_r>
 800a52e:	0001      	movs	r1, r0
 800a530:	e7f9      	b.n	800a526 <__sfputc_r+0x1e>

0800a532 <__sfputs_r>:
 800a532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a534:	0006      	movs	r6, r0
 800a536:	000f      	movs	r7, r1
 800a538:	0014      	movs	r4, r2
 800a53a:	18d5      	adds	r5, r2, r3
 800a53c:	42ac      	cmp	r4, r5
 800a53e:	d101      	bne.n	800a544 <__sfputs_r+0x12>
 800a540:	2000      	movs	r0, #0
 800a542:	e007      	b.n	800a554 <__sfputs_r+0x22>
 800a544:	7821      	ldrb	r1, [r4, #0]
 800a546:	003a      	movs	r2, r7
 800a548:	0030      	movs	r0, r6
 800a54a:	f7ff ffdd 	bl	800a508 <__sfputc_r>
 800a54e:	3401      	adds	r4, #1
 800a550:	1c43      	adds	r3, r0, #1
 800a552:	d1f3      	bne.n	800a53c <__sfputs_r+0xa>
 800a554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a558 <_vfiprintf_r>:
 800a558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a55a:	b0a1      	sub	sp, #132	; 0x84
 800a55c:	0006      	movs	r6, r0
 800a55e:	000c      	movs	r4, r1
 800a560:	001f      	movs	r7, r3
 800a562:	9203      	str	r2, [sp, #12]
 800a564:	2800      	cmp	r0, #0
 800a566:	d004      	beq.n	800a572 <_vfiprintf_r+0x1a>
 800a568:	6983      	ldr	r3, [r0, #24]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d101      	bne.n	800a572 <_vfiprintf_r+0x1a>
 800a56e:	f7ff fa17 	bl	80099a0 <__sinit>
 800a572:	4b8e      	ldr	r3, [pc, #568]	; (800a7ac <_vfiprintf_r+0x254>)
 800a574:	429c      	cmp	r4, r3
 800a576:	d11c      	bne.n	800a5b2 <_vfiprintf_r+0x5a>
 800a578:	6874      	ldr	r4, [r6, #4]
 800a57a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a57c:	07db      	lsls	r3, r3, #31
 800a57e:	d405      	bmi.n	800a58c <_vfiprintf_r+0x34>
 800a580:	89a3      	ldrh	r3, [r4, #12]
 800a582:	059b      	lsls	r3, r3, #22
 800a584:	d402      	bmi.n	800a58c <_vfiprintf_r+0x34>
 800a586:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a588:	f7ff facf 	bl	8009b2a <__retarget_lock_acquire_recursive>
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	071b      	lsls	r3, r3, #28
 800a590:	d502      	bpl.n	800a598 <_vfiprintf_r+0x40>
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d11d      	bne.n	800a5d4 <_vfiprintf_r+0x7c>
 800a598:	0021      	movs	r1, r4
 800a59a:	0030      	movs	r0, r6
 800a59c:	f7ff fd38 	bl	800a010 <__swsetup_r>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d017      	beq.n	800a5d4 <_vfiprintf_r+0x7c>
 800a5a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5a6:	07db      	lsls	r3, r3, #31
 800a5a8:	d50d      	bpl.n	800a5c6 <_vfiprintf_r+0x6e>
 800a5aa:	2001      	movs	r0, #1
 800a5ac:	4240      	negs	r0, r0
 800a5ae:	b021      	add	sp, #132	; 0x84
 800a5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5b2:	4b7f      	ldr	r3, [pc, #508]	; (800a7b0 <_vfiprintf_r+0x258>)
 800a5b4:	429c      	cmp	r4, r3
 800a5b6:	d101      	bne.n	800a5bc <_vfiprintf_r+0x64>
 800a5b8:	68b4      	ldr	r4, [r6, #8]
 800a5ba:	e7de      	b.n	800a57a <_vfiprintf_r+0x22>
 800a5bc:	4b7d      	ldr	r3, [pc, #500]	; (800a7b4 <_vfiprintf_r+0x25c>)
 800a5be:	429c      	cmp	r4, r3
 800a5c0:	d1db      	bne.n	800a57a <_vfiprintf_r+0x22>
 800a5c2:	68f4      	ldr	r4, [r6, #12]
 800a5c4:	e7d9      	b.n	800a57a <_vfiprintf_r+0x22>
 800a5c6:	89a3      	ldrh	r3, [r4, #12]
 800a5c8:	059b      	lsls	r3, r3, #22
 800a5ca:	d4ee      	bmi.n	800a5aa <_vfiprintf_r+0x52>
 800a5cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5ce:	f7ff faad 	bl	8009b2c <__retarget_lock_release_recursive>
 800a5d2:	e7ea      	b.n	800a5aa <_vfiprintf_r+0x52>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	ad08      	add	r5, sp, #32
 800a5d8:	616b      	str	r3, [r5, #20]
 800a5da:	3320      	adds	r3, #32
 800a5dc:	766b      	strb	r3, [r5, #25]
 800a5de:	3310      	adds	r3, #16
 800a5e0:	76ab      	strb	r3, [r5, #26]
 800a5e2:	9707      	str	r7, [sp, #28]
 800a5e4:	9f03      	ldr	r7, [sp, #12]
 800a5e6:	783b      	ldrb	r3, [r7, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d001      	beq.n	800a5f0 <_vfiprintf_r+0x98>
 800a5ec:	2b25      	cmp	r3, #37	; 0x25
 800a5ee:	d14e      	bne.n	800a68e <_vfiprintf_r+0x136>
 800a5f0:	9b03      	ldr	r3, [sp, #12]
 800a5f2:	1afb      	subs	r3, r7, r3
 800a5f4:	9305      	str	r3, [sp, #20]
 800a5f6:	9b03      	ldr	r3, [sp, #12]
 800a5f8:	429f      	cmp	r7, r3
 800a5fa:	d00d      	beq.n	800a618 <_vfiprintf_r+0xc0>
 800a5fc:	9b05      	ldr	r3, [sp, #20]
 800a5fe:	0021      	movs	r1, r4
 800a600:	0030      	movs	r0, r6
 800a602:	9a03      	ldr	r2, [sp, #12]
 800a604:	f7ff ff95 	bl	800a532 <__sfputs_r>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d100      	bne.n	800a60e <_vfiprintf_r+0xb6>
 800a60c:	e0b5      	b.n	800a77a <_vfiprintf_r+0x222>
 800a60e:	696a      	ldr	r2, [r5, #20]
 800a610:	9b05      	ldr	r3, [sp, #20]
 800a612:	4694      	mov	ip, r2
 800a614:	4463      	add	r3, ip
 800a616:	616b      	str	r3, [r5, #20]
 800a618:	783b      	ldrb	r3, [r7, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d100      	bne.n	800a620 <_vfiprintf_r+0xc8>
 800a61e:	e0ac      	b.n	800a77a <_vfiprintf_r+0x222>
 800a620:	2201      	movs	r2, #1
 800a622:	1c7b      	adds	r3, r7, #1
 800a624:	9303      	str	r3, [sp, #12]
 800a626:	2300      	movs	r3, #0
 800a628:	4252      	negs	r2, r2
 800a62a:	606a      	str	r2, [r5, #4]
 800a62c:	a904      	add	r1, sp, #16
 800a62e:	3254      	adds	r2, #84	; 0x54
 800a630:	1852      	adds	r2, r2, r1
 800a632:	602b      	str	r3, [r5, #0]
 800a634:	60eb      	str	r3, [r5, #12]
 800a636:	60ab      	str	r3, [r5, #8]
 800a638:	7013      	strb	r3, [r2, #0]
 800a63a:	65ab      	str	r3, [r5, #88]	; 0x58
 800a63c:	9b03      	ldr	r3, [sp, #12]
 800a63e:	2205      	movs	r2, #5
 800a640:	7819      	ldrb	r1, [r3, #0]
 800a642:	485d      	ldr	r0, [pc, #372]	; (800a7b8 <_vfiprintf_r+0x260>)
 800a644:	f000 fa7c 	bl	800ab40 <memchr>
 800a648:	9b03      	ldr	r3, [sp, #12]
 800a64a:	1c5f      	adds	r7, r3, #1
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d120      	bne.n	800a692 <_vfiprintf_r+0x13a>
 800a650:	682a      	ldr	r2, [r5, #0]
 800a652:	06d3      	lsls	r3, r2, #27
 800a654:	d504      	bpl.n	800a660 <_vfiprintf_r+0x108>
 800a656:	2353      	movs	r3, #83	; 0x53
 800a658:	a904      	add	r1, sp, #16
 800a65a:	185b      	adds	r3, r3, r1
 800a65c:	2120      	movs	r1, #32
 800a65e:	7019      	strb	r1, [r3, #0]
 800a660:	0713      	lsls	r3, r2, #28
 800a662:	d504      	bpl.n	800a66e <_vfiprintf_r+0x116>
 800a664:	2353      	movs	r3, #83	; 0x53
 800a666:	a904      	add	r1, sp, #16
 800a668:	185b      	adds	r3, r3, r1
 800a66a:	212b      	movs	r1, #43	; 0x2b
 800a66c:	7019      	strb	r1, [r3, #0]
 800a66e:	9b03      	ldr	r3, [sp, #12]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	2b2a      	cmp	r3, #42	; 0x2a
 800a674:	d016      	beq.n	800a6a4 <_vfiprintf_r+0x14c>
 800a676:	2100      	movs	r1, #0
 800a678:	68eb      	ldr	r3, [r5, #12]
 800a67a:	9f03      	ldr	r7, [sp, #12]
 800a67c:	783a      	ldrb	r2, [r7, #0]
 800a67e:	1c78      	adds	r0, r7, #1
 800a680:	3a30      	subs	r2, #48	; 0x30
 800a682:	4684      	mov	ip, r0
 800a684:	2a09      	cmp	r2, #9
 800a686:	d94f      	bls.n	800a728 <_vfiprintf_r+0x1d0>
 800a688:	2900      	cmp	r1, #0
 800a68a:	d111      	bne.n	800a6b0 <_vfiprintf_r+0x158>
 800a68c:	e017      	b.n	800a6be <_vfiprintf_r+0x166>
 800a68e:	3701      	adds	r7, #1
 800a690:	e7a9      	b.n	800a5e6 <_vfiprintf_r+0x8e>
 800a692:	4b49      	ldr	r3, [pc, #292]	; (800a7b8 <_vfiprintf_r+0x260>)
 800a694:	682a      	ldr	r2, [r5, #0]
 800a696:	1ac0      	subs	r0, r0, r3
 800a698:	2301      	movs	r3, #1
 800a69a:	4083      	lsls	r3, r0
 800a69c:	4313      	orrs	r3, r2
 800a69e:	602b      	str	r3, [r5, #0]
 800a6a0:	9703      	str	r7, [sp, #12]
 800a6a2:	e7cb      	b.n	800a63c <_vfiprintf_r+0xe4>
 800a6a4:	9b07      	ldr	r3, [sp, #28]
 800a6a6:	1d19      	adds	r1, r3, #4
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	9107      	str	r1, [sp, #28]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	db01      	blt.n	800a6b4 <_vfiprintf_r+0x15c>
 800a6b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6b2:	e004      	b.n	800a6be <_vfiprintf_r+0x166>
 800a6b4:	425b      	negs	r3, r3
 800a6b6:	60eb      	str	r3, [r5, #12]
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	602b      	str	r3, [r5, #0]
 800a6be:	783b      	ldrb	r3, [r7, #0]
 800a6c0:	2b2e      	cmp	r3, #46	; 0x2e
 800a6c2:	d10a      	bne.n	800a6da <_vfiprintf_r+0x182>
 800a6c4:	787b      	ldrb	r3, [r7, #1]
 800a6c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a6c8:	d137      	bne.n	800a73a <_vfiprintf_r+0x1e2>
 800a6ca:	9b07      	ldr	r3, [sp, #28]
 800a6cc:	3702      	adds	r7, #2
 800a6ce:	1d1a      	adds	r2, r3, #4
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	9207      	str	r2, [sp, #28]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	db2d      	blt.n	800a734 <_vfiprintf_r+0x1dc>
 800a6d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6da:	2203      	movs	r2, #3
 800a6dc:	7839      	ldrb	r1, [r7, #0]
 800a6de:	4837      	ldr	r0, [pc, #220]	; (800a7bc <_vfiprintf_r+0x264>)
 800a6e0:	f000 fa2e 	bl	800ab40 <memchr>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d007      	beq.n	800a6f8 <_vfiprintf_r+0x1a0>
 800a6e8:	4b34      	ldr	r3, [pc, #208]	; (800a7bc <_vfiprintf_r+0x264>)
 800a6ea:	682a      	ldr	r2, [r5, #0]
 800a6ec:	1ac0      	subs	r0, r0, r3
 800a6ee:	2340      	movs	r3, #64	; 0x40
 800a6f0:	4083      	lsls	r3, r0
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	3701      	adds	r7, #1
 800a6f6:	602b      	str	r3, [r5, #0]
 800a6f8:	7839      	ldrb	r1, [r7, #0]
 800a6fa:	1c7b      	adds	r3, r7, #1
 800a6fc:	2206      	movs	r2, #6
 800a6fe:	4830      	ldr	r0, [pc, #192]	; (800a7c0 <_vfiprintf_r+0x268>)
 800a700:	9303      	str	r3, [sp, #12]
 800a702:	7629      	strb	r1, [r5, #24]
 800a704:	f000 fa1c 	bl	800ab40 <memchr>
 800a708:	2800      	cmp	r0, #0
 800a70a:	d045      	beq.n	800a798 <_vfiprintf_r+0x240>
 800a70c:	4b2d      	ldr	r3, [pc, #180]	; (800a7c4 <_vfiprintf_r+0x26c>)
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d127      	bne.n	800a762 <_vfiprintf_r+0x20a>
 800a712:	2207      	movs	r2, #7
 800a714:	9b07      	ldr	r3, [sp, #28]
 800a716:	3307      	adds	r3, #7
 800a718:	4393      	bics	r3, r2
 800a71a:	3308      	adds	r3, #8
 800a71c:	9307      	str	r3, [sp, #28]
 800a71e:	696b      	ldr	r3, [r5, #20]
 800a720:	9a04      	ldr	r2, [sp, #16]
 800a722:	189b      	adds	r3, r3, r2
 800a724:	616b      	str	r3, [r5, #20]
 800a726:	e75d      	b.n	800a5e4 <_vfiprintf_r+0x8c>
 800a728:	210a      	movs	r1, #10
 800a72a:	434b      	muls	r3, r1
 800a72c:	4667      	mov	r7, ip
 800a72e:	189b      	adds	r3, r3, r2
 800a730:	3909      	subs	r1, #9
 800a732:	e7a3      	b.n	800a67c <_vfiprintf_r+0x124>
 800a734:	2301      	movs	r3, #1
 800a736:	425b      	negs	r3, r3
 800a738:	e7ce      	b.n	800a6d8 <_vfiprintf_r+0x180>
 800a73a:	2300      	movs	r3, #0
 800a73c:	001a      	movs	r2, r3
 800a73e:	3701      	adds	r7, #1
 800a740:	606b      	str	r3, [r5, #4]
 800a742:	7839      	ldrb	r1, [r7, #0]
 800a744:	1c78      	adds	r0, r7, #1
 800a746:	3930      	subs	r1, #48	; 0x30
 800a748:	4684      	mov	ip, r0
 800a74a:	2909      	cmp	r1, #9
 800a74c:	d903      	bls.n	800a756 <_vfiprintf_r+0x1fe>
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d0c3      	beq.n	800a6da <_vfiprintf_r+0x182>
 800a752:	9209      	str	r2, [sp, #36]	; 0x24
 800a754:	e7c1      	b.n	800a6da <_vfiprintf_r+0x182>
 800a756:	230a      	movs	r3, #10
 800a758:	435a      	muls	r2, r3
 800a75a:	4667      	mov	r7, ip
 800a75c:	1852      	adds	r2, r2, r1
 800a75e:	3b09      	subs	r3, #9
 800a760:	e7ef      	b.n	800a742 <_vfiprintf_r+0x1ea>
 800a762:	ab07      	add	r3, sp, #28
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	0022      	movs	r2, r4
 800a768:	0029      	movs	r1, r5
 800a76a:	0030      	movs	r0, r6
 800a76c:	4b16      	ldr	r3, [pc, #88]	; (800a7c8 <_vfiprintf_r+0x270>)
 800a76e:	e000      	b.n	800a772 <_vfiprintf_r+0x21a>
 800a770:	bf00      	nop
 800a772:	9004      	str	r0, [sp, #16]
 800a774:	9b04      	ldr	r3, [sp, #16]
 800a776:	3301      	adds	r3, #1
 800a778:	d1d1      	bne.n	800a71e <_vfiprintf_r+0x1c6>
 800a77a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a77c:	07db      	lsls	r3, r3, #31
 800a77e:	d405      	bmi.n	800a78c <_vfiprintf_r+0x234>
 800a780:	89a3      	ldrh	r3, [r4, #12]
 800a782:	059b      	lsls	r3, r3, #22
 800a784:	d402      	bmi.n	800a78c <_vfiprintf_r+0x234>
 800a786:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a788:	f7ff f9d0 	bl	8009b2c <__retarget_lock_release_recursive>
 800a78c:	89a3      	ldrh	r3, [r4, #12]
 800a78e:	065b      	lsls	r3, r3, #25
 800a790:	d500      	bpl.n	800a794 <_vfiprintf_r+0x23c>
 800a792:	e70a      	b.n	800a5aa <_vfiprintf_r+0x52>
 800a794:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a796:	e70a      	b.n	800a5ae <_vfiprintf_r+0x56>
 800a798:	ab07      	add	r3, sp, #28
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	0022      	movs	r2, r4
 800a79e:	0029      	movs	r1, r5
 800a7a0:	0030      	movs	r0, r6
 800a7a2:	4b09      	ldr	r3, [pc, #36]	; (800a7c8 <_vfiprintf_r+0x270>)
 800a7a4:	f000 f882 	bl	800a8ac <_printf_i>
 800a7a8:	e7e3      	b.n	800a772 <_vfiprintf_r+0x21a>
 800a7aa:	46c0      	nop			; (mov r8, r8)
 800a7ac:	0800b6a0 	.word	0x0800b6a0
 800a7b0:	0800b6c0 	.word	0x0800b6c0
 800a7b4:	0800b680 	.word	0x0800b680
 800a7b8:	0800b6e4 	.word	0x0800b6e4
 800a7bc:	0800b6ea 	.word	0x0800b6ea
 800a7c0:	0800b6ee 	.word	0x0800b6ee
 800a7c4:	00000000 	.word	0x00000000
 800a7c8:	0800a533 	.word	0x0800a533

0800a7cc <_printf_common>:
 800a7cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7ce:	0015      	movs	r5, r2
 800a7d0:	9301      	str	r3, [sp, #4]
 800a7d2:	688a      	ldr	r2, [r1, #8]
 800a7d4:	690b      	ldr	r3, [r1, #16]
 800a7d6:	000c      	movs	r4, r1
 800a7d8:	9000      	str	r0, [sp, #0]
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	da00      	bge.n	800a7e0 <_printf_common+0x14>
 800a7de:	0013      	movs	r3, r2
 800a7e0:	0022      	movs	r2, r4
 800a7e2:	602b      	str	r3, [r5, #0]
 800a7e4:	3243      	adds	r2, #67	; 0x43
 800a7e6:	7812      	ldrb	r2, [r2, #0]
 800a7e8:	2a00      	cmp	r2, #0
 800a7ea:	d001      	beq.n	800a7f0 <_printf_common+0x24>
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	602b      	str	r3, [r5, #0]
 800a7f0:	6823      	ldr	r3, [r4, #0]
 800a7f2:	069b      	lsls	r3, r3, #26
 800a7f4:	d502      	bpl.n	800a7fc <_printf_common+0x30>
 800a7f6:	682b      	ldr	r3, [r5, #0]
 800a7f8:	3302      	adds	r3, #2
 800a7fa:	602b      	str	r3, [r5, #0]
 800a7fc:	6822      	ldr	r2, [r4, #0]
 800a7fe:	2306      	movs	r3, #6
 800a800:	0017      	movs	r7, r2
 800a802:	401f      	ands	r7, r3
 800a804:	421a      	tst	r2, r3
 800a806:	d027      	beq.n	800a858 <_printf_common+0x8c>
 800a808:	0023      	movs	r3, r4
 800a80a:	3343      	adds	r3, #67	; 0x43
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	1e5a      	subs	r2, r3, #1
 800a810:	4193      	sbcs	r3, r2
 800a812:	6822      	ldr	r2, [r4, #0]
 800a814:	0692      	lsls	r2, r2, #26
 800a816:	d430      	bmi.n	800a87a <_printf_common+0xae>
 800a818:	0022      	movs	r2, r4
 800a81a:	9901      	ldr	r1, [sp, #4]
 800a81c:	9800      	ldr	r0, [sp, #0]
 800a81e:	9e08      	ldr	r6, [sp, #32]
 800a820:	3243      	adds	r2, #67	; 0x43
 800a822:	47b0      	blx	r6
 800a824:	1c43      	adds	r3, r0, #1
 800a826:	d025      	beq.n	800a874 <_printf_common+0xa8>
 800a828:	2306      	movs	r3, #6
 800a82a:	6820      	ldr	r0, [r4, #0]
 800a82c:	682a      	ldr	r2, [r5, #0]
 800a82e:	68e1      	ldr	r1, [r4, #12]
 800a830:	2500      	movs	r5, #0
 800a832:	4003      	ands	r3, r0
 800a834:	2b04      	cmp	r3, #4
 800a836:	d103      	bne.n	800a840 <_printf_common+0x74>
 800a838:	1a8d      	subs	r5, r1, r2
 800a83a:	43eb      	mvns	r3, r5
 800a83c:	17db      	asrs	r3, r3, #31
 800a83e:	401d      	ands	r5, r3
 800a840:	68a3      	ldr	r3, [r4, #8]
 800a842:	6922      	ldr	r2, [r4, #16]
 800a844:	4293      	cmp	r3, r2
 800a846:	dd01      	ble.n	800a84c <_printf_common+0x80>
 800a848:	1a9b      	subs	r3, r3, r2
 800a84a:	18ed      	adds	r5, r5, r3
 800a84c:	2700      	movs	r7, #0
 800a84e:	42bd      	cmp	r5, r7
 800a850:	d120      	bne.n	800a894 <_printf_common+0xc8>
 800a852:	2000      	movs	r0, #0
 800a854:	e010      	b.n	800a878 <_printf_common+0xac>
 800a856:	3701      	adds	r7, #1
 800a858:	68e3      	ldr	r3, [r4, #12]
 800a85a:	682a      	ldr	r2, [r5, #0]
 800a85c:	1a9b      	subs	r3, r3, r2
 800a85e:	42bb      	cmp	r3, r7
 800a860:	ddd2      	ble.n	800a808 <_printf_common+0x3c>
 800a862:	0022      	movs	r2, r4
 800a864:	2301      	movs	r3, #1
 800a866:	9901      	ldr	r1, [sp, #4]
 800a868:	9800      	ldr	r0, [sp, #0]
 800a86a:	9e08      	ldr	r6, [sp, #32]
 800a86c:	3219      	adds	r2, #25
 800a86e:	47b0      	blx	r6
 800a870:	1c43      	adds	r3, r0, #1
 800a872:	d1f0      	bne.n	800a856 <_printf_common+0x8a>
 800a874:	2001      	movs	r0, #1
 800a876:	4240      	negs	r0, r0
 800a878:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a87a:	2030      	movs	r0, #48	; 0x30
 800a87c:	18e1      	adds	r1, r4, r3
 800a87e:	3143      	adds	r1, #67	; 0x43
 800a880:	7008      	strb	r0, [r1, #0]
 800a882:	0021      	movs	r1, r4
 800a884:	1c5a      	adds	r2, r3, #1
 800a886:	3145      	adds	r1, #69	; 0x45
 800a888:	7809      	ldrb	r1, [r1, #0]
 800a88a:	18a2      	adds	r2, r4, r2
 800a88c:	3243      	adds	r2, #67	; 0x43
 800a88e:	3302      	adds	r3, #2
 800a890:	7011      	strb	r1, [r2, #0]
 800a892:	e7c1      	b.n	800a818 <_printf_common+0x4c>
 800a894:	0022      	movs	r2, r4
 800a896:	2301      	movs	r3, #1
 800a898:	9901      	ldr	r1, [sp, #4]
 800a89a:	9800      	ldr	r0, [sp, #0]
 800a89c:	9e08      	ldr	r6, [sp, #32]
 800a89e:	321a      	adds	r2, #26
 800a8a0:	47b0      	blx	r6
 800a8a2:	1c43      	adds	r3, r0, #1
 800a8a4:	d0e6      	beq.n	800a874 <_printf_common+0xa8>
 800a8a6:	3701      	adds	r7, #1
 800a8a8:	e7d1      	b.n	800a84e <_printf_common+0x82>
	...

0800a8ac <_printf_i>:
 800a8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ae:	b08b      	sub	sp, #44	; 0x2c
 800a8b0:	9206      	str	r2, [sp, #24]
 800a8b2:	000a      	movs	r2, r1
 800a8b4:	3243      	adds	r2, #67	; 0x43
 800a8b6:	9307      	str	r3, [sp, #28]
 800a8b8:	9005      	str	r0, [sp, #20]
 800a8ba:	9204      	str	r2, [sp, #16]
 800a8bc:	7e0a      	ldrb	r2, [r1, #24]
 800a8be:	000c      	movs	r4, r1
 800a8c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8c2:	2a78      	cmp	r2, #120	; 0x78
 800a8c4:	d807      	bhi.n	800a8d6 <_printf_i+0x2a>
 800a8c6:	2a62      	cmp	r2, #98	; 0x62
 800a8c8:	d809      	bhi.n	800a8de <_printf_i+0x32>
 800a8ca:	2a00      	cmp	r2, #0
 800a8cc:	d100      	bne.n	800a8d0 <_printf_i+0x24>
 800a8ce:	e0c1      	b.n	800aa54 <_printf_i+0x1a8>
 800a8d0:	2a58      	cmp	r2, #88	; 0x58
 800a8d2:	d100      	bne.n	800a8d6 <_printf_i+0x2a>
 800a8d4:	e08c      	b.n	800a9f0 <_printf_i+0x144>
 800a8d6:	0026      	movs	r6, r4
 800a8d8:	3642      	adds	r6, #66	; 0x42
 800a8da:	7032      	strb	r2, [r6, #0]
 800a8dc:	e022      	b.n	800a924 <_printf_i+0x78>
 800a8de:	0010      	movs	r0, r2
 800a8e0:	3863      	subs	r0, #99	; 0x63
 800a8e2:	2815      	cmp	r0, #21
 800a8e4:	d8f7      	bhi.n	800a8d6 <_printf_i+0x2a>
 800a8e6:	f7f7 fac9 	bl	8001e7c <__gnu_thumb1_case_shi>
 800a8ea:	0016      	.short	0x0016
 800a8ec:	fff6001f 	.word	0xfff6001f
 800a8f0:	fff6fff6 	.word	0xfff6fff6
 800a8f4:	001ffff6 	.word	0x001ffff6
 800a8f8:	fff6fff6 	.word	0xfff6fff6
 800a8fc:	fff6fff6 	.word	0xfff6fff6
 800a900:	003600a8 	.word	0x003600a8
 800a904:	fff6009a 	.word	0xfff6009a
 800a908:	00b9fff6 	.word	0x00b9fff6
 800a90c:	0036fff6 	.word	0x0036fff6
 800a910:	fff6fff6 	.word	0xfff6fff6
 800a914:	009e      	.short	0x009e
 800a916:	0026      	movs	r6, r4
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	3642      	adds	r6, #66	; 0x42
 800a91c:	1d11      	adds	r1, r2, #4
 800a91e:	6019      	str	r1, [r3, #0]
 800a920:	6813      	ldr	r3, [r2, #0]
 800a922:	7033      	strb	r3, [r6, #0]
 800a924:	2301      	movs	r3, #1
 800a926:	e0a7      	b.n	800aa78 <_printf_i+0x1cc>
 800a928:	6808      	ldr	r0, [r1, #0]
 800a92a:	6819      	ldr	r1, [r3, #0]
 800a92c:	1d0a      	adds	r2, r1, #4
 800a92e:	0605      	lsls	r5, r0, #24
 800a930:	d50b      	bpl.n	800a94a <_printf_i+0x9e>
 800a932:	680d      	ldr	r5, [r1, #0]
 800a934:	601a      	str	r2, [r3, #0]
 800a936:	2d00      	cmp	r5, #0
 800a938:	da03      	bge.n	800a942 <_printf_i+0x96>
 800a93a:	232d      	movs	r3, #45	; 0x2d
 800a93c:	9a04      	ldr	r2, [sp, #16]
 800a93e:	426d      	negs	r5, r5
 800a940:	7013      	strb	r3, [r2, #0]
 800a942:	4b61      	ldr	r3, [pc, #388]	; (800aac8 <_printf_i+0x21c>)
 800a944:	270a      	movs	r7, #10
 800a946:	9303      	str	r3, [sp, #12]
 800a948:	e01b      	b.n	800a982 <_printf_i+0xd6>
 800a94a:	680d      	ldr	r5, [r1, #0]
 800a94c:	601a      	str	r2, [r3, #0]
 800a94e:	0641      	lsls	r1, r0, #25
 800a950:	d5f1      	bpl.n	800a936 <_printf_i+0x8a>
 800a952:	b22d      	sxth	r5, r5
 800a954:	e7ef      	b.n	800a936 <_printf_i+0x8a>
 800a956:	680d      	ldr	r5, [r1, #0]
 800a958:	6819      	ldr	r1, [r3, #0]
 800a95a:	1d08      	adds	r0, r1, #4
 800a95c:	6018      	str	r0, [r3, #0]
 800a95e:	062e      	lsls	r6, r5, #24
 800a960:	d501      	bpl.n	800a966 <_printf_i+0xba>
 800a962:	680d      	ldr	r5, [r1, #0]
 800a964:	e003      	b.n	800a96e <_printf_i+0xc2>
 800a966:	066d      	lsls	r5, r5, #25
 800a968:	d5fb      	bpl.n	800a962 <_printf_i+0xb6>
 800a96a:	680d      	ldr	r5, [r1, #0]
 800a96c:	b2ad      	uxth	r5, r5
 800a96e:	4b56      	ldr	r3, [pc, #344]	; (800aac8 <_printf_i+0x21c>)
 800a970:	2708      	movs	r7, #8
 800a972:	9303      	str	r3, [sp, #12]
 800a974:	2a6f      	cmp	r2, #111	; 0x6f
 800a976:	d000      	beq.n	800a97a <_printf_i+0xce>
 800a978:	3702      	adds	r7, #2
 800a97a:	0023      	movs	r3, r4
 800a97c:	2200      	movs	r2, #0
 800a97e:	3343      	adds	r3, #67	; 0x43
 800a980:	701a      	strb	r2, [r3, #0]
 800a982:	6863      	ldr	r3, [r4, #4]
 800a984:	60a3      	str	r3, [r4, #8]
 800a986:	2b00      	cmp	r3, #0
 800a988:	db03      	blt.n	800a992 <_printf_i+0xe6>
 800a98a:	2204      	movs	r2, #4
 800a98c:	6821      	ldr	r1, [r4, #0]
 800a98e:	4391      	bics	r1, r2
 800a990:	6021      	str	r1, [r4, #0]
 800a992:	2d00      	cmp	r5, #0
 800a994:	d102      	bne.n	800a99c <_printf_i+0xf0>
 800a996:	9e04      	ldr	r6, [sp, #16]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00c      	beq.n	800a9b6 <_printf_i+0x10a>
 800a99c:	9e04      	ldr	r6, [sp, #16]
 800a99e:	0028      	movs	r0, r5
 800a9a0:	0039      	movs	r1, r7
 800a9a2:	f7f7 fafb 	bl	8001f9c <__aeabi_uidivmod>
 800a9a6:	9b03      	ldr	r3, [sp, #12]
 800a9a8:	3e01      	subs	r6, #1
 800a9aa:	5c5b      	ldrb	r3, [r3, r1]
 800a9ac:	7033      	strb	r3, [r6, #0]
 800a9ae:	002b      	movs	r3, r5
 800a9b0:	0005      	movs	r5, r0
 800a9b2:	429f      	cmp	r7, r3
 800a9b4:	d9f3      	bls.n	800a99e <_printf_i+0xf2>
 800a9b6:	2f08      	cmp	r7, #8
 800a9b8:	d109      	bne.n	800a9ce <_printf_i+0x122>
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	07db      	lsls	r3, r3, #31
 800a9be:	d506      	bpl.n	800a9ce <_printf_i+0x122>
 800a9c0:	6863      	ldr	r3, [r4, #4]
 800a9c2:	6922      	ldr	r2, [r4, #16]
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	dc02      	bgt.n	800a9ce <_printf_i+0x122>
 800a9c8:	2330      	movs	r3, #48	; 0x30
 800a9ca:	3e01      	subs	r6, #1
 800a9cc:	7033      	strb	r3, [r6, #0]
 800a9ce:	9b04      	ldr	r3, [sp, #16]
 800a9d0:	1b9b      	subs	r3, r3, r6
 800a9d2:	6123      	str	r3, [r4, #16]
 800a9d4:	9b07      	ldr	r3, [sp, #28]
 800a9d6:	0021      	movs	r1, r4
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	9805      	ldr	r0, [sp, #20]
 800a9dc:	9b06      	ldr	r3, [sp, #24]
 800a9de:	aa09      	add	r2, sp, #36	; 0x24
 800a9e0:	f7ff fef4 	bl	800a7cc <_printf_common>
 800a9e4:	1c43      	adds	r3, r0, #1
 800a9e6:	d14c      	bne.n	800aa82 <_printf_i+0x1d6>
 800a9e8:	2001      	movs	r0, #1
 800a9ea:	4240      	negs	r0, r0
 800a9ec:	b00b      	add	sp, #44	; 0x2c
 800a9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9f0:	3145      	adds	r1, #69	; 0x45
 800a9f2:	700a      	strb	r2, [r1, #0]
 800a9f4:	4a34      	ldr	r2, [pc, #208]	; (800aac8 <_printf_i+0x21c>)
 800a9f6:	9203      	str	r2, [sp, #12]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	6821      	ldr	r1, [r4, #0]
 800a9fc:	ca20      	ldmia	r2!, {r5}
 800a9fe:	601a      	str	r2, [r3, #0]
 800aa00:	0608      	lsls	r0, r1, #24
 800aa02:	d516      	bpl.n	800aa32 <_printf_i+0x186>
 800aa04:	07cb      	lsls	r3, r1, #31
 800aa06:	d502      	bpl.n	800aa0e <_printf_i+0x162>
 800aa08:	2320      	movs	r3, #32
 800aa0a:	4319      	orrs	r1, r3
 800aa0c:	6021      	str	r1, [r4, #0]
 800aa0e:	2710      	movs	r7, #16
 800aa10:	2d00      	cmp	r5, #0
 800aa12:	d1b2      	bne.n	800a97a <_printf_i+0xce>
 800aa14:	2320      	movs	r3, #32
 800aa16:	6822      	ldr	r2, [r4, #0]
 800aa18:	439a      	bics	r2, r3
 800aa1a:	6022      	str	r2, [r4, #0]
 800aa1c:	e7ad      	b.n	800a97a <_printf_i+0xce>
 800aa1e:	2220      	movs	r2, #32
 800aa20:	6809      	ldr	r1, [r1, #0]
 800aa22:	430a      	orrs	r2, r1
 800aa24:	6022      	str	r2, [r4, #0]
 800aa26:	0022      	movs	r2, r4
 800aa28:	2178      	movs	r1, #120	; 0x78
 800aa2a:	3245      	adds	r2, #69	; 0x45
 800aa2c:	7011      	strb	r1, [r2, #0]
 800aa2e:	4a27      	ldr	r2, [pc, #156]	; (800aacc <_printf_i+0x220>)
 800aa30:	e7e1      	b.n	800a9f6 <_printf_i+0x14a>
 800aa32:	0648      	lsls	r0, r1, #25
 800aa34:	d5e6      	bpl.n	800aa04 <_printf_i+0x158>
 800aa36:	b2ad      	uxth	r5, r5
 800aa38:	e7e4      	b.n	800aa04 <_printf_i+0x158>
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	680d      	ldr	r5, [r1, #0]
 800aa3e:	1d10      	adds	r0, r2, #4
 800aa40:	6949      	ldr	r1, [r1, #20]
 800aa42:	6018      	str	r0, [r3, #0]
 800aa44:	6813      	ldr	r3, [r2, #0]
 800aa46:	062e      	lsls	r6, r5, #24
 800aa48:	d501      	bpl.n	800aa4e <_printf_i+0x1a2>
 800aa4a:	6019      	str	r1, [r3, #0]
 800aa4c:	e002      	b.n	800aa54 <_printf_i+0x1a8>
 800aa4e:	066d      	lsls	r5, r5, #25
 800aa50:	d5fb      	bpl.n	800aa4a <_printf_i+0x19e>
 800aa52:	8019      	strh	r1, [r3, #0]
 800aa54:	2300      	movs	r3, #0
 800aa56:	9e04      	ldr	r6, [sp, #16]
 800aa58:	6123      	str	r3, [r4, #16]
 800aa5a:	e7bb      	b.n	800a9d4 <_printf_i+0x128>
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	1d11      	adds	r1, r2, #4
 800aa60:	6019      	str	r1, [r3, #0]
 800aa62:	6816      	ldr	r6, [r2, #0]
 800aa64:	2100      	movs	r1, #0
 800aa66:	0030      	movs	r0, r6
 800aa68:	6862      	ldr	r2, [r4, #4]
 800aa6a:	f000 f869 	bl	800ab40 <memchr>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d001      	beq.n	800aa76 <_printf_i+0x1ca>
 800aa72:	1b80      	subs	r0, r0, r6
 800aa74:	6060      	str	r0, [r4, #4]
 800aa76:	6863      	ldr	r3, [r4, #4]
 800aa78:	6123      	str	r3, [r4, #16]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	9a04      	ldr	r2, [sp, #16]
 800aa7e:	7013      	strb	r3, [r2, #0]
 800aa80:	e7a8      	b.n	800a9d4 <_printf_i+0x128>
 800aa82:	6923      	ldr	r3, [r4, #16]
 800aa84:	0032      	movs	r2, r6
 800aa86:	9906      	ldr	r1, [sp, #24]
 800aa88:	9805      	ldr	r0, [sp, #20]
 800aa8a:	9d07      	ldr	r5, [sp, #28]
 800aa8c:	47a8      	blx	r5
 800aa8e:	1c43      	adds	r3, r0, #1
 800aa90:	d0aa      	beq.n	800a9e8 <_printf_i+0x13c>
 800aa92:	6823      	ldr	r3, [r4, #0]
 800aa94:	079b      	lsls	r3, r3, #30
 800aa96:	d415      	bmi.n	800aac4 <_printf_i+0x218>
 800aa98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa9a:	68e0      	ldr	r0, [r4, #12]
 800aa9c:	4298      	cmp	r0, r3
 800aa9e:	daa5      	bge.n	800a9ec <_printf_i+0x140>
 800aaa0:	0018      	movs	r0, r3
 800aaa2:	e7a3      	b.n	800a9ec <_printf_i+0x140>
 800aaa4:	0022      	movs	r2, r4
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	9906      	ldr	r1, [sp, #24]
 800aaaa:	9805      	ldr	r0, [sp, #20]
 800aaac:	9e07      	ldr	r6, [sp, #28]
 800aaae:	3219      	adds	r2, #25
 800aab0:	47b0      	blx	r6
 800aab2:	1c43      	adds	r3, r0, #1
 800aab4:	d098      	beq.n	800a9e8 <_printf_i+0x13c>
 800aab6:	3501      	adds	r5, #1
 800aab8:	68e3      	ldr	r3, [r4, #12]
 800aaba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aabc:	1a9b      	subs	r3, r3, r2
 800aabe:	42ab      	cmp	r3, r5
 800aac0:	dcf0      	bgt.n	800aaa4 <_printf_i+0x1f8>
 800aac2:	e7e9      	b.n	800aa98 <_printf_i+0x1ec>
 800aac4:	2500      	movs	r5, #0
 800aac6:	e7f7      	b.n	800aab8 <_printf_i+0x20c>
 800aac8:	0800b6f5 	.word	0x0800b6f5
 800aacc:	0800b706 	.word	0x0800b706

0800aad0 <_read_r>:
 800aad0:	b570      	push	{r4, r5, r6, lr}
 800aad2:	0004      	movs	r4, r0
 800aad4:	0008      	movs	r0, r1
 800aad6:	0011      	movs	r1, r2
 800aad8:	001a      	movs	r2, r3
 800aada:	2300      	movs	r3, #0
 800aadc:	4d05      	ldr	r5, [pc, #20]	; (800aaf4 <_read_r+0x24>)
 800aade:	602b      	str	r3, [r5, #0]
 800aae0:	f7f9 fdbe 	bl	8004660 <_read>
 800aae4:	1c43      	adds	r3, r0, #1
 800aae6:	d103      	bne.n	800aaf0 <_read_r+0x20>
 800aae8:	682b      	ldr	r3, [r5, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d000      	beq.n	800aaf0 <_read_r+0x20>
 800aaee:	6023      	str	r3, [r4, #0]
 800aaf0:	bd70      	pop	{r4, r5, r6, pc}
 800aaf2:	46c0      	nop			; (mov r8, r8)
 800aaf4:	20000820 	.word	0x20000820

0800aaf8 <_fstat_r>:
 800aaf8:	2300      	movs	r3, #0
 800aafa:	b570      	push	{r4, r5, r6, lr}
 800aafc:	4d06      	ldr	r5, [pc, #24]	; (800ab18 <_fstat_r+0x20>)
 800aafe:	0004      	movs	r4, r0
 800ab00:	0008      	movs	r0, r1
 800ab02:	0011      	movs	r1, r2
 800ab04:	602b      	str	r3, [r5, #0]
 800ab06:	f7f9 fdee 	bl	80046e6 <_fstat>
 800ab0a:	1c43      	adds	r3, r0, #1
 800ab0c:	d103      	bne.n	800ab16 <_fstat_r+0x1e>
 800ab0e:	682b      	ldr	r3, [r5, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d000      	beq.n	800ab16 <_fstat_r+0x1e>
 800ab14:	6023      	str	r3, [r4, #0]
 800ab16:	bd70      	pop	{r4, r5, r6, pc}
 800ab18:	20000820 	.word	0x20000820

0800ab1c <_isatty_r>:
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	b570      	push	{r4, r5, r6, lr}
 800ab20:	4d06      	ldr	r5, [pc, #24]	; (800ab3c <_isatty_r+0x20>)
 800ab22:	0004      	movs	r4, r0
 800ab24:	0008      	movs	r0, r1
 800ab26:	602b      	str	r3, [r5, #0]
 800ab28:	f7f9 fdeb 	bl	8004702 <_isatty>
 800ab2c:	1c43      	adds	r3, r0, #1
 800ab2e:	d103      	bne.n	800ab38 <_isatty_r+0x1c>
 800ab30:	682b      	ldr	r3, [r5, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d000      	beq.n	800ab38 <_isatty_r+0x1c>
 800ab36:	6023      	str	r3, [r4, #0]
 800ab38:	bd70      	pop	{r4, r5, r6, pc}
 800ab3a:	46c0      	nop			; (mov r8, r8)
 800ab3c:	20000820 	.word	0x20000820

0800ab40 <memchr>:
 800ab40:	b2c9      	uxtb	r1, r1
 800ab42:	1882      	adds	r2, r0, r2
 800ab44:	4290      	cmp	r0, r2
 800ab46:	d101      	bne.n	800ab4c <memchr+0xc>
 800ab48:	2000      	movs	r0, #0
 800ab4a:	4770      	bx	lr
 800ab4c:	7803      	ldrb	r3, [r0, #0]
 800ab4e:	428b      	cmp	r3, r1
 800ab50:	d0fb      	beq.n	800ab4a <memchr+0xa>
 800ab52:	3001      	adds	r0, #1
 800ab54:	e7f6      	b.n	800ab44 <memchr+0x4>

0800ab56 <memmove>:
 800ab56:	b510      	push	{r4, lr}
 800ab58:	4288      	cmp	r0, r1
 800ab5a:	d902      	bls.n	800ab62 <memmove+0xc>
 800ab5c:	188b      	adds	r3, r1, r2
 800ab5e:	4298      	cmp	r0, r3
 800ab60:	d303      	bcc.n	800ab6a <memmove+0x14>
 800ab62:	2300      	movs	r3, #0
 800ab64:	e007      	b.n	800ab76 <memmove+0x20>
 800ab66:	5c8b      	ldrb	r3, [r1, r2]
 800ab68:	5483      	strb	r3, [r0, r2]
 800ab6a:	3a01      	subs	r2, #1
 800ab6c:	d2fb      	bcs.n	800ab66 <memmove+0x10>
 800ab6e:	bd10      	pop	{r4, pc}
 800ab70:	5ccc      	ldrb	r4, [r1, r3]
 800ab72:	54c4      	strb	r4, [r0, r3]
 800ab74:	3301      	adds	r3, #1
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d1fa      	bne.n	800ab70 <memmove+0x1a>
 800ab7a:	e7f8      	b.n	800ab6e <memmove+0x18>

0800ab7c <_realloc_r>:
 800ab7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab7e:	0007      	movs	r7, r0
 800ab80:	000e      	movs	r6, r1
 800ab82:	0014      	movs	r4, r2
 800ab84:	2900      	cmp	r1, #0
 800ab86:	d105      	bne.n	800ab94 <_realloc_r+0x18>
 800ab88:	0011      	movs	r1, r2
 800ab8a:	f7ff f84d 	bl	8009c28 <_malloc_r>
 800ab8e:	0005      	movs	r5, r0
 800ab90:	0028      	movs	r0, r5
 800ab92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab94:	2a00      	cmp	r2, #0
 800ab96:	d103      	bne.n	800aba0 <_realloc_r+0x24>
 800ab98:	f7fe ffda 	bl	8009b50 <_free_r>
 800ab9c:	0025      	movs	r5, r4
 800ab9e:	e7f7      	b.n	800ab90 <_realloc_r+0x14>
 800aba0:	f000 f81b 	bl	800abda <_malloc_usable_size_r>
 800aba4:	9001      	str	r0, [sp, #4]
 800aba6:	4284      	cmp	r4, r0
 800aba8:	d803      	bhi.n	800abb2 <_realloc_r+0x36>
 800abaa:	0035      	movs	r5, r6
 800abac:	0843      	lsrs	r3, r0, #1
 800abae:	42a3      	cmp	r3, r4
 800abb0:	d3ee      	bcc.n	800ab90 <_realloc_r+0x14>
 800abb2:	0021      	movs	r1, r4
 800abb4:	0038      	movs	r0, r7
 800abb6:	f7ff f837 	bl	8009c28 <_malloc_r>
 800abba:	1e05      	subs	r5, r0, #0
 800abbc:	d0e8      	beq.n	800ab90 <_realloc_r+0x14>
 800abbe:	9b01      	ldr	r3, [sp, #4]
 800abc0:	0022      	movs	r2, r4
 800abc2:	429c      	cmp	r4, r3
 800abc4:	d900      	bls.n	800abc8 <_realloc_r+0x4c>
 800abc6:	001a      	movs	r2, r3
 800abc8:	0031      	movs	r1, r6
 800abca:	0028      	movs	r0, r5
 800abcc:	f7fe ffaf 	bl	8009b2e <memcpy>
 800abd0:	0031      	movs	r1, r6
 800abd2:	0038      	movs	r0, r7
 800abd4:	f7fe ffbc 	bl	8009b50 <_free_r>
 800abd8:	e7da      	b.n	800ab90 <_realloc_r+0x14>

0800abda <_malloc_usable_size_r>:
 800abda:	1f0b      	subs	r3, r1, #4
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	1f18      	subs	r0, r3, #4
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	da01      	bge.n	800abe8 <_malloc_usable_size_r+0xe>
 800abe4:	580b      	ldr	r3, [r1, r0]
 800abe6:	18c0      	adds	r0, r0, r3
 800abe8:	4770      	bx	lr
	...

0800abec <_init>:
 800abec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abee:	46c0      	nop			; (mov r8, r8)
 800abf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abf2:	bc08      	pop	{r3}
 800abf4:	469e      	mov	lr, r3
 800abf6:	4770      	bx	lr

0800abf8 <_fini>:
 800abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfa:	46c0      	nop			; (mov r8, r8)
 800abfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abfe:	bc08      	pop	{r3}
 800ac00:	469e      	mov	lr, r3
 800ac02:	4770      	bx	lr
 800ac04:	0000      	movs	r0, r0
	...

0800ac08 <__FLASH_Program_Fast_veneer>:
 800ac08:	b401      	push	{r0}
 800ac0a:	4802      	ldr	r0, [pc, #8]	; (800ac14 <__FLASH_Program_Fast_veneer+0xc>)
 800ac0c:	4684      	mov	ip, r0
 800ac0e:	bc01      	pop	{r0}
 800ac10:	4760      	bx	ip
 800ac12:	bf00      	nop
 800ac14:	200000c1 	.word	0x200000c1

Disassembly of section .data:

20000000 <SERVER_BDADDRR>:
20000000:	04030201 00000605                       ........

20000008 <StartPageAddress>:
20000008:	08040000                                ....

2000000c <cont_buff>:
2000000c:	                                         ..

2000000e <AppToUpdate>:
2000000e:	                                         .

2000000f <next_ack>:
2000000f:	                                         .

20000010 <IV>:
20000010:	f9e61c61 500788a6 cba67dde              a......P.}..

2000001c <CHAT_SERVICE_UUID>:
2000001c:	2b987b88 9d89fc6b b8ae48f4 984f3988     .{.+k....H...9O.

2000002c <RX_CHAR_UUID>:
2000002c:	2b987b88 9d89fc6b b8ae49f4 984f3988     .{.+k....I...9O.

2000003c <TX_CHAR_UUID>:
2000003c:	2b987b88 9d89fc6b b8ae4af4 984f3988     .{.+k....J...9O.

2000004c <set_connectable>:
2000004c:	00000001                                ....

20000050 <SystemCoreClock>:
20000050:	00f42400                                .$..

20000054 <uwTickPrio>:
20000054:	00000004                                ....

20000058 <uwTickFreq>:
20000058:	00000001                                ....

2000005c <_impure_ptr>:
2000005c:	20000060                                `.. 

20000060 <impure_data>:
20000060:	00000000 0800b6a0 0800b6c0 0800b680     ................
	...

200000c0 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200000c0:	b580      	push	{r7, lr}
200000c2:	b088      	sub	sp, #32
200000c4:	af00      	add	r7, sp, #0
200000c6:	6078      	str	r0, [r7, #4]
200000c8:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200000ca:	231f      	movs	r3, #31
200000cc:	18fb      	adds	r3, r7, r3
200000ce:	2200      	movs	r2, #0
200000d0:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200000d2:	687b      	ldr	r3, [r7, #4]
200000d4:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200000d6:	683b      	ldr	r3, [r7, #0]
200000d8:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200000da:	4b1a      	ldr	r3, [pc, #104]	; (20000144 <FLASH_Program_Fast+0x84>)
200000dc:	695a      	ldr	r2, [r3, #20]
200000de:	4b19      	ldr	r3, [pc, #100]	; (20000144 <FLASH_Program_Fast+0x84>)
200000e0:	2180      	movs	r1, #128	; 0x80
200000e2:	02c9      	lsls	r1, r1, #11
200000e4:	430a      	orrs	r2, r1
200000e6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000e8:	f3ef 8310 	mrs	r3, PRIMASK
200000ec:	60fb      	str	r3, [r7, #12]
  return(result);
200000ee:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000f2:	b672      	cpsid	i
}
200000f4:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000f6:	e00f      	b.n	20000118 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000f8:	697a      	ldr	r2, [r7, #20]
200000fa:	69bb      	ldr	r3, [r7, #24]
200000fc:	6812      	ldr	r2, [r2, #0]
200000fe:	601a      	str	r2, [r3, #0]
    src += 4U;
20000100:	697b      	ldr	r3, [r7, #20]
20000102:	3304      	adds	r3, #4
20000104:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000106:	69bb      	ldr	r3, [r7, #24]
20000108:	3304      	adds	r3, #4
2000010a:	61bb      	str	r3, [r7, #24]
    index++;
2000010c:	211f      	movs	r1, #31
2000010e:	187b      	adds	r3, r7, r1
20000110:	781a      	ldrb	r2, [r3, #0]
20000112:	187b      	adds	r3, r7, r1
20000114:	3201      	adds	r2, #1
20000116:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000118:	231f      	movs	r3, #31
2000011a:	18fb      	adds	r3, r7, r3
2000011c:	781b      	ldrb	r3, [r3, #0]
2000011e:	2b3f      	cmp	r3, #63	; 0x3f
20000120:	d9ea      	bls.n	200000f8 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
20000122:	46c0      	nop			; (mov r8, r8)
20000124:	4b07      	ldr	r3, [pc, #28]	; (20000144 <FLASH_Program_Fast+0x84>)
20000126:	691a      	ldr	r2, [r3, #16]
20000128:	23c0      	movs	r3, #192	; 0xc0
2000012a:	029b      	lsls	r3, r3, #10
2000012c:	4013      	ands	r3, r2
2000012e:	d1f9      	bne.n	20000124 <FLASH_Program_Fast+0x64>
20000130:	693b      	ldr	r3, [r7, #16]
20000132:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000134:	68bb      	ldr	r3, [r7, #8]
20000136:	f383 8810 	msr	PRIMASK, r3
}
2000013a:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
2000013c:	46c0      	nop			; (mov r8, r8)
2000013e:	46bd      	mov	sp, r7
20000140:	b008      	add	sp, #32
20000142:	bd80      	pop	{r7, pc}
20000144:	40022000 	.word	0x40022000
