
BLE_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c2c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08006ce8  08006ce8  00016ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e0  080070e0  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  080070e0  080070e0  000170e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070e8  080070e8  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070ec  080070ec  000170ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  080070f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  200000cc  080071bc  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  080071bc  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a02  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038d2  00000000  00000000  00039af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0003d3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  0003e648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e19  00000000  00000000  0003f778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018da6  00000000  00000000  00060591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd791  00000000  00000000  00079337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00136ac8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a2c  00000000  00000000  00136b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000cc 	.word	0x200000cc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006cd0 	.word	0x08006cd0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000d0 	.word	0x200000d0
 8000100:	08006cd0 	.word	0x08006cd0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b089      	sub	sp, #36	; 0x24
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000648:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <HCI_TL_SPI_Init+0xa8>)
 800064a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <HCI_TL_SPI_Init+0xa8>)
 800064e:	2101      	movs	r1, #1
 8000650:	430a      	orrs	r2, r1
 8000652:	635a      	str	r2, [r3, #52]	; 0x34
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <HCI_TL_SPI_Init+0xa8>)
 8000656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000658:	2201      	movs	r2, #1
 800065a:	4013      	ands	r3, r2
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000660:	240c      	movs	r4, #12
 8000662:	193b      	adds	r3, r7, r4
 8000664:	2201      	movs	r2, #1
 8000666:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000668:	193b      	adds	r3, r7, r4
 800066a:	2288      	movs	r2, #136	; 0x88
 800066c:	0352      	lsls	r2, r2, #13
 800066e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000676:	193a      	adds	r2, r7, r4
 8000678:	23a0      	movs	r3, #160	; 0xa0
 800067a:	05db      	lsls	r3, r3, #23
 800067c:	0011      	movs	r1, r2
 800067e:	0018      	movs	r0, r3
 8000680:	f001 fcd0 	bl	8002024 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000684:	0021      	movs	r1, r4
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	000c      	movs	r4, r1
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2201      	movs	r2, #1
 8000694:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80006a2:	193a      	adds	r2, r7, r4
 80006a4:	23a0      	movs	r3, #160	; 0xa0
 80006a6:	05db      	lsls	r3, r3, #23
 80006a8:	0011      	movs	r1, r2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f001 fcba 	bl	8002024 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80006b0:	0021      	movs	r1, r4
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2202      	movs	r2, #2
 80006b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2201      	movs	r2, #1
 80006bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80006ca:	187a      	adds	r2, r7, r1
 80006cc:	23a0      	movs	r3, #160	; 0xa0
 80006ce:	05db      	lsls	r3, r3, #23
 80006d0:	0011      	movs	r1, r2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fca6 	bl	8002024 <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 80006d8:	f000 fffe 	bl	80016d8 <BSP_SPI1_Init>
 80006dc:	0003      	movs	r3, r0
}
 80006de:	0018      	movs	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b009      	add	sp, #36	; 0x24
 80006e4:	bd90      	pop	{r4, r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	40021000 	.word	0x40021000

080006ec <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80006f0:	23a0      	movs	r3, #160	; 0xa0
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	2101      	movs	r1, #1
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 fe00 	bl	80022fc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80006fc:	23a0      	movs	r3, #160	; 0xa0
 80006fe:	05db      	lsls	r3, r3, #23
 8000700:	2102      	movs	r1, #2
 8000702:	0018      	movs	r0, r3
 8000704:	f001 fdfa 	bl	80022fc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	005a      	lsls	r2, r3, #1
 800070c:	23a0      	movs	r3, #160	; 0xa0
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f001 fdf2 	bl	80022fc <HAL_GPIO_DeInit>
  return 0;
 8000718:	2300      	movs	r3, #0
}
 800071a:	0018      	movs	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000724:	23a0      	movs	r3, #160	; 0xa0
 8000726:	05db      	lsls	r3, r3, #23
 8000728:	2201      	movs	r2, #1
 800072a:	2102      	movs	r1, #2
 800072c:	0018      	movs	r0, r3
 800072e:	f001 feda 	bl	80024e6 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000732:	2380      	movs	r3, #128	; 0x80
 8000734:	0059      	lsls	r1, r3, #1
 8000736:	23a0      	movs	r3, #160	; 0xa0
 8000738:	05db      	lsls	r3, r3, #23
 800073a:	2200      	movs	r2, #0
 800073c:	0018      	movs	r0, r3
 800073e:	f001 fed2 	bl	80024e6 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000742:	2005      	movs	r0, #5
 8000744:	f001 fade 	bl	8001d04 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	0059      	lsls	r1, r3, #1
 800074c:	23a0      	movs	r3, #160	; 0xa0
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	2201      	movs	r2, #1
 8000752:	0018      	movs	r0, r3
 8000754:	f001 fec7 	bl	80024e6 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000758:	2005      	movs	r0, #5
 800075a:	f001 fad3 	bl	8001d04 <HAL_Delay>
  return 0;
 800075e:	2300      	movs	r3, #0
}
 8000760:	0018      	movs	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8000768:	b5b0      	push	{r4, r5, r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	000a      	movs	r2, r1
 8000772:	1cbb      	adds	r3, r7, #2
 8000774:	801a      	strh	r2, [r3, #0]
  uint16_t byte_count;
  uint8_t len = 0;
 8000776:	231d      	movs	r3, #29
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
  uint8_t char_ff = 0xff;
 800077e:	231c      	movs	r3, #28
 8000780:	18fb      	adds	r3, r7, r3
 8000782:	22ff      	movs	r2, #255	; 0xff
 8000784:	701a      	strb	r2, [r3, #0]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000786:	2514      	movs	r5, #20
 8000788:	197b      	adds	r3, r7, r5
 800078a:	4a32      	ldr	r2, [pc, #200]	; (8000854 <HCI_TL_SPI_Receive+0xec>)
 800078c:	6811      	ldr	r1, [r2, #0]
 800078e:	6019      	str	r1, [r3, #0]
 8000790:	7912      	ldrb	r2, [r2, #4]
 8000792:	711a      	strb	r2, [r3, #4]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000794:	23a0      	movs	r3, #160	; 0xa0
 8000796:	05db      	lsls	r3, r3, #23
 8000798:	2200      	movs	r2, #0
 800079a:	2102      	movs	r1, #2
 800079c:	0018      	movs	r0, r3
 800079e:	f001 fea2 	bl	80024e6 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80007a2:	240c      	movs	r4, #12
 80007a4:	1939      	adds	r1, r7, r4
 80007a6:	197b      	adds	r3, r7, r5
 80007a8:	2205      	movs	r2, #5
 80007aa:	0018      	movs	r0, r3
 80007ac:	f000 ffc4 	bl	8001738 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 80007b0:	0021      	movs	r1, r4
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d13d      	bne.n	8000836 <HCI_TL_SPI_Receive+0xce>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	791b      	ldrb	r3, [r3, #4]
 80007be:	021b      	lsls	r3, r3, #8
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	78db      	ldrb	r3, [r3, #3]
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	4313      	orrs	r3, r2
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	211e      	movs	r1, #30
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	801a      	strh	r2, [r3, #0]

    if(byte_count > 0)
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d02d      	beq.n	8000836 <HCI_TL_SPI_Receive+0xce>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 80007da:	187a      	adds	r2, r7, r1
 80007dc:	1cbb      	adds	r3, r7, #2
 80007de:	8812      	ldrh	r2, [r2, #0]
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d903      	bls.n	80007ee <HCI_TL_SPI_Receive+0x86>
        byte_count = size;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	1cba      	adds	r2, r7, #2
 80007ea:	8812      	ldrh	r2, [r2, #0]
 80007ec:	801a      	strh	r2, [r3, #0]
      }

      for(len = 0; len < byte_count; len++)
 80007ee:	231d      	movs	r3, #29
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	e015      	b.n	8000824 <HCI_TL_SPI_Receive+0xbc>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80007f8:	241b      	movs	r4, #27
 80007fa:	1939      	adds	r1, r7, r4
 80007fc:	231c      	movs	r3, #28
 80007fe:	18fb      	adds	r3, r7, r3
 8000800:	2201      	movs	r2, #1
 8000802:	0018      	movs	r0, r3
 8000804:	f000 ff98 	bl	8001738 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8000808:	211d      	movs	r1, #29
 800080a:	187b      	adds	r3, r7, r1
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	18d3      	adds	r3, r2, r3
 8000812:	193a      	adds	r2, r7, r4
 8000814:	7812      	ldrb	r2, [r2, #0]
 8000816:	b2d2      	uxtb	r2, r2
 8000818:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 800081a:	187b      	adds	r3, r7, r1
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	187b      	adds	r3, r7, r1
 8000820:	3201      	adds	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	231d      	movs	r3, #29
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b29b      	uxth	r3, r3
 800082c:	221e      	movs	r2, #30
 800082e:	18ba      	adds	r2, r7, r2
 8000830:	8812      	ldrh	r2, [r2, #0]
 8000832:	429a      	cmp	r2, r3
 8000834:	d8e0      	bhi.n	80007f8 <HCI_TL_SPI_Receive+0x90>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000836:	23a0      	movs	r3, #160	; 0xa0
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	2201      	movs	r2, #1
 800083c:	2102      	movs	r1, #2
 800083e:	0018      	movs	r0, r3
 8000840:	f001 fe51 	bl	80024e6 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8000844:	231d      	movs	r3, #29
 8000846:	18fb      	adds	r3, r7, r3
 8000848:	781b      	ldrb	r3, [r3, #0]
}
 800084a:	0018      	movs	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	b008      	add	sp, #32
 8000850:	bdb0      	pop	{r4, r5, r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	08006ce8 	.word	0x08006ce8

08000858 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b089      	sub	sp, #36	; 0x24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	000a      	movs	r2, r1
 8000862:	1cbb      	adds	r3, r7, #2
 8000864:	801a      	strh	r2, [r3, #0]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000866:	2310      	movs	r3, #16
 8000868:	18fb      	adds	r3, r7, r3
 800086a:	4a27      	ldr	r2, [pc, #156]	; (8000908 <HCI_TL_SPI_Send+0xb0>)
 800086c:	6811      	ldr	r1, [r2, #0]
 800086e:	6019      	str	r1, [r3, #0]
 8000870:	7912      	ldrb	r2, [r2, #4]
 8000872:	711a      	strb	r2, [r3, #4]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000874:	f001 fa3c 	bl	8001cf0 <HAL_GetTick>
 8000878:	0003      	movs	r3, r0
 800087a:	61bb      	str	r3, [r7, #24]

  do
  {
    result = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000880:	23a0      	movs	r3, #160	; 0xa0
 8000882:	05db      	lsls	r3, r3, #23
 8000884:	2200      	movs	r2, #0
 8000886:	2102      	movs	r1, #2
 8000888:	0018      	movs	r0, r3
 800088a:	f001 fe2c 	bl	80024e6 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800088e:	2408      	movs	r4, #8
 8000890:	1939      	adds	r1, r7, r4
 8000892:	2310      	movs	r3, #16
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	2205      	movs	r2, #5
 8000898:	0018      	movs	r0, r3
 800089a:	f000 ff4d 	bl	8001738 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 800089e:	0022      	movs	r2, r4
 80008a0:	18bb      	adds	r3, r7, r2
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d112      	bne.n	80008ce <HCI_TL_SPI_Send+0x76>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80008a8:	18bb      	adds	r3, r7, r2
 80008aa:	785b      	ldrb	r3, [r3, #1]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	1cba      	adds	r2, r7, #2
 80008b0:	8812      	ldrh	r2, [r2, #0]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d807      	bhi.n	80008c6 <HCI_TL_SPI_Send+0x6e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80008b6:	1cbb      	adds	r3, r7, #2
 80008b8:	881a      	ldrh	r2, [r3, #0]
 80008ba:	4914      	ldr	r1, [pc, #80]	; (800090c <HCI_TL_SPI_Send+0xb4>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 ff3a 	bl	8001738 <BSP_SPI1_SendRecv>
 80008c4:	e006      	b.n	80008d4 <HCI_TL_SPI_Send+0x7c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	425b      	negs	r3, r3
 80008ca:	61fb      	str	r3, [r7, #28]
 80008cc:	e002      	b.n	80008d4 <HCI_TL_SPI_Send+0x7c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	425b      	negs	r3, r3
 80008d2:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80008d4:	23a0      	movs	r3, #160	; 0xa0
 80008d6:	05db      	lsls	r3, r3, #23
 80008d8:	2201      	movs	r2, #1
 80008da:	2102      	movs	r1, #2
 80008dc:	0018      	movs	r0, r3
 80008de:	f001 fe02 	bl	80024e6 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80008e2:	f001 fa05 	bl	8001cf0 <HAL_GetTick>
 80008e6:	0002      	movs	r2, r0
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	2b0f      	cmp	r3, #15
 80008ee:	d903      	bls.n	80008f8 <HCI_TL_SPI_Send+0xa0>
    {
      result = -3;
 80008f0:	2303      	movs	r3, #3
 80008f2:	425b      	negs	r3, r3
 80008f4:	61fb      	str	r3, [r7, #28]
      break;
 80008f6:	e002      	b.n	80008fe <HCI_TL_SPI_Send+0xa6>
    }
  } while(result < 0);
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	dbbe      	blt.n	800087c <HCI_TL_SPI_Send+0x24>

  return result;
 80008fe:	69fb      	ldr	r3, [r7, #28]
}
 8000900:	0018      	movs	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	b009      	add	sp, #36	; 0x24
 8000906:	bd90      	pop	{r4, r7, pc}
 8000908:	08006cf0 	.word	0x08006cf0
 800090c:	200000f4 	.word	0x200000f4

08000910 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000914:	23a0      	movs	r3, #160	; 0xa0
 8000916:	05db      	lsls	r3, r3, #23
 8000918:	2101      	movs	r1, #1
 800091a:	0018      	movs	r0, r3
 800091c:	f001 fdc6 	bl	80024ac <HAL_GPIO_ReadPin>
 8000920:	0003      	movs	r3, r0
 8000922:	3b01      	subs	r3, #1
 8000924:	425a      	negs	r2, r3
 8000926:	4153      	adcs	r3, r2
 8000928:	b2db      	uxtb	r3, r3
}
 800092a:	0018      	movs	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4a16      	ldr	r2, [pc, #88]	; (8000994 <hci_tl_lowlevel_init+0x64>)
 800093a:	601a      	str	r2, [r3, #0]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4a16      	ldr	r2, [pc, #88]	; (8000998 <hci_tl_lowlevel_init+0x68>)
 8000940:	605a      	str	r2, [r3, #4]
  fops.Send    = HCI_TL_SPI_Send;
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	4a15      	ldr	r2, [pc, #84]	; (800099c <hci_tl_lowlevel_init+0x6c>)
 8000946:	611a      	str	r2, [r3, #16]
  fops.Receive = HCI_TL_SPI_Receive;
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <hci_tl_lowlevel_init+0x70>)
 800094c:	60da      	str	r2, [r3, #12]
  fops.Reset   = HCI_TL_SPI_Reset;
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <hci_tl_lowlevel_init+0x74>)
 8000952:	609a      	str	r2, [r3, #8]
  fops.GetTick = BSP_GetTick;
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <hci_tl_lowlevel_init+0x78>)
 8000958:	619a      	str	r2, [r3, #24]

  hci_register_io_bus (&fops);
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	0018      	movs	r0, r3
 800095e:	f004 feab 	bl	80056b8 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8000962:	23c0      	movs	r3, #192	; 0xc0
 8000964:	04da      	lsls	r2, r3, #19
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <hci_tl_lowlevel_init+0x7c>)
 8000968:	0011      	movs	r1, r2
 800096a:	0018      	movs	r0, r3
 800096c:	f001 fafe 	bl	8001f6c <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000970:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <hci_tl_lowlevel_init+0x80>)
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <hci_tl_lowlevel_init+0x7c>)
 8000974:	2100      	movs	r1, #0
 8000976:	0018      	movs	r0, r3
 8000978:	f001 fac6 	bl	8001f08 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	2005      	movs	r0, #5
 8000982:	f001 fa8f 	bl	8001ea4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000986:	2005      	movs	r0, #5
 8000988:	f001 faa1 	bl	8001ece <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b008      	add	sp, #32
 8000992:	bd80      	pop	{r7, pc}
 8000994:	08000641 	.word	0x08000641
 8000998:	080006ed 	.word	0x080006ed
 800099c:	08000859 	.word	0x08000859
 80009a0:	08000769 	.word	0x08000769
 80009a4:	08000721 	.word	0x08000721
 80009a8:	08001779 	.word	0x08001779
 80009ac:	200000e8 	.word	0x200000e8
 80009b0:	080009b5 	.word	0x080009b5

080009b4 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80009b8:	e004      	b.n	80009c4 <hci_tl_lowlevel_isr+0x10>
  {
    if (hci_notify_asynch_evt(NULL))
 80009ba:	2000      	movs	r0, #0
 80009bc:	f004 fffa 	bl	80059b4 <hci_notify_asynch_evt>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d104      	bne.n	80009ce <hci_tl_lowlevel_isr+0x1a>
  while(IsDataAvailable())
 80009c4:	f7ff ffa4 	bl	8000910 <IsDataAvailable>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d1f6      	bne.n	80009ba <hci_tl_lowlevel_isr+0x6>
 80009cc:	e000      	b.n	80009d0 <hci_tl_lowlevel_isr+0x1c>
    {
      return;
 80009ce:	46c0      	nop			; (mov r8, r8)
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <BlueNRG_Init>:
extern uint8_t notification_enabled;

/*
 * Initialization task
 */
void BlueNRG_Init(void){
 80009d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d6:	b089      	sub	sp, #36	; 0x24
 80009d8:	af02      	add	r7, sp, #8
	tBleStatus ret;
	uint8_t bdaddr[BDADDR_SIZE];
	const char *name = "MyBLE";
 80009da:	4b47      	ldr	r3, [pc, #284]	; (8000af8 <BlueNRG_Init+0x124>)
 80009dc:	617b      	str	r3, [r7, #20]

	uint16_t service_handle, dev_name_char_handle, appearance_char_handle; // handlers of GAP service

	BLUENRG_memcpy(bdaddr, SERVER_BDADDRR, sizeof(SERVER_BDADDRR));
 80009de:	250c      	movs	r5, #12
 80009e0:	197b      	adds	r3, r7, r5
 80009e2:	4a46      	ldr	r2, [pc, #280]	; (8000afc <BlueNRG_Init+0x128>)
 80009e4:	6811      	ldr	r1, [r2, #0]
 80009e6:	6019      	str	r1, [r3, #0]
 80009e8:	8892      	ldrh	r2, [r2, #4]
 80009ea:	809a      	strh	r2, [r3, #4]


	/* Init HCI */
	hci_init(HCI_Event_CB,  NULL);
 80009ec:	4b44      	ldr	r3, [pc, #272]	; (8000b00 <BlueNRG_Init+0x12c>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	0018      	movs	r0, r3
 80009f2:	f004 fe15 	bl	8005620 <hci_init>

	/* Reset HCI */
	hci_reset();
 80009f6:	f004 fcf3 	bl	80053e0 <hci_reset>
	HAL_Delay(100);
 80009fa:	2064      	movs	r0, #100	; 0x64
 80009fc:	f001 f982 	bl	8001d04 <HAL_Delay>

	printf("Start initialization... \n\r");
 8000a00:	4b40      	ldr	r3, [pc, #256]	; (8000b04 <BlueNRG_Init+0x130>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f005 fc40 	bl	8006288 <iprintf>
	fflush(stdout);
 8000a08:	4b3f      	ldr	r3, [pc, #252]	; (8000b08 <BlueNRG_Init+0x134>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f005 fa08 	bl	8005e24 <fflush>

	/* Configure device address */
	 ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8000a14:	2613      	movs	r6, #19
 8000a16:	19bc      	adds	r4, r7, r6
 8000a18:	197b      	adds	r3, r7, r5
 8000a1a:	001a      	movs	r2, r3
 8000a1c:	2106      	movs	r1, #6
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f004 fc75 	bl	800530e <aci_hal_write_config_data>
 8000a24:	0003      	movs	r3, r0
 8000a26:	7023      	strb	r3, [r4, #0]

	if(ret != BLE_STATUS_SUCCESS){
 8000a28:	19bb      	adds	r3, r7, r6
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d003      	beq.n	8000a38 <BlueNRG_Init+0x64>
		printf("Failed to set Public Address \n\r");
 8000a30:	4b36      	ldr	r3, [pc, #216]	; (8000b0c <BlueNRG_Init+0x138>)
 8000a32:	0018      	movs	r0, r3
 8000a34:	f005 fc28 	bl	8006288 <iprintf>
	}

	/* Initialize GATT server */
	aci_gatt_init();
 8000a38:	f004 f9e6 	bl	8004e08 <aci_gatt_init>
	if(ret != BLE_STATUS_SUCCESS){
 8000a3c:	2313      	movs	r3, #19
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <BlueNRG_Init+0x7a>
		printf("Failed to GATT Initialization \n\r");
 8000a46:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <BlueNRG_Init+0x13c>)
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f005 fc1d 	bl	8006288 <iprintf>
	}

	/* Initialize GAP service */
	ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle); //2nd arg -> privacy (0: no, 1: yes)
 8000a4e:	2513      	movs	r5, #19
 8000a50:	197c      	adds	r4, r7, r5
 8000a52:	230a      	movs	r3, #10
 8000a54:	18fa      	adds	r2, r7, r3
 8000a56:	1dbb      	adds	r3, r7, #6
 8000a58:	9301      	str	r3, [sp, #4]
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	18fb      	adds	r3, r7, r3
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	0013      	movs	r3, r2
 8000a62:	2207      	movs	r2, #7
 8000a64:	2100      	movs	r1, #0
 8000a66:	2001      	movs	r0, #1
 8000a68:	f004 f848 	bl	8004afc <aci_gap_init_IDB05A1>
 8000a6c:	0003      	movs	r3, r0
 8000a6e:	7023      	strb	r3, [r4, #0]
	//ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle,  &appearance_char_handle);

	if(ret != BLE_STATUS_SUCCESS){
 8000a70:	197b      	adds	r3, r7, r5
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d003      	beq.n	8000a80 <BlueNRG_Init+0xac>
		printf("Failed to Initialize GAP Service\n\r");
 8000a78:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <BlueNRG_Init+0x140>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f005 fc04 	bl	8006288 <iprintf>
	}


	/* Update characteristics */
	ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8000a80:	230a      	movs	r3, #10
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	881d      	ldrh	r5, [r3, #0]
 8000a86:	2308      	movs	r3, #8
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	881e      	ldrh	r6, [r3, #0]
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f7ff fb38 	bl	8000104 <strlen>
 8000a94:	0003      	movs	r3, r0
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	2313      	movs	r3, #19
 8000a9a:	18fc      	adds	r4, r7, r3
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0031      	movs	r1, r6
 8000aa6:	0028      	movs	r0, r5
 8000aa8:	f004 fb56 	bl	8005158 <aci_gatt_update_char_value>
 8000aac:	0003      	movs	r3, r0
 8000aae:	7023      	strb	r3, [r4, #0]
	if(ret != BLE_STATUS_SUCCESS){
 8000ab0:	2213      	movs	r2, #19
 8000ab2:	18bb      	adds	r3, r7, r2
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d006      	beq.n	8000ac8 <BlueNRG_Init+0xf4>
		printf("Failed to Update Characteristics %d\n\r", ret);
 8000aba:	18bb      	adds	r3, r7, r2
 8000abc:	781a      	ldrb	r2, [r3, #0]
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <BlueNRG_Init+0x144>)
 8000ac0:	0011      	movs	r1, r2
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f005 fbe0 	bl	8006288 <iprintf>
	}

	/* Add custom service */
	ret = add_service();
 8000ac8:	2513      	movs	r5, #19
 8000aca:	197c      	adds	r4, r7, r5
 8000acc:	f000 f9a4 	bl	8000e18 <add_service>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	7023      	strb	r3, [r4, #0]
	if(ret != BLE_STATUS_SUCCESS){
 8000ad4:	197b      	adds	r3, r7, r5
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <BlueNRG_Init+0x110>
		printf("Failed to Add Service\n\r");
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <BlueNRG_Init+0x148>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f005 fbd2 	bl	8006288 <iprintf>
	}

	fflush(stdout);
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <BlueNRG_Init+0x134>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	0018      	movs	r0, r3
 8000aec:	f005 f99a 	bl	8005e24 <fflush>
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b007      	add	sp, #28
 8000af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000af8:	08006cf8 	.word	0x08006cf8
 8000afc:	20000000 	.word	0x20000000
 8000b00:	0800150d 	.word	0x0800150d
 8000b04:	08006d00 	.word	0x08006d00
 8000b08:	20000068 	.word	0x20000068
 8000b0c:	08006d1c 	.word	0x08006d1c
 8000b10:	08006d3c 	.word	0x08006d3c
 8000b14:	08006d60 	.word	0x08006d60
 8000b18:	08006d84 	.word	0x08006d84
 8000b1c:	08006dac 	.word	0x08006dac

08000b20 <BlueNRG_Process>:


/*
 * Background task
 */
void BlueNRG_Process(void){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	userChat();
 8000b24:	f000 f806 	bl	8000b34 <userChat>

	/* Process user event */
	hci_user_evt_proc();
 8000b28:	f004 ff16 	bl	8005958 <hci_user_evt_proc>

}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <userChat>:

uint8_t btn_state;
static void userChat(void){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
	if(set_connectable){
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <userChat+0x60>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d004      	beq.n	8000b4c <userChat+0x18>
		Enable_Advertising();
 8000b42:	f000 f833 	bl	8000bac <Enable_Advertising>
		set_connectable = FALSE;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <userChat+0x60>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
	}

	//printf("%lu, %d\n\r", connected, notification_enabled);
	btn_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	019b      	lsls	r3, r3, #6
 8000b50:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <userChat+0x64>)
 8000b52:	0019      	movs	r1, r3
 8000b54:	0010      	movs	r0, r2
 8000b56:	f001 fca9 	bl	80024ac <HAL_GPIO_ReadPin>
 8000b5a:	0003      	movs	r3, r0
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <userChat+0x68>)
 8000b60:	701a      	strb	r2, [r3, #0]
	if( connected && notification_enabled && btn_state == GPIO_PIN_RESET){
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <userChat+0x6c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d00f      	beq.n	8000b8a <userChat+0x56>
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <userChat+0x70>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d00b      	beq.n	8000b8a <userChat+0x56>
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <userChat+0x68>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d107      	bne.n	8000b8a <userChat+0x56>
		uint8_t data[2] = {'a','a'};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <userChat+0x74>)
 8000b7e:	801a      	strh	r2, [r3, #0]
		send_data(data, sizeof(data));
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2102      	movs	r1, #2
 8000b84:	0018      	movs	r0, r3
 8000b86:	f000 fbc7 	bl	8001318 <send_data>
	}


}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b002      	add	sp, #8
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	20000058 	.word	0x20000058
 8000b98:	50000800 	.word	0x50000800
 8000b9c:	200001f3 	.word	0x200001f3
 8000ba0:	20000200 	.word	0x20000200
 8000ba4:	20000206 	.word	0x20000206
 8000ba8:	00006161 	.word	0x00006161

08000bac <Enable_Advertising>:

static void Enable_Advertising(void){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08c      	sub	sp, #48	; 0x30
 8000bb0:	af08      	add	r7, sp, #32
	char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'B', 'L', 'E', '-', 'G', '-', 'U', 'P'};
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <Enable_Advertising+0x4c>)
 8000bb6:	ca03      	ldmia	r2!, {r0, r1}
 8000bb8:	c303      	stmia	r3!, {r0, r1}
 8000bba:	7812      	ldrb	r2, [r2, #0]
 8000bbc:	701a      	strb	r2, [r3, #0]

	hci_le_set_scan_resp_data(0, NULL);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f004 fc33 	bl	800542c <hci_le_set_scan_resp_data>

	/* Set device in General Discoverable mode */
	aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	9306      	str	r3, [sp, #24]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	9305      	str	r3, [sp, #20]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9304      	str	r3, [sp, #16]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	9303      	str	r3, [sp, #12]
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	9302      	str	r3, [sp, #8]
 8000bda:	2309      	movs	r3, #9
 8000bdc:	9301      	str	r3, [sp, #4]
 8000bde:	2300      	movs	r3, #0
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	2300      	movs	r3, #0
 8000be4:	2200      	movs	r2, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	2000      	movs	r0, #0
 8000bea:	f003 fff2 	bl	8004bd2 <aci_gap_set_discoverable>
}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b004      	add	sp, #16
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	08006dc4 	.word	0x08006dc4

08000bfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b08b      	sub	sp, #44	; 0x2c
 8000c00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	2414      	movs	r4, #20
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	0018      	movs	r0, r3
 8000c08:	2314      	movs	r3, #20
 8000c0a:	001a      	movs	r2, r3
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	f005 fa51 	bl	80060b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	4b3d      	ldr	r3, [pc, #244]	; (8000d08 <MX_GPIO_Init+0x10c>)
 8000c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c16:	4b3c      	ldr	r3, [pc, #240]	; (8000d08 <MX_GPIO_Init+0x10c>)
 8000c18:	2104      	movs	r1, #4
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c1e:	4b3a      	ldr	r3, [pc, #232]	; (8000d08 <MX_GPIO_Init+0x10c>)
 8000c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c22:	2204      	movs	r2, #4
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2a:	4b37      	ldr	r3, [pc, #220]	; (8000d08 <MX_GPIO_Init+0x10c>)
 8000c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c2e:	4b36      	ldr	r3, [pc, #216]	; (8000d08 <MX_GPIO_Init+0x10c>)
 8000c30:	2120      	movs	r1, #32
 8000c32:	430a      	orrs	r2, r1
 8000c34:	635a      	str	r2, [r3, #52]	; 0x34
 8000c36:	4b34      	ldr	r3, [pc, #208]	; (8000d08 <MX_GPIO_Init+0x10c>)
 8000c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3a:	2220      	movs	r2, #32
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b31      	ldr	r3, [pc, #196]	; (8000d08 <MX_GPIO_Init+0x10c>)
 8000c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c46:	4b30      	ldr	r3, [pc, #192]	; (8000d08 <MX_GPIO_Init+0x10c>)
 8000c48:	2101      	movs	r1, #1
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c4e:	4b2e      	ldr	r3, [pc, #184]	; (8000d08 <MX_GPIO_Init+0x10c>)
 8000c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c52:	2201      	movs	r2, #1
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	4b2b      	ldr	r3, [pc, #172]	; (8000d08 <MX_GPIO_Init+0x10c>)
 8000c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c5e:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <MX_GPIO_Init+0x10c>)
 8000c60:	2102      	movs	r1, #2
 8000c62:	430a      	orrs	r2, r1
 8000c64:	635a      	str	r2, [r3, #52]	; 0x34
 8000c66:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <MX_GPIO_Init+0x10c>)
 8000c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8000c72:	2381      	movs	r3, #129	; 0x81
 8000c74:	0059      	lsls	r1, r3, #1
 8000c76:	23a0      	movs	r3, #160	; 0xa0
 8000c78:	05db      	lsls	r3, r3, #23
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f001 fc32 	bl	80024e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	0192      	lsls	r2, r2, #6
 8000c88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	2201      	movs	r2, #1
 8000c94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <MX_GPIO_Init+0x110>)
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	0010      	movs	r0, r2
 8000c9e:	f001 f9c1 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	2288      	movs	r2, #136	; 0x88
 8000cac:	0352      	lsls	r2, r2, #13
 8000cae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	193a      	adds	r2, r7, r4
 8000cb8:	23a0      	movs	r3, #160	; 0xa0
 8000cba:	05db      	lsls	r3, r3, #23
 8000cbc:	0011      	movs	r1, r2
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f001 f9b0 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_1|GPIO_PIN_8;
 8000cc4:	0021      	movs	r1, r4
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2291      	movs	r2, #145	; 0x91
 8000cca:	0052      	lsls	r2, r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	187a      	adds	r2, r7, r1
 8000ce2:	23a0      	movs	r3, #160	; 0xa0
 8000ce4:	05db      	lsls	r3, r3, #23
 8000ce6:	0011      	movs	r1, r2
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f001 f99b 	bl	8002024 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2005      	movs	r0, #5
 8000cf4:	f001 f8d6 	bl	8001ea4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000cf8:	2005      	movs	r0, #5
 8000cfa:	f001 f8e8 	bl	8001ece <HAL_NVIC_EnableIRQ>

}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b00b      	add	sp, #44	; 0x2c
 8000d04:	bd90      	pop	{r4, r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	50000800 	.word	0x50000800

08000d10 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d18:	2301      	movs	r3, #1
 8000d1a:	425b      	negs	r3, r3
 8000d1c:	1d39      	adds	r1, r7, #4
 8000d1e:	4804      	ldr	r0, [pc, #16]	; (8000d30 <__io_putchar+0x20>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	f003 f815 	bl	8003d50 <HAL_UART_Transmit>

	return ch;
 8000d26:	687b      	ldr	r3, [r7, #4]
}
 8000d28:	0018      	movs	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b002      	add	sp, #8
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000278 	.word	0x20000278

08000d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d38:	f000 ff5e 	bl	8001bf8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3c:	f000 f81e 	bl	8000d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d40:	f7ff ff5c 	bl	8000bfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d44:	f000 fe80 	bl	8001a48 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  BlueNRG_Init();
 8000d48:	f7ff fe44 	bl	80009d4 <BlueNRG_Init>
  printf("Initialization Succesfull! \n\r");
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <main+0x3c>)
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f005 fa9a 	bl	8006288 <iprintf>
  fflush(stdout);
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <main+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f005 f862 	bl	8005e24 <fflush>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  printf("Device is now discoverable! \n\r");
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <main+0x44>)
 8000d62:	0018      	movs	r0, r3
 8000d64:	f005 fa90 	bl	8006288 <iprintf>

  while (1)
  {
	  BlueNRG_Process();
 8000d68:	f7ff feda 	bl	8000b20 <BlueNRG_Process>
 8000d6c:	e7fc      	b.n	8000d68 <main+0x34>
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	08006dd0 	.word	0x08006dd0
 8000d74:	20000068 	.word	0x20000068
 8000d78:	08006df0 	.word	0x08006df0

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b095      	sub	sp, #84	; 0x54
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	2414      	movs	r4, #20
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	0018      	movs	r0, r3
 8000d88:	233c      	movs	r3, #60	; 0x3c
 8000d8a:	001a      	movs	r2, r3
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	f005 f991 	bl	80060b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	0018      	movs	r0, r3
 8000d96:	2310      	movs	r3, #16
 8000d98:	001a      	movs	r2, r3
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f005 f98a 	bl	80060b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f001 fbd7 	bl	8002558 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	2202      	movs	r2, #2
 8000dae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	2280      	movs	r2, #128	; 0x80
 8000db4:	0052      	lsls	r2, r2, #1
 8000db6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000db8:	193b      	adds	r3, r7, r4
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	2240      	movs	r2, #64	; 0x40
 8000dc2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dc4:	193b      	adds	r3, r7, r4
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dca:	193b      	adds	r3, r7, r4
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f001 fc0f 	bl	80025f0 <HAL_RCC_OscConfig>
 8000dd2:	1e03      	subs	r3, r0, #0
 8000dd4:	d001      	beq.n	8000dda <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000dd6:	f000 f819 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2100      	movs	r1, #0
 8000df6:	0018      	movs	r0, r3
 8000df8:	f001 ff5a 	bl	8002cb0 <HAL_RCC_ClockConfig>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000e00:	f000 f804 	bl	8000e0c <Error_Handler>
  }
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b015      	add	sp, #84	; 0x54
 8000e0a:	bd90      	pop	{r4, r7, pc}

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <Error_Handler+0x8>
	...

08000e18 <add_service>:
uint8_t set_connectable = TRUE;
uint16_t connection_handle = 0;
uint8_t notification_enabled = FALSE;
ConnectionStatus connection_status = IDLE;

tBleStatus add_service(void){
 8000e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1a:	b09d      	sub	sp, #116	; 0x74
 8000e1c:	af06      	add	r7, sp, #24
	tBleStatus ret;
	Service_UUID_t first_service_uuid, chat_service_uuid;
	Char_UUID_t ff_char_uuid, rx_char_uuid, tx_char_uuid;

	BLUENRG_memcpy(&first_service_uuid.Service_UUID_128, FIRST_SERVICE_UUID, 16);
 8000e1e:	2144      	movs	r1, #68	; 0x44
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	4a40      	ldr	r2, [pc, #256]	; (8000f24 <add_service+0x10c>)
 8000e24:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e26:	c331      	stmia	r3!, {r0, r4, r5}
 8000e28:	6812      	ldr	r2, [r2, #0]
 8000e2a:	601a      	str	r2, [r3, #0]
	BLUENRG_memcpy(&chat_service_uuid.Service_UUID_128, CHAT_SERVICE_UUID, 16);
 8000e2c:	2634      	movs	r6, #52	; 0x34
 8000e2e:	19bb      	adds	r3, r7, r6
 8000e30:	4a3d      	ldr	r2, [pc, #244]	; (8000f28 <add_service+0x110>)
 8000e32:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e34:	c331      	stmia	r3!, {r0, r4, r5}
 8000e36:	6812      	ldr	r2, [r2, #0]
 8000e38:	601a      	str	r2, [r3, #0]

	BLUENRG_memcpy(ff_char_uuid.Char_UUID_128, FF_CHAR_UUID, 16);
 8000e3a:	2324      	movs	r3, #36	; 0x24
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	4a3b      	ldr	r2, [pc, #236]	; (8000f2c <add_service+0x114>)
 8000e40:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e42:	c331      	stmia	r3!, {r0, r4, r5}
 8000e44:	6812      	ldr	r2, [r2, #0]
 8000e46:	601a      	str	r2, [r3, #0]
	BLUENRG_memcpy(rx_char_uuid.Char_UUID_128, RX_CHAR_UUID, 16);
 8000e48:	2214      	movs	r2, #20
 8000e4a:	18bb      	adds	r3, r7, r2
 8000e4c:	4a38      	ldr	r2, [pc, #224]	; (8000f30 <add_service+0x118>)
 8000e4e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e50:	c331      	stmia	r3!, {r0, r4, r5}
 8000e52:	6812      	ldr	r2, [r2, #0]
 8000e54:	601a      	str	r2, [r3, #0]
	BLUENRG_memcpy(tx_char_uuid.Char_UUID_128, TX_CHAR_UUID, 16);
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	4a36      	ldr	r2, [pc, #216]	; (8000f34 <add_service+0x11c>)
 8000e5a:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e5c:	c331      	stmia	r3!, {r0, r4, r5}
 8000e5e:	6812      	ldr	r2, [r2, #0]
 8000e60:	601a      	str	r2, [r3, #0]


	/* ---- Add First Service ---- */
	ret = aci_gatt_add_serv(UUID_TYPE_128, first_service_uuid.Service_UUID_128, PRIMARY_SERVICE, 7, &first_service_handle);
 8000e62:	2557      	movs	r5, #87	; 0x57
 8000e64:	197c      	adds	r4, r7, r5
 8000e66:	1879      	adds	r1, r7, r1
 8000e68:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <add_service+0x120>)
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	2307      	movs	r3, #7
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2002      	movs	r0, #2
 8000e72:	f003 fff0 	bl	8004e56 <aci_gatt_add_serv>
 8000e76:	0003      	movs	r3, r0
 8000e78:	7023      	strb	r3, [r4, #0]

	/* Add Characteristic */
	ret = aci_gatt_add_char(first_service_handle, UUID_TYPE_128, ff_char_uuid.Char_UUID_128, DATA_LEN, CHAR_PROP_READ, ATTR_PERMISSION_NONE, GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP, 16, 0, &ff_char_handle);
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <add_service+0x120>)
 8000e7c:	8818      	ldrh	r0, [r3, #0]
 8000e7e:	197c      	adds	r4, r7, r5
 8000e80:	2324      	movs	r3, #36	; 0x24
 8000e82:	18fa      	adds	r2, r7, r3
 8000e84:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <add_service+0x124>)
 8000e86:	9305      	str	r3, [sp, #20]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9304      	str	r3, [sp, #16]
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	9303      	str	r3, [sp, #12]
 8000e90:	2304      	movs	r3, #4
 8000e92:	9302      	str	r3, [sp, #8]
 8000e94:	2300      	movs	r3, #0
 8000e96:	9301      	str	r3, [sp, #4]
 8000e98:	2302      	movs	r3, #2
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	f004 f874 	bl	8004f8c <aci_gatt_add_char>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	7023      	strb	r3, [r4, #0]


	/* ---- Add Second Service ---- */
	ret = aci_gatt_add_serv(UUID_TYPE_128, chat_service_uuid.Service_UUID_128, PRIMARY_SERVICE, 7, &chat_service_handle);
 8000ea8:	197c      	adds	r4, r7, r5
 8000eaa:	19b9      	adds	r1, r7, r6
 8000eac:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <add_service+0x128>)
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2307      	movs	r3, #7
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f003 ffce 	bl	8004e56 <aci_gatt_add_serv>
 8000eba:	0003      	movs	r3, r0
 8000ebc:	7023      	strb	r3, [r4, #0]

	/* Add Characteristics */
	ret = aci_gatt_add_char(chat_service_handle, UUID_TYPE_128, rx_char_uuid.Char_UUID_128, CHAT_DATA_LEN, CHAR_PROP_WRITE_WITHOUT_RESP | CHAR_PROP_WRITE, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,16, 1, &rx_char_handle);
 8000ebe:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <add_service+0x128>)
 8000ec0:	8818      	ldrh	r0, [r3, #0]
 8000ec2:	197c      	adds	r4, r7, r5
 8000ec4:	2214      	movs	r2, #20
 8000ec6:	18ba      	adds	r2, r7, r2
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <add_service+0x12c>)
 8000eca:	9305      	str	r3, [sp, #20]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	9304      	str	r3, [sp, #16]
 8000ed0:	2310      	movs	r3, #16
 8000ed2:	9303      	str	r3, [sp, #12]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	9302      	str	r3, [sp, #8]
 8000ed8:	2300      	movs	r3, #0
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	230c      	movs	r3, #12
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2314      	movs	r3, #20
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	f004 f852 	bl	8004f8c <aci_gatt_add_char>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	7023      	strb	r3, [r4, #0]

	ret = aci_gatt_add_char(chat_service_handle, UUID_TYPE_128, tx_char_uuid.Char_UUID_128, CHAT_DATA_LEN, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0, 16, 1, &tx_char_handle);
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <add_service+0x128>)
 8000eee:	8818      	ldrh	r0, [r3, #0]
 8000ef0:	197c      	adds	r4, r7, r5
 8000ef2:	1d3a      	adds	r2, r7, #4
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <add_service+0x130>)
 8000ef6:	9305      	str	r3, [sp, #20]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	9304      	str	r3, [sp, #16]
 8000efc:	2310      	movs	r3, #16
 8000efe:	9303      	str	r3, [sp, #12]
 8000f00:	2300      	movs	r3, #0
 8000f02:	9302      	str	r3, [sp, #8]
 8000f04:	2300      	movs	r3, #0
 8000f06:	9301      	str	r3, [sp, #4]
 8000f08:	2310      	movs	r3, #16
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2314      	movs	r3, #20
 8000f0e:	2102      	movs	r1, #2
 8000f10:	f004 f83c 	bl	8004f8c <aci_gatt_add_char>
 8000f14:	0003      	movs	r3, r0
 8000f16:	7023      	strb	r3, [r4, #0]


	return ret;
 8000f18:	197b      	adds	r3, r7, r5
 8000f1a:	781b      	ldrb	r3, [r3, #0]
}
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b017      	add	sp, #92	; 0x5c
 8000f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000028 	.word	0x20000028
 8000f2c:	20000018 	.word	0x20000018
 8000f30:	20000038 	.word	0x20000038
 8000f34:	20000048 	.word	0x20000048
 8000f38:	200001f4 	.word	0x200001f4
 8000f3c:	200001f6 	.word	0x200001f6
 8000f40:	200001f8 	.word	0x200001f8
 8000f44:	200001fa 	.word	0x200001fa
 8000f48:	200001fc 	.word	0x200001fc

08000f4c <update_ff_data>:


void update_ff_data(int16_t new_data){
 8000f4c:	b5b0      	push	{r4, r5, r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	0002      	movs	r2, r0
 8000f54:	1dbb      	adds	r3, r7, #6
 8000f56:	801a      	strh	r2, [r3, #0]
	tBleStatus ret;

	ret = aci_gatt_update_char_value(first_service_handle, ff_char_handle, 0, DATA_LEN, (uint8_t *) &new_data);
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <update_ff_data+0x40>)
 8000f5a:	8818      	ldrh	r0, [r3, #0]
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <update_ff_data+0x44>)
 8000f5e:	8819      	ldrh	r1, [r3, #0]
 8000f60:	250f      	movs	r5, #15
 8000f62:	197c      	adds	r4, r7, r5
 8000f64:	1dbb      	adds	r3, r7, #6
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2302      	movs	r3, #2
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f004 f8f4 	bl	8005158 <aci_gatt_update_char_value>
 8000f70:	0003      	movs	r3, r0
 8000f72:	7023      	strb	r3, [r4, #0]

	if(ret != BLE_STATUS_SUCCESS){
 8000f74:	197b      	adds	r3, r7, r5
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <update_ff_data+0x38>
		printf("Error while updating ff_char value \n\r");
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <update_ff_data+0x48>)
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f005 f982 	bl	8006288 <iprintf>
	}

}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b004      	add	sp, #16
 8000f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f8c:	200001f4 	.word	0x200001f4
 8000f90:	200001f6 	.word	0x200001f6
 8000f94:	08006e10 	.word	0x08006e10

08000f98 <receive_data>:


uint16_t total_pck = 0;
uint16_t count_pck = 0;
bool next_ack = true;
void receive_data(uint8_t *data_buffer, uint8_t num_bytes){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	000a      	movs	r2, r1
 8000fa2:	1cfb      	adds	r3, r7, #3
 8000fa4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000fa6:	23a0      	movs	r3, #160	; 0xa0
 8000fa8:	05db      	lsls	r3, r3, #23
 8000faa:	2120      	movs	r1, #32
 8000fac:	0018      	movs	r0, r3
 8000fae:	f001 fab7 	bl	8002520 <HAL_GPIO_TogglePin>

	int i;
	for(i=0 ; i<num_bytes && num_bytes<=CHAT_DATA_LEN ; i++){
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	e00c      	b.n	8000fd2 <receive_data+0x3a>
		printf("%02x", data_buffer[i]);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	18d3      	adds	r3, r2, r3
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	4b56      	ldr	r3, [pc, #344]	; (800111c <receive_data+0x184>)
 8000fc4:	0011      	movs	r1, r2
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f005 f95e 	bl	8006288 <iprintf>
	for(i=0 ; i<num_bytes && num_bytes<=CHAT_DATA_LEN ; i++){
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	1cfb      	adds	r3, r7, #3
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	da03      	bge.n	8000fe4 <receive_data+0x4c>
 8000fdc:	1cfb      	adds	r3, r7, #3
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b14      	cmp	r3, #20
 8000fe2:	d9e9      	bls.n	8000fb8 <receive_data+0x20>
	}
	printf("\n\r");
 8000fe4:	4b4e      	ldr	r3, [pc, #312]	; (8001120 <receive_data+0x188>)
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f005 f94e 	bl	8006288 <iprintf>

	switch(connection_status){
 8000fec:	4b4d      	ldr	r3, [pc, #308]	; (8001124 <receive_data+0x18c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d002      	beq.n	8000ffa <receive_data+0x62>
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d035      	beq.n	8001064 <receive_data+0xcc>
 8000ff8:	e07f      	b.n	80010fa <receive_data+0x162>
		case CONNECTED:   // receive START FLASH MODE pck
			if(verify_data(data_buffer, num_bytes, START_FLASH_MODE) == true){
 8000ffa:	1cfb      	adds	r3, r7, #3
 8000ffc:	7819      	ldrb	r1, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	0018      	movs	r0, r3
 8001004:	f000 f8f8 	bl	80011f8 <verify_data>
 8001008:	0003      	movs	r3, r0
 800100a:	2b01      	cmp	r3, #1
 800100c:	d121      	bne.n	8001052 <receive_data+0xba>
				total_pck = (data_buffer[1] << 8) + data_buffer[2];
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3301      	adds	r3, #1
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b29b      	uxth	r3, r3
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b29a      	uxth	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3302      	adds	r3, #2
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b29b      	uxth	r3, r3
 8001022:	18d3      	adds	r3, r2, r3
 8001024:	b29a      	uxth	r2, r3
 8001026:	4b40      	ldr	r3, [pc, #256]	; (8001128 <receive_data+0x190>)
 8001028:	801a      	strh	r2, [r3, #0]
				printf("I expect %d packets \n\r", total_pck);
 800102a:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <receive_data+0x190>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	001a      	movs	r2, r3
 8001030:	4b3e      	ldr	r3, [pc, #248]	; (800112c <receive_data+0x194>)
 8001032:	0011      	movs	r1, r2
 8001034:	0018      	movs	r0, r3
 8001036:	f005 f927 	bl	8006288 <iprintf>


				send_ack(true, WRITE_FLASH_PACKET_RESPONSE);
 800103a:	2102      	movs	r1, #2
 800103c:	2001      	movs	r0, #1
 800103e:	f000 f885 	bl	800114c <send_ack>
				connection_status = RECEVEING_FW;
 8001042:	4b38      	ldr	r3, [pc, #224]	; (8001124 <receive_data+0x18c>)
 8001044:	2202      	movs	r2, #2
 8001046:	701a      	strb	r2, [r3, #0]
				printf("READY TO RECEIVE FW\n\r");
 8001048:	4b39      	ldr	r3, [pc, #228]	; (8001130 <receive_data+0x198>)
 800104a:	0018      	movs	r0, r3
 800104c:	f005 f91c 	bl	8006288 <iprintf>
				send_ack(false, WRITE_FLASH_PACKET_RESPONSE);

				printf("Received an init pck that I can't handle or wrong\n\r");
			}

			break;
 8001050:	e059      	b.n	8001106 <receive_data+0x16e>
				send_ack(false, WRITE_FLASH_PACKET_RESPONSE);
 8001052:	2102      	movs	r1, #2
 8001054:	2000      	movs	r0, #0
 8001056:	f000 f879 	bl	800114c <send_ack>
				printf("Received an init pck that I can't handle or wrong\n\r");
 800105a:	4b36      	ldr	r3, [pc, #216]	; (8001134 <receive_data+0x19c>)
 800105c:	0018      	movs	r0, r3
 800105e:	f005 f913 	bl	8006288 <iprintf>
			break;
 8001062:	e050      	b.n	8001106 <receive_data+0x16e>
		case RECEVEING_FW:
			if(verify_data(data_buffer, num_bytes, WRITE_FLASH_PACKET)){
 8001064:	1cfb      	adds	r3, r7, #3
 8001066:	7819      	ldrb	r1, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	0018      	movs	r0, r3
 800106e:	f000 f8c3 	bl	80011f8 <verify_data>
 8001072:	1e03      	subs	r3, r0, #0
 8001074:	d046      	beq.n	8001104 <receive_data+0x16c>
				uint16_t pck_num = (data_buffer[1] << 8) + data_buffer[2];
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3301      	adds	r3, #1
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b29b      	uxth	r3, r3
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b299      	uxth	r1, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3302      	adds	r3, #2
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b29a      	uxth	r2, r3
 800108a:	200a      	movs	r0, #10
 800108c:	183b      	adds	r3, r7, r0
 800108e:	188a      	adds	r2, r1, r2
 8001090:	801a      	strh	r2, [r3, #0]

				if(pck_num == count_pck){
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <receive_data+0x1a0>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	183a      	adds	r2, r7, r0
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d106      	bne.n	80010ac <receive_data+0x114>
					// save msg
					count_pck++;
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <receive_data+0x1a0>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	3301      	adds	r3, #1
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	4b24      	ldr	r3, [pc, #144]	; (8001138 <receive_data+0x1a0>)
 80010a8:	801a      	strh	r2, [r3, #0]
 80010aa:	e00c      	b.n	80010c6 <receive_data+0x12e>
				}else{
					printf("Wrong pck_num %d, %d \n\r", pck_num, count_pck);
 80010ac:	230a      	movs	r3, #10
 80010ae:	18fb      	adds	r3, r7, r3
 80010b0:	8819      	ldrh	r1, [r3, #0]
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <receive_data+0x1a0>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	001a      	movs	r2, r3
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <receive_data+0x1a4>)
 80010ba:	0018      	movs	r0, r3
 80010bc:	f005 f8e4 	bl	8006288 <iprintf>
					next_ack = false;
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <receive_data+0x1a8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
				}

				if(count_pck%10 == 0 || count_pck == total_pck){
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <receive_data+0x1a0>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	210a      	movs	r1, #10
 80010cc:	0018      	movs	r0, r3
 80010ce:	f7ff f8b1 	bl	8000234 <__aeabi_uidivmod>
 80010d2:	000b      	movs	r3, r1
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <receive_data+0x14e>
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <receive_data+0x1a0>)
 80010dc:	881a      	ldrh	r2, [r3, #0]
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <receive_data+0x190>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d10e      	bne.n	8001104 <receive_data+0x16c>
					send_ack(next_ack, WRITE_FLASH_PACKET_RESPONSE);
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <receive_data+0x1a8>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2102      	movs	r1, #2
 80010ec:	0018      	movs	r0, r3
 80010ee:	f000 f82d 	bl	800114c <send_ack>
					if(next_ack == false){
						// reset the buffer properly
					}else{
						// you can save properly
					}
					next_ack = true;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <receive_data+0x1a8>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
				}
			}

			break;
 80010f8:	e004      	b.n	8001104 <receive_data+0x16c>

		default:
			printf("Receive handle not found\n\r");
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <receive_data+0x1ac>)
 80010fc:	0018      	movs	r0, r3
 80010fe:	f005 f8c3 	bl	8006288 <iprintf>

			break;
 8001102:	e000      	b.n	8001106 <receive_data+0x16e>
			break;
 8001104:	46c0      	nop			; (mov r8, r8)
	}
	fflush(stdout);
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <receive_data+0x1b0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	0018      	movs	r0, r3
 800110e:	f004 fe89 	bl	8005e24 <fflush>

}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	46bd      	mov	sp, r7
 8001116:	b004      	add	sp, #16
 8001118:	bd80      	pop	{r7, pc}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	08006e38 	.word	0x08006e38
 8001120:	08006e40 	.word	0x08006e40
 8001124:	20000207 	.word	0x20000207
 8001128:	20000208 	.word	0x20000208
 800112c:	08006e44 	.word	0x08006e44
 8001130:	08006e5c 	.word	0x08006e5c
 8001134:	08006e74 	.word	0x08006e74
 8001138:	2000020a 	.word	0x2000020a
 800113c:	08006ea8 	.word	0x08006ea8
 8001140:	20000059 	.word	0x20000059
 8001144:	08006ec0 	.word	0x08006ec0
 8001148:	20000068 	.word	0x20000068

0800114c <send_ack>:


void send_ack(bool ack, PckType reply_type){
 800114c:	b5b0      	push	{r4, r5, r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	0002      	movs	r2, r0
 8001154:	1dfb      	adds	r3, r7, #7
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	1dbb      	adds	r3, r7, #6
 800115a:	1c0a      	adds	r2, r1, #0
 800115c:	701a      	strb	r2, [r3, #0]
	uint8_t ack_msg;

	if(ack == true){
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d104      	bne.n	8001170 <send_ack+0x24>
		ack_msg = 0x00;
 8001166:	230f      	movs	r3, #15
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	e003      	b.n	8001178 <send_ack+0x2c>
	}else{
		ack_msg = 0x01;
 8001170:	230f      	movs	r3, #15
 8001172:	18fb      	adds	r3, r7, r3
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
	}

	uint8_t msg_len = 0;
 8001178:	250e      	movs	r5, #14
 800117a:	197b      	adds	r3, r7, r5
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
	switch(reply_type){
 8001180:	1dbb      	adds	r3, r7, #6
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d12b      	bne.n	80011e0 <send_ack+0x94>
		case WRITE_FLASH_PACKET_RESPONSE:
			msg_len = WRITE_FLASH_PACKET_RESPONSE_LEN;
 8001188:	197b      	adds	r3, r7, r5
 800118a:	2205      	movs	r2, #5
 800118c:	701a      	strb	r2, [r3, #0]
			uint8_t msg[WRITE_FLASH_PACKET_RESPONSE_LEN];

			msg[0] = ack_msg;
 800118e:	2108      	movs	r1, #8
 8001190:	187b      	adds	r3, r7, r1
 8001192:	220f      	movs	r2, #15
 8001194:	18ba      	adds	r2, r7, r2
 8001196:	7812      	ldrb	r2, [r2, #0]
 8001198:	701a      	strb	r2, [r3, #0]
			msg[1] = 0x00; // CMD ?!
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2200      	movs	r2, #0
 800119e:	705a      	strb	r2, [r3, #1]
			msg[2] = (count_pck >> 8) & 0xff;
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <send_ack+0xa4>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	709a      	strb	r2, [r3, #2]
			msg[3] = (count_pck & 0xff);
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <send_ack+0xa4>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	70da      	strb	r2, [r3, #3]
			msg[4] = sum_payload(msg, 2, 3);
 80011b8:	000c      	movs	r4, r1
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2203      	movs	r2, #3
 80011be:	2102      	movs	r1, #2
 80011c0:	0018      	movs	r0, r3
 80011c2:	f000 f877 	bl	80012b4 <sum_payload>
 80011c6:	0003      	movs	r3, r0
 80011c8:	001a      	movs	r2, r3
 80011ca:	0021      	movs	r1, r4
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	711a      	strb	r2, [r3, #4]

			//printf("%02x", msg);

			send_data(msg, msg_len);
 80011d0:	197b      	adds	r3, r7, r5
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	0011      	movs	r1, r2
 80011d8:	0018      	movs	r0, r3
 80011da:	f000 f89d 	bl	8001318 <send_data>
 80011de:	e003      	b.n	80011e8 <send_ack+0x9c>
			break;

		default:
			printf("Can't handle the reply_type\n\r");
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <send_ack+0xa8>)
 80011e2:	0018      	movs	r0, r3
 80011e4:	f005 f850 	bl	8006288 <iprintf>
			return;
			break;
	}

}
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b004      	add	sp, #16
 80011ec:	bdb0      	pop	{r4, r5, r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	2000020a 	.word	0x2000020a
 80011f4:	08006edc 	.word	0x08006edc

080011f8 <verify_data>:



bool verify_data(uint8_t *data_buffer, uint8_t num_bytes, PckType expected_pck){
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	0008      	movs	r0, r1
 8001202:	0011      	movs	r1, r2
 8001204:	1cfb      	adds	r3, r7, #3
 8001206:	1c02      	adds	r2, r0, #0
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	1cbb      	adds	r3, r7, #2
 800120c:	1c0a      	adds	r2, r1, #0
 800120e:	701a      	strb	r2, [r3, #0]
	uint8_t rcv_crc = data_buffer[num_bytes-1];;
 8001210:	1cfb      	adds	r3, r7, #3
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	3b01      	subs	r3, #1
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	18d2      	adds	r2, r2, r3
 800121a:	230e      	movs	r3, #14
 800121c:	18fb      	adds	r3, r7, r3
 800121e:	7812      	ldrb	r2, [r2, #0]
 8001220:	701a      	strb	r2, [r3, #0]

	uint8_t checksum = 0;
 8001222:	230f      	movs	r3, #15
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]

	switch(expected_pck){
 800122a:	1cbb      	adds	r3, r7, #2
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d002      	beq.n	8001238 <verify_data+0x40>
 8001232:	2b01      	cmp	r3, #1
 8001234:	d018      	beq.n	8001268 <verify_data+0x70>
 8001236:	e025      	b.n	8001284 <verify_data+0x8c>
		case START_FLASH_MODE:

			/* check cmd and lenght of the msg */
			if(data_buffer[0] != START_FLASH_MODE_CMD || num_bytes != START_FLASH_MODE_LEN)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2bbb      	cmp	r3, #187	; 0xbb
 800123e:	d103      	bne.n	8001248 <verify_data+0x50>
 8001240:	1cfb      	adds	r3, r7, #3
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b04      	cmp	r3, #4
 8001246:	d001      	beq.n	800124c <verify_data+0x54>
				return false;
 8001248:	2300      	movs	r3, #0
 800124a:	e02c      	b.n	80012a6 <verify_data+0xae>

			checksum = sum_payload(data_buffer, 1, num_bytes-2); // -2 because sum_payload include end index
 800124c:	1cfb      	adds	r3, r7, #3
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	3b02      	subs	r3, #2
 8001252:	b2da      	uxtb	r2, r3
 8001254:	230f      	movs	r3, #15
 8001256:	18fc      	adds	r4, r7, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2101      	movs	r1, #1
 800125c:	0018      	movs	r0, r3
 800125e:	f000 f829 	bl	80012b4 <sum_payload>
 8001262:	0003      	movs	r3, r0
 8001264:	7023      	strb	r3, [r4, #0]
			/*
			for(int i=0; i<16 && i+1<num_bytes-1 ; i++){
				checksum += data_buffer[i+1];
			}*/
			break;
 8001266:	e013      	b.n	8001290 <verify_data+0x98>

		case WRITE_FLASH_PACKET:
			// add controls
			checksum = sum_payload(data_buffer, 3, num_bytes-2);
 8001268:	1cfb      	adds	r3, r7, #3
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	3b02      	subs	r3, #2
 800126e:	b2da      	uxtb	r2, r3
 8001270:	230f      	movs	r3, #15
 8001272:	18fc      	adds	r4, r7, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2103      	movs	r1, #3
 8001278:	0018      	movs	r0, r3
 800127a:	f000 f81b 	bl	80012b4 <sum_payload>
 800127e:	0003      	movs	r3, r0
 8001280:	7023      	strb	r3, [r4, #0]
			/*
			for(int i=0; i<16 && i+3<num_bytes-1 ; i++){
				checksum += data_buffer[i+3];
			}*/
			break;
 8001282:	e005      	b.n	8001290 <verify_data+0x98>

		default:
			printf("Can't verify this data\n\r");
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <verify_data+0xb8>)
 8001286:	0018      	movs	r0, r3
 8001288:	f004 fffe 	bl	8006288 <iprintf>

			return false;
 800128c:	2300      	movs	r3, #0
 800128e:	e00a      	b.n	80012a6 <verify_data+0xae>
	}

	//printf("ck rcv: %d, clc: %d", rcv_crc, checksum);

	if(checksum == rcv_crc){
 8001290:	230f      	movs	r3, #15
 8001292:	18fa      	adds	r2, r7, r3
 8001294:	230e      	movs	r3, #14
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	7812      	ldrb	r2, [r2, #0]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d101      	bne.n	80012a4 <verify_data+0xac>
		return true;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <verify_data+0xae>
	}else{
		return false;
 80012a4:	2300      	movs	r3, #0
	}
}
 80012a6:	0018      	movs	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b005      	add	sp, #20
 80012ac:	bd90      	pop	{r4, r7, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	08006efc 	.word	0x08006efc

080012b4 <sum_payload>:


uint8_t sum_payload(uint8_t *payload, uint8_t start, uint8_t end){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	0008      	movs	r0, r1
 80012be:	0011      	movs	r1, r2
 80012c0:	1cfb      	adds	r3, r7, #3
 80012c2:	1c02      	adds	r2, r0, #0
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	1cbb      	adds	r3, r7, #2
 80012c8:	1c0a      	adds	r2, r1, #0
 80012ca:	701a      	strb	r2, [r3, #0]
	uint8_t sum = 0;
 80012cc:	230f      	movs	r3, #15
 80012ce:	18fb      	adds	r3, r7, r3
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]

	for(int i=start; i<=end ;i++){
 80012d4:	1cfb      	adds	r3, r7, #3
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	e00c      	b.n	80012f6 <sum_payload+0x42>
		sum += payload[i];
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	18d3      	adds	r3, r2, r3
 80012e2:	7819      	ldrb	r1, [r3, #0]
 80012e4:	220f      	movs	r2, #15
 80012e6:	18bb      	adds	r3, r7, r2
 80012e8:	18ba      	adds	r2, r7, r2
 80012ea:	7812      	ldrb	r2, [r2, #0]
 80012ec:	188a      	adds	r2, r1, r2
 80012ee:	701a      	strb	r2, [r3, #0]
	for(int i=start; i<=end ;i++){
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	3301      	adds	r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	1cbb      	adds	r3, r7, #2
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dded      	ble.n	80012dc <sum_payload+0x28>
	}
	sum = sum & 0xff;
 8001300:	210f      	movs	r1, #15
 8001302:	187b      	adds	r3, r7, r1
 8001304:	187a      	adds	r2, r7, r1
 8001306:	7812      	ldrb	r2, [r2, #0]
 8001308:	701a      	strb	r2, [r3, #0]

	return sum;
 800130a:	187b      	adds	r3, r7, r1
 800130c:	781b      	ldrb	r3, [r3, #0]
}
 800130e:	0018      	movs	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	b004      	add	sp, #16
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <send_data>:

void send_data(uint8_t *data_buffer, uint8_t num_bytes){
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af02      	add	r7, sp, #8
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	000a      	movs	r2, r1
 8001322:	1cfb      	adds	r3, r7, #3
 8001324:	701a      	strb	r2, [r3, #0]
	tBleStatus ret;

	for(int i=0; i<num_bytes ; i++){
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	e00c      	b.n	8001346 <send_data+0x2e>
		printf("%02x ", data_buffer[i]);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	18d3      	adds	r3, r2, r3
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	001a      	movs	r2, r3
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <send_data+0x78>)
 8001338:	0011      	movs	r1, r2
 800133a:	0018      	movs	r0, r3
 800133c:	f004 ffa4 	bl	8006288 <iprintf>
	for(int i=0; i<num_bytes ; i++){
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3301      	adds	r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	1cfb      	adds	r3, r7, #3
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbed      	blt.n	800132c <send_data+0x14>
	}
	printf("\n\r");
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <send_data+0x7c>)
 8001352:	0018      	movs	r0, r3
 8001354:	f004 ff98 	bl	8006288 <iprintf>

	ret = aci_gatt_update_char_value(chat_service_handle, tx_char_handle, 0, num_bytes, data_buffer);
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <send_data+0x80>)
 800135a:	8818      	ldrh	r0, [r3, #0]
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <send_data+0x84>)
 800135e:	8819      	ldrh	r1, [r3, #0]
 8001360:	250b      	movs	r5, #11
 8001362:	197c      	adds	r4, r7, r5
 8001364:	1cfb      	adds	r3, r7, #3
 8001366:	781a      	ldrb	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	0013      	movs	r3, r2
 800136e:	2200      	movs	r2, #0
 8001370:	f003 fef2 	bl	8005158 <aci_gatt_update_char_value>
 8001374:	0003      	movs	r3, r0
 8001376:	7023      	strb	r3, [r4, #0]

	if(ret != BLE_STATUS_SUCCESS){
 8001378:	197b      	adds	r3, r7, r5
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <send_data+0x70>
		printf("Error while updating tx_char value \n\r");
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <send_data+0x88>)
 8001382:	0018      	movs	r0, r3
 8001384:	f004 ff80 	bl	8006288 <iprintf>
	}

}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b004      	add	sp, #16
 800138e:	bdb0      	pop	{r4, r5, r7, pc}
 8001390:	08006f18 	.word	0x08006f18
 8001394:	08006e40 	.word	0x08006e40
 8001398:	200001f8 	.word	0x200001f8
 800139c:	200001fc 	.word	0x200001fc
 80013a0:	08006f20 	.word	0x08006f20

080013a4 <GAP_ConnectionComplete_CB>:

void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	000a      	movs	r2, r1
 80013ae:	1cbb      	adds	r3, r7, #2
 80013b0:	801a      	strh	r2, [r3, #0]
	connected = TRUE;
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <GAP_ConnectionComplete_CB+0x68>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
	connection_handle = handle;
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <GAP_ConnectionComplete_CB+0x6c>)
 80013ba:	1cba      	adds	r2, r7, #2
 80013bc:	8812      	ldrh	r2, [r2, #0]
 80013be:	801a      	strh	r2, [r3, #0]
	connection_status = CONNECTED;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <GAP_ConnectionComplete_CB+0x70>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]

	printf("Connection Complete...\n\r");
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <GAP_ConnectionComplete_CB+0x74>)
 80013c8:	0018      	movs	r0, r3
 80013ca:	f004 ff5d 	bl	8006288 <iprintf>

	for(int i=5; i>=0 ; i--){
 80013ce:	2305      	movs	r3, #5
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	e00c      	b.n	80013ee <GAP_ConnectionComplete_CB+0x4a>
		printf("%02X -", addr[i]);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	18d3      	adds	r3, r2, r3
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	001a      	movs	r2, r3
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <GAP_ConnectionComplete_CB+0x78>)
 80013e0:	0011      	movs	r1, r2
 80013e2:	0018      	movs	r0, r3
 80013e4:	f004 ff50 	bl	8006288 <iprintf>
	for(int i=5; i>=0 ; i--){
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	daef      	bge.n	80013d4 <GAP_ConnectionComplete_CB+0x30>
	}
	printf("%02X\n\r",addr[0]);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	001a      	movs	r2, r3
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <GAP_ConnectionComplete_CB+0x7c>)
 80013fc:	0011      	movs	r1, r2
 80013fe:	0018      	movs	r0, r3
 8001400:	f004 ff42 	bl	8006288 <iprintf>
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b004      	add	sp, #16
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000200 	.word	0x20000200
 8001410:	20000204 	.word	0x20000204
 8001414:	20000207 	.word	0x20000207
 8001418:	08006f48 	.word	0x08006f48
 800141c:	08006f64 	.word	0x08006f64
 8001420:	08006f6c 	.word	0x08006f6c

08001424 <GAP_DisconnectionComplete_CB>:

void GAP_DisconnectionComplete_CB(void){
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	connected = FALSE;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <GAP_DisconnectionComplete_CB+0x2c>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
	connection_status = IDLE;
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <GAP_DisconnectionComplete_CB+0x30>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
	printf("Disconnection Complete...\n\r");
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <GAP_DisconnectionComplete_CB+0x34>)
 8001436:	0018      	movs	r0, r3
 8001438:	f004 ff26 	bl	8006288 <iprintf>
	set_connectable = TRUE;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <GAP_DisconnectionComplete_CB+0x38>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
	notification_enabled = FALSE;
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <GAP_DisconnectionComplete_CB+0x3c>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
}
 8001448:	46c0      	nop			; (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	20000200 	.word	0x20000200
 8001454:	20000207 	.word	0x20000207
 8001458:	08006f74 	.word	0x08006f74
 800145c:	20000058 	.word	0x20000058
 8001460:	20000206 	.word	0x20000206

08001464 <Read_Request_CB>:

void Read_Request_CB(uint16_t handle){
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	0002      	movs	r2, r0
 800146c:	1dbb      	adds	r3, r7, #6
 800146e:	801a      	strh	r2, [r3, #0]

	if(handle == ff_char_handle+1){
 8001470:	1dbb      	adds	r3, r7, #6
 8001472:	881a      	ldrh	r2, [r3, #0]
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <Read_Request_CB+0x3c>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	429a      	cmp	r2, r3
 800147c:	d102      	bne.n	8001484 <Read_Request_CB+0x20>
		update_ff_data(2);
 800147e:	2002      	movs	r0, #2
 8001480:	f7ff fd64 	bl	8000f4c <update_ff_data>
	}

	if(connection_handle){
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <Read_Request_CB+0x40>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <Read_Request_CB+0x32>
		aci_gatt_allow_read(connection_handle);
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <Read_Request_CB+0x40>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	0018      	movs	r0, r3
 8001492:	f003 ff05 	bl	80052a0 <aci_gatt_allow_read>
	}
}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	46bd      	mov	sp, r7
 800149a:	b002      	add	sp, #8
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	200001f6 	.word	0x200001f6
 80014a4:	20000204 	.word	0x20000204

080014a8 <Attribute_Modified_CB>:

void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	603a      	str	r2, [r7, #0]
 80014b0:	1dbb      	adds	r3, r7, #6
 80014b2:	1c02      	adds	r2, r0, #0
 80014b4:	801a      	strh	r2, [r3, #0]
 80014b6:	1d7b      	adds	r3, r7, #5
 80014b8:	1c0a      	adds	r2, r1, #0
 80014ba:	701a      	strb	r2, [r3, #0]
	//printf("Attribute Modified Called! %d\n\r", handle);
	//printf("RX: %d  - TX: %d\n\r", rx_char_handle, tx_char_handle);


	if(handle == rx_char_handle+1){
 80014bc:	1dbb      	adds	r3, r7, #6
 80014be:	881a      	ldrh	r2, [r3, #0]
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <Attribute_Modified_CB+0x58>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d107      	bne.n	80014da <Attribute_Modified_CB+0x32>
		receive_data(att_data, data_length);
 80014ca:	1d7b      	adds	r3, r7, #5
 80014cc:	781a      	ldrb	r2, [r3, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	0011      	movs	r1, r2
 80014d2:	0018      	movs	r0, r3
 80014d4:	f7ff fd60 	bl	8000f98 <receive_data>
		if(att_data[0] == 0x01){
			notification_enabled = TRUE;
		}

	}
}
 80014d8:	e00d      	b.n	80014f6 <Attribute_Modified_CB+0x4e>
	}else if(handle == tx_char_handle+2){
 80014da:	1dbb      	adds	r3, r7, #6
 80014dc:	881a      	ldrh	r2, [r3, #0]
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <Attribute_Modified_CB+0x5c>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	3302      	adds	r3, #2
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d106      	bne.n	80014f6 <Attribute_Modified_CB+0x4e>
		if(att_data[0] == 0x01){
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d102      	bne.n	80014f6 <Attribute_Modified_CB+0x4e>
			notification_enabled = TRUE;
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <Attribute_Modified_CB+0x60>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b002      	add	sp, #8
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	200001fa 	.word	0x200001fa
 8001504:	200001fc 	.word	0x200001fc
 8001508:	20000206 	.word	0x20000206

0800150c <HCI_Event_CB>:
 * @note   Inside this function each event must be identified and correctly
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void HCI_Event_CB(void *pData){
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	hci_uart_pckt *hci_pckt = (hci_uart_pckt *)pData;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	627b      	str	r3, [r7, #36]	; 0x24

	/* Process event packet */
	if(hci_pckt->type == HCI_EVENT_PKT){
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b04      	cmp	r3, #4
 800151e:	d000      	beq.n	8001522 <HCI_Event_CB+0x16>
 8001520:	e076      	b.n	8001610 <HCI_Event_CB+0x104>
		/* Get data from packet */
		hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	3301      	adds	r3, #1
 8001526:	623b      	str	r3, [r7, #32]

		switch(event_pckt->evt){
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2bff      	cmp	r3, #255	; 0xff
 800152e:	d01f      	beq.n	8001570 <HCI_Event_CB+0x64>
 8001530:	dc65      	bgt.n	80015fe <HCI_Event_CB+0xf2>
 8001532:	2b05      	cmp	r3, #5
 8001534:	d002      	beq.n	800153c <HCI_Event_CB+0x30>
 8001536:	2b3e      	cmp	r3, #62	; 0x3e
 8001538:	d003      	beq.n	8001542 <HCI_Event_CB+0x36>
 800153a:	e060      	b.n	80015fe <HCI_Event_CB+0xf2>
			case EVT_DISCONN_COMPLETE:
				GAP_DisconnectionComplete_CB();
 800153c:	f7ff ff72 	bl	8001424 <GAP_DisconnectionComplete_CB>

				break;
 8001540:	e072      	b.n	8001628 <HCI_Event_CB+0x11c>

			case EVT_LE_META_EVENT:
				{
					evt_le_meta_event *evt = (evt_le_meta_event*)event_pckt->data;
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	3302      	adds	r3, #2
 8001546:	60fb      	str	r3, [r7, #12]

					switch(evt->subevent){
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d168      	bne.n	8001622 <HCI_Event_CB+0x116>


						case EVT_LE_CONN_COMPLETE:
						{
							evt_le_connection_complete *cc = (evt_le_connection_complete *)evt->data;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3301      	adds	r3, #1
 8001554:	60bb      	str	r3, [r7, #8]
							GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1d58      	adds	r0, r3, #5
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	785a      	ldrb	r2, [r3, #1]
 800155e:	789b      	ldrb	r3, [r3, #2]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	4313      	orrs	r3, r2
 8001564:	b29b      	uxth	r3, r3
 8001566:	0019      	movs	r1, r3
 8001568:	f7ff ff1c 	bl	80013a4 <GAP_ConnectionComplete_CB>
						}
							break;
 800156c:	46c0      	nop			; (mov r8, r8)
					}
				}

				break;
 800156e:	e058      	b.n	8001622 <HCI_Event_CB+0x116>

			case EVT_VENDOR:
			{
				evt_blue_aci *blue_evt = (evt_blue_aci*)event_pckt->data;
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	3302      	adds	r3, #2
 8001574:	61fb      	str	r3, [r7, #28]

				switch(blue_evt->ecode){
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	781a      	ldrb	r2, [r3, #0]
 800157a:	785b      	ldrb	r3, [r3, #1]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	4313      	orrs	r3, r2
 8001580:	b29b      	uxth	r3, r3
 8001582:	4a2b      	ldr	r2, [pc, #172]	; (8001630 <HCI_Event_CB+0x124>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d009      	beq.n	800159c <HCI_Event_CB+0x90>
 8001588:	4a29      	ldr	r2, [pc, #164]	; (8001630 <HCI_Event_CB+0x124>)
 800158a:	4293      	cmp	r3, r2
 800158c:	dc4b      	bgt.n	8001626 <HCI_Event_CB+0x11a>
 800158e:	4a29      	ldr	r2, [pc, #164]	; (8001634 <HCI_Event_CB+0x128>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d010      	beq.n	80015b6 <HCI_Event_CB+0xaa>
 8001594:	4a28      	ldr	r2, [pc, #160]	; (8001638 <HCI_Event_CB+0x12c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d01e      	beq.n	80015d8 <HCI_Event_CB+0xcc>
						break;
*/
				}
			}

				break;
 800159a:	e044      	b.n	8001626 <HCI_Event_CB+0x11a>
						evt_gatt_read_permit_req *pr = (evt_gatt_read_permit_req*)blue_evt->data;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	3302      	adds	r3, #2
 80015a0:	61bb      	str	r3, [r7, #24]
						Read_Request_CB(pr->attr_handle);
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	789a      	ldrb	r2, [r3, #2]
 80015a6:	78db      	ldrb	r3, [r3, #3]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	0018      	movs	r0, r3
 80015b0:	f7ff ff58 	bl	8001464 <Read_Request_CB>
						break;
 80015b4:	e022      	b.n	80015fc <HCI_Event_CB+0xf0>
						evt_gatt_attr_modified_IDB05A1 *evt =
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3302      	adds	r3, #2
 80015ba:	613b      	str	r3, [r7, #16]
						Attribute_Modified_CB(evt->attr_handle, evt->data_length,
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	789a      	ldrb	r2, [r3, #2]
 80015c0:	78db      	ldrb	r3, [r3, #3]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b298      	uxth	r0, r3
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	7919      	ldrb	r1, [r3, #4]
								evt->att_data);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	3307      	adds	r3, #7
						Attribute_Modified_CB(evt->attr_handle, evt->data_length,
 80015d0:	001a      	movs	r2, r3
 80015d2:	f7ff ff69 	bl	80014a8 <Attribute_Modified_CB>
						break;
 80015d6:	e011      	b.n	80015fc <HCI_Event_CB+0xf0>
						printf("NON DOVREBBE ENTRARE\n\r");
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <HCI_Event_CB+0x130>)
 80015da:	0018      	movs	r0, r3
 80015dc:	f004 fe54 	bl	8006288 <iprintf>
						evt_gatt_attr_notification *evt =
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	3302      	adds	r3, #2
 80015e4:	617b      	str	r3, [r7, #20]
						receive_data(evt->attr_value, evt->event_data_length - 2);
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	1d5a      	adds	r2, r3, #5
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	789b      	ldrb	r3, [r3, #2]
 80015ee:	3b02      	subs	r3, #2
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	0019      	movs	r1, r3
 80015f4:	0010      	movs	r0, r2
 80015f6:	f7ff fccf 	bl	8000f98 <receive_data>
						break;
 80015fa:	46c0      	nop			; (mov r8, r8)
				break;
 80015fc:	e013      	b.n	8001626 <HCI_Event_CB+0x11a>


			default:
				printf("%d\n\r",event_pckt->evt);
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	001a      	movs	r2, r3
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HCI_Event_CB+0x134>)
 8001606:	0011      	movs	r1, r2
 8001608:	0018      	movs	r0, r3
 800160a:	f004 fe3d 	bl	8006288 <iprintf>
				break;
 800160e:	e00b      	b.n	8001628 <HCI_Event_CB+0x11c>
		}

	}else{
		printf("pckt_type: %d", hci_pckt->type);
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	001a      	movs	r2, r3
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HCI_Event_CB+0x138>)
 8001618:	0011      	movs	r1, r2
 800161a:	0018      	movs	r0, r3
 800161c:	f004 fe34 	bl	8006288 <iprintf>
	}
}
 8001620:	e002      	b.n	8001628 <HCI_Event_CB+0x11c>
				break;
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	e000      	b.n	8001628 <HCI_Event_CB+0x11c>
				break;
 8001626:	46c0      	nop			; (mov r8, r8)
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b00a      	add	sp, #40	; 0x28
 800162e:	bd80      	pop	{r7, pc}
 8001630:	00000c14 	.word	0x00000c14
 8001634:	00000c01 	.word	0x00000c01
 8001638:	00000c0f 	.word	0x00000c0f
 800163c:	08006f90 	.word	0x08006f90
 8001640:	08006fa8 	.word	0x08006fa8
 8001644:	08006fb0 	.word	0x08006fb0

08001648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_MspInit+0x44>)
 8001650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_MspInit+0x44>)
 8001654:	2101      	movs	r1, #1
 8001656:	430a      	orrs	r2, r1
 8001658:	641a      	str	r2, [r3, #64]	; 0x40
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_MspInit+0x44>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	2201      	movs	r2, #1
 8001660:	4013      	ands	r3, r2
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_MspInit+0x44>)
 8001668:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_MspInit+0x44>)
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	0549      	lsls	r1, r1, #21
 8001670:	430a      	orrs	r2, r1
 8001672:	63da      	str	r2, [r3, #60]	; 0x3c
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_MspInit+0x44>)
 8001676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	055b      	lsls	r3, r3, #21
 800167c:	4013      	ands	r3, r2
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	46bd      	mov	sp, r7
 8001686:	b002      	add	sp, #8
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	40021000 	.word	0x40021000

08001690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <NMI_Handler+0x4>

08001696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <HardFault_Handler+0x4>

0800169c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80016a0:	46c0      	nop			; (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b4:	f000 fb0a 	bl	8001ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <EXTI0_1_IRQHandler+0x14>)
 80016c6:	0018      	movs	r0, r3
 80016c8:	f000 fc62 	bl	8001f90 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80016cc:	46c0      	nop			; (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	200000e8 	.word	0x200000e8

080016d8 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <BSP_SPI1_Init+0x54>)
 80016e4:	4a12      	ldr	r2, [pc, #72]	; (8001730 <BSP_SPI1_Init+0x58>)
 80016e6:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <BSP_SPI1_Init+0x5c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	1c59      	adds	r1, r3, #1
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <BSP_SPI1_Init+0x5c>)
 80016f0:	6011      	str	r1, [r2, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d115      	bne.n	8001722 <BSP_SPI1_Init+0x4a>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <BSP_SPI1_Init+0x54>)
 80016f8:	0018      	movs	r0, r3
 80016fa:	f002 f951 	bl	80039a0 <HAL_SPI_GetState>
 80016fe:	1e03      	subs	r3, r0, #0
 8001700:	d10f      	bne.n	8001722 <BSP_SPI1_Init+0x4a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <BSP_SPI1_Init+0x54>)
 8001704:	0018      	movs	r0, r3
 8001706:	f000 f887 	bl	8001818 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d108      	bne.n	8001722 <BSP_SPI1_Init+0x4a>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <BSP_SPI1_Init+0x54>)
 8001712:	0018      	movs	r0, r3
 8001714:	f000 f838 	bl	8001788 <MX_SPI1_Init>
 8001718:	1e03      	subs	r3, r0, #0
 800171a:	d002      	beq.n	8001722 <BSP_SPI1_Init+0x4a>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800171c:	2308      	movs	r3, #8
 800171e:	425b      	negs	r3, r3
 8001720:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8001722:	687b      	ldr	r3, [r7, #4]
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b002      	add	sp, #8
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000020c 	.word	0x2000020c
 8001730:	40013000 	.word	0x40013000
 8001734:	20000270 	.word	0x20000270

08001738 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b089      	sub	sp, #36	; 0x24
 800173c:	af02      	add	r7, sp, #8
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	1dbb      	adds	r3, r7, #6
 8001744:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800174a:	1dbb      	adds	r3, r7, #6
 800174c:	881c      	ldrh	r4, [r3, #0]
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	68f9      	ldr	r1, [r7, #12]
 8001752:	4808      	ldr	r0, [pc, #32]	; (8001774 <BSP_SPI1_SendRecv+0x3c>)
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	015b      	lsls	r3, r3, #5
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	0023      	movs	r3, r4
 800175c:	f001 ff4e 	bl	80035fc <HAL_SPI_TransmitReceive>
 8001760:	1e03      	subs	r3, r0, #0
 8001762:	d002      	beq.n	800176a <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001764:	2306      	movs	r3, #6
 8001766:	425b      	negs	r3, r3
 8001768:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800176a:	697b      	ldr	r3, [r7, #20]
}
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	b007      	add	sp, #28
 8001772:	bd90      	pop	{r4, r7, pc}
 8001774:	2000020c 	.word	0x2000020c

08001778 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800177c:	f000 fab8 	bl	8001cf0 <HAL_GetTick>
 8001780:	0003      	movs	r3, r0
}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001790:	240f      	movs	r4, #15
 8001792:	193b      	adds	r3, r7, r4
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]

  hspi->Instance = SPI1;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <MX_SPI1_Init+0x8c>)
 800179c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2282      	movs	r2, #130	; 0x82
 80017a2:	0052      	lsls	r2, r2, #1
 80017a4:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	22e0      	movs	r2, #224	; 0xe0
 80017b0:	00d2      	lsls	r2, r2, #3
 80017b2:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	0092      	lsls	r2, r2, #2
 80017c6:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2218      	movs	r2, #24
 80017cc:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2207      	movs	r2, #7
 80017e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2208      	movs	r2, #8
 80017f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	0018      	movs	r0, r3
 80017f6:	f001 fe41 	bl	800347c <HAL_SPI_Init>
 80017fa:	1e03      	subs	r3, r0, #0
 80017fc:	d002      	beq.n	8001804 <MX_SPI1_Init+0x7c>
  {
    ret = HAL_ERROR;
 80017fe:	193b      	adds	r3, r7, r4
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8001804:	230f      	movs	r3, #15
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	781b      	ldrb	r3, [r3, #0]
}
 800180a:	0018      	movs	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	b005      	add	sp, #20
 8001810:	bd90      	pop	{r4, r7, pc}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	40013000 	.word	0x40013000

08001818 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b08b      	sub	sp, #44	; 0x2c
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001820:	4b36      	ldr	r3, [pc, #216]	; (80018fc <SPI1_MspInit+0xe4>)
 8001822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001824:	4b35      	ldr	r3, [pc, #212]	; (80018fc <SPI1_MspInit+0xe4>)
 8001826:	2180      	movs	r1, #128	; 0x80
 8001828:	0149      	lsls	r1, r1, #5
 800182a:	430a      	orrs	r2, r1
 800182c:	641a      	str	r2, [r3, #64]	; 0x40
 800182e:	4b33      	ldr	r3, [pc, #204]	; (80018fc <SPI1_MspInit+0xe4>)
 8001830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	015b      	lsls	r3, r3, #5
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <SPI1_MspInit+0xe4>)
 800183e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001840:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <SPI1_MspInit+0xe4>)
 8001842:	2101      	movs	r1, #1
 8001844:	430a      	orrs	r2, r1
 8001846:	635a      	str	r2, [r3, #52]	; 0x34
 8001848:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <SPI1_MspInit+0xe4>)
 800184a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184c:	2201      	movs	r2, #1
 800184e:	4013      	ands	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001854:	4b29      	ldr	r3, [pc, #164]	; (80018fc <SPI1_MspInit+0xe4>)
 8001856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001858:	4b28      	ldr	r3, [pc, #160]	; (80018fc <SPI1_MspInit+0xe4>)
 800185a:	2102      	movs	r1, #2
 800185c:	430a      	orrs	r2, r1
 800185e:	635a      	str	r2, [r3, #52]	; 0x34
 8001860:	4b26      	ldr	r3, [pc, #152]	; (80018fc <SPI1_MspInit+0xe4>)
 8001862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001864:	2202      	movs	r2, #2
 8001866:	4013      	ands	r3, r2
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800186c:	2414      	movs	r4, #20
 800186e:	193b      	adds	r3, r7, r4
 8001870:	2240      	movs	r2, #64	; 0x40
 8001872:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	193b      	adds	r3, r7, r4
 8001876:	2202      	movs	r2, #2
 8001878:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	193b      	adds	r3, r7, r4
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	193b      	adds	r3, r7, r4
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001886:	193b      	adds	r3, r7, r4
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800188c:	193a      	adds	r2, r7, r4
 800188e:	23a0      	movs	r3, #160	; 0xa0
 8001890:	05db      	lsls	r3, r3, #23
 8001892:	0011      	movs	r1, r2
 8001894:	0018      	movs	r0, r3
 8001896:	f000 fbc5 	bl	8002024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800189a:	193b      	adds	r3, r7, r4
 800189c:	2280      	movs	r2, #128	; 0x80
 800189e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	193b      	adds	r3, r7, r4
 80018a2:	2202      	movs	r2, #2
 80018a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	193b      	adds	r3, r7, r4
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	193b      	adds	r3, r7, r4
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80018b2:	193b      	adds	r3, r7, r4
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80018b8:	193a      	adds	r2, r7, r4
 80018ba:	23a0      	movs	r3, #160	; 0xa0
 80018bc:	05db      	lsls	r3, r3, #23
 80018be:	0011      	movs	r1, r2
 80018c0:	0018      	movs	r0, r3
 80018c2:	f000 fbaf 	bl	8002024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80018c6:	0021      	movs	r1, r4
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	2208      	movs	r2, #8
 80018cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	187b      	adds	r3, r7, r1
 80018d0:	2202      	movs	r2, #2
 80018d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	2200      	movs	r2, #0
 80018de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	4a05      	ldr	r2, [pc, #20]	; (8001900 <SPI1_MspInit+0xe8>)
 80018ea:	0019      	movs	r1, r3
 80018ec:	0010      	movs	r0, r2
 80018ee:	f000 fb99 	bl	8002024 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b00b      	add	sp, #44	; 0x2c
 80018f8:	bd90      	pop	{r4, r7, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	40021000 	.word	0x40021000
 8001900:	50000400 	.word	0x50000400

08001904 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	e00a      	b.n	800192c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001916:	e000      	b.n	800191a <_read+0x16>
 8001918:	bf00      	nop
 800191a:	0001      	movs	r1, r0
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	60ba      	str	r2, [r7, #8]
 8001922:	b2ca      	uxtb	r2, r1
 8001924:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3301      	adds	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	429a      	cmp	r2, r3
 8001932:	dbf0      	blt.n	8001916 <_read+0x12>
	}

return len;
 8001934:	687b      	ldr	r3, [r7, #4]
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b006      	add	sp, #24
 800193c:	bd80      	pop	{r7, pc}

0800193e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	60f8      	str	r0, [r7, #12]
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	e009      	b.n	8001964 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	60ba      	str	r2, [r7, #8]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	0018      	movs	r0, r3
 800195a:	f7ff f9d9 	bl	8000d10 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3301      	adds	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	429a      	cmp	r2, r3
 800196a:	dbf1      	blt.n	8001950 <_write+0x12>
	}
	return len;
 800196c:	687b      	ldr	r3, [r7, #4]
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	b006      	add	sp, #24
 8001974:	bd80      	pop	{r7, pc}

08001976 <_close>:

int _close(int file)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
	return -1;
 800197e:	2301      	movs	r3, #1
 8001980:	425b      	negs	r3, r3
}
 8001982:	0018      	movs	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	b002      	add	sp, #8
 8001988:	bd80      	pop	{r7, pc}

0800198a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	0192      	lsls	r2, r2, #6
 800199a:	605a      	str	r2, [r3, #4]
	return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b002      	add	sp, #8
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_isatty>:

int _isatty(int file)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	return 1;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b002      	add	sp, #8
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
	return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	0018      	movs	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b004      	add	sp, #16
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <_sbrk+0x5c>)
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <_sbrk+0x60>)
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <_sbrk+0x64>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <_sbrk+0x68>)
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	18d3      	adds	r3, r2, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d207      	bcs.n	8001a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a00:	f004 f93e 	bl	8005c80 <__errno>
 8001a04:	0003      	movs	r3, r0
 8001a06:	220c      	movs	r2, #12
 8001a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	425b      	negs	r3, r3
 8001a0e:	e009      	b.n	8001a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	18d2      	adds	r2, r2, r3
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <_sbrk+0x64>)
 8001a20:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	0018      	movs	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b006      	add	sp, #24
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20024000 	.word	0x20024000
 8001a30:	00000400 	.word	0x00000400
 8001a34:	20000274 	.word	0x20000274
 8001a38:	20000610 	.word	0x20000610

08001a3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a40:	46c0      	nop			; (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a4c:	4b23      	ldr	r3, [pc, #140]	; (8001adc <MX_USART2_UART_Init+0x94>)
 8001a4e:	4a24      	ldr	r2, [pc, #144]	; (8001ae0 <MX_USART2_UART_Init+0x98>)
 8001a50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <MX_USART2_UART_Init+0x94>)
 8001a54:	22e1      	movs	r2, #225	; 0xe1
 8001a56:	0252      	lsls	r2, r2, #9
 8001a58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <MX_USART2_UART_Init+0x94>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <MX_USART2_UART_Init+0x94>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <MX_USART2_UART_Init+0x94>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <MX_USART2_UART_Init+0x94>)
 8001a6e:	220c      	movs	r2, #12
 8001a70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <MX_USART2_UART_Init+0x94>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <MX_USART2_UART_Init+0x94>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <MX_USART2_UART_Init+0x94>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a84:	4b15      	ldr	r3, [pc, #84]	; (8001adc <MX_USART2_UART_Init+0x94>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <MX_USART2_UART_Init+0x94>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <MX_USART2_UART_Init+0x94>)
 8001a92:	0018      	movs	r0, r3
 8001a94:	f002 f906 	bl	8003ca4 <HAL_UART_Init>
 8001a98:	1e03      	subs	r3, r0, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001a9c:	f7ff f9b6 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_USART2_UART_Init+0x94>)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f002 ff49 	bl	800493c <HAL_UARTEx_SetTxFifoThreshold>
 8001aaa:	1e03      	subs	r3, r0, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001aae:	f7ff f9ad 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <MX_USART2_UART_Init+0x94>)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f002 ff80 	bl	80049bc <HAL_UARTEx_SetRxFifoThreshold>
 8001abc:	1e03      	subs	r3, r0, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ac0:	f7ff f9a4 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <MX_USART2_UART_Init+0x94>)
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f002 fefe 	bl	80048c8 <HAL_UARTEx_DisableFifoMode>
 8001acc:	1e03      	subs	r3, r0, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ad0:	f7ff f99c 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	20000278 	.word	0x20000278
 8001ae0:	40004400 	.word	0x40004400

08001ae4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b09d      	sub	sp, #116	; 0x74
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	235c      	movs	r3, #92	; 0x5c
 8001aee:	18fb      	adds	r3, r7, r3
 8001af0:	0018      	movs	r0, r3
 8001af2:	2314      	movs	r3, #20
 8001af4:	001a      	movs	r2, r3
 8001af6:	2100      	movs	r1, #0
 8001af8:	f004 fadc 	bl	80060b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001afc:	2410      	movs	r4, #16
 8001afe:	193b      	adds	r3, r7, r4
 8001b00:	0018      	movs	r0, r3
 8001b02:	234c      	movs	r3, #76	; 0x4c
 8001b04:	001a      	movs	r2, r3
 8001b06:	2100      	movs	r1, #0
 8001b08:	f004 fad4 	bl	80060b4 <memset>
  if(uartHandle->Instance==USART2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a22      	ldr	r2, [pc, #136]	; (8001b9c <HAL_UART_MspInit+0xb8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d13e      	bne.n	8001b94 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b16:	193b      	adds	r3, r7, r4
 8001b18:	2202      	movs	r2, #2
 8001b1a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b1c:	193b      	adds	r3, r7, r4
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b22:	193b      	adds	r3, r7, r4
 8001b24:	0018      	movs	r0, r3
 8001b26:	f001 fa6d 	bl	8003004 <HAL_RCCEx_PeriphCLKConfig>
 8001b2a:	1e03      	subs	r3, r0, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b2e:	f7ff f96d 	bl	8000e0c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <HAL_UART_MspInit+0xbc>)
 8001b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_UART_MspInit+0xbc>)
 8001b38:	2180      	movs	r1, #128	; 0x80
 8001b3a:	0289      	lsls	r1, r1, #10
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <HAL_UART_MspInit+0xbc>)
 8001b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	029b      	lsls	r3, r3, #10
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <HAL_UART_MspInit+0xbc>)
 8001b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_UART_MspInit+0xbc>)
 8001b54:	2101      	movs	r1, #1
 8001b56:	430a      	orrs	r2, r1
 8001b58:	635a      	str	r2, [r3, #52]	; 0x34
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_UART_MspInit+0xbc>)
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4013      	ands	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001b66:	215c      	movs	r1, #92	; 0x5c
 8001b68:	187b      	adds	r3, r7, r1
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	187b      	adds	r3, r7, r1
 8001b70:	2202      	movs	r2, #2
 8001b72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	187b      	adds	r3, r7, r1
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	187b      	adds	r3, r7, r1
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001b80:	187b      	adds	r3, r7, r1
 8001b82:	2201      	movs	r2, #1
 8001b84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b86:	187a      	adds	r2, r7, r1
 8001b88:	23a0      	movs	r3, #160	; 0xa0
 8001b8a:	05db      	lsls	r3, r3, #23
 8001b8c:	0011      	movs	r1, r2
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f000 fa48 	bl	8002024 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b01d      	add	sp, #116	; 0x74
 8001b9a:	bd90      	pop	{r4, r7, pc}
 8001b9c:	40004400 	.word	0x40004400
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ba4:	480d      	ldr	r0, [pc, #52]	; (8001bdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ba6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ba8:	f7ff ff48 	bl	8001a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bac:	480c      	ldr	r0, [pc, #48]	; (8001be0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bae:	490d      	ldr	r1, [pc, #52]	; (8001be4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <LoopForever+0xe>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bc4:	4c0a      	ldr	r4, [pc, #40]	; (8001bf0 <LoopForever+0x16>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bd2:	f004 fa3f 	bl	8006054 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001bd6:	f7ff f8ad 	bl	8000d34 <main>

08001bda <LoopForever>:

LoopForever:
  b LoopForever
 8001bda:	e7fe      	b.n	8001bda <LoopForever>
  ldr   r0, =_estack
 8001bdc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be4:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001be8:	080070f0 	.word	0x080070f0
  ldr r2, =_sbss
 8001bec:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001bf0:	2000060c 	.word	0x2000060c

08001bf4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC1_COMP_IRQHandler>
	...

08001bf8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bfe:	1dfb      	adds	r3, r7, #7
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_Init+0x3c>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_Init+0x3c>)
 8001c0a:	2180      	movs	r1, #128	; 0x80
 8001c0c:	0049      	lsls	r1, r1, #1
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c12:	2000      	movs	r0, #0
 8001c14:	f000 f810 	bl	8001c38 <HAL_InitTick>
 8001c18:	1e03      	subs	r3, r0, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001c1c:	1dfb      	adds	r3, r7, #7
 8001c1e:	2201      	movs	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	e001      	b.n	8001c28 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001c24:	f7ff fd10 	bl	8001648 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c28:	1dfb      	adds	r3, r7, #7
 8001c2a:	781b      	ldrb	r3, [r3, #0]
}
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b002      	add	sp, #8
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40022000 	.word	0x40022000

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c40:	230f      	movs	r3, #15
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_InitTick+0x88>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d02b      	beq.n	8001ca8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001c50:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <HAL_InitTick+0x8c>)
 8001c52:	681c      	ldr	r4, [r3, #0]
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <HAL_InitTick+0x88>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	0019      	movs	r1, r3
 8001c5a:	23fa      	movs	r3, #250	; 0xfa
 8001c5c:	0098      	lsls	r0, r3, #2
 8001c5e:	f7fe fa63 	bl	8000128 <__udivsi3>
 8001c62:	0003      	movs	r3, r0
 8001c64:	0019      	movs	r1, r3
 8001c66:	0020      	movs	r0, r4
 8001c68:	f7fe fa5e 	bl	8000128 <__udivsi3>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f000 f93d 	bl	8001eee <HAL_SYSTICK_Config>
 8001c74:	1e03      	subs	r3, r0, #0
 8001c76:	d112      	bne.n	8001c9e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d80a      	bhi.n	8001c94 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	2301      	movs	r3, #1
 8001c82:	425b      	negs	r3, r3
 8001c84:	2200      	movs	r2, #0
 8001c86:	0018      	movs	r0, r3
 8001c88:	f000 f90c 	bl	8001ea4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_InitTick+0x90>)
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e00d      	b.n	8001cb0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001c94:	230f      	movs	r3, #15
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	e008      	b.n	8001cb0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c9e:	230f      	movs	r3, #15
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
 8001ca6:	e003      	b.n	8001cb0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ca8:	230f      	movs	r3, #15
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	2201      	movs	r2, #1
 8001cae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	781b      	ldrb	r3, [r3, #0]
}
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b005      	add	sp, #20
 8001cbc:	bd90      	pop	{r4, r7, pc}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	20000064 	.word	0x20000064
 8001cc4:	2000005c 	.word	0x2000005c
 8001cc8:	20000060 	.word	0x20000060

08001ccc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_IncTick+0x1c>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	001a      	movs	r2, r3
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_IncTick+0x20>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	18d2      	adds	r2, r2, r3
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_IncTick+0x20>)
 8001cde:	601a      	str	r2, [r3, #0]
}
 8001ce0:	46c0      	nop			; (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	20000064 	.word	0x20000064
 8001cec:	2000030c 	.word	0x2000030c

08001cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b02      	ldr	r3, [pc, #8]	; (8001d00 <HAL_GetTick+0x10>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	2000030c 	.word	0x2000030c

08001d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff fff0 	bl	8001cf0 <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	d005      	beq.n	8001d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_Delay+0x44>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	001a      	movs	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	189b      	adds	r3, r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	f7ff ffe0 	bl	8001cf0 <HAL_GetTick>
 8001d30:	0002      	movs	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8f7      	bhi.n	8001d2c <HAL_Delay+0x28>
  {
  }
}
 8001d3c:	46c0      	nop			; (mov r8, r8)
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b004      	add	sp, #16
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	20000064 	.word	0x20000064

08001d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	0002      	movs	r2, r0
 8001d54:	1dfb      	adds	r3, r7, #7
 8001d56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d58:	1dfb      	adds	r3, r7, #7
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d5e:	d809      	bhi.n	8001d74 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d60:	1dfb      	adds	r3, r7, #7
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	001a      	movs	r2, r3
 8001d66:	231f      	movs	r3, #31
 8001d68:	401a      	ands	r2, r3
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <__NVIC_EnableIRQ+0x30>)
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	4091      	lsls	r1, r2
 8001d70:	000a      	movs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b002      	add	sp, #8
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	0002      	movs	r2, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	1dfb      	adds	r3, r7, #7
 8001d8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d8e:	1dfb      	adds	r3, r7, #7
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b7f      	cmp	r3, #127	; 0x7f
 8001d94:	d828      	bhi.n	8001de8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d96:	4a2f      	ldr	r2, [pc, #188]	; (8001e54 <__NVIC_SetPriority+0xd4>)
 8001d98:	1dfb      	adds	r3, r7, #7
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	b25b      	sxtb	r3, r3
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	33c0      	adds	r3, #192	; 0xc0
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	589b      	ldr	r3, [r3, r2]
 8001da6:	1dfa      	adds	r2, r7, #7
 8001da8:	7812      	ldrb	r2, [r2, #0]
 8001daa:	0011      	movs	r1, r2
 8001dac:	2203      	movs	r2, #3
 8001dae:	400a      	ands	r2, r1
 8001db0:	00d2      	lsls	r2, r2, #3
 8001db2:	21ff      	movs	r1, #255	; 0xff
 8001db4:	4091      	lsls	r1, r2
 8001db6:	000a      	movs	r2, r1
 8001db8:	43d2      	mvns	r2, r2
 8001dba:	401a      	ands	r2, r3
 8001dbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	019b      	lsls	r3, r3, #6
 8001dc2:	22ff      	movs	r2, #255	; 0xff
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	1dfb      	adds	r3, r7, #7
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	0018      	movs	r0, r3
 8001dcc:	2303      	movs	r3, #3
 8001dce:	4003      	ands	r3, r0
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dd4:	481f      	ldr	r0, [pc, #124]	; (8001e54 <__NVIC_SetPriority+0xd4>)
 8001dd6:	1dfb      	adds	r3, r7, #7
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	b25b      	sxtb	r3, r3
 8001ddc:	089b      	lsrs	r3, r3, #2
 8001dde:	430a      	orrs	r2, r1
 8001de0:	33c0      	adds	r3, #192	; 0xc0
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001de6:	e031      	b.n	8001e4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001de8:	4a1b      	ldr	r2, [pc, #108]	; (8001e58 <__NVIC_SetPriority+0xd8>)
 8001dea:	1dfb      	adds	r3, r7, #7
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	0019      	movs	r1, r3
 8001df0:	230f      	movs	r3, #15
 8001df2:	400b      	ands	r3, r1
 8001df4:	3b08      	subs	r3, #8
 8001df6:	089b      	lsrs	r3, r3, #2
 8001df8:	3306      	adds	r3, #6
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	18d3      	adds	r3, r2, r3
 8001dfe:	3304      	adds	r3, #4
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	1dfa      	adds	r2, r7, #7
 8001e04:	7812      	ldrb	r2, [r2, #0]
 8001e06:	0011      	movs	r1, r2
 8001e08:	2203      	movs	r2, #3
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	00d2      	lsls	r2, r2, #3
 8001e0e:	21ff      	movs	r1, #255	; 0xff
 8001e10:	4091      	lsls	r1, r2
 8001e12:	000a      	movs	r2, r1
 8001e14:	43d2      	mvns	r2, r2
 8001e16:	401a      	ands	r2, r3
 8001e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	019b      	lsls	r3, r3, #6
 8001e1e:	22ff      	movs	r2, #255	; 0xff
 8001e20:	401a      	ands	r2, r3
 8001e22:	1dfb      	adds	r3, r7, #7
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	0018      	movs	r0, r3
 8001e28:	2303      	movs	r3, #3
 8001e2a:	4003      	ands	r3, r0
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e30:	4809      	ldr	r0, [pc, #36]	; (8001e58 <__NVIC_SetPriority+0xd8>)
 8001e32:	1dfb      	adds	r3, r7, #7
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	001c      	movs	r4, r3
 8001e38:	230f      	movs	r3, #15
 8001e3a:	4023      	ands	r3, r4
 8001e3c:	3b08      	subs	r3, #8
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	430a      	orrs	r2, r1
 8001e42:	3306      	adds	r3, #6
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	18c3      	adds	r3, r0, r3
 8001e48:	3304      	adds	r3, #4
 8001e4a:	601a      	str	r2, [r3, #0]
}
 8001e4c:	46c0      	nop			; (mov r8, r8)
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b003      	add	sp, #12
 8001e52:	bd90      	pop	{r4, r7, pc}
 8001e54:	e000e100 	.word	0xe000e100
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	1e5a      	subs	r2, r3, #1
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	045b      	lsls	r3, r3, #17
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d301      	bcc.n	8001e74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e70:	2301      	movs	r3, #1
 8001e72:	e010      	b.n	8001e96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <SysTick_Config+0x44>)
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	3a01      	subs	r2, #1
 8001e7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	425b      	negs	r3, r3
 8001e80:	2103      	movs	r1, #3
 8001e82:	0018      	movs	r0, r3
 8001e84:	f7ff ff7c 	bl	8001d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SysTick_Config+0x44>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <SysTick_Config+0x44>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	0018      	movs	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b002      	add	sp, #8
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	210f      	movs	r1, #15
 8001eb0:	187b      	adds	r3, r7, r1
 8001eb2:	1c02      	adds	r2, r0, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	187b      	adds	r3, r7, r1
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b25b      	sxtb	r3, r3
 8001ebe:	0011      	movs	r1, r2
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7ff ff5d 	bl	8001d80 <__NVIC_SetPriority>
}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b004      	add	sp, #16
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	0002      	movs	r2, r0
 8001ed6:	1dfb      	adds	r3, r7, #7
 8001ed8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eda:	1dfb      	adds	r3, r7, #7
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	b25b      	sxtb	r3, r3
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7ff ff33 	bl	8001d4c <__NVIC_EnableIRQ>
}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b002      	add	sp, #8
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7ff ffaf 	bl	8001e5c <SysTick_Config>
 8001efe:	0003      	movs	r3, r0
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b002      	add	sp, #8
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	200b      	movs	r0, #11
 8001f14:	183b      	adds	r3, r7, r0
 8001f16:	1c0a      	adds	r2, r1, #0
 8001f18:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1a:	2317      	movs	r3, #23
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 8001f22:	183b      	adds	r3, r7, r0
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d010      	beq.n	8001f4c <HAL_EXTI_RegisterCallback+0x44>
 8001f2a:	dc13      	bgt.n	8001f54 <HAL_EXTI_RegisterCallback+0x4c>
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <HAL_EXTI_RegisterCallback+0x2e>
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d007      	beq.n	8001f44 <HAL_EXTI_RegisterCallback+0x3c>
 8001f34:	e00e      	b.n	8001f54 <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	609a      	str	r2, [r3, #8]
      break;
 8001f42:	e00c      	b.n	8001f5e <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	605a      	str	r2, [r3, #4]
      break;
 8001f4a:	e008      	b.n	8001f5e <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	609a      	str	r2, [r3, #8]
      break;
 8001f52:	e004      	b.n	8001f5e <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 8001f54:	2317      	movs	r3, #23
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	2201      	movs	r2, #1
 8001f5a:	701a      	strb	r2, [r3, #0]
      break;
 8001f5c:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8001f5e:	2317      	movs	r3, #23
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	781b      	ldrb	r3, [r3, #0]
}
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b006      	add	sp, #24
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e003      	b.n	8001f88 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001f86:	2300      	movs	r3, #0
  }
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b002      	add	sp, #8
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0c1b      	lsrs	r3, r3, #16
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	221f      	movs	r2, #31
 8001faa:	4013      	ands	r3, r2
 8001fac:	2201      	movs	r2, #1
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	0013      	movs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	015b      	lsls	r3, r3, #5
 8001fb8:	4a18      	ldr	r2, [pc, #96]	; (800201c <HAL_EXTI_IRQHandler+0x8c>)
 8001fba:	4694      	mov	ip, r2
 8001fbc:	4463      	add	r3, ip
 8001fbe:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d009      	beq.n	8001fe4 <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	015b      	lsls	r3, r3, #5
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	; (8002020 <HAL_EXTI_IRQHandler+0x90>)
 8001fea:	4694      	mov	ip, r2
 8001fec:	4463      	add	r3, ip
 8001fee:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d009      	beq.n	8002014 <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	4798      	blx	r3
    }
  }
}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b006      	add	sp, #24
 800201a:	bd80      	pop	{r7, pc}
 800201c:	4002180c 	.word	0x4002180c
 8002020:	40021810 	.word	0x40021810

08002024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002032:	e14d      	b.n	80022d0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2101      	movs	r1, #1
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4091      	lsls	r1, r2
 800203e:	000a      	movs	r2, r1
 8002040:	4013      	ands	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d100      	bne.n	800204c <HAL_GPIO_Init+0x28>
 800204a:	e13e      	b.n	80022ca <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2203      	movs	r2, #3
 8002052:	4013      	ands	r3, r2
 8002054:	2b01      	cmp	r3, #1
 8002056:	d005      	beq.n	8002064 <HAL_GPIO_Init+0x40>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2203      	movs	r2, #3
 800205e:	4013      	ands	r3, r2
 8002060:	2b02      	cmp	r3, #2
 8002062:	d130      	bne.n	80020c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	2203      	movs	r2, #3
 8002070:	409a      	lsls	r2, r3
 8002072:	0013      	movs	r3, r2
 8002074:	43da      	mvns	r2, r3
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	409a      	lsls	r2, r3
 8002086:	0013      	movs	r3, r2
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800209a:	2201      	movs	r2, #1
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	409a      	lsls	r2, r3
 80020a0:	0013      	movs	r3, r2
 80020a2:	43da      	mvns	r2, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	091b      	lsrs	r3, r3, #4
 80020b0:	2201      	movs	r2, #1
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
 80020b8:	0013      	movs	r3, r2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2203      	movs	r2, #3
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d017      	beq.n	8002102 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	2203      	movs	r2, #3
 80020de:	409a      	lsls	r2, r3
 80020e0:	0013      	movs	r3, r2
 80020e2:	43da      	mvns	r2, r3
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	409a      	lsls	r2, r3
 80020f4:	0013      	movs	r3, r2
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2203      	movs	r2, #3
 8002108:	4013      	ands	r3, r2
 800210a:	2b02      	cmp	r3, #2
 800210c:	d123      	bne.n	8002156 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	08da      	lsrs	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3208      	adds	r2, #8
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	58d3      	ldr	r3, [r2, r3]
 800211a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2207      	movs	r2, #7
 8002120:	4013      	ands	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	220f      	movs	r2, #15
 8002126:	409a      	lsls	r2, r3
 8002128:	0013      	movs	r3, r2
 800212a:	43da      	mvns	r2, r3
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2107      	movs	r1, #7
 800213a:	400b      	ands	r3, r1
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	409a      	lsls	r2, r3
 8002140:	0013      	movs	r3, r2
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	08da      	lsrs	r2, r3, #3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3208      	adds	r2, #8
 8002150:	0092      	lsls	r2, r2, #2
 8002152:	6939      	ldr	r1, [r7, #16]
 8002154:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	2203      	movs	r2, #3
 8002162:	409a      	lsls	r2, r3
 8002164:	0013      	movs	r3, r2
 8002166:	43da      	mvns	r2, r3
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4013      	ands	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2203      	movs	r2, #3
 8002174:	401a      	ands	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	409a      	lsls	r2, r3
 800217c:	0013      	movs	r3, r2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	23c0      	movs	r3, #192	; 0xc0
 8002190:	029b      	lsls	r3, r3, #10
 8002192:	4013      	ands	r3, r2
 8002194:	d100      	bne.n	8002198 <HAL_GPIO_Init+0x174>
 8002196:	e098      	b.n	80022ca <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002198:	4a53      	ldr	r2, [pc, #332]	; (80022e8 <HAL_GPIO_Init+0x2c4>)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3318      	adds	r3, #24
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	589b      	ldr	r3, [r3, r2]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2203      	movs	r2, #3
 80021aa:	4013      	ands	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	220f      	movs	r2, #15
 80021b0:	409a      	lsls	r2, r3
 80021b2:	0013      	movs	r3, r2
 80021b4:	43da      	mvns	r2, r3
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	23a0      	movs	r3, #160	; 0xa0
 80021c0:	05db      	lsls	r3, r3, #23
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d019      	beq.n	80021fa <HAL_GPIO_Init+0x1d6>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a48      	ldr	r2, [pc, #288]	; (80022ec <HAL_GPIO_Init+0x2c8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d013      	beq.n	80021f6 <HAL_GPIO_Init+0x1d2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a47      	ldr	r2, [pc, #284]	; (80022f0 <HAL_GPIO_Init+0x2cc>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00d      	beq.n	80021f2 <HAL_GPIO_Init+0x1ce>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a46      	ldr	r2, [pc, #280]	; (80022f4 <HAL_GPIO_Init+0x2d0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d007      	beq.n	80021ee <HAL_GPIO_Init+0x1ca>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a45      	ldr	r2, [pc, #276]	; (80022f8 <HAL_GPIO_Init+0x2d4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_GPIO_Init+0x1c6>
 80021e6:	2304      	movs	r3, #4
 80021e8:	e008      	b.n	80021fc <HAL_GPIO_Init+0x1d8>
 80021ea:	2305      	movs	r3, #5
 80021ec:	e006      	b.n	80021fc <HAL_GPIO_Init+0x1d8>
 80021ee:	2303      	movs	r3, #3
 80021f0:	e004      	b.n	80021fc <HAL_GPIO_Init+0x1d8>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e002      	b.n	80021fc <HAL_GPIO_Init+0x1d8>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_GPIO_Init+0x1d8>
 80021fa:	2300      	movs	r3, #0
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	2103      	movs	r1, #3
 8002200:	400a      	ands	r2, r1
 8002202:	00d2      	lsls	r2, r2, #3
 8002204:	4093      	lsls	r3, r2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800220c:	4936      	ldr	r1, [pc, #216]	; (80022e8 <HAL_GPIO_Init+0x2c4>)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	3318      	adds	r3, #24
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800221a:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <HAL_GPIO_Init+0x2c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	43da      	mvns	r2, r3
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	035b      	lsls	r3, r3, #13
 8002232:	4013      	ands	r3, r2
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800223e:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <HAL_GPIO_Init+0x2c4>)
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002244:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <HAL_GPIO_Init+0x2c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	43da      	mvns	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	039b      	lsls	r3, r3, #14
 800225c:	4013      	ands	r3, r2
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002268:	4b1f      	ldr	r3, [pc, #124]	; (80022e8 <HAL_GPIO_Init+0x2c4>)
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800226e:	4a1e      	ldr	r2, [pc, #120]	; (80022e8 <HAL_GPIO_Init+0x2c4>)
 8002270:	2384      	movs	r3, #132	; 0x84
 8002272:	58d3      	ldr	r3, [r2, r3]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	43da      	mvns	r2, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	029b      	lsls	r3, r3, #10
 8002288:	4013      	ands	r3, r2
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002294:	4914      	ldr	r1, [pc, #80]	; (80022e8 <HAL_GPIO_Init+0x2c4>)
 8002296:	2284      	movs	r2, #132	; 0x84
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800229c:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <HAL_GPIO_Init+0x2c4>)
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	58d3      	ldr	r3, [r2, r3]
 80022a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	43da      	mvns	r2, r3
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	025b      	lsls	r3, r3, #9
 80022b6:	4013      	ands	r3, r2
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022c2:	4909      	ldr	r1, [pc, #36]	; (80022e8 <HAL_GPIO_Init+0x2c4>)
 80022c4:	2280      	movs	r2, #128	; 0x80
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3301      	adds	r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	40da      	lsrs	r2, r3
 80022d8:	1e13      	subs	r3, r2, #0
 80022da:	d000      	beq.n	80022de <HAL_GPIO_Init+0x2ba>
 80022dc:	e6aa      	b.n	8002034 <HAL_GPIO_Init+0x10>
  }
}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	46c0      	nop			; (mov r8, r8)
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b006      	add	sp, #24
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021800 	.word	0x40021800
 80022ec:	50000400 	.word	0x50000400
 80022f0:	50000800 	.word	0x50000800
 80022f4:	50000c00 	.word	0x50000c00
 80022f8:	50001000 	.word	0x50001000

080022fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800230a:	e0ba      	b.n	8002482 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800230c:	2201      	movs	r2, #1
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	409a      	lsls	r2, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d100      	bne.n	8002320 <HAL_GPIO_DeInit+0x24>
 800231e:	e0ad      	b.n	800247c <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8002320:	4a5d      	ldr	r2, [pc, #372]	; (8002498 <HAL_GPIO_DeInit+0x19c>)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	089b      	lsrs	r3, r3, #2
 8002326:	3318      	adds	r3, #24
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	589b      	ldr	r3, [r3, r2]
 800232c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2203      	movs	r2, #3
 8002332:	4013      	ands	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	220f      	movs	r2, #15
 8002338:	409a      	lsls	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4013      	ands	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	23a0      	movs	r3, #160	; 0xa0
 8002344:	05db      	lsls	r3, r3, #23
 8002346:	429a      	cmp	r2, r3
 8002348:	d019      	beq.n	800237e <HAL_GPIO_DeInit+0x82>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a53      	ldr	r2, [pc, #332]	; (800249c <HAL_GPIO_DeInit+0x1a0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_GPIO_DeInit+0x7e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a52      	ldr	r2, [pc, #328]	; (80024a0 <HAL_GPIO_DeInit+0x1a4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00d      	beq.n	8002376 <HAL_GPIO_DeInit+0x7a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a51      	ldr	r2, [pc, #324]	; (80024a4 <HAL_GPIO_DeInit+0x1a8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d007      	beq.n	8002372 <HAL_GPIO_DeInit+0x76>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a50      	ldr	r2, [pc, #320]	; (80024a8 <HAL_GPIO_DeInit+0x1ac>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_GPIO_DeInit+0x72>
 800236a:	2304      	movs	r3, #4
 800236c:	e008      	b.n	8002380 <HAL_GPIO_DeInit+0x84>
 800236e:	2305      	movs	r3, #5
 8002370:	e006      	b.n	8002380 <HAL_GPIO_DeInit+0x84>
 8002372:	2303      	movs	r3, #3
 8002374:	e004      	b.n	8002380 <HAL_GPIO_DeInit+0x84>
 8002376:	2302      	movs	r3, #2
 8002378:	e002      	b.n	8002380 <HAL_GPIO_DeInit+0x84>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <HAL_GPIO_DeInit+0x84>
 800237e:	2300      	movs	r3, #0
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	2103      	movs	r1, #3
 8002384:	400a      	ands	r2, r1
 8002386:	00d2      	lsls	r2, r2, #3
 8002388:	4093      	lsls	r3, r2
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	429a      	cmp	r2, r3
 800238e:	d136      	bne.n	80023fe <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002390:	4a41      	ldr	r2, [pc, #260]	; (8002498 <HAL_GPIO_DeInit+0x19c>)
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	58d3      	ldr	r3, [r2, r3]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	43d2      	mvns	r2, r2
 800239a:	493f      	ldr	r1, [pc, #252]	; (8002498 <HAL_GPIO_DeInit+0x19c>)
 800239c:	4013      	ands	r3, r2
 800239e:	2280      	movs	r2, #128	; 0x80
 80023a0:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80023a2:	4a3d      	ldr	r2, [pc, #244]	; (8002498 <HAL_GPIO_DeInit+0x19c>)
 80023a4:	2384      	movs	r3, #132	; 0x84
 80023a6:	58d3      	ldr	r3, [r2, r3]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	43d2      	mvns	r2, r2
 80023ac:	493a      	ldr	r1, [pc, #232]	; (8002498 <HAL_GPIO_DeInit+0x19c>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	2284      	movs	r2, #132	; 0x84
 80023b2:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80023b4:	4b38      	ldr	r3, [pc, #224]	; (8002498 <HAL_GPIO_DeInit+0x19c>)
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	4b36      	ldr	r3, [pc, #216]	; (8002498 <HAL_GPIO_DeInit+0x19c>)
 80023be:	400a      	ands	r2, r1
 80023c0:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80023c2:	4b35      	ldr	r3, [pc, #212]	; (8002498 <HAL_GPIO_DeInit+0x19c>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	43d9      	mvns	r1, r3
 80023ca:	4b33      	ldr	r3, [pc, #204]	; (8002498 <HAL_GPIO_DeInit+0x19c>)
 80023cc:	400a      	ands	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2203      	movs	r2, #3
 80023d4:	4013      	ands	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	220f      	movs	r2, #15
 80023da:	409a      	lsls	r2, r3
 80023dc:	0013      	movs	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80023e0:	4a2d      	ldr	r2, [pc, #180]	; (8002498 <HAL_GPIO_DeInit+0x19c>)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	3318      	adds	r3, #24
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	589a      	ldr	r2, [r3, r2]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	4829      	ldr	r0, [pc, #164]	; (8002498 <HAL_GPIO_DeInit+0x19c>)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	089b      	lsrs	r3, r3, #2
 80023f6:	400a      	ands	r2, r1
 80023f8:	3318      	adds	r3, #24
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2103      	movs	r1, #3
 8002408:	4099      	lsls	r1, r3
 800240a:	000b      	movs	r3, r1
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	08da      	lsrs	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3208      	adds	r2, #8
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	58d3      	ldr	r3, [r2, r3]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	2107      	movs	r1, #7
 8002422:	400a      	ands	r2, r1
 8002424:	0092      	lsls	r2, r2, #2
 8002426:	210f      	movs	r1, #15
 8002428:	4091      	lsls	r1, r2
 800242a:	000a      	movs	r2, r1
 800242c:	43d1      	mvns	r1, r2
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	08d2      	lsrs	r2, r2, #3
 8002432:	4019      	ands	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3208      	adds	r2, #8
 8002438:	0092      	lsls	r2, r2, #2
 800243a:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	0052      	lsls	r2, r2, #1
 8002444:	2103      	movs	r1, #3
 8002446:	4091      	lsls	r1, r2
 8002448:	000a      	movs	r2, r1
 800244a:	43d2      	mvns	r2, r2
 800244c:	401a      	ands	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2101      	movs	r1, #1
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	4091      	lsls	r1, r2
 800245c:	000a      	movs	r2, r1
 800245e:	43d2      	mvns	r2, r2
 8002460:	401a      	ands	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	0052      	lsls	r2, r2, #1
 800246e:	2103      	movs	r1, #3
 8002470:	4091      	lsls	r1, r2
 8002472:	000a      	movs	r2, r1
 8002474:	43d2      	mvns	r2, r2
 8002476:	401a      	ands	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3301      	adds	r3, #1
 8002480:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	40da      	lsrs	r2, r3
 8002488:	1e13      	subs	r3, r2, #0
 800248a:	d000      	beq.n	800248e <HAL_GPIO_DeInit+0x192>
 800248c:	e73e      	b.n	800230c <HAL_GPIO_DeInit+0x10>
  }
}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46c0      	nop			; (mov r8, r8)
 8002492:	46bd      	mov	sp, r7
 8002494:	b006      	add	sp, #24
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021800 	.word	0x40021800
 800249c:	50000400 	.word	0x50000400
 80024a0:	50000800 	.word	0x50000800
 80024a4:	50000c00 	.word	0x50000c00
 80024a8:	50001000 	.word	0x50001000

080024ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	000a      	movs	r2, r1
 80024b6:	1cbb      	adds	r3, r7, #2
 80024b8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	1cba      	adds	r2, r7, #2
 80024c0:	8812      	ldrh	r2, [r2, #0]
 80024c2:	4013      	ands	r3, r2
 80024c4:	d004      	beq.n	80024d0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80024c6:	230f      	movs	r3, #15
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e003      	b.n	80024d8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024d0:	230f      	movs	r3, #15
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80024d8:	230f      	movs	r3, #15
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	781b      	ldrb	r3, [r3, #0]
}
 80024de:	0018      	movs	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b004      	add	sp, #16
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	0008      	movs	r0, r1
 80024f0:	0011      	movs	r1, r2
 80024f2:	1cbb      	adds	r3, r7, #2
 80024f4:	1c02      	adds	r2, r0, #0
 80024f6:	801a      	strh	r2, [r3, #0]
 80024f8:	1c7b      	adds	r3, r7, #1
 80024fa:	1c0a      	adds	r2, r1, #0
 80024fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024fe:	1c7b      	adds	r3, r7, #1
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002506:	1cbb      	adds	r3, r7, #2
 8002508:	881a      	ldrh	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800250e:	e003      	b.n	8002518 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002510:	1cbb      	adds	r3, r7, #2
 8002512:	881a      	ldrh	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002518:	46c0      	nop			; (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b002      	add	sp, #8
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	000a      	movs	r2, r1
 800252a:	1cbb      	adds	r3, r7, #2
 800252c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002534:	1cbb      	adds	r3, r7, #2
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4013      	ands	r3, r2
 800253c:	041a      	lsls	r2, r3, #16
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	43db      	mvns	r3, r3
 8002542:	1cb9      	adds	r1, r7, #2
 8002544:	8809      	ldrh	r1, [r1, #0]
 8002546:	400b      	ands	r3, r1
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	619a      	str	r2, [r3, #24]
}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	46bd      	mov	sp, r7
 8002552:	b004      	add	sp, #16
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a19      	ldr	r2, [pc, #100]	; (80025cc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002566:	4013      	ands	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	430a      	orrs	r2, r1
 8002570:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d11f      	bne.n	80025bc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	0013      	movs	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	189b      	adds	r3, r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4912      	ldr	r1, [pc, #72]	; (80025d4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800258a:	0018      	movs	r0, r3
 800258c:	f7fd fdcc 	bl	8000128 <__udivsi3>
 8002590:	0003      	movs	r3, r0
 8002592:	3301      	adds	r3, #1
 8002594:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002596:	e008      	b.n	80025aa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	e001      	b.n	80025aa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e009      	b.n	80025be <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025aa:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	401a      	ands	r2, r3
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d0ed      	beq.n	8002598 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b004      	add	sp, #16
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	40007000 	.word	0x40007000
 80025cc:	fffff9ff 	.word	0xfffff9ff
 80025d0:	2000005c 	.word	0x2000005c
 80025d4:	000f4240 	.word	0x000f4240

080025d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <LL_RCC_GetAPB1Prescaler+0x14>)
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	23e0      	movs	r3, #224	; 0xe0
 80025e2:	01db      	lsls	r3, r3, #7
 80025e4:	4013      	ands	r3, r2
}
 80025e6:	0018      	movs	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000

080025f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d102      	bne.n	8002604 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	f000 fb50 	bl	8002ca4 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2201      	movs	r2, #1
 800260a:	4013      	ands	r3, r2
 800260c:	d100      	bne.n	8002610 <HAL_RCC_OscConfig+0x20>
 800260e:	e07c      	b.n	800270a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002610:	4bc3      	ldr	r3, [pc, #780]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2238      	movs	r2, #56	; 0x38
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800261a:	4bc1      	ldr	r3, [pc, #772]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2203      	movs	r2, #3
 8002620:	4013      	ands	r3, r2
 8002622:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b10      	cmp	r3, #16
 8002628:	d102      	bne.n	8002630 <HAL_RCC_OscConfig+0x40>
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d002      	beq.n	8002636 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2b08      	cmp	r3, #8
 8002634:	d10b      	bne.n	800264e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002636:	4bba      	ldr	r3, [pc, #744]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	029b      	lsls	r3, r3, #10
 800263e:	4013      	ands	r3, r2
 8002640:	d062      	beq.n	8002708 <HAL_RCC_OscConfig+0x118>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d15e      	bne.n	8002708 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e32a      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	025b      	lsls	r3, r3, #9
 8002656:	429a      	cmp	r2, r3
 8002658:	d107      	bne.n	800266a <HAL_RCC_OscConfig+0x7a>
 800265a:	4bb1      	ldr	r3, [pc, #708]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4bb0      	ldr	r3, [pc, #704]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002660:	2180      	movs	r1, #128	; 0x80
 8002662:	0249      	lsls	r1, r1, #9
 8002664:	430a      	orrs	r2, r1
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	e020      	b.n	80026ac <HAL_RCC_OscConfig+0xbc>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	23a0      	movs	r3, #160	; 0xa0
 8002670:	02db      	lsls	r3, r3, #11
 8002672:	429a      	cmp	r2, r3
 8002674:	d10e      	bne.n	8002694 <HAL_RCC_OscConfig+0xa4>
 8002676:	4baa      	ldr	r3, [pc, #680]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4ba9      	ldr	r3, [pc, #676]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 800267c:	2180      	movs	r1, #128	; 0x80
 800267e:	02c9      	lsls	r1, r1, #11
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	4ba6      	ldr	r3, [pc, #664]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4ba5      	ldr	r3, [pc, #660]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	0249      	lsls	r1, r1, #9
 800268e:	430a      	orrs	r2, r1
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	e00b      	b.n	80026ac <HAL_RCC_OscConfig+0xbc>
 8002694:	4ba2      	ldr	r3, [pc, #648]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4ba1      	ldr	r3, [pc, #644]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 800269a:	49a2      	ldr	r1, [pc, #648]	; (8002924 <HAL_RCC_OscConfig+0x334>)
 800269c:	400a      	ands	r2, r1
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	4b9f      	ldr	r3, [pc, #636]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b9e      	ldr	r3, [pc, #632]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 80026a6:	49a0      	ldr	r1, [pc, #640]	; (8002928 <HAL_RCC_OscConfig+0x338>)
 80026a8:	400a      	ands	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d014      	beq.n	80026de <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7ff fb1c 	bl	8001cf0 <HAL_GetTick>
 80026b8:	0003      	movs	r3, r0
 80026ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026be:	f7ff fb17 	bl	8001cf0 <HAL_GetTick>
 80026c2:	0002      	movs	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b64      	cmp	r3, #100	; 0x64
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e2e9      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026d0:	4b93      	ldr	r3, [pc, #588]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	029b      	lsls	r3, r3, #10
 80026d8:	4013      	ands	r3, r2
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_OscConfig+0xce>
 80026dc:	e015      	b.n	800270a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7ff fb07 	bl	8001cf0 <HAL_GetTick>
 80026e2:	0003      	movs	r3, r0
 80026e4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e8:	f7ff fb02 	bl	8001cf0 <HAL_GetTick>
 80026ec:	0002      	movs	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e2d4      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026fa:	4b89      	ldr	r3, [pc, #548]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	029b      	lsls	r3, r3, #10
 8002702:	4013      	ands	r3, r2
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0xf8>
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2202      	movs	r2, #2
 8002710:	4013      	ands	r3, r2
 8002712:	d100      	bne.n	8002716 <HAL_RCC_OscConfig+0x126>
 8002714:	e099      	b.n	800284a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002716:	4b82      	ldr	r3, [pc, #520]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2238      	movs	r2, #56	; 0x38
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002720:	4b7f      	ldr	r3, [pc, #508]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2203      	movs	r2, #3
 8002726:	4013      	ands	r3, r2
 8002728:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2b10      	cmp	r3, #16
 800272e:	d102      	bne.n	8002736 <HAL_RCC_OscConfig+0x146>
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d002      	beq.n	800273c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d135      	bne.n	80027a8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800273c:	4b78      	ldr	r3, [pc, #480]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	2380      	movs	r3, #128	; 0x80
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4013      	ands	r3, r2
 8002746:	d005      	beq.n	8002754 <HAL_RCC_OscConfig+0x164>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e2a7      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002754:	4b72      	ldr	r3, [pc, #456]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a74      	ldr	r2, [pc, #464]	; (800292c <HAL_RCC_OscConfig+0x33c>)
 800275a:	4013      	ands	r3, r2
 800275c:	0019      	movs	r1, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	021a      	lsls	r2, r3, #8
 8002764:	4b6e      	ldr	r3, [pc, #440]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002766:	430a      	orrs	r2, r1
 8002768:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d112      	bne.n	8002796 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002770:	4b6b      	ldr	r3, [pc, #428]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a6e      	ldr	r2, [pc, #440]	; (8002930 <HAL_RCC_OscConfig+0x340>)
 8002776:	4013      	ands	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	4b68      	ldr	r3, [pc, #416]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002784:	4b66      	ldr	r3, [pc, #408]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	0adb      	lsrs	r3, r3, #11
 800278a:	2207      	movs	r2, #7
 800278c:	4013      	ands	r3, r2
 800278e:	4a69      	ldr	r2, [pc, #420]	; (8002934 <HAL_RCC_OscConfig+0x344>)
 8002790:	40da      	lsrs	r2, r3
 8002792:	4b69      	ldr	r3, [pc, #420]	; (8002938 <HAL_RCC_OscConfig+0x348>)
 8002794:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002796:	4b69      	ldr	r3, [pc, #420]	; (800293c <HAL_RCC_OscConfig+0x34c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	0018      	movs	r0, r3
 800279c:	f7ff fa4c 	bl	8001c38 <HAL_InitTick>
 80027a0:	1e03      	subs	r3, r0, #0
 80027a2:	d051      	beq.n	8002848 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e27d      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d030      	beq.n	8002812 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027b0:	4b5b      	ldr	r3, [pc, #364]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a5e      	ldr	r2, [pc, #376]	; (8002930 <HAL_RCC_OscConfig+0x340>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	0019      	movs	r1, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	4b58      	ldr	r3, [pc, #352]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 80027c0:	430a      	orrs	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80027c4:	4b56      	ldr	r3, [pc, #344]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b55      	ldr	r3, [pc, #340]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 80027ca:	2180      	movs	r1, #128	; 0x80
 80027cc:	0049      	lsls	r1, r1, #1
 80027ce:	430a      	orrs	r2, r1
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7ff fa8d 	bl	8001cf0 <HAL_GetTick>
 80027d6:	0003      	movs	r3, r0
 80027d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027dc:	f7ff fa88 	bl	8001cf0 <HAL_GetTick>
 80027e0:	0002      	movs	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e25a      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ee:	4b4c      	ldr	r3, [pc, #304]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4013      	ands	r3, r2
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fa:	4b49      	ldr	r3, [pc, #292]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4a4b      	ldr	r2, [pc, #300]	; (800292c <HAL_RCC_OscConfig+0x33c>)
 8002800:	4013      	ands	r3, r2
 8002802:	0019      	movs	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	021a      	lsls	r2, r3, #8
 800280a:	4b45      	ldr	r3, [pc, #276]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 800280c:	430a      	orrs	r2, r1
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	e01b      	b.n	800284a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002812:	4b43      	ldr	r3, [pc, #268]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	4b42      	ldr	r3, [pc, #264]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002818:	4949      	ldr	r1, [pc, #292]	; (8002940 <HAL_RCC_OscConfig+0x350>)
 800281a:	400a      	ands	r2, r1
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7ff fa67 	bl	8001cf0 <HAL_GetTick>
 8002822:	0003      	movs	r3, r0
 8002824:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002828:	f7ff fa62 	bl	8001cf0 <HAL_GetTick>
 800282c:	0002      	movs	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e234      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800283a:	4b39      	ldr	r3, [pc, #228]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4013      	ands	r3, r2
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x238>
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002848:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2208      	movs	r2, #8
 8002850:	4013      	ands	r3, r2
 8002852:	d047      	beq.n	80028e4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002854:	4b32      	ldr	r3, [pc, #200]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2238      	movs	r2, #56	; 0x38
 800285a:	4013      	ands	r3, r2
 800285c:	2b18      	cmp	r3, #24
 800285e:	d10a      	bne.n	8002876 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002860:	4b2f      	ldr	r3, [pc, #188]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002864:	2202      	movs	r2, #2
 8002866:	4013      	ands	r3, r2
 8002868:	d03c      	beq.n	80028e4 <HAL_RCC_OscConfig+0x2f4>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d138      	bne.n	80028e4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e216      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d019      	beq.n	80028b2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800287e:	4b28      	ldr	r3, [pc, #160]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002880:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002882:	4b27      	ldr	r3, [pc, #156]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002884:	2101      	movs	r1, #1
 8002886:	430a      	orrs	r2, r1
 8002888:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288a:	f7ff fa31 	bl	8001cf0 <HAL_GetTick>
 800288e:	0003      	movs	r3, r0
 8002890:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002894:	f7ff fa2c 	bl	8001cf0 <HAL_GetTick>
 8002898:	0002      	movs	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e1fe      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028a6:	4b1e      	ldr	r3, [pc, #120]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 80028a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028aa:	2202      	movs	r2, #2
 80028ac:	4013      	ands	r3, r2
 80028ae:	d0f1      	beq.n	8002894 <HAL_RCC_OscConfig+0x2a4>
 80028b0:	e018      	b.n	80028e4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80028b2:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 80028b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028b6:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 80028b8:	2101      	movs	r1, #1
 80028ba:	438a      	bics	r2, r1
 80028bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028be:	f7ff fa17 	bl	8001cf0 <HAL_GetTick>
 80028c2:	0003      	movs	r3, r0
 80028c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c8:	f7ff fa12 	bl	8001cf0 <HAL_GetTick>
 80028cc:	0002      	movs	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e1e4      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 80028dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028de:	2202      	movs	r2, #2
 80028e0:	4013      	ands	r3, r2
 80028e2:	d1f1      	bne.n	80028c8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2204      	movs	r2, #4
 80028ea:	4013      	ands	r3, r2
 80028ec:	d100      	bne.n	80028f0 <HAL_RCC_OscConfig+0x300>
 80028ee:	e0c7      	b.n	8002a80 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f0:	231f      	movs	r3, #31
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2238      	movs	r2, #56	; 0x38
 80028fe:	4013      	ands	r3, r2
 8002900:	2b20      	cmp	r3, #32
 8002902:	d11f      	bne.n	8002944 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_RCC_OscConfig+0x330>)
 8002906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002908:	2202      	movs	r2, #2
 800290a:	4013      	ands	r3, r2
 800290c:	d100      	bne.n	8002910 <HAL_RCC_OscConfig+0x320>
 800290e:	e0b7      	b.n	8002a80 <HAL_RCC_OscConfig+0x490>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d000      	beq.n	800291a <HAL_RCC_OscConfig+0x32a>
 8002918:	e0b2      	b.n	8002a80 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e1c2      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	40021000 	.word	0x40021000
 8002924:	fffeffff 	.word	0xfffeffff
 8002928:	fffbffff 	.word	0xfffbffff
 800292c:	ffff80ff 	.word	0xffff80ff
 8002930:	ffffc7ff 	.word	0xffffc7ff
 8002934:	00f42400 	.word	0x00f42400
 8002938:	2000005c 	.word	0x2000005c
 800293c:	20000060 	.word	0x20000060
 8002940:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002944:	4bb5      	ldr	r3, [pc, #724]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	055b      	lsls	r3, r3, #21
 800294c:	4013      	ands	r3, r2
 800294e:	d101      	bne.n	8002954 <HAL_RCC_OscConfig+0x364>
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x366>
 8002954:	2300      	movs	r3, #0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d011      	beq.n	800297e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800295a:	4bb0      	ldr	r3, [pc, #704]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 800295c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800295e:	4baf      	ldr	r3, [pc, #700]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	0549      	lsls	r1, r1, #21
 8002964:	430a      	orrs	r2, r1
 8002966:	63da      	str	r2, [r3, #60]	; 0x3c
 8002968:	4bac      	ldr	r3, [pc, #688]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 800296a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	055b      	lsls	r3, r3, #21
 8002970:	4013      	ands	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002976:	231f      	movs	r3, #31
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800297e:	4ba8      	ldr	r3, [pc, #672]	; (8002c20 <HAL_RCC_OscConfig+0x630>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4013      	ands	r3, r2
 8002988:	d11a      	bne.n	80029c0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800298a:	4ba5      	ldr	r3, [pc, #660]	; (8002c20 <HAL_RCC_OscConfig+0x630>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4ba4      	ldr	r3, [pc, #656]	; (8002c20 <HAL_RCC_OscConfig+0x630>)
 8002990:	2180      	movs	r1, #128	; 0x80
 8002992:	0049      	lsls	r1, r1, #1
 8002994:	430a      	orrs	r2, r1
 8002996:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002998:	f7ff f9aa 	bl	8001cf0 <HAL_GetTick>
 800299c:	0003      	movs	r3, r0
 800299e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a2:	f7ff f9a5 	bl	8001cf0 <HAL_GetTick>
 80029a6:	0002      	movs	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e177      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b4:	4b9a      	ldr	r3, [pc, #616]	; (8002c20 <HAL_RCC_OscConfig+0x630>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4013      	ands	r3, r2
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d106      	bne.n	80029d6 <HAL_RCC_OscConfig+0x3e6>
 80029c8:	4b94      	ldr	r3, [pc, #592]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 80029ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029cc:	4b93      	ldr	r3, [pc, #588]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 80029ce:	2101      	movs	r1, #1
 80029d0:	430a      	orrs	r2, r1
 80029d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80029d4:	e01c      	b.n	8002a10 <HAL_RCC_OscConfig+0x420>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b05      	cmp	r3, #5
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x408>
 80029de:	4b8f      	ldr	r3, [pc, #572]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 80029e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029e2:	4b8e      	ldr	r3, [pc, #568]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 80029e4:	2104      	movs	r1, #4
 80029e6:	430a      	orrs	r2, r1
 80029e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80029ea:	4b8c      	ldr	r3, [pc, #560]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 80029ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029ee:	4b8b      	ldr	r3, [pc, #556]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 80029f0:	2101      	movs	r1, #1
 80029f2:	430a      	orrs	r2, r1
 80029f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80029f6:	e00b      	b.n	8002a10 <HAL_RCC_OscConfig+0x420>
 80029f8:	4b88      	ldr	r3, [pc, #544]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 80029fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029fc:	4b87      	ldr	r3, [pc, #540]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 80029fe:	2101      	movs	r1, #1
 8002a00:	438a      	bics	r2, r1
 8002a02:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a04:	4b85      	ldr	r3, [pc, #532]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002a06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a08:	4b84      	ldr	r3, [pc, #528]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002a0a:	2104      	movs	r1, #4
 8002a0c:	438a      	bics	r2, r1
 8002a0e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d014      	beq.n	8002a42 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7ff f96a 	bl	8001cf0 <HAL_GetTick>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a20:	e009      	b.n	8002a36 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7ff f965 	bl	8001cf0 <HAL_GetTick>
 8002a26:	0002      	movs	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	4a7d      	ldr	r2, [pc, #500]	; (8002c24 <HAL_RCC_OscConfig+0x634>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e136      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a36:	4b79      	ldr	r3, [pc, #484]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x432>
 8002a40:	e013      	b.n	8002a6a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7ff f955 	bl	8001cf0 <HAL_GetTick>
 8002a46:	0003      	movs	r3, r0
 8002a48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a4a:	e009      	b.n	8002a60 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4c:	f7ff f950 	bl	8001cf0 <HAL_GetTick>
 8002a50:	0002      	movs	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	4a73      	ldr	r2, [pc, #460]	; (8002c24 <HAL_RCC_OscConfig+0x634>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e121      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a60:	4b6e      	ldr	r3, [pc, #440]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a64:	2202      	movs	r2, #2
 8002a66:	4013      	ands	r3, r2
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a6a:	231f      	movs	r3, #31
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d105      	bne.n	8002a80 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a74:	4b69      	ldr	r3, [pc, #420]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a78:	4b68      	ldr	r3, [pc, #416]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002a7a:	496b      	ldr	r1, [pc, #428]	; (8002c28 <HAL_RCC_OscConfig+0x638>)
 8002a7c:	400a      	ands	r2, r1
 8002a7e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2220      	movs	r2, #32
 8002a86:	4013      	ands	r3, r2
 8002a88:	d039      	beq.n	8002afe <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01b      	beq.n	8002aca <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a92:	4b62      	ldr	r3, [pc, #392]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4b61      	ldr	r3, [pc, #388]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	03c9      	lsls	r1, r1, #15
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7ff f926 	bl	8001cf0 <HAL_GetTick>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aaa:	f7ff f921 	bl	8001cf0 <HAL_GetTick>
 8002aae:	0002      	movs	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e0f3      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002abc:	4b57      	ldr	r3, [pc, #348]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	041b      	lsls	r3, r3, #16
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x4ba>
 8002ac8:	e019      	b.n	8002afe <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002aca:	4b54      	ldr	r3, [pc, #336]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002ad0:	4956      	ldr	r1, [pc, #344]	; (8002c2c <HAL_RCC_OscConfig+0x63c>)
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad6:	f7ff f90b 	bl	8001cf0 <HAL_GetTick>
 8002ada:	0003      	movs	r3, r0
 8002adc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ae0:	f7ff f906 	bl	8001cf0 <HAL_GetTick>
 8002ae4:	0002      	movs	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e0d8      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002af2:	4b4a      	ldr	r3, [pc, #296]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	041b      	lsls	r3, r3, #16
 8002afa:	4013      	ands	r3, r2
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d100      	bne.n	8002b08 <HAL_RCC_OscConfig+0x518>
 8002b06:	e0cc      	b.n	8002ca2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b08:	4b44      	ldr	r3, [pc, #272]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2238      	movs	r2, #56	; 0x38
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b10      	cmp	r3, #16
 8002b12:	d100      	bne.n	8002b16 <HAL_RCC_OscConfig+0x526>
 8002b14:	e07b      	b.n	8002c0e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d156      	bne.n	8002bcc <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1e:	4b3f      	ldr	r3, [pc, #252]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4b3e      	ldr	r3, [pc, #248]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002b24:	4942      	ldr	r1, [pc, #264]	; (8002c30 <HAL_RCC_OscConfig+0x640>)
 8002b26:	400a      	ands	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7ff f8e1 	bl	8001cf0 <HAL_GetTick>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b34:	f7ff f8dc 	bl	8001cf0 <HAL_GetTick>
 8002b38:	0002      	movs	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e0ae      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b46:	4b35      	ldr	r3, [pc, #212]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	049b      	lsls	r3, r3, #18
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b52:	4b32      	ldr	r3, [pc, #200]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	4a37      	ldr	r2, [pc, #220]	; (8002c34 <HAL_RCC_OscConfig+0x644>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	4b26      	ldr	r3, [pc, #152]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002b82:	430a      	orrs	r2, r1
 8002b84:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b86:	4b25      	ldr	r3, [pc, #148]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002b8c:	2180      	movs	r1, #128	; 0x80
 8002b8e:	0449      	lsls	r1, r1, #17
 8002b90:	430a      	orrs	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002b94:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002b9a:	2180      	movs	r1, #128	; 0x80
 8002b9c:	0549      	lsls	r1, r1, #21
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7ff f8a5 	bl	8001cf0 <HAL_GetTick>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bac:	f7ff f8a0 	bl	8001cf0 <HAL_GetTick>
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e072      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bbe:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	049b      	lsls	r3, r3, #18
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x5bc>
 8002bca:	e06a      	b.n	8002ca2 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002bd2:	4917      	ldr	r1, [pc, #92]	; (8002c30 <HAL_RCC_OscConfig+0x640>)
 8002bd4:	400a      	ands	r2, r1
 8002bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7ff f88a 	bl	8001cf0 <HAL_GetTick>
 8002bdc:	0003      	movs	r3, r0
 8002bde:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be2:	f7ff f885 	bl	8001cf0 <HAL_GetTick>
 8002be6:	0002      	movs	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e057      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	049b      	lsls	r3, r3, #18
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d1f0      	bne.n	8002be2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_RCC_OscConfig+0x62c>)
 8002c06:	490c      	ldr	r1, [pc, #48]	; (8002c38 <HAL_RCC_OscConfig+0x648>)
 8002c08:	400a      	ands	r2, r1
 8002c0a:	60da      	str	r2, [r3, #12]
 8002c0c:	e049      	b.n	8002ca2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d112      	bne.n	8002c3c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e044      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40007000 	.word	0x40007000
 8002c24:	00001388 	.word	0x00001388
 8002c28:	efffffff 	.word	0xefffffff
 8002c2c:	ffbfffff 	.word	0xffbfffff
 8002c30:	feffffff 	.word	0xfeffffff
 8002c34:	11c1808c 	.word	0x11c1808c
 8002c38:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <HAL_RCC_OscConfig+0x6bc>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2203      	movs	r2, #3
 8002c46:	401a      	ands	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d126      	bne.n	8002c9e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2270      	movs	r2, #112	; 0x70
 8002c54:	401a      	ands	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d11f      	bne.n	8002c9e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	23fe      	movs	r3, #254	; 0xfe
 8002c62:	01db      	lsls	r3, r3, #7
 8002c64:	401a      	ands	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d116      	bne.n	8002c9e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	23f8      	movs	r3, #248	; 0xf8
 8002c74:	039b      	lsls	r3, r3, #14
 8002c76:	401a      	ands	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d10e      	bne.n	8002c9e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	23e0      	movs	r3, #224	; 0xe0
 8002c84:	051b      	lsls	r3, r3, #20
 8002c86:	401a      	ands	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d106      	bne.n	8002c9e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	0f5b      	lsrs	r3, r3, #29
 8002c94:	075a      	lsls	r2, r3, #29
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b008      	add	sp, #32
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40021000 	.word	0x40021000

08002cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0e9      	b.n	8002e98 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b76      	ldr	r3, [pc, #472]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2207      	movs	r2, #7
 8002cca:	4013      	ands	r3, r2
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d91e      	bls.n	8002d10 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b73      	ldr	r3, [pc, #460]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2207      	movs	r2, #7
 8002cd8:	4393      	bics	r3, r2
 8002cda:	0019      	movs	r1, r3
 8002cdc:	4b70      	ldr	r3, [pc, #448]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ce4:	f7ff f804 	bl	8001cf0 <HAL_GetTick>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cec:	e009      	b.n	8002d02 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cee:	f7fe ffff 	bl	8001cf0 <HAL_GetTick>
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	4a6a      	ldr	r2, [pc, #424]	; (8002ea4 <HAL_RCC_ClockConfig+0x1f4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e0ca      	b.n	8002e98 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d02:	4b67      	ldr	r3, [pc, #412]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2207      	movs	r2, #7
 8002d08:	4013      	ands	r3, r2
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d1ee      	bne.n	8002cee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2202      	movs	r2, #2
 8002d16:	4013      	ands	r3, r2
 8002d18:	d015      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2204      	movs	r2, #4
 8002d20:	4013      	ands	r3, r2
 8002d22:	d006      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d24:	4b60      	ldr	r3, [pc, #384]	; (8002ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	4b5f      	ldr	r3, [pc, #380]	; (8002ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d2a:	21e0      	movs	r1, #224	; 0xe0
 8002d2c:	01c9      	lsls	r1, r1, #7
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d32:	4b5d      	ldr	r3, [pc, #372]	; (8002ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	4a5d      	ldr	r2, [pc, #372]	; (8002eac <HAL_RCC_ClockConfig+0x1fc>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	4b59      	ldr	r3, [pc, #356]	; (8002ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d42:	430a      	orrs	r2, r1
 8002d44:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d057      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d107      	bne.n	8002d68 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d58:	4b53      	ldr	r3, [pc, #332]	; (8002ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	029b      	lsls	r3, r3, #10
 8002d60:	4013      	ands	r3, r2
 8002d62:	d12b      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e097      	b.n	8002e98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d107      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d70:	4b4d      	ldr	r3, [pc, #308]	; (8002ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	2380      	movs	r3, #128	; 0x80
 8002d76:	049b      	lsls	r3, r3, #18
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d11f      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e08b      	b.n	8002e98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d88:	4b47      	ldr	r3, [pc, #284]	; (8002ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4013      	ands	r3, r2
 8002d92:	d113      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e07f      	b.n	8002e98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d106      	bne.n	8002dae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002da0:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8002da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da4:	2202      	movs	r2, #2
 8002da6:	4013      	ands	r3, r2
 8002da8:	d108      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e074      	b.n	8002e98 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dae:	4b3e      	ldr	r3, [pc, #248]	; (8002ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8002db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db2:	2202      	movs	r2, #2
 8002db4:	4013      	ands	r3, r2
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e06d      	b.n	8002e98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dbc:	4b3a      	ldr	r3, [pc, #232]	; (8002ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2207      	movs	r2, #7
 8002dc2:	4393      	bics	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	4b37      	ldr	r3, [pc, #220]	; (8002ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd0:	f7fe ff8e 	bl	8001cf0 <HAL_GetTick>
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd8:	e009      	b.n	8002dee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dda:	f7fe ff89 	bl	8001cf0 <HAL_GetTick>
 8002dde:	0002      	movs	r2, r0
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	4a2f      	ldr	r2, [pc, #188]	; (8002ea4 <HAL_RCC_ClockConfig+0x1f4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e054      	b.n	8002e98 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	4b2e      	ldr	r3, [pc, #184]	; (8002ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2238      	movs	r2, #56	; 0x38
 8002df4:	401a      	ands	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d1ec      	bne.n	8002dda <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e00:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2207      	movs	r2, #7
 8002e06:	4013      	ands	r3, r2
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d21e      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0e:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2207      	movs	r2, #7
 8002e14:	4393      	bics	r3, r2
 8002e16:	0019      	movs	r1, r3
 8002e18:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e20:	f7fe ff66 	bl	8001cf0 <HAL_GetTick>
 8002e24:	0003      	movs	r3, r0
 8002e26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e28:	e009      	b.n	8002e3e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2a:	f7fe ff61 	bl	8001cf0 <HAL_GetTick>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	4a1b      	ldr	r2, [pc, #108]	; (8002ea4 <HAL_RCC_ClockConfig+0x1f4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e02c      	b.n	8002e98 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e3e:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2207      	movs	r2, #7
 8002e44:	4013      	ands	r3, r2
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1ee      	bne.n	8002e2a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2204      	movs	r2, #4
 8002e52:	4013      	ands	r3, r2
 8002e54:	d009      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e56:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	4a15      	ldr	r2, [pc, #84]	; (8002eb0 <HAL_RCC_ClockConfig+0x200>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	0019      	movs	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8002e66:	430a      	orrs	r2, r1
 8002e68:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e6a:	f000 f829 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 8002e6e:	0001      	movs	r1, r0
 8002e70:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	220f      	movs	r2, #15
 8002e78:	401a      	ands	r2, r3
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <HAL_RCC_ClockConfig+0x204>)
 8002e7c:	0092      	lsls	r2, r2, #2
 8002e7e:	58d3      	ldr	r3, [r2, r3]
 8002e80:	221f      	movs	r2, #31
 8002e82:	4013      	ands	r3, r2
 8002e84:	000a      	movs	r2, r1
 8002e86:	40da      	lsrs	r2, r3
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <HAL_RCC_ClockConfig+0x208>)
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <HAL_RCC_ClockConfig+0x20c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0018      	movs	r0, r3
 8002e92:	f7fe fed1 	bl	8001c38 <HAL_InitTick>
 8002e96:	0003      	movs	r3, r0
}
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b004      	add	sp, #16
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40022000 	.word	0x40022000
 8002ea4:	00001388 	.word	0x00001388
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	fffff0ff 	.word	0xfffff0ff
 8002eb0:	ffff8fff 	.word	0xffff8fff
 8002eb4:	08006fc0 	.word	0x08006fc0
 8002eb8:	2000005c 	.word	0x2000005c
 8002ebc:	20000060 	.word	0x20000060

08002ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ec6:	4b3c      	ldr	r3, [pc, #240]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2238      	movs	r2, #56	; 0x38
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d10f      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ed0:	4b39      	ldr	r3, [pc, #228]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	0adb      	lsrs	r3, r3, #11
 8002ed6:	2207      	movs	r2, #7
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2201      	movs	r2, #1
 8002edc:	409a      	lsls	r2, r3
 8002ede:	0013      	movs	r3, r2
 8002ee0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002ee2:	6839      	ldr	r1, [r7, #0]
 8002ee4:	4835      	ldr	r0, [pc, #212]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ee6:	f7fd f91f 	bl	8000128 <__udivsi3>
 8002eea:	0003      	movs	r3, r0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	e05d      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef0:	4b31      	ldr	r3, [pc, #196]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2238      	movs	r2, #56	; 0x38
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d102      	bne.n	8002f02 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002efc:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	e054      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f02:	4b2d      	ldr	r3, [pc, #180]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2238      	movs	r2, #56	; 0x38
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d138      	bne.n	8002f80 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f0e:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2203      	movs	r2, #3
 8002f14:	4013      	ands	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f18:	4b27      	ldr	r3, [pc, #156]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	2207      	movs	r2, #7
 8002f20:	4013      	ands	r3, r2
 8002f22:	3301      	adds	r3, #1
 8002f24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d10d      	bne.n	8002f48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f2c:	68b9      	ldr	r1, [r7, #8]
 8002f2e:	4824      	ldr	r0, [pc, #144]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f30:	f7fd f8fa 	bl	8000128 <__udivsi3>
 8002f34:	0003      	movs	r3, r0
 8002f36:	0019      	movs	r1, r3
 8002f38:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	227f      	movs	r2, #127	; 0x7f
 8002f40:	4013      	ands	r3, r2
 8002f42:	434b      	muls	r3, r1
 8002f44:	617b      	str	r3, [r7, #20]
        break;
 8002f46:	e00d      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	481c      	ldr	r0, [pc, #112]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f4c:	f7fd f8ec 	bl	8000128 <__udivsi3>
 8002f50:	0003      	movs	r3, r0
 8002f52:	0019      	movs	r1, r3
 8002f54:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	0a1b      	lsrs	r3, r3, #8
 8002f5a:	227f      	movs	r2, #127	; 0x7f
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	434b      	muls	r3, r1
 8002f60:	617b      	str	r3, [r7, #20]
        break;
 8002f62:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	0f5b      	lsrs	r3, r3, #29
 8002f6a:	2207      	movs	r2, #7
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	3301      	adds	r3, #1
 8002f70:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	6978      	ldr	r0, [r7, #20]
 8002f76:	f7fd f8d7 	bl	8000128 <__udivsi3>
 8002f7a:	0003      	movs	r3, r0
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	e015      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f80:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2238      	movs	r2, #56	; 0x38
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d103      	bne.n	8002f94 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	e00b      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2238      	movs	r2, #56	; 0x38
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b18      	cmp	r3, #24
 8002f9e:	d103      	bne.n	8002fa8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002fa0:	23fa      	movs	r3, #250	; 0xfa
 8002fa2:	01db      	lsls	r3, r3, #7
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	e001      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fac:	693b      	ldr	r3, [r7, #16]
}
 8002fae:	0018      	movs	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b006      	add	sp, #24
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	00f42400 	.word	0x00f42400
 8002fc0:	007a1200 	.word	0x007a1200

08002fc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc8:	4b02      	ldr	r3, [pc, #8]	; (8002fd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	2000005c 	.word	0x2000005c

08002fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd8:	b5b0      	push	{r4, r5, r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002fdc:	f7ff fff2 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8002fe0:	0004      	movs	r4, r0
 8002fe2:	f7ff faf9 	bl	80025d8 <LL_RCC_GetAPB1Prescaler>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	0b1a      	lsrs	r2, r3, #12
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fec:	0092      	lsls	r2, r2, #2
 8002fee:	58d3      	ldr	r3, [r2, r3]
 8002ff0:	221f      	movs	r2, #31
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	40dc      	lsrs	r4, r3
 8002ff6:	0023      	movs	r3, r4
}
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	08007000 	.word	0x08007000

08003004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800300c:	2313      	movs	r3, #19
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003014:	2312      	movs	r3, #18
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	029b      	lsls	r3, r3, #10
 8003024:	4013      	ands	r3, r2
 8003026:	d100      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003028:	e0ad      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800302a:	2011      	movs	r0, #17
 800302c:	183b      	adds	r3, r7, r0
 800302e:	2200      	movs	r2, #0
 8003030:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003032:	4b47      	ldr	r3, [pc, #284]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	055b      	lsls	r3, r3, #21
 800303a:	4013      	ands	r3, r2
 800303c:	d110      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800303e:	4b44      	ldr	r3, [pc, #272]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003040:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003042:	4b43      	ldr	r3, [pc, #268]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003044:	2180      	movs	r1, #128	; 0x80
 8003046:	0549      	lsls	r1, r1, #21
 8003048:	430a      	orrs	r2, r1
 800304a:	63da      	str	r2, [r3, #60]	; 0x3c
 800304c:	4b40      	ldr	r3, [pc, #256]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800304e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	055b      	lsls	r3, r3, #21
 8003054:	4013      	ands	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800305a:	183b      	adds	r3, r7, r0
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003060:	4b3c      	ldr	r3, [pc, #240]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4b3b      	ldr	r3, [pc, #236]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003066:	2180      	movs	r1, #128	; 0x80
 8003068:	0049      	lsls	r1, r1, #1
 800306a:	430a      	orrs	r2, r1
 800306c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800306e:	f7fe fe3f 	bl	8001cf0 <HAL_GetTick>
 8003072:	0003      	movs	r3, r0
 8003074:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003076:	e00b      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003078:	f7fe fe3a 	bl	8001cf0 <HAL_GetTick>
 800307c:	0002      	movs	r2, r0
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d904      	bls.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003086:	2313      	movs	r3, #19
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	2203      	movs	r2, #3
 800308c:	701a      	strb	r2, [r3, #0]
        break;
 800308e:	e005      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003090:	4b30      	ldr	r3, [pc, #192]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4013      	ands	r3, r2
 800309a:	d0ed      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800309c:	2313      	movs	r3, #19
 800309e:	18fb      	adds	r3, r7, r3
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d15e      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030a6:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030aa:	23c0      	movs	r3, #192	; 0xc0
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4013      	ands	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d019      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d014      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030c2:	4b23      	ldr	r3, [pc, #140]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c6:	4a24      	ldr	r2, [pc, #144]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030cc:	4b20      	ldr	r3, [pc, #128]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030d0:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030d2:	2180      	movs	r1, #128	; 0x80
 80030d4:	0249      	lsls	r1, r1, #9
 80030d6:	430a      	orrs	r2, r1
 80030d8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030da:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030de:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030e0:	491e      	ldr	r1, [pc, #120]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80030e2:	400a      	ands	r2, r1
 80030e4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030e6:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2201      	movs	r2, #1
 80030f0:	4013      	ands	r3, r2
 80030f2:	d016      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fe fdfc 	bl	8001cf0 <HAL_GetTick>
 80030f8:	0003      	movs	r3, r0
 80030fa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030fc:	e00c      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fe:	f7fe fdf7 	bl	8001cf0 <HAL_GetTick>
 8003102:	0002      	movs	r2, r0
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	4a15      	ldr	r2, [pc, #84]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d904      	bls.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800310e:	2313      	movs	r3, #19
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	2203      	movs	r2, #3
 8003114:	701a      	strb	r2, [r3, #0]
            break;
 8003116:	e004      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003118:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800311a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311c:	2202      	movs	r2, #2
 800311e:	4013      	ands	r3, r2
 8003120:	d0ed      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003122:	2313      	movs	r3, #19
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10a      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800312c:	4b08      	ldr	r3, [pc, #32]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800312e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003130:	4a09      	ldr	r2, [pc, #36]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003132:	4013      	ands	r3, r2
 8003134:	0019      	movs	r1, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800313c:	430a      	orrs	r2, r1
 800313e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003140:	e016      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003142:	2312      	movs	r3, #18
 8003144:	18fb      	adds	r3, r7, r3
 8003146:	2213      	movs	r2, #19
 8003148:	18ba      	adds	r2, r7, r2
 800314a:	7812      	ldrb	r2, [r2, #0]
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e00f      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003150:	40021000 	.word	0x40021000
 8003154:	40007000 	.word	0x40007000
 8003158:	fffffcff 	.word	0xfffffcff
 800315c:	fffeffff 	.word	0xfffeffff
 8003160:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003164:	2312      	movs	r3, #18
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	2213      	movs	r2, #19
 800316a:	18ba      	adds	r2, r7, r2
 800316c:	7812      	ldrb	r2, [r2, #0]
 800316e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003170:	2311      	movs	r3, #17
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d105      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317a:	4bb6      	ldr	r3, [pc, #728]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800317c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800317e:	4bb5      	ldr	r3, [pc, #724]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003180:	49b5      	ldr	r1, [pc, #724]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003182:	400a      	ands	r2, r1
 8003184:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2201      	movs	r2, #1
 800318c:	4013      	ands	r3, r2
 800318e:	d009      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003190:	4bb0      	ldr	r3, [pc, #704]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003194:	2203      	movs	r2, #3
 8003196:	4393      	bics	r3, r2
 8003198:	0019      	movs	r1, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	4bad      	ldr	r3, [pc, #692]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031a0:	430a      	orrs	r2, r1
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2202      	movs	r2, #2
 80031aa:	4013      	ands	r3, r2
 80031ac:	d009      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031ae:	4ba9      	ldr	r3, [pc, #676]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b2:	220c      	movs	r2, #12
 80031b4:	4393      	bics	r3, r2
 80031b6:	0019      	movs	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	4ba5      	ldr	r3, [pc, #660]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031be:	430a      	orrs	r2, r1
 80031c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2204      	movs	r2, #4
 80031c8:	4013      	ands	r3, r2
 80031ca:	d009      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031cc:	4ba1      	ldr	r3, [pc, #644]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d0:	2230      	movs	r2, #48	; 0x30
 80031d2:	4393      	bics	r3, r2
 80031d4:	0019      	movs	r1, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	4b9e      	ldr	r3, [pc, #632]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031dc:	430a      	orrs	r2, r1
 80031de:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2210      	movs	r2, #16
 80031e6:	4013      	ands	r3, r2
 80031e8:	d009      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031ea:	4b9a      	ldr	r3, [pc, #616]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ee:	4a9b      	ldr	r2, [pc, #620]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	0019      	movs	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	4b96      	ldr	r3, [pc, #600]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031fa:	430a      	orrs	r2, r1
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	2380      	movs	r3, #128	; 0x80
 8003204:	015b      	lsls	r3, r3, #5
 8003206:	4013      	ands	r3, r2
 8003208:	d009      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800320a:	4b92      	ldr	r3, [pc, #584]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800320c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320e:	4a94      	ldr	r2, [pc, #592]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003210:	4013      	ands	r3, r2
 8003212:	0019      	movs	r1, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	4b8e      	ldr	r3, [pc, #568]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800321a:	430a      	orrs	r2, r1
 800321c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4013      	ands	r3, r2
 8003228:	d009      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800322a:	4b8a      	ldr	r3, [pc, #552]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800322c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322e:	4a8d      	ldr	r2, [pc, #564]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003230:	4013      	ands	r3, r2
 8003232:	0019      	movs	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003238:	4b86      	ldr	r3, [pc, #536]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800323a:	430a      	orrs	r2, r1
 800323c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	2380      	movs	r3, #128	; 0x80
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4013      	ands	r3, r2
 8003248:	d009      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800324a:	4b82      	ldr	r3, [pc, #520]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800324c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324e:	4a86      	ldr	r2, [pc, #536]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003250:	4013      	ands	r3, r2
 8003252:	0019      	movs	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003258:	4b7e      	ldr	r3, [pc, #504]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800325a:	430a      	orrs	r2, r1
 800325c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2220      	movs	r2, #32
 8003264:	4013      	ands	r3, r2
 8003266:	d009      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003268:	4b7a      	ldr	r3, [pc, #488]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800326a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326c:	4a7f      	ldr	r2, [pc, #508]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800326e:	4013      	ands	r3, r2
 8003270:	0019      	movs	r1, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	4b77      	ldr	r3, [pc, #476]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003278:	430a      	orrs	r2, r1
 800327a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2240      	movs	r2, #64	; 0x40
 8003282:	4013      	ands	r3, r2
 8003284:	d009      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003286:	4b73      	ldr	r3, [pc, #460]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	4a79      	ldr	r2, [pc, #484]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800328c:	4013      	ands	r3, r2
 800328e:	0019      	movs	r1, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69da      	ldr	r2, [r3, #28]
 8003294:	4b6f      	ldr	r3, [pc, #444]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003296:	430a      	orrs	r2, r1
 8003298:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	01db      	lsls	r3, r3, #7
 80032a2:	4013      	ands	r3, r2
 80032a4:	d015      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032a6:	4b6b      	ldr	r3, [pc, #428]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	0899      	lsrs	r1, r3, #2
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032b2:	4b68      	ldr	r3, [pc, #416]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032b4:	430a      	orrs	r2, r1
 80032b6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	05db      	lsls	r3, r3, #23
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d106      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032c4:	4b63      	ldr	r3, [pc, #396]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	4b62      	ldr	r3, [pc, #392]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032ca:	2180      	movs	r1, #128	; 0x80
 80032cc:	0249      	lsls	r1, r1, #9
 80032ce:	430a      	orrs	r2, r1
 80032d0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	031b      	lsls	r3, r3, #12
 80032da:	4013      	ands	r3, r2
 80032dc:	d009      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032de:	4b5d      	ldr	r3, [pc, #372]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	2240      	movs	r2, #64	; 0x40
 80032e4:	4393      	bics	r3, r2
 80032e6:	0019      	movs	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ec:	4b59      	ldr	r3, [pc, #356]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032ee:	430a      	orrs	r2, r1
 80032f0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	039b      	lsls	r3, r3, #14
 80032fa:	4013      	ands	r3, r2
 80032fc:	d016      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032fe:	4b55      	ldr	r3, [pc, #340]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	4a5c      	ldr	r2, [pc, #368]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003304:	4013      	ands	r3, r2
 8003306:	0019      	movs	r1, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800330c:	4b51      	ldr	r3, [pc, #324]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800330e:	430a      	orrs	r2, r1
 8003310:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	03db      	lsls	r3, r3, #15
 800331a:	429a      	cmp	r2, r3
 800331c:	d106      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800331e:	4b4d      	ldr	r3, [pc, #308]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	4b4c      	ldr	r3, [pc, #304]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003324:	2180      	movs	r1, #128	; 0x80
 8003326:	0449      	lsls	r1, r1, #17
 8003328:	430a      	orrs	r2, r1
 800332a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	03db      	lsls	r3, r3, #15
 8003334:	4013      	ands	r3, r2
 8003336:	d016      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003338:	4b46      	ldr	r3, [pc, #280]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800333a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333c:	4a4e      	ldr	r2, [pc, #312]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800333e:	4013      	ands	r3, r2
 8003340:	0019      	movs	r1, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003346:	4b43      	ldr	r3, [pc, #268]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003348:	430a      	orrs	r2, r1
 800334a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	045b      	lsls	r3, r3, #17
 8003354:	429a      	cmp	r2, r3
 8003356:	d106      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003358:	4b3e      	ldr	r3, [pc, #248]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	4b3d      	ldr	r3, [pc, #244]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800335e:	2180      	movs	r1, #128	; 0x80
 8003360:	0449      	lsls	r1, r1, #17
 8003362:	430a      	orrs	r2, r1
 8003364:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	4013      	ands	r3, r2
 8003370:	d014      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003372:	4b38      	ldr	r3, [pc, #224]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	2203      	movs	r2, #3
 8003378:	4393      	bics	r3, r2
 800337a:	0019      	movs	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1a      	ldr	r2, [r3, #32]
 8003380:	4b34      	ldr	r3, [pc, #208]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003382:	430a      	orrs	r2, r1
 8003384:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d106      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800338e:	4b31      	ldr	r3, [pc, #196]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	4b30      	ldr	r3, [pc, #192]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003394:	2180      	movs	r1, #128	; 0x80
 8003396:	0249      	lsls	r1, r1, #9
 8003398:	430a      	orrs	r2, r1
 800339a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	019b      	lsls	r3, r3, #6
 80033a4:	4013      	ands	r3, r2
 80033a6:	d014      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80033a8:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	220c      	movs	r2, #12
 80033ae:	4393      	bics	r3, r2
 80033b0:	0019      	movs	r1, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033b6:	4b27      	ldr	r3, [pc, #156]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033b8:	430a      	orrs	r2, r1
 80033ba:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d106      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80033c4:	4b23      	ldr	r3, [pc, #140]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	4b22      	ldr	r3, [pc, #136]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033ca:	2180      	movs	r1, #128	; 0x80
 80033cc:	0249      	lsls	r1, r1, #9
 80033ce:	430a      	orrs	r2, r1
 80033d0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	2380      	movs	r3, #128	; 0x80
 80033d8:	045b      	lsls	r3, r3, #17
 80033da:	4013      	ands	r3, r2
 80033dc:	d016      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033de:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e2:	4a22      	ldr	r2, [pc, #136]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	0019      	movs	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ec:	4b19      	ldr	r3, [pc, #100]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033ee:	430a      	orrs	r2, r1
 80033f0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	019b      	lsls	r3, r3, #6
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d106      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	4b14      	ldr	r3, [pc, #80]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003404:	2180      	movs	r1, #128	; 0x80
 8003406:	0449      	lsls	r1, r1, #17
 8003408:	430a      	orrs	r2, r1
 800340a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	049b      	lsls	r3, r3, #18
 8003414:	4013      	ands	r3, r2
 8003416:	d016      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003418:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341c:	4a10      	ldr	r2, [pc, #64]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800341e:	4013      	ands	r3, r2
 8003420:	0019      	movs	r1, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003428:	430a      	orrs	r2, r1
 800342a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	429a      	cmp	r2, r3
 8003436:	d106      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800343e:	2180      	movs	r1, #128	; 0x80
 8003440:	0449      	lsls	r1, r1, #17
 8003442:	430a      	orrs	r2, r1
 8003444:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003446:	2312      	movs	r3, #18
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	781b      	ldrb	r3, [r3, #0]
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b006      	add	sp, #24
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40021000 	.word	0x40021000
 8003458:	efffffff 	.word	0xefffffff
 800345c:	fffff3ff 	.word	0xfffff3ff
 8003460:	fffffcff 	.word	0xfffffcff
 8003464:	fff3ffff 	.word	0xfff3ffff
 8003468:	ffcfffff 	.word	0xffcfffff
 800346c:	ffffcfff 	.word	0xffffcfff
 8003470:	ffff3fff 	.word	0xffff3fff
 8003474:	ffbfffff 	.word	0xffbfffff
 8003478:	feffffff 	.word	0xfeffffff

0800347c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e0a8      	b.n	80035e0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	2382      	movs	r3, #130	; 0x82
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	429a      	cmp	r2, r3
 80034a0:	d009      	beq.n	80034b6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	61da      	str	r2, [r3, #28]
 80034a8:	e005      	b.n	80034b6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	225d      	movs	r2, #93	; 0x5d
 80034c0:	5c9b      	ldrb	r3, [r3, r2]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d107      	bne.n	80034d8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	225c      	movs	r2, #92	; 0x5c
 80034cc:	2100      	movs	r1, #0
 80034ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 f88a 	bl	80035ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	225d      	movs	r2, #93	; 0x5d
 80034dc:	2102      	movs	r1, #2
 80034de:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2140      	movs	r1, #64	; 0x40
 80034ec:	438a      	bics	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	23e0      	movs	r3, #224	; 0xe0
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d902      	bls.n	8003502 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	e002      	b.n	8003508 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003502:	2380      	movs	r3, #128	; 0x80
 8003504:	015b      	lsls	r3, r3, #5
 8003506:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	23f0      	movs	r3, #240	; 0xf0
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	429a      	cmp	r2, r3
 8003512:	d008      	beq.n	8003526 <HAL_SPI_Init+0xaa>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	23e0      	movs	r3, #224	; 0xe0
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	429a      	cmp	r2, r3
 800351e:	d002      	beq.n	8003526 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	2382      	movs	r3, #130	; 0x82
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	401a      	ands	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6899      	ldr	r1, [r3, #8]
 8003534:	2384      	movs	r3, #132	; 0x84
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	400b      	ands	r3, r1
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2102      	movs	r1, #2
 8003542:	400b      	ands	r3, r1
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	2101      	movs	r1, #1
 800354c:	400b      	ands	r3, r1
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6999      	ldr	r1, [r3, #24]
 8003554:	2380      	movs	r3, #128	; 0x80
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	400b      	ands	r3, r1
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	2138      	movs	r1, #56	; 0x38
 8003562:	400b      	ands	r3, r1
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	2180      	movs	r1, #128	; 0x80
 800356c:	400b      	ands	r3, r1
 800356e:	431a      	orrs	r2, r3
 8003570:	0011      	movs	r1, r2
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	019b      	lsls	r3, r3, #6
 800357a:	401a      	ands	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	0c1b      	lsrs	r3, r3, #16
 800358a:	2204      	movs	r2, #4
 800358c:	401a      	ands	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	2110      	movs	r1, #16
 8003594:	400b      	ands	r3, r1
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359c:	2108      	movs	r1, #8
 800359e:	400b      	ands	r3, r1
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68d9      	ldr	r1, [r3, #12]
 80035a6:	23f0      	movs	r3, #240	; 0xf0
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	400b      	ands	r3, r1
 80035ac:	431a      	orrs	r2, r3
 80035ae:	0011      	movs	r1, r2
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	015b      	lsls	r3, r3, #5
 80035b6:	401a      	ands	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69da      	ldr	r2, [r3, #28]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4907      	ldr	r1, [pc, #28]	; (80035e8 <HAL_SPI_Init+0x16c>)
 80035cc:	400a      	ands	r2, r1
 80035ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	225d      	movs	r2, #93	; 0x5d
 80035da:	2101      	movs	r1, #1
 80035dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	0018      	movs	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b004      	add	sp, #16
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	fffff7ff 	.word	0xfffff7ff

080035ec <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b002      	add	sp, #8
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08a      	sub	sp, #40	; 0x28
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	001a      	movs	r2, r3
 800360a:	1cbb      	adds	r3, r7, #2
 800360c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800360e:	2301      	movs	r3, #1
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003612:	2323      	movs	r3, #35	; 0x23
 8003614:	18fb      	adds	r3, r7, r3
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	225c      	movs	r2, #92	; 0x5c
 800361e:	5c9b      	ldrb	r3, [r3, r2]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_SPI_TransmitReceive+0x2c>
 8003624:	2302      	movs	r3, #2
 8003626:	e1b5      	b.n	8003994 <HAL_SPI_TransmitReceive+0x398>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	225c      	movs	r2, #92	; 0x5c
 800362c:	2101      	movs	r1, #1
 800362e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003630:	f7fe fb5e 	bl	8001cf0 <HAL_GetTick>
 8003634:	0003      	movs	r3, r0
 8003636:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003638:	201b      	movs	r0, #27
 800363a:	183b      	adds	r3, r7, r0
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	215d      	movs	r1, #93	; 0x5d
 8003640:	5c52      	ldrb	r2, [r2, r1]
 8003642:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800364a:	2312      	movs	r3, #18
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	1cba      	adds	r2, r7, #2
 8003650:	8812      	ldrh	r2, [r2, #0]
 8003652:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003654:	183b      	adds	r3, r7, r0
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d011      	beq.n	8003680 <HAL_SPI_TransmitReceive+0x84>
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	2382      	movs	r3, #130	; 0x82
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	429a      	cmp	r2, r3
 8003664:	d107      	bne.n	8003676 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d103      	bne.n	8003676 <HAL_SPI_TransmitReceive+0x7a>
 800366e:	183b      	adds	r3, r7, r0
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b04      	cmp	r3, #4
 8003674:	d004      	beq.n	8003680 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003676:	2323      	movs	r3, #35	; 0x23
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	2202      	movs	r2, #2
 800367c:	701a      	strb	r2, [r3, #0]
    goto error;
 800367e:	e17e      	b.n	800397e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d006      	beq.n	8003694 <HAL_SPI_TransmitReceive+0x98>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_SPI_TransmitReceive+0x98>
 800368c:	1cbb      	adds	r3, r7, #2
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d104      	bne.n	800369e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003694:	2323      	movs	r3, #35	; 0x23
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	2201      	movs	r2, #1
 800369a:	701a      	strb	r2, [r3, #0]
    goto error;
 800369c:	e16f      	b.n	800397e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	225d      	movs	r2, #93	; 0x5d
 80036a2:	5c9b      	ldrb	r3, [r3, r2]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d003      	beq.n	80036b2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	225d      	movs	r2, #93	; 0x5d
 80036ae:	2105      	movs	r1, #5
 80036b0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1cba      	adds	r2, r7, #2
 80036c2:	2146      	movs	r1, #70	; 0x46
 80036c4:	8812      	ldrh	r2, [r2, #0]
 80036c6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1cba      	adds	r2, r7, #2
 80036cc:	2144      	movs	r1, #68	; 0x44
 80036ce:	8812      	ldrh	r2, [r2, #0]
 80036d0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1cba      	adds	r2, r7, #2
 80036dc:	8812      	ldrh	r2, [r2, #0]
 80036de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1cba      	adds	r2, r7, #2
 80036e4:	8812      	ldrh	r2, [r2, #0]
 80036e6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	23e0      	movs	r3, #224	; 0xe0
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d908      	bls.n	8003712 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	49a4      	ldr	r1, [pc, #656]	; (800399c <HAL_SPI_TransmitReceive+0x3a0>)
 800370c:	400a      	ands	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
 8003710:	e008      	b.n	8003724 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2180      	movs	r1, #128	; 0x80
 800371e:	0149      	lsls	r1, r1, #5
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2240      	movs	r2, #64	; 0x40
 800372c:	4013      	ands	r3, r2
 800372e:	2b40      	cmp	r3, #64	; 0x40
 8003730:	d007      	beq.n	8003742 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2140      	movs	r1, #64	; 0x40
 800373e:	430a      	orrs	r2, r1
 8003740:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	23e0      	movs	r3, #224	; 0xe0
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	429a      	cmp	r2, r3
 800374c:	d800      	bhi.n	8003750 <HAL_SPI_TransmitReceive+0x154>
 800374e:	e07f      	b.n	8003850 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_SPI_TransmitReceive+0x168>
 8003758:	2312      	movs	r3, #18
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d000      	beq.n	8003764 <HAL_SPI_TransmitReceive+0x168>
 8003762:	e069      	b.n	8003838 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	881a      	ldrh	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003774:	1c9a      	adds	r2, r3, #2
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003788:	e056      	b.n	8003838 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2202      	movs	r2, #2
 8003792:	4013      	ands	r3, r2
 8003794:	2b02      	cmp	r3, #2
 8003796:	d11b      	bne.n	80037d0 <HAL_SPI_TransmitReceive+0x1d4>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <HAL_SPI_TransmitReceive+0x1d4>
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d113      	bne.n	80037d0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ac:	881a      	ldrh	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	1c9a      	adds	r2, r3, #2
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2201      	movs	r2, #1
 80037d8:	4013      	ands	r3, r2
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d11c      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x21c>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2246      	movs	r2, #70	; 0x46
 80037e2:	5a9b      	ldrh	r3, [r3, r2]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d016      	beq.n	8003818 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	b292      	uxth	r2, r2
 80037f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	1c9a      	adds	r2, r3, #2
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2246      	movs	r2, #70	; 0x46
 8003806:	5a9b      	ldrh	r3, [r3, r2]
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b299      	uxth	r1, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2246      	movs	r2, #70	; 0x46
 8003812:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003814:	2301      	movs	r3, #1
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003818:	f7fe fa6a 	bl	8001cf0 <HAL_GetTick>
 800381c:	0002      	movs	r2, r0
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003824:	429a      	cmp	r2, r3
 8003826:	d807      	bhi.n	8003838 <HAL_SPI_TransmitReceive+0x23c>
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	3301      	adds	r3, #1
 800382c:	d004      	beq.n	8003838 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800382e:	2323      	movs	r3, #35	; 0x23
 8003830:	18fb      	adds	r3, r7, r3
 8003832:	2203      	movs	r2, #3
 8003834:	701a      	strb	r2, [r3, #0]
        goto error;
 8003836:	e0a2      	b.n	800397e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1a3      	bne.n	800378a <HAL_SPI_TransmitReceive+0x18e>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2246      	movs	r2, #70	; 0x46
 8003846:	5a9b      	ldrh	r3, [r3, r2]
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d19d      	bne.n	800378a <HAL_SPI_TransmitReceive+0x18e>
 800384e:	e085      	b.n	800395c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x268>
 8003858:	2312      	movs	r3, #18
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d000      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x268>
 8003862:	e070      	b.n	8003946 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	330c      	adds	r3, #12
 800386e:	7812      	ldrb	r2, [r2, #0]
 8003870:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800388a:	e05c      	b.n	8003946 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2202      	movs	r2, #2
 8003894:	4013      	ands	r3, r2
 8003896:	2b02      	cmp	r3, #2
 8003898:	d11c      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x2d8>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d017      	beq.n	80038d4 <HAL_SPI_TransmitReceive+0x2d8>
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d114      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	330c      	adds	r3, #12
 80038b4:	7812      	ldrb	r2, [r2, #0]
 80038b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2201      	movs	r2, #1
 80038dc:	4013      	ands	r3, r2
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d11e      	bne.n	8003920 <HAL_SPI_TransmitReceive+0x324>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2246      	movs	r2, #70	; 0x46
 80038e6:	5a9b      	ldrh	r3, [r3, r2]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d018      	beq.n	8003920 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	330c      	adds	r3, #12
 80038f4:	001a      	movs	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	7812      	ldrb	r2, [r2, #0]
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2246      	movs	r2, #70	; 0x46
 800390e:	5a9b      	ldrh	r3, [r3, r2]
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b299      	uxth	r1, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2246      	movs	r2, #70	; 0x46
 800391a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800391c:	2301      	movs	r3, #1
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003920:	f7fe f9e6 	bl	8001cf0 <HAL_GetTick>
 8003924:	0002      	movs	r2, r0
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800392c:	429a      	cmp	r2, r3
 800392e:	d802      	bhi.n	8003936 <HAL_SPI_TransmitReceive+0x33a>
 8003930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003932:	3301      	adds	r3, #1
 8003934:	d102      	bne.n	800393c <HAL_SPI_TransmitReceive+0x340>
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	2b00      	cmp	r3, #0
 800393a:	d104      	bne.n	8003946 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800393c:	2323      	movs	r3, #35	; 0x23
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	2203      	movs	r2, #3
 8003942:	701a      	strb	r2, [r3, #0]
        goto error;
 8003944:	e01b      	b.n	800397e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d19d      	bne.n	800388c <HAL_SPI_TransmitReceive+0x290>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2246      	movs	r2, #70	; 0x46
 8003954:	5a9b      	ldrh	r3, [r3, r2]
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d197      	bne.n	800388c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800395c:	69fa      	ldr	r2, [r7, #28]
 800395e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	0018      	movs	r0, r3
 8003964:	f000 f958 	bl	8003c18 <SPI_EndRxTxTransaction>
 8003968:	1e03      	subs	r3, r0, #0
 800396a:	d007      	beq.n	800397c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800396c:	2323      	movs	r3, #35	; 0x23
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	2201      	movs	r2, #1
 8003972:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	661a      	str	r2, [r3, #96]	; 0x60
 800397a:	e000      	b.n	800397e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800397c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	225d      	movs	r2, #93	; 0x5d
 8003982:	2101      	movs	r1, #1
 8003984:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	225c      	movs	r2, #92	; 0x5c
 800398a:	2100      	movs	r1, #0
 800398c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800398e:	2323      	movs	r3, #35	; 0x23
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	781b      	ldrb	r3, [r3, #0]
}
 8003994:	0018      	movs	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	b00a      	add	sp, #40	; 0x28
 800399a:	bd80      	pop	{r7, pc}
 800399c:	ffffefff 	.word	0xffffefff

080039a0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	225d      	movs	r2, #93	; 0x5d
 80039ac:	5c9b      	ldrb	r3, [r3, r2]
 80039ae:	b2db      	uxtb	r3, r3
}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b002      	add	sp, #8
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	1dfb      	adds	r3, r7, #7
 80039c6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039c8:	f7fe f992 	bl	8001cf0 <HAL_GetTick>
 80039cc:	0002      	movs	r2, r0
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	18d3      	adds	r3, r2, r3
 80039d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039d8:	f7fe f98a 	bl	8001cf0 <HAL_GetTick>
 80039dc:	0003      	movs	r3, r0
 80039de:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039e0:	4b3a      	ldr	r3, [pc, #232]	; (8003acc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	015b      	lsls	r3, r3, #5
 80039e6:	0d1b      	lsrs	r3, r3, #20
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	4353      	muls	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ee:	e058      	b.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	3301      	adds	r3, #1
 80039f4:	d055      	beq.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039f6:	f7fe f97b 	bl	8001cf0 <HAL_GetTick>
 80039fa:	0002      	movs	r2, r0
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d902      	bls.n	8003a0c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d142      	bne.n	8003a92 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	21e0      	movs	r1, #224	; 0xe0
 8003a18:	438a      	bics	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	2382      	movs	r3, #130	; 0x82
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d113      	bne.n	8003a50 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d005      	beq.n	8003a40 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	2380      	movs	r3, #128	; 0x80
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d107      	bne.n	8003a50 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2140      	movs	r1, #64	; 0x40
 8003a4c:	438a      	bics	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a54:	2380      	movs	r3, #128	; 0x80
 8003a56:	019b      	lsls	r3, r3, #6
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d110      	bne.n	8003a7e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	491a      	ldr	r1, [pc, #104]	; (8003ad0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003a68:	400a      	ands	r2, r1
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2180      	movs	r1, #128	; 0x80
 8003a78:	0189      	lsls	r1, r1, #6
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	225d      	movs	r2, #93	; 0x5d
 8003a82:	2101      	movs	r1, #1
 8003a84:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	225c      	movs	r2, #92	; 0x5c
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e017      	b.n	8003ac2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	425a      	negs	r2, r3
 8003ab2:	4153      	adcs	r3, r2
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	001a      	movs	r2, r3
 8003ab8:	1dfb      	adds	r3, r7, #7
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d197      	bne.n	80039f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	b008      	add	sp, #32
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	2000005c 	.word	0x2000005c
 8003ad0:	ffffdfff 	.word	0xffffdfff

08003ad4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	; 0x28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ae2:	2317      	movs	r3, #23
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003aea:	f7fe f901 	bl	8001cf0 <HAL_GetTick>
 8003aee:	0002      	movs	r2, r0
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	18d3      	adds	r3, r2, r3
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003afa:	f7fe f8f9 	bl	8001cf0 <HAL_GetTick>
 8003afe:	0003      	movs	r3, r0
 8003b00:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	330c      	adds	r3, #12
 8003b08:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b0a:	4b41      	ldr	r3, [pc, #260]	; (8003c10 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	0013      	movs	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	189b      	adds	r3, r3, r2
 8003b14:	00da      	lsls	r2, r3, #3
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	0d1b      	lsrs	r3, r3, #20
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1c:	4353      	muls	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b20:	e068      	b.n	8003bf4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	23c0      	movs	r3, #192	; 0xc0
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d10a      	bne.n	8003b42 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d107      	bne.n	8003b42 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	2117      	movs	r1, #23
 8003b3a:	187b      	adds	r3, r7, r1
 8003b3c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b3e:	187b      	adds	r3, r7, r1
 8003b40:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	3301      	adds	r3, #1
 8003b46:	d055      	beq.n	8003bf4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b48:	f7fe f8d2 	bl	8001cf0 <HAL_GetTick>
 8003b4c:	0002      	movs	r2, r0
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d902      	bls.n	8003b5e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d142      	bne.n	8003be4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	21e0      	movs	r1, #224	; 0xe0
 8003b6a:	438a      	bics	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	2382      	movs	r3, #130	; 0x82
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d113      	bne.n	8003ba2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	2380      	movs	r3, #128	; 0x80
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d005      	beq.n	8003b92 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d107      	bne.n	8003ba2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2140      	movs	r1, #64	; 0x40
 8003b9e:	438a      	bics	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	019b      	lsls	r3, r3, #6
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d110      	bne.n	8003bd0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4916      	ldr	r1, [pc, #88]	; (8003c14 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003bba:	400a      	ands	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2180      	movs	r1, #128	; 0x80
 8003bca:	0189      	lsls	r1, r1, #6
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	225d      	movs	r2, #93	; 0x5d
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	225c      	movs	r2, #92	; 0x5c
 8003bdc:	2100      	movs	r1, #0
 8003bde:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e010      	b.n	8003c06 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d18e      	bne.n	8003b22 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	0018      	movs	r0, r3
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b00a      	add	sp, #40	; 0x28
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	2000005c 	.word	0x2000005c
 8003c14:	ffffdfff 	.word	0xffffdfff

08003c18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	23c0      	movs	r3, #192	; 0xc0
 8003c28:	0159      	lsls	r1, r3, #5
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	0013      	movs	r3, r2
 8003c32:	2200      	movs	r2, #0
 8003c34:	f7ff ff4e 	bl	8003ad4 <SPI_WaitFifoStateUntilTimeout>
 8003c38:	1e03      	subs	r3, r0, #0
 8003c3a:	d007      	beq.n	8003c4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c40:	2220      	movs	r2, #32
 8003c42:	431a      	orrs	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e027      	b.n	8003c9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	0013      	movs	r3, r2
 8003c56:	2200      	movs	r2, #0
 8003c58:	2180      	movs	r1, #128	; 0x80
 8003c5a:	f7ff fead 	bl	80039b8 <SPI_WaitFlagStateUntilTimeout>
 8003c5e:	1e03      	subs	r3, r0, #0
 8003c60:	d007      	beq.n	8003c72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c66:	2220      	movs	r2, #32
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e014      	b.n	8003c9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	23c0      	movs	r3, #192	; 0xc0
 8003c76:	00d9      	lsls	r1, r3, #3
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	0013      	movs	r3, r2
 8003c80:	2200      	movs	r2, #0
 8003c82:	f7ff ff27 	bl	8003ad4 <SPI_WaitFifoStateUntilTimeout>
 8003c86:	1e03      	subs	r3, r0, #0
 8003c88:	d007      	beq.n	8003c9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8e:	2220      	movs	r2, #32
 8003c90:	431a      	orrs	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e000      	b.n	8003c9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b004      	add	sp, #16
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e046      	b.n	8003d44 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2288      	movs	r2, #136	; 0x88
 8003cba:	589b      	ldr	r3, [r3, r2]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d107      	bne.n	8003cd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2284      	movs	r2, #132	; 0x84
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f7fd ff0a 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2288      	movs	r2, #136	; 0x88
 8003cd4:	2124      	movs	r1, #36	; 0x24
 8003cd6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	438a      	bics	r2, r1
 8003ce6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	0018      	movs	r0, r3
 8003cec:	f000 f8cc 	bl	8003e88 <UART_SetConfig>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e024      	b.n	8003d44 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	0018      	movs	r0, r3
 8003d06:	f000 fc15 	bl	8004534 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	490d      	ldr	r1, [pc, #52]	; (8003d4c <HAL_UART_Init+0xa8>)
 8003d16:	400a      	ands	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	212a      	movs	r1, #42	; 0x2a
 8003d26:	438a      	bics	r2, r1
 8003d28:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2101      	movs	r1, #1
 8003d36:	430a      	orrs	r2, r1
 8003d38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f000 fcad 	bl	800469c <UART_CheckIdleState>
 8003d42:	0003      	movs	r3, r0
}
 8003d44:	0018      	movs	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b002      	add	sp, #8
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	ffffb7ff 	.word	0xffffb7ff

08003d50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08a      	sub	sp, #40	; 0x28
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	1dbb      	adds	r3, r7, #6
 8003d5e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2288      	movs	r2, #136	; 0x88
 8003d64:	589b      	ldr	r3, [r3, r2]
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d000      	beq.n	8003d6c <HAL_UART_Transmit+0x1c>
 8003d6a:	e088      	b.n	8003e7e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_UART_Transmit+0x2a>
 8003d72:	1dbb      	adds	r3, r7, #6
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e080      	b.n	8003e80 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	015b      	lsls	r3, r3, #5
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d109      	bne.n	8003d9e <HAL_UART_Transmit+0x4e>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d105      	bne.n	8003d9e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2201      	movs	r2, #1
 8003d96:	4013      	ands	r3, r2
 8003d98:	d001      	beq.n	8003d9e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e070      	b.n	8003e80 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2290      	movs	r2, #144	; 0x90
 8003da2:	2100      	movs	r1, #0
 8003da4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2288      	movs	r2, #136	; 0x88
 8003daa:	2121      	movs	r1, #33	; 0x21
 8003dac:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dae:	f7fd ff9f 	bl	8001cf0 <HAL_GetTick>
 8003db2:	0003      	movs	r3, r0
 8003db4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1dba      	adds	r2, r7, #6
 8003dba:	2154      	movs	r1, #84	; 0x54
 8003dbc:	8812      	ldrh	r2, [r2, #0]
 8003dbe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	1dba      	adds	r2, r7, #6
 8003dc4:	2156      	movs	r1, #86	; 0x56
 8003dc6:	8812      	ldrh	r2, [r2, #0]
 8003dc8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	015b      	lsls	r3, r3, #5
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d108      	bne.n	8003de8 <HAL_UART_Transmit+0x98>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d104      	bne.n	8003de8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	e003      	b.n	8003df0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003df0:	e02c      	b.n	8003e4c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	0013      	movs	r3, r2
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2180      	movs	r1, #128	; 0x80
 8003e00:	f000 fc9a 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 8003e04:	1e03      	subs	r3, r0, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e039      	b.n	8003e80 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10b      	bne.n	8003e2a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	001a      	movs	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	05d2      	lsls	r2, r2, #23
 8003e1e:	0dd2      	lsrs	r2, r2, #23
 8003e20:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	3302      	adds	r3, #2
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	e007      	b.n	8003e3a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	781a      	ldrb	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	3301      	adds	r3, #1
 8003e38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2256      	movs	r2, #86	; 0x56
 8003e3e:	5a9b      	ldrh	r3, [r3, r2]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b299      	uxth	r1, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2256      	movs	r2, #86	; 0x56
 8003e4a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2256      	movs	r2, #86	; 0x56
 8003e50:	5a9b      	ldrh	r3, [r3, r2]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1cc      	bne.n	8003df2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	0013      	movs	r3, r2
 8003e62:	2200      	movs	r2, #0
 8003e64:	2140      	movs	r1, #64	; 0x40
 8003e66:	f000 fc67 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 8003e6a:	1e03      	subs	r3, r0, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e006      	b.n	8003e80 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2288      	movs	r2, #136	; 0x88
 8003e76:	2120      	movs	r1, #32
 8003e78:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e000      	b.n	8003e80 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003e7e:	2302      	movs	r3, #2
  }
}
 8003e80:	0018      	movs	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b008      	add	sp, #32
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e88:	b5b0      	push	{r4, r5, r7, lr}
 8003e8a:	b090      	sub	sp, #64	; 0x40
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e90:	231a      	movs	r3, #26
 8003e92:	2220      	movs	r2, #32
 8003e94:	189b      	adds	r3, r3, r2
 8003e96:	19db      	adds	r3, r3, r7
 8003e98:	2200      	movs	r2, #0
 8003e9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4ac1      	ldr	r2, [pc, #772]	; (80041c0 <UART_SetConfig+0x338>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	0019      	movs	r1, r3
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	4abc      	ldr	r2, [pc, #752]	; (80041c4 <UART_SetConfig+0x33c>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	68d9      	ldr	r1, [r3, #12]
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	0003      	movs	r3, r0
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4ab6      	ldr	r2, [pc, #728]	; (80041c8 <UART_SetConfig+0x340>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d009      	beq.n	8003f08 <UART_SetConfig+0x80>
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4ab4      	ldr	r2, [pc, #720]	; (80041cc <UART_SetConfig+0x344>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d004      	beq.n	8003f08 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f04:	4313      	orrs	r3, r2
 8003f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	4ab0      	ldr	r2, [pc, #704]	; (80041d0 <UART_SetConfig+0x348>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	0019      	movs	r1, r3
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	220f      	movs	r2, #15
 8003f26:	4393      	bics	r3, r2
 8003f28:	0018      	movs	r0, r3
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	0003      	movs	r3, r0
 8003f34:	430b      	orrs	r3, r1
 8003f36:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4aa5      	ldr	r2, [pc, #660]	; (80041d4 <UART_SetConfig+0x34c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d131      	bne.n	8003fa6 <UART_SetConfig+0x11e>
 8003f42:	4ba5      	ldr	r3, [pc, #660]	; (80041d8 <UART_SetConfig+0x350>)
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	2203      	movs	r2, #3
 8003f48:	4013      	ands	r3, r2
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d01d      	beq.n	8003f8a <UART_SetConfig+0x102>
 8003f4e:	d823      	bhi.n	8003f98 <UART_SetConfig+0x110>
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d00c      	beq.n	8003f6e <UART_SetConfig+0xe6>
 8003f54:	d820      	bhi.n	8003f98 <UART_SetConfig+0x110>
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <UART_SetConfig+0xd8>
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d00e      	beq.n	8003f7c <UART_SetConfig+0xf4>
 8003f5e:	e01b      	b.n	8003f98 <UART_SetConfig+0x110>
 8003f60:	231b      	movs	r3, #27
 8003f62:	2220      	movs	r2, #32
 8003f64:	189b      	adds	r3, r3, r2
 8003f66:	19db      	adds	r3, r3, r7
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
 8003f6c:	e154      	b.n	8004218 <UART_SetConfig+0x390>
 8003f6e:	231b      	movs	r3, #27
 8003f70:	2220      	movs	r2, #32
 8003f72:	189b      	adds	r3, r3, r2
 8003f74:	19db      	adds	r3, r3, r7
 8003f76:	2202      	movs	r2, #2
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	e14d      	b.n	8004218 <UART_SetConfig+0x390>
 8003f7c:	231b      	movs	r3, #27
 8003f7e:	2220      	movs	r2, #32
 8003f80:	189b      	adds	r3, r3, r2
 8003f82:	19db      	adds	r3, r3, r7
 8003f84:	2204      	movs	r2, #4
 8003f86:	701a      	strb	r2, [r3, #0]
 8003f88:	e146      	b.n	8004218 <UART_SetConfig+0x390>
 8003f8a:	231b      	movs	r3, #27
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	189b      	adds	r3, r3, r2
 8003f90:	19db      	adds	r3, r3, r7
 8003f92:	2208      	movs	r2, #8
 8003f94:	701a      	strb	r2, [r3, #0]
 8003f96:	e13f      	b.n	8004218 <UART_SetConfig+0x390>
 8003f98:	231b      	movs	r3, #27
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	189b      	adds	r3, r3, r2
 8003f9e:	19db      	adds	r3, r3, r7
 8003fa0:	2210      	movs	r2, #16
 8003fa2:	701a      	strb	r2, [r3, #0]
 8003fa4:	e138      	b.n	8004218 <UART_SetConfig+0x390>
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a8c      	ldr	r2, [pc, #560]	; (80041dc <UART_SetConfig+0x354>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d131      	bne.n	8004014 <UART_SetConfig+0x18c>
 8003fb0:	4b89      	ldr	r3, [pc, #548]	; (80041d8 <UART_SetConfig+0x350>)
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb4:	220c      	movs	r2, #12
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b0c      	cmp	r3, #12
 8003fba:	d01d      	beq.n	8003ff8 <UART_SetConfig+0x170>
 8003fbc:	d823      	bhi.n	8004006 <UART_SetConfig+0x17e>
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d00c      	beq.n	8003fdc <UART_SetConfig+0x154>
 8003fc2:	d820      	bhi.n	8004006 <UART_SetConfig+0x17e>
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <UART_SetConfig+0x146>
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d00e      	beq.n	8003fea <UART_SetConfig+0x162>
 8003fcc:	e01b      	b.n	8004006 <UART_SetConfig+0x17e>
 8003fce:	231b      	movs	r3, #27
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	189b      	adds	r3, r3, r2
 8003fd4:	19db      	adds	r3, r3, r7
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	e11d      	b.n	8004218 <UART_SetConfig+0x390>
 8003fdc:	231b      	movs	r3, #27
 8003fde:	2220      	movs	r2, #32
 8003fe0:	189b      	adds	r3, r3, r2
 8003fe2:	19db      	adds	r3, r3, r7
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	e116      	b.n	8004218 <UART_SetConfig+0x390>
 8003fea:	231b      	movs	r3, #27
 8003fec:	2220      	movs	r2, #32
 8003fee:	189b      	adds	r3, r3, r2
 8003ff0:	19db      	adds	r3, r3, r7
 8003ff2:	2204      	movs	r2, #4
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	e10f      	b.n	8004218 <UART_SetConfig+0x390>
 8003ff8:	231b      	movs	r3, #27
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	189b      	adds	r3, r3, r2
 8003ffe:	19db      	adds	r3, r3, r7
 8004000:	2208      	movs	r2, #8
 8004002:	701a      	strb	r2, [r3, #0]
 8004004:	e108      	b.n	8004218 <UART_SetConfig+0x390>
 8004006:	231b      	movs	r3, #27
 8004008:	2220      	movs	r2, #32
 800400a:	189b      	adds	r3, r3, r2
 800400c:	19db      	adds	r3, r3, r7
 800400e:	2210      	movs	r2, #16
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	e101      	b.n	8004218 <UART_SetConfig+0x390>
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a71      	ldr	r2, [pc, #452]	; (80041e0 <UART_SetConfig+0x358>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d131      	bne.n	8004082 <UART_SetConfig+0x1fa>
 800401e:	4b6e      	ldr	r3, [pc, #440]	; (80041d8 <UART_SetConfig+0x350>)
 8004020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004022:	2230      	movs	r2, #48	; 0x30
 8004024:	4013      	ands	r3, r2
 8004026:	2b30      	cmp	r3, #48	; 0x30
 8004028:	d01d      	beq.n	8004066 <UART_SetConfig+0x1de>
 800402a:	d823      	bhi.n	8004074 <UART_SetConfig+0x1ec>
 800402c:	2b20      	cmp	r3, #32
 800402e:	d00c      	beq.n	800404a <UART_SetConfig+0x1c2>
 8004030:	d820      	bhi.n	8004074 <UART_SetConfig+0x1ec>
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <UART_SetConfig+0x1b4>
 8004036:	2b10      	cmp	r3, #16
 8004038:	d00e      	beq.n	8004058 <UART_SetConfig+0x1d0>
 800403a:	e01b      	b.n	8004074 <UART_SetConfig+0x1ec>
 800403c:	231b      	movs	r3, #27
 800403e:	2220      	movs	r2, #32
 8004040:	189b      	adds	r3, r3, r2
 8004042:	19db      	adds	r3, r3, r7
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]
 8004048:	e0e6      	b.n	8004218 <UART_SetConfig+0x390>
 800404a:	231b      	movs	r3, #27
 800404c:	2220      	movs	r2, #32
 800404e:	189b      	adds	r3, r3, r2
 8004050:	19db      	adds	r3, r3, r7
 8004052:	2202      	movs	r2, #2
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	e0df      	b.n	8004218 <UART_SetConfig+0x390>
 8004058:	231b      	movs	r3, #27
 800405a:	2220      	movs	r2, #32
 800405c:	189b      	adds	r3, r3, r2
 800405e:	19db      	adds	r3, r3, r7
 8004060:	2204      	movs	r2, #4
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	e0d8      	b.n	8004218 <UART_SetConfig+0x390>
 8004066:	231b      	movs	r3, #27
 8004068:	2220      	movs	r2, #32
 800406a:	189b      	adds	r3, r3, r2
 800406c:	19db      	adds	r3, r3, r7
 800406e:	2208      	movs	r2, #8
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	e0d1      	b.n	8004218 <UART_SetConfig+0x390>
 8004074:	231b      	movs	r3, #27
 8004076:	2220      	movs	r2, #32
 8004078:	189b      	adds	r3, r3, r2
 800407a:	19db      	adds	r3, r3, r7
 800407c:	2210      	movs	r2, #16
 800407e:	701a      	strb	r2, [r3, #0]
 8004080:	e0ca      	b.n	8004218 <UART_SetConfig+0x390>
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a57      	ldr	r2, [pc, #348]	; (80041e4 <UART_SetConfig+0x35c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d106      	bne.n	800409a <UART_SetConfig+0x212>
 800408c:	231b      	movs	r3, #27
 800408e:	2220      	movs	r2, #32
 8004090:	189b      	adds	r3, r3, r2
 8004092:	19db      	adds	r3, r3, r7
 8004094:	2200      	movs	r2, #0
 8004096:	701a      	strb	r2, [r3, #0]
 8004098:	e0be      	b.n	8004218 <UART_SetConfig+0x390>
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a52      	ldr	r2, [pc, #328]	; (80041e8 <UART_SetConfig+0x360>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d106      	bne.n	80040b2 <UART_SetConfig+0x22a>
 80040a4:	231b      	movs	r3, #27
 80040a6:	2220      	movs	r2, #32
 80040a8:	189b      	adds	r3, r3, r2
 80040aa:	19db      	adds	r3, r3, r7
 80040ac:	2200      	movs	r2, #0
 80040ae:	701a      	strb	r2, [r3, #0]
 80040b0:	e0b2      	b.n	8004218 <UART_SetConfig+0x390>
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a4d      	ldr	r2, [pc, #308]	; (80041ec <UART_SetConfig+0x364>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d106      	bne.n	80040ca <UART_SetConfig+0x242>
 80040bc:	231b      	movs	r3, #27
 80040be:	2220      	movs	r2, #32
 80040c0:	189b      	adds	r3, r3, r2
 80040c2:	19db      	adds	r3, r3, r7
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
 80040c8:	e0a6      	b.n	8004218 <UART_SetConfig+0x390>
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a3e      	ldr	r2, [pc, #248]	; (80041c8 <UART_SetConfig+0x340>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d13e      	bne.n	8004152 <UART_SetConfig+0x2ca>
 80040d4:	4b40      	ldr	r3, [pc, #256]	; (80041d8 <UART_SetConfig+0x350>)
 80040d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040d8:	23c0      	movs	r3, #192	; 0xc0
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	4013      	ands	r3, r2
 80040de:	22c0      	movs	r2, #192	; 0xc0
 80040e0:	0112      	lsls	r2, r2, #4
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d027      	beq.n	8004136 <UART_SetConfig+0x2ae>
 80040e6:	22c0      	movs	r2, #192	; 0xc0
 80040e8:	0112      	lsls	r2, r2, #4
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d82a      	bhi.n	8004144 <UART_SetConfig+0x2bc>
 80040ee:	2280      	movs	r2, #128	; 0x80
 80040f0:	0112      	lsls	r2, r2, #4
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d011      	beq.n	800411a <UART_SetConfig+0x292>
 80040f6:	2280      	movs	r2, #128	; 0x80
 80040f8:	0112      	lsls	r2, r2, #4
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d822      	bhi.n	8004144 <UART_SetConfig+0x2bc>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d004      	beq.n	800410c <UART_SetConfig+0x284>
 8004102:	2280      	movs	r2, #128	; 0x80
 8004104:	00d2      	lsls	r2, r2, #3
 8004106:	4293      	cmp	r3, r2
 8004108:	d00e      	beq.n	8004128 <UART_SetConfig+0x2a0>
 800410a:	e01b      	b.n	8004144 <UART_SetConfig+0x2bc>
 800410c:	231b      	movs	r3, #27
 800410e:	2220      	movs	r2, #32
 8004110:	189b      	adds	r3, r3, r2
 8004112:	19db      	adds	r3, r3, r7
 8004114:	2200      	movs	r2, #0
 8004116:	701a      	strb	r2, [r3, #0]
 8004118:	e07e      	b.n	8004218 <UART_SetConfig+0x390>
 800411a:	231b      	movs	r3, #27
 800411c:	2220      	movs	r2, #32
 800411e:	189b      	adds	r3, r3, r2
 8004120:	19db      	adds	r3, r3, r7
 8004122:	2202      	movs	r2, #2
 8004124:	701a      	strb	r2, [r3, #0]
 8004126:	e077      	b.n	8004218 <UART_SetConfig+0x390>
 8004128:	231b      	movs	r3, #27
 800412a:	2220      	movs	r2, #32
 800412c:	189b      	adds	r3, r3, r2
 800412e:	19db      	adds	r3, r3, r7
 8004130:	2204      	movs	r2, #4
 8004132:	701a      	strb	r2, [r3, #0]
 8004134:	e070      	b.n	8004218 <UART_SetConfig+0x390>
 8004136:	231b      	movs	r3, #27
 8004138:	2220      	movs	r2, #32
 800413a:	189b      	adds	r3, r3, r2
 800413c:	19db      	adds	r3, r3, r7
 800413e:	2208      	movs	r2, #8
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	e069      	b.n	8004218 <UART_SetConfig+0x390>
 8004144:	231b      	movs	r3, #27
 8004146:	2220      	movs	r2, #32
 8004148:	189b      	adds	r3, r3, r2
 800414a:	19db      	adds	r3, r3, r7
 800414c:	2210      	movs	r2, #16
 800414e:	701a      	strb	r2, [r3, #0]
 8004150:	e062      	b.n	8004218 <UART_SetConfig+0x390>
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a1d      	ldr	r2, [pc, #116]	; (80041cc <UART_SetConfig+0x344>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d157      	bne.n	800420c <UART_SetConfig+0x384>
 800415c:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <UART_SetConfig+0x350>)
 800415e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004160:	23c0      	movs	r3, #192	; 0xc0
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4013      	ands	r3, r2
 8004166:	22c0      	movs	r2, #192	; 0xc0
 8004168:	0092      	lsls	r2, r2, #2
 800416a:	4293      	cmp	r3, r2
 800416c:	d040      	beq.n	80041f0 <UART_SetConfig+0x368>
 800416e:	22c0      	movs	r2, #192	; 0xc0
 8004170:	0092      	lsls	r2, r2, #2
 8004172:	4293      	cmp	r3, r2
 8004174:	d843      	bhi.n	80041fe <UART_SetConfig+0x376>
 8004176:	2280      	movs	r2, #128	; 0x80
 8004178:	0092      	lsls	r2, r2, #2
 800417a:	4293      	cmp	r3, r2
 800417c:	d011      	beq.n	80041a2 <UART_SetConfig+0x31a>
 800417e:	2280      	movs	r2, #128	; 0x80
 8004180:	0092      	lsls	r2, r2, #2
 8004182:	4293      	cmp	r3, r2
 8004184:	d83b      	bhi.n	80041fe <UART_SetConfig+0x376>
 8004186:	2b00      	cmp	r3, #0
 8004188:	d004      	beq.n	8004194 <UART_SetConfig+0x30c>
 800418a:	2280      	movs	r2, #128	; 0x80
 800418c:	0052      	lsls	r2, r2, #1
 800418e:	4293      	cmp	r3, r2
 8004190:	d00e      	beq.n	80041b0 <UART_SetConfig+0x328>
 8004192:	e034      	b.n	80041fe <UART_SetConfig+0x376>
 8004194:	231b      	movs	r3, #27
 8004196:	2220      	movs	r2, #32
 8004198:	189b      	adds	r3, r3, r2
 800419a:	19db      	adds	r3, r3, r7
 800419c:	2200      	movs	r2, #0
 800419e:	701a      	strb	r2, [r3, #0]
 80041a0:	e03a      	b.n	8004218 <UART_SetConfig+0x390>
 80041a2:	231b      	movs	r3, #27
 80041a4:	2220      	movs	r2, #32
 80041a6:	189b      	adds	r3, r3, r2
 80041a8:	19db      	adds	r3, r3, r7
 80041aa:	2202      	movs	r2, #2
 80041ac:	701a      	strb	r2, [r3, #0]
 80041ae:	e033      	b.n	8004218 <UART_SetConfig+0x390>
 80041b0:	231b      	movs	r3, #27
 80041b2:	2220      	movs	r2, #32
 80041b4:	189b      	adds	r3, r3, r2
 80041b6:	19db      	adds	r3, r3, r7
 80041b8:	2204      	movs	r2, #4
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	e02c      	b.n	8004218 <UART_SetConfig+0x390>
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	cfff69f3 	.word	0xcfff69f3
 80041c4:	ffffcfff 	.word	0xffffcfff
 80041c8:	40008000 	.word	0x40008000
 80041cc:	40008400 	.word	0x40008400
 80041d0:	11fff4ff 	.word	0x11fff4ff
 80041d4:	40013800 	.word	0x40013800
 80041d8:	40021000 	.word	0x40021000
 80041dc:	40004400 	.word	0x40004400
 80041e0:	40004800 	.word	0x40004800
 80041e4:	40004c00 	.word	0x40004c00
 80041e8:	40005000 	.word	0x40005000
 80041ec:	40013c00 	.word	0x40013c00
 80041f0:	231b      	movs	r3, #27
 80041f2:	2220      	movs	r2, #32
 80041f4:	189b      	adds	r3, r3, r2
 80041f6:	19db      	adds	r3, r3, r7
 80041f8:	2208      	movs	r2, #8
 80041fa:	701a      	strb	r2, [r3, #0]
 80041fc:	e00c      	b.n	8004218 <UART_SetConfig+0x390>
 80041fe:	231b      	movs	r3, #27
 8004200:	2220      	movs	r2, #32
 8004202:	189b      	adds	r3, r3, r2
 8004204:	19db      	adds	r3, r3, r7
 8004206:	2210      	movs	r2, #16
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	e005      	b.n	8004218 <UART_SetConfig+0x390>
 800420c:	231b      	movs	r3, #27
 800420e:	2220      	movs	r2, #32
 8004210:	189b      	adds	r3, r3, r2
 8004212:	19db      	adds	r3, r3, r7
 8004214:	2210      	movs	r2, #16
 8004216:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4ac1      	ldr	r2, [pc, #772]	; (8004524 <UART_SetConfig+0x69c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d005      	beq.n	800422e <UART_SetConfig+0x3a6>
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4ac0      	ldr	r2, [pc, #768]	; (8004528 <UART_SetConfig+0x6a0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d000      	beq.n	800422e <UART_SetConfig+0x3a6>
 800422c:	e093      	b.n	8004356 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800422e:	231b      	movs	r3, #27
 8004230:	2220      	movs	r2, #32
 8004232:	189b      	adds	r3, r3, r2
 8004234:	19db      	adds	r3, r3, r7
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b08      	cmp	r3, #8
 800423a:	d015      	beq.n	8004268 <UART_SetConfig+0x3e0>
 800423c:	dc18      	bgt.n	8004270 <UART_SetConfig+0x3e8>
 800423e:	2b04      	cmp	r3, #4
 8004240:	d00d      	beq.n	800425e <UART_SetConfig+0x3d6>
 8004242:	dc15      	bgt.n	8004270 <UART_SetConfig+0x3e8>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <UART_SetConfig+0x3c6>
 8004248:	2b02      	cmp	r3, #2
 800424a:	d005      	beq.n	8004258 <UART_SetConfig+0x3d0>
 800424c:	e010      	b.n	8004270 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800424e:	f7fe fec3 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8004252:	0003      	movs	r3, r0
 8004254:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004256:	e014      	b.n	8004282 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004258:	4bb4      	ldr	r3, [pc, #720]	; (800452c <UART_SetConfig+0x6a4>)
 800425a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800425c:	e011      	b.n	8004282 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800425e:	f7fe fe2f 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 8004262:	0003      	movs	r3, r0
 8004264:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004266:	e00c      	b.n	8004282 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	021b      	lsls	r3, r3, #8
 800426c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800426e:	e008      	b.n	8004282 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004274:	231a      	movs	r3, #26
 8004276:	2220      	movs	r2, #32
 8004278:	189b      	adds	r3, r3, r2
 800427a:	19db      	adds	r3, r3, r7
 800427c:	2201      	movs	r2, #1
 800427e:	701a      	strb	r2, [r3, #0]
        break;
 8004280:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004284:	2b00      	cmp	r3, #0
 8004286:	d100      	bne.n	800428a <UART_SetConfig+0x402>
 8004288:	e135      	b.n	80044f6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800428e:	4ba8      	ldr	r3, [pc, #672]	; (8004530 <UART_SetConfig+0x6a8>)
 8004290:	0052      	lsls	r2, r2, #1
 8004292:	5ad3      	ldrh	r3, [r2, r3]
 8004294:	0019      	movs	r1, r3
 8004296:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004298:	f7fb ff46 	bl	8000128 <__udivsi3>
 800429c:	0003      	movs	r3, r0
 800429e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	0013      	movs	r3, r2
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	189b      	adds	r3, r3, r2
 80042aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d305      	bcc.n	80042bc <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d906      	bls.n	80042ca <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80042bc:	231a      	movs	r3, #26
 80042be:	2220      	movs	r2, #32
 80042c0:	189b      	adds	r3, r3, r2
 80042c2:	19db      	adds	r3, r3, r7
 80042c4:	2201      	movs	r2, #1
 80042c6:	701a      	strb	r2, [r3, #0]
 80042c8:	e044      	b.n	8004354 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042d6:	4b96      	ldr	r3, [pc, #600]	; (8004530 <UART_SetConfig+0x6a8>)
 80042d8:	0052      	lsls	r2, r2, #1
 80042da:	5ad3      	ldrh	r3, [r2, r3]
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	69b8      	ldr	r0, [r7, #24]
 80042e8:	69f9      	ldr	r1, [r7, #28]
 80042ea:	f7fc f893 	bl	8000414 <__aeabi_uldivmod>
 80042ee:	0002      	movs	r2, r0
 80042f0:	000b      	movs	r3, r1
 80042f2:	0e11      	lsrs	r1, r2, #24
 80042f4:	021d      	lsls	r5, r3, #8
 80042f6:	430d      	orrs	r5, r1
 80042f8:	0214      	lsls	r4, r2, #8
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	085b      	lsrs	r3, r3, #1
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68b8      	ldr	r0, [r7, #8]
 8004308:	68f9      	ldr	r1, [r7, #12]
 800430a:	1900      	adds	r0, r0, r4
 800430c:	4169      	adcs	r1, r5
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	2300      	movs	r3, #0
 8004316:	607b      	str	r3, [r7, #4]
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f7fc f87a 	bl	8000414 <__aeabi_uldivmod>
 8004320:	0002      	movs	r2, r0
 8004322:	000b      	movs	r3, r1
 8004324:	0013      	movs	r3, r2
 8004326:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432a:	23c0      	movs	r3, #192	; 0xc0
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	429a      	cmp	r2, r3
 8004330:	d309      	bcc.n	8004346 <UART_SetConfig+0x4be>
 8004332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	035b      	lsls	r3, r3, #13
 8004338:	429a      	cmp	r2, r3
 800433a:	d204      	bcs.n	8004346 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004342:	60da      	str	r2, [r3, #12]
 8004344:	e006      	b.n	8004354 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004346:	231a      	movs	r3, #26
 8004348:	2220      	movs	r2, #32
 800434a:	189b      	adds	r3, r3, r2
 800434c:	19db      	adds	r3, r3, r7
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004352:	e0d0      	b.n	80044f6 <UART_SetConfig+0x66e>
 8004354:	e0cf      	b.n	80044f6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	69da      	ldr	r2, [r3, #28]
 800435a:	2380      	movs	r3, #128	; 0x80
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	429a      	cmp	r2, r3
 8004360:	d000      	beq.n	8004364 <UART_SetConfig+0x4dc>
 8004362:	e070      	b.n	8004446 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8004364:	231b      	movs	r3, #27
 8004366:	2220      	movs	r2, #32
 8004368:	189b      	adds	r3, r3, r2
 800436a:	19db      	adds	r3, r3, r7
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b08      	cmp	r3, #8
 8004370:	d015      	beq.n	800439e <UART_SetConfig+0x516>
 8004372:	dc18      	bgt.n	80043a6 <UART_SetConfig+0x51e>
 8004374:	2b04      	cmp	r3, #4
 8004376:	d00d      	beq.n	8004394 <UART_SetConfig+0x50c>
 8004378:	dc15      	bgt.n	80043a6 <UART_SetConfig+0x51e>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <UART_SetConfig+0x4fc>
 800437e:	2b02      	cmp	r3, #2
 8004380:	d005      	beq.n	800438e <UART_SetConfig+0x506>
 8004382:	e010      	b.n	80043a6 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004384:	f7fe fe28 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8004388:	0003      	movs	r3, r0
 800438a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800438c:	e014      	b.n	80043b8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800438e:	4b67      	ldr	r3, [pc, #412]	; (800452c <UART_SetConfig+0x6a4>)
 8004390:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004392:	e011      	b.n	80043b8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004394:	f7fe fd94 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 8004398:	0003      	movs	r3, r0
 800439a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800439c:	e00c      	b.n	80043b8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800439e:	2380      	movs	r3, #128	; 0x80
 80043a0:	021b      	lsls	r3, r3, #8
 80043a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043a4:	e008      	b.n	80043b8 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80043aa:	231a      	movs	r3, #26
 80043ac:	2220      	movs	r2, #32
 80043ae:	189b      	adds	r3, r3, r2
 80043b0:	19db      	adds	r3, r3, r7
 80043b2:	2201      	movs	r2, #1
 80043b4:	701a      	strb	r2, [r3, #0]
        break;
 80043b6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d100      	bne.n	80043c0 <UART_SetConfig+0x538>
 80043be:	e09a      	b.n	80044f6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043c4:	4b5a      	ldr	r3, [pc, #360]	; (8004530 <UART_SetConfig+0x6a8>)
 80043c6:	0052      	lsls	r2, r2, #1
 80043c8:	5ad3      	ldrh	r3, [r2, r3]
 80043ca:	0019      	movs	r1, r3
 80043cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80043ce:	f7fb feab 	bl	8000128 <__udivsi3>
 80043d2:	0003      	movs	r3, r0
 80043d4:	005a      	lsls	r2, r3, #1
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	18d2      	adds	r2, r2, r3
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	0019      	movs	r1, r3
 80043e4:	0010      	movs	r0, r2
 80043e6:	f7fb fe9f 	bl	8000128 <__udivsi3>
 80043ea:	0003      	movs	r3, r0
 80043ec:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f0:	2b0f      	cmp	r3, #15
 80043f2:	d921      	bls.n	8004438 <UART_SetConfig+0x5b0>
 80043f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f6:	2380      	movs	r3, #128	; 0x80
 80043f8:	025b      	lsls	r3, r3, #9
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d21c      	bcs.n	8004438 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	b29a      	uxth	r2, r3
 8004402:	200e      	movs	r0, #14
 8004404:	2420      	movs	r4, #32
 8004406:	1903      	adds	r3, r0, r4
 8004408:	19db      	adds	r3, r3, r7
 800440a:	210f      	movs	r1, #15
 800440c:	438a      	bics	r2, r1
 800440e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	085b      	lsrs	r3, r3, #1
 8004414:	b29b      	uxth	r3, r3
 8004416:	2207      	movs	r2, #7
 8004418:	4013      	ands	r3, r2
 800441a:	b299      	uxth	r1, r3
 800441c:	1903      	adds	r3, r0, r4
 800441e:	19db      	adds	r3, r3, r7
 8004420:	1902      	adds	r2, r0, r4
 8004422:	19d2      	adds	r2, r2, r7
 8004424:	8812      	ldrh	r2, [r2, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	1902      	adds	r2, r0, r4
 8004430:	19d2      	adds	r2, r2, r7
 8004432:	8812      	ldrh	r2, [r2, #0]
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	e05e      	b.n	80044f6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004438:	231a      	movs	r3, #26
 800443a:	2220      	movs	r2, #32
 800443c:	189b      	adds	r3, r3, r2
 800443e:	19db      	adds	r3, r3, r7
 8004440:	2201      	movs	r2, #1
 8004442:	701a      	strb	r2, [r3, #0]
 8004444:	e057      	b.n	80044f6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004446:	231b      	movs	r3, #27
 8004448:	2220      	movs	r2, #32
 800444a:	189b      	adds	r3, r3, r2
 800444c:	19db      	adds	r3, r3, r7
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b08      	cmp	r3, #8
 8004452:	d015      	beq.n	8004480 <UART_SetConfig+0x5f8>
 8004454:	dc18      	bgt.n	8004488 <UART_SetConfig+0x600>
 8004456:	2b04      	cmp	r3, #4
 8004458:	d00d      	beq.n	8004476 <UART_SetConfig+0x5ee>
 800445a:	dc15      	bgt.n	8004488 <UART_SetConfig+0x600>
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <UART_SetConfig+0x5de>
 8004460:	2b02      	cmp	r3, #2
 8004462:	d005      	beq.n	8004470 <UART_SetConfig+0x5e8>
 8004464:	e010      	b.n	8004488 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004466:	f7fe fdb7 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 800446a:	0003      	movs	r3, r0
 800446c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800446e:	e014      	b.n	800449a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004470:	4b2e      	ldr	r3, [pc, #184]	; (800452c <UART_SetConfig+0x6a4>)
 8004472:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004474:	e011      	b.n	800449a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004476:	f7fe fd23 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 800447a:	0003      	movs	r3, r0
 800447c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800447e:	e00c      	b.n	800449a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004480:	2380      	movs	r3, #128	; 0x80
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004486:	e008      	b.n	800449a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800448c:	231a      	movs	r3, #26
 800448e:	2220      	movs	r2, #32
 8004490:	189b      	adds	r3, r3, r2
 8004492:	19db      	adds	r3, r3, r7
 8004494:	2201      	movs	r2, #1
 8004496:	701a      	strb	r2, [r3, #0]
        break;
 8004498:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800449a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449c:	2b00      	cmp	r3, #0
 800449e:	d02a      	beq.n	80044f6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044a4:	4b22      	ldr	r3, [pc, #136]	; (8004530 <UART_SetConfig+0x6a8>)
 80044a6:	0052      	lsls	r2, r2, #1
 80044a8:	5ad3      	ldrh	r3, [r2, r3]
 80044aa:	0019      	movs	r1, r3
 80044ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044ae:	f7fb fe3b 	bl	8000128 <__udivsi3>
 80044b2:	0003      	movs	r3, r0
 80044b4:	001a      	movs	r2, r3
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	18d2      	adds	r2, r2, r3
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	0019      	movs	r1, r3
 80044c4:	0010      	movs	r0, r2
 80044c6:	f7fb fe2f 	bl	8000128 <__udivsi3>
 80044ca:	0003      	movs	r3, r0
 80044cc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	2b0f      	cmp	r3, #15
 80044d2:	d90a      	bls.n	80044ea <UART_SetConfig+0x662>
 80044d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	025b      	lsls	r3, r3, #9
 80044da:	429a      	cmp	r2, r3
 80044dc:	d205      	bcs.n	80044ea <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60da      	str	r2, [r3, #12]
 80044e8:	e005      	b.n	80044f6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80044ea:	231a      	movs	r3, #26
 80044ec:	2220      	movs	r2, #32
 80044ee:	189b      	adds	r3, r3, r2
 80044f0:	19db      	adds	r3, r3, r7
 80044f2:	2201      	movs	r2, #1
 80044f4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	226a      	movs	r2, #106	; 0x6a
 80044fa:	2101      	movs	r1, #1
 80044fc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	2268      	movs	r2, #104	; 0x68
 8004502:	2101      	movs	r1, #1
 8004504:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	2200      	movs	r2, #0
 800450a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	2200      	movs	r2, #0
 8004510:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004512:	231a      	movs	r3, #26
 8004514:	2220      	movs	r2, #32
 8004516:	189b      	adds	r3, r3, r2
 8004518:	19db      	adds	r3, r3, r7
 800451a:	781b      	ldrb	r3, [r3, #0]
}
 800451c:	0018      	movs	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	b010      	add	sp, #64	; 0x40
 8004522:	bdb0      	pop	{r4, r5, r7, pc}
 8004524:	40008000 	.word	0x40008000
 8004528:	40008400 	.word	0x40008400
 800452c:	00f42400 	.word	0x00f42400
 8004530:	08007020 	.word	0x08007020

08004534 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	2201      	movs	r2, #1
 8004542:	4013      	ands	r3, r2
 8004544:	d00b      	beq.n	800455e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	4a4a      	ldr	r2, [pc, #296]	; (8004678 <UART_AdvFeatureConfig+0x144>)
 800454e:	4013      	ands	r3, r2
 8004550:	0019      	movs	r1, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	2202      	movs	r2, #2
 8004564:	4013      	ands	r3, r2
 8004566:	d00b      	beq.n	8004580 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	4a43      	ldr	r2, [pc, #268]	; (800467c <UART_AdvFeatureConfig+0x148>)
 8004570:	4013      	ands	r3, r2
 8004572:	0019      	movs	r1, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004584:	2204      	movs	r2, #4
 8004586:	4013      	ands	r3, r2
 8004588:	d00b      	beq.n	80045a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	4a3b      	ldr	r2, [pc, #236]	; (8004680 <UART_AdvFeatureConfig+0x14c>)
 8004592:	4013      	ands	r3, r2
 8004594:	0019      	movs	r1, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a6:	2208      	movs	r2, #8
 80045a8:	4013      	ands	r3, r2
 80045aa:	d00b      	beq.n	80045c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	4a34      	ldr	r2, [pc, #208]	; (8004684 <UART_AdvFeatureConfig+0x150>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	0019      	movs	r1, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c8:	2210      	movs	r2, #16
 80045ca:	4013      	ands	r3, r2
 80045cc:	d00b      	beq.n	80045e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	4a2c      	ldr	r2, [pc, #176]	; (8004688 <UART_AdvFeatureConfig+0x154>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	0019      	movs	r1, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	2220      	movs	r2, #32
 80045ec:	4013      	ands	r3, r2
 80045ee:	d00b      	beq.n	8004608 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	4a25      	ldr	r2, [pc, #148]	; (800468c <UART_AdvFeatureConfig+0x158>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	0019      	movs	r1, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	2240      	movs	r2, #64	; 0x40
 800460e:	4013      	ands	r3, r2
 8004610:	d01d      	beq.n	800464e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4a1d      	ldr	r2, [pc, #116]	; (8004690 <UART_AdvFeatureConfig+0x15c>)
 800461a:	4013      	ands	r3, r2
 800461c:	0019      	movs	r1, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	035b      	lsls	r3, r3, #13
 8004632:	429a      	cmp	r2, r3
 8004634:	d10b      	bne.n	800464e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	4a15      	ldr	r2, [pc, #84]	; (8004694 <UART_AdvFeatureConfig+0x160>)
 800463e:	4013      	ands	r3, r2
 8004640:	0019      	movs	r1, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	2280      	movs	r2, #128	; 0x80
 8004654:	4013      	ands	r3, r2
 8004656:	d00b      	beq.n	8004670 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	4a0e      	ldr	r2, [pc, #56]	; (8004698 <UART_AdvFeatureConfig+0x164>)
 8004660:	4013      	ands	r3, r2
 8004662:	0019      	movs	r1, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	605a      	str	r2, [r3, #4]
  }
}
 8004670:	46c0      	nop			; (mov r8, r8)
 8004672:	46bd      	mov	sp, r7
 8004674:	b002      	add	sp, #8
 8004676:	bd80      	pop	{r7, pc}
 8004678:	fffdffff 	.word	0xfffdffff
 800467c:	fffeffff 	.word	0xfffeffff
 8004680:	fffbffff 	.word	0xfffbffff
 8004684:	ffff7fff 	.word	0xffff7fff
 8004688:	ffffefff 	.word	0xffffefff
 800468c:	ffffdfff 	.word	0xffffdfff
 8004690:	ffefffff 	.word	0xffefffff
 8004694:	ff9fffff 	.word	0xff9fffff
 8004698:	fff7ffff 	.word	0xfff7ffff

0800469c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af02      	add	r7, sp, #8
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2290      	movs	r2, #144	; 0x90
 80046a8:	2100      	movs	r1, #0
 80046aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046ac:	f7fd fb20 	bl	8001cf0 <HAL_GetTick>
 80046b0:	0003      	movs	r3, r0
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2208      	movs	r2, #8
 80046bc:	4013      	ands	r3, r2
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d10c      	bne.n	80046dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2280      	movs	r2, #128	; 0x80
 80046c6:	0391      	lsls	r1, r2, #14
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	4a1a      	ldr	r2, [pc, #104]	; (8004734 <UART_CheckIdleState+0x98>)
 80046cc:	9200      	str	r2, [sp, #0]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f000 f832 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 80046d4:	1e03      	subs	r3, r0, #0
 80046d6:	d001      	beq.n	80046dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e026      	b.n	800472a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2204      	movs	r2, #4
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d10c      	bne.n	8004704 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2280      	movs	r2, #128	; 0x80
 80046ee:	03d1      	lsls	r1, r2, #15
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	4a10      	ldr	r2, [pc, #64]	; (8004734 <UART_CheckIdleState+0x98>)
 80046f4:	9200      	str	r2, [sp, #0]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f000 f81e 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 80046fc:	1e03      	subs	r3, r0, #0
 80046fe:	d001      	beq.n	8004704 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e012      	b.n	800472a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2288      	movs	r2, #136	; 0x88
 8004708:	2120      	movs	r1, #32
 800470a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	228c      	movs	r2, #140	; 0x8c
 8004710:	2120      	movs	r1, #32
 8004712:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2284      	movs	r2, #132	; 0x84
 8004724:	2100      	movs	r1, #0
 8004726:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	0018      	movs	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	b004      	add	sp, #16
 8004730:	bd80      	pop	{r7, pc}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	01ffffff 	.word	0x01ffffff

08004738 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b094      	sub	sp, #80	; 0x50
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	1dfb      	adds	r3, r7, #7
 8004746:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004748:	e0a7      	b.n	800489a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800474c:	3301      	adds	r3, #1
 800474e:	d100      	bne.n	8004752 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004750:	e0a3      	b.n	800489a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004752:	f7fd facd 	bl	8001cf0 <HAL_GetTick>
 8004756:	0002      	movs	r2, r0
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800475e:	429a      	cmp	r2, r3
 8004760:	d302      	bcc.n	8004768 <UART_WaitOnFlagUntilTimeout+0x30>
 8004762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004764:	2b00      	cmp	r3, #0
 8004766:	d13f      	bne.n	80047e8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004768:	f3ef 8310 	mrs	r3, PRIMASK
 800476c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004770:	647b      	str	r3, [r7, #68]	; 0x44
 8004772:	2301      	movs	r3, #1
 8004774:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004778:	f383 8810 	msr	PRIMASK, r3
}
 800477c:	46c0      	nop			; (mov r8, r8)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	494e      	ldr	r1, [pc, #312]	; (80048c4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800478a:	400a      	ands	r2, r1
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004790:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	f383 8810 	msr	PRIMASK, r3
}
 8004798:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800479a:	f3ef 8310 	mrs	r3, PRIMASK
 800479e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80047a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a2:	643b      	str	r3, [r7, #64]	; 0x40
 80047a4:	2301      	movs	r3, #1
 80047a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047aa:	f383 8810 	msr	PRIMASK, r3
}
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2101      	movs	r1, #1
 80047bc:	438a      	bics	r2, r1
 80047be:	609a      	str	r2, [r3, #8]
 80047c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c6:	f383 8810 	msr	PRIMASK, r3
}
 80047ca:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2288      	movs	r2, #136	; 0x88
 80047d0:	2120      	movs	r1, #32
 80047d2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	228c      	movs	r2, #140	; 0x8c
 80047d8:	2120      	movs	r1, #32
 80047da:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2284      	movs	r2, #132	; 0x84
 80047e0:	2100      	movs	r1, #0
 80047e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e069      	b.n	80048bc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2204      	movs	r2, #4
 80047f0:	4013      	ands	r3, r2
 80047f2:	d052      	beq.n	800489a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69da      	ldr	r2, [r3, #28]
 80047fa:	2380      	movs	r3, #128	; 0x80
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	401a      	ands	r2, r3
 8004800:	2380      	movs	r3, #128	; 0x80
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	429a      	cmp	r2, r3
 8004806:	d148      	bne.n	800489a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2280      	movs	r2, #128	; 0x80
 800480e:	0112      	lsls	r2, r2, #4
 8004810:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004812:	f3ef 8310 	mrs	r3, PRIMASK
 8004816:	613b      	str	r3, [r7, #16]
  return(result);
 8004818:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800481a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800481c:	2301      	movs	r3, #1
 800481e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f383 8810 	msr	PRIMASK, r3
}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4924      	ldr	r1, [pc, #144]	; (80048c4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004834:	400a      	ands	r2, r1
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800483a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	f383 8810 	msr	PRIMASK, r3
}
 8004842:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004844:	f3ef 8310 	mrs	r3, PRIMASK
 8004848:	61fb      	str	r3, [r7, #28]
  return(result);
 800484a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484c:	64bb      	str	r3, [r7, #72]	; 0x48
 800484e:	2301      	movs	r3, #1
 8004850:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	f383 8810 	msr	PRIMASK, r3
}
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2101      	movs	r1, #1
 8004866:	438a      	bics	r2, r1
 8004868:	609a      	str	r2, [r3, #8]
 800486a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	f383 8810 	msr	PRIMASK, r3
}
 8004874:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2288      	movs	r2, #136	; 0x88
 800487a:	2120      	movs	r1, #32
 800487c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	228c      	movs	r2, #140	; 0x8c
 8004882:	2120      	movs	r1, #32
 8004884:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2290      	movs	r2, #144	; 0x90
 800488a:	2120      	movs	r1, #32
 800488c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2284      	movs	r2, #132	; 0x84
 8004892:	2100      	movs	r1, #0
 8004894:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e010      	b.n	80048bc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	4013      	ands	r3, r2
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	425a      	negs	r2, r3
 80048aa:	4153      	adcs	r3, r2
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	001a      	movs	r2, r3
 80048b0:	1dfb      	adds	r3, r7, #7
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d100      	bne.n	80048ba <UART_WaitOnFlagUntilTimeout+0x182>
 80048b8:	e747      	b.n	800474a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	0018      	movs	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	b014      	add	sp, #80	; 0x50
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	fffffe5f 	.word	0xfffffe5f

080048c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2284      	movs	r2, #132	; 0x84
 80048d4:	5c9b      	ldrb	r3, [r3, r2]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_UARTEx_DisableFifoMode+0x16>
 80048da:	2302      	movs	r3, #2
 80048dc:	e027      	b.n	800492e <HAL_UARTEx_DisableFifoMode+0x66>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2284      	movs	r2, #132	; 0x84
 80048e2:	2101      	movs	r1, #1
 80048e4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2288      	movs	r2, #136	; 0x88
 80048ea:	2124      	movs	r1, #36	; 0x24
 80048ec:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2101      	movs	r1, #1
 8004902:	438a      	bics	r2, r1
 8004904:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4a0b      	ldr	r2, [pc, #44]	; (8004938 <HAL_UARTEx_DisableFifoMode+0x70>)
 800490a:	4013      	ands	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2288      	movs	r2, #136	; 0x88
 8004920:	2120      	movs	r1, #32
 8004922:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2284      	movs	r2, #132	; 0x84
 8004928:	2100      	movs	r1, #0
 800492a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	0018      	movs	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	b004      	add	sp, #16
 8004934:	bd80      	pop	{r7, pc}
 8004936:	46c0      	nop			; (mov r8, r8)
 8004938:	dfffffff 	.word	0xdfffffff

0800493c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2284      	movs	r2, #132	; 0x84
 800494a:	5c9b      	ldrb	r3, [r3, r2]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004950:	2302      	movs	r3, #2
 8004952:	e02e      	b.n	80049b2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2284      	movs	r2, #132	; 0x84
 8004958:	2101      	movs	r1, #1
 800495a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2288      	movs	r2, #136	; 0x88
 8004960:	2124      	movs	r1, #36	; 0x24
 8004962:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2101      	movs	r1, #1
 8004978:	438a      	bics	r2, r1
 800497a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	08d9      	lsrs	r1, r3, #3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	0018      	movs	r0, r3
 8004994:	f000 f854 	bl	8004a40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2288      	movs	r2, #136	; 0x88
 80049a4:	2120      	movs	r1, #32
 80049a6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2284      	movs	r2, #132	; 0x84
 80049ac:	2100      	movs	r1, #0
 80049ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	0018      	movs	r0, r3
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b004      	add	sp, #16
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2284      	movs	r2, #132	; 0x84
 80049ca:	5c9b      	ldrb	r3, [r3, r2]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e02f      	b.n	8004a34 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2284      	movs	r2, #132	; 0x84
 80049d8:	2101      	movs	r1, #1
 80049da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2288      	movs	r2, #136	; 0x88
 80049e0:	2124      	movs	r1, #36	; 0x24
 80049e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2101      	movs	r1, #1
 80049f8:	438a      	bics	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	4a0e      	ldr	r2, [pc, #56]	; (8004a3c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	0019      	movs	r1, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	0018      	movs	r0, r3
 8004a16:	f000 f813 	bl	8004a40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2288      	movs	r2, #136	; 0x88
 8004a26:	2120      	movs	r1, #32
 8004a28:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2284      	movs	r2, #132	; 0x84
 8004a2e:	2100      	movs	r1, #0
 8004a30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	0018      	movs	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b004      	add	sp, #16
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	f1ffffff 	.word	0xf1ffffff

08004a40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d108      	bne.n	8004a62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	226a      	movs	r2, #106	; 0x6a
 8004a54:	2101      	movs	r1, #1
 8004a56:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2268      	movs	r2, #104	; 0x68
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a60:	e043      	b.n	8004aea <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a62:	260f      	movs	r6, #15
 8004a64:	19bb      	adds	r3, r7, r6
 8004a66:	2208      	movs	r2, #8
 8004a68:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a6a:	200e      	movs	r0, #14
 8004a6c:	183b      	adds	r3, r7, r0
 8004a6e:	2208      	movs	r2, #8
 8004a70:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	0e5b      	lsrs	r3, r3, #25
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	240d      	movs	r4, #13
 8004a7e:	193b      	adds	r3, r7, r4
 8004a80:	2107      	movs	r1, #7
 8004a82:	400a      	ands	r2, r1
 8004a84:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	0f5b      	lsrs	r3, r3, #29
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	250c      	movs	r5, #12
 8004a92:	197b      	adds	r3, r7, r5
 8004a94:	2107      	movs	r1, #7
 8004a96:	400a      	ands	r2, r1
 8004a98:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a9a:	183b      	adds	r3, r7, r0
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	197a      	adds	r2, r7, r5
 8004aa0:	7812      	ldrb	r2, [r2, #0]
 8004aa2:	4914      	ldr	r1, [pc, #80]	; (8004af4 <UARTEx_SetNbDataToProcess+0xb4>)
 8004aa4:	5c8a      	ldrb	r2, [r1, r2]
 8004aa6:	435a      	muls	r2, r3
 8004aa8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004aaa:	197b      	adds	r3, r7, r5
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	4a12      	ldr	r2, [pc, #72]	; (8004af8 <UARTEx_SetNbDataToProcess+0xb8>)
 8004ab0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ab2:	0019      	movs	r1, r3
 8004ab4:	f7fb fbc2 	bl	800023c <__divsi3>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	b299      	uxth	r1, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	226a      	movs	r2, #106	; 0x6a
 8004ac0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ac2:	19bb      	adds	r3, r7, r6
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	193a      	adds	r2, r7, r4
 8004ac8:	7812      	ldrb	r2, [r2, #0]
 8004aca:	490a      	ldr	r1, [pc, #40]	; (8004af4 <UARTEx_SetNbDataToProcess+0xb4>)
 8004acc:	5c8a      	ldrb	r2, [r1, r2]
 8004ace:	435a      	muls	r2, r3
 8004ad0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ad2:	193b      	adds	r3, r7, r4
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	4a08      	ldr	r2, [pc, #32]	; (8004af8 <UARTEx_SetNbDataToProcess+0xb8>)
 8004ad8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ada:	0019      	movs	r1, r3
 8004adc:	f7fb fbae 	bl	800023c <__divsi3>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	b299      	uxth	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2268      	movs	r2, #104	; 0x68
 8004ae8:	5299      	strh	r1, [r3, r2]
}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b005      	add	sp, #20
 8004af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	08007038 	.word	0x08007038
 8004af8:	08007040 	.word	0x08007040

08004afc <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8004afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004afe:	b08d      	sub	sp, #52	; 0x34
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	0004      	movs	r4, r0
 8004b04:	0008      	movs	r0, r1
 8004b06:	0011      	movs	r1, r2
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	1dfb      	adds	r3, r7, #7
 8004b0c:	1c22      	adds	r2, r4, #0
 8004b0e:	701a      	strb	r2, [r3, #0]
 8004b10:	1dbb      	adds	r3, r7, #6
 8004b12:	1c02      	adds	r2, r0, #0
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	1d7b      	adds	r3, r7, #5
 8004b18:	1c0a      	adds	r2, r1, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8004b1c:	2514      	movs	r5, #20
 8004b1e:	197b      	adds	r3, r7, r5
 8004b20:	1dfa      	adds	r2, r7, #7
 8004b22:	7812      	ldrb	r2, [r2, #0]
 8004b24:	701a      	strb	r2, [r3, #0]
  cp.privacy_enabled = privacy_enabled;
 8004b26:	197b      	adds	r3, r7, r5
 8004b28:	1dba      	adds	r2, r7, #6
 8004b2a:	7812      	ldrb	r2, [r2, #0]
 8004b2c:	705a      	strb	r2, [r3, #1]
  cp.device_name_char_len = device_name_char_len;
 8004b2e:	197b      	adds	r3, r7, r5
 8004b30:	1d7a      	adds	r2, r7, #5
 8004b32:	7812      	ldrb	r2, [r2, #0]
 8004b34:	709a      	strb	r2, [r3, #2]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004b36:	260c      	movs	r6, #12
 8004b38:	19bb      	adds	r3, r7, r6
 8004b3a:	2207      	movs	r2, #7
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f001 fab8 	bl	80060b4 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004b44:	2418      	movs	r4, #24
 8004b46:	193b      	adds	r3, r7, r4
 8004b48:	2218      	movs	r2, #24
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f001 fab1 	bl	80060b4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004b52:	0021      	movs	r1, r4
 8004b54:	187b      	adds	r3, r7, r1
 8004b56:	223f      	movs	r2, #63	; 0x3f
 8004b58:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GAP_INIT;
 8004b5a:	187b      	adds	r3, r7, r1
 8004b5c:	228a      	movs	r2, #138	; 0x8a
 8004b5e:	805a      	strh	r2, [r3, #2]
  rq.cparam = &cp;
 8004b60:	187b      	adds	r3, r7, r1
 8004b62:	197a      	adds	r2, r7, r5
 8004b64:	609a      	str	r2, [r3, #8]
  rq.clen = sizeof(cp);
 8004b66:	187b      	adds	r3, r7, r1
 8004b68:	2203      	movs	r2, #3
 8004b6a:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 8004b6c:	187b      	adds	r3, r7, r1
 8004b6e:	19ba      	adds	r2, r7, r6
 8004b70:	611a      	str	r2, [r3, #16]
  rq.rlen = GAP_INIT_RP_SIZE;
 8004b72:	187b      	adds	r3, r7, r1
 8004b74:	2207      	movs	r2, #7
 8004b76:	615a      	str	r2, [r3, #20]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004b78:	187b      	adds	r3, r7, r1
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f000 fdb9 	bl	80056f4 <hci_send_req>
 8004b82:	1e03      	subs	r3, r0, #0
 8004b84:	da01      	bge.n	8004b8a <aci_gap_init_IDB05A1+0x8e>
    return BLE_STATUS_TIMEOUT;
 8004b86:	23ff      	movs	r3, #255	; 0xff
 8004b88:	e01f      	b.n	8004bca <aci_gap_init_IDB05A1+0xce>
  
  if (resp.status) {
 8004b8a:	220c      	movs	r2, #12
 8004b8c:	18bb      	adds	r3, r7, r2
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <aci_gap_init_IDB05A1+0x9e>
    return resp.status;
 8004b94:	18bb      	adds	r3, r7, r2
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	e017      	b.n	8004bca <aci_gap_init_IDB05A1+0xce>
  }
  
  *service_handle = btohs(resp.service_handle);
 8004b9a:	210c      	movs	r1, #12
 8004b9c:	187b      	adds	r3, r7, r1
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	021b      	lsls	r3, r3, #8
 8004ba2:	0c1b      	lsrs	r3, r3, #16
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8004baa:	187b      	adds	r3, r7, r1
 8004bac:	78da      	ldrb	r2, [r3, #3]
 8004bae:	791b      	ldrb	r3, [r3, #4]
 8004bb0:	021b      	lsls	r3, r3, #8
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb8:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8004bba:	187b      	adds	r3, r7, r1
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	0c1b      	lsrs	r3, r3, #16
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bc6:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	0018      	movs	r0, r3
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	b00d      	add	sp, #52	; 0x34
 8004bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bd2 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8004bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bd4:	b095      	sub	sp, #84	; 0x54
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	0005      	movs	r5, r0
 8004bda:	000c      	movs	r4, r1
 8004bdc:	0010      	movs	r0, r2
 8004bde:	0019      	movs	r1, r3
 8004be0:	1dfb      	adds	r3, r7, #7
 8004be2:	1c2a      	adds	r2, r5, #0
 8004be4:	701a      	strb	r2, [r3, #0]
 8004be6:	1d3b      	adds	r3, r7, #4
 8004be8:	1c22      	adds	r2, r4, #0
 8004bea:	801a      	strh	r2, [r3, #0]
 8004bec:	1cbb      	adds	r3, r7, #2
 8004bee:	1c02      	adds	r2, r0, #0
 8004bf0:	801a      	strh	r2, [r3, #0]
 8004bf2:	1dbb      	adds	r3, r7, #6
 8004bf4:	1c0a      	adds	r2, r1, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8004bf8:	234f      	movs	r3, #79	; 0x4f
 8004bfa:	18fb      	adds	r3, r7, r3
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8004c00:	2364      	movs	r3, #100	; 0x64
 8004c02:	2108      	movs	r1, #8
 8004c04:	185b      	adds	r3, r3, r1
 8004c06:	19db      	adds	r3, r3, r7
 8004c08:	781a      	ldrb	r2, [r3, #0]
 8004c0a:	236c      	movs	r3, #108	; 0x6c
 8004c0c:	185b      	adds	r3, r3, r1
 8004c0e:	19db      	adds	r3, r3, r7
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	18d3      	adds	r3, r2, r3
 8004c14:	330e      	adds	r3, #14
 8004c16:	2b28      	cmp	r3, #40	; 0x28
 8004c18:	d901      	bls.n	8004c1e <aci_gap_set_discoverable+0x4c>
    return BLE_STATUS_INVALID_PARAMS;
 8004c1a:	2342      	movs	r3, #66	; 0x42
 8004c1c:	e0f0      	b.n	8004e00 <aci_gap_set_discoverable+0x22e>

  buffer[indx] = AdvType;
 8004c1e:	204f      	movs	r0, #79	; 0x4f
 8004c20:	183b      	adds	r3, r7, r0
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2508      	movs	r5, #8
 8004c26:	197a      	adds	r2, r7, r5
 8004c28:	1df9      	adds	r1, r7, #7
 8004c2a:	7809      	ldrb	r1, [r1, #0]
 8004c2c:	54d1      	strb	r1, [r2, r3]
  indx++;
 8004c2e:	0001      	movs	r1, r0
 8004c30:	187b      	adds	r3, r7, r1
 8004c32:	781a      	ldrb	r2, [r3, #0]
 8004c34:	187b      	adds	r3, r7, r1
 8004c36:	3201      	adds	r2, #1
 8004c38:	701a      	strb	r2, [r3, #0]
  
  AdvIntervMin = htobs(AdvIntervMin);
 8004c3a:	1d3b      	adds	r3, r7, #4
 8004c3c:	881a      	ldrh	r2, [r3, #0]
 8004c3e:	1d3b      	adds	r3, r7, #4
 8004c40:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8004c42:	000c      	movs	r4, r1
 8004c44:	187b      	adds	r3, r7, r1
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	197a      	adds	r2, r7, r5
 8004c4a:	18d3      	adds	r3, r2, r3
 8004c4c:	1d39      	adds	r1, r7, #4
 8004c4e:	2202      	movs	r2, #2
 8004c50:	0018      	movs	r0, r3
 8004c52:	f001 fa26 	bl	80060a2 <memcpy>
  indx +=  2;
 8004c56:	0021      	movs	r1, r4
 8004c58:	187b      	adds	r3, r7, r1
 8004c5a:	187a      	adds	r2, r7, r1
 8004c5c:	7812      	ldrb	r2, [r2, #0]
 8004c5e:	3202      	adds	r2, #2
 8004c60:	701a      	strb	r2, [r3, #0]
    
  AdvIntervMax = htobs(AdvIntervMax);
 8004c62:	1cbb      	adds	r3, r7, #2
 8004c64:	881a      	ldrh	r2, [r3, #0]
 8004c66:	1cbb      	adds	r3, r7, #2
 8004c68:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8004c6a:	000c      	movs	r4, r1
 8004c6c:	187b      	adds	r3, r7, r1
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	197a      	adds	r2, r7, r5
 8004c72:	18d3      	adds	r3, r2, r3
 8004c74:	1cb9      	adds	r1, r7, #2
 8004c76:	2202      	movs	r2, #2
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f001 fa12 	bl	80060a2 <memcpy>
  indx +=  2;
 8004c7e:	193b      	adds	r3, r7, r4
 8004c80:	193a      	adds	r2, r7, r4
 8004c82:	7812      	ldrb	r2, [r2, #0]
 8004c84:	3202      	adds	r2, #2
 8004c86:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = OwnAddrType;
 8004c88:	193b      	adds	r3, r7, r4
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	197a      	adds	r2, r7, r5
 8004c8e:	1db9      	adds	r1, r7, #6
 8004c90:	7809      	ldrb	r1, [r1, #0]
 8004c92:	54d1      	strb	r1, [r2, r3]
  indx++;
 8004c94:	193b      	adds	r3, r7, r4
 8004c96:	781a      	ldrb	r2, [r3, #0]
 8004c98:	193b      	adds	r3, r7, r4
 8004c9a:	3201      	adds	r2, #1
 8004c9c:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = AdvFilterPolicy;
 8004c9e:	193b      	adds	r3, r7, r4
 8004ca0:	781a      	ldrb	r2, [r3, #0]
 8004ca2:	1979      	adds	r1, r7, r5
 8004ca4:	2360      	movs	r3, #96	; 0x60
 8004ca6:	2008      	movs	r0, #8
 8004ca8:	181b      	adds	r3, r3, r0
 8004caa:	19db      	adds	r3, r3, r7
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	548b      	strb	r3, [r1, r2]
  indx++;
 8004cb0:	193b      	adds	r3, r7, r4
 8004cb2:	781a      	ldrb	r2, [r3, #0]
 8004cb4:	193b      	adds	r3, r7, r4
 8004cb6:	3201      	adds	r2, #1
 8004cb8:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = LocalNameLen;
 8004cba:	193b      	adds	r3, r7, r4
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	197a      	adds	r2, r7, r5
 8004cc0:	2664      	movs	r6, #100	; 0x64
 8004cc2:	1831      	adds	r1, r6, r0
 8004cc4:	19c9      	adds	r1, r1, r7
 8004cc6:	7809      	ldrb	r1, [r1, #0]
 8004cc8:	54d1      	strb	r1, [r2, r3]
  indx++;
 8004cca:	193b      	adds	r3, r7, r4
 8004ccc:	781a      	ldrb	r2, [r3, #0]
 8004cce:	193b      	adds	r3, r7, r4
 8004cd0:	3201      	adds	r2, #1
 8004cd2:	701a      	strb	r2, [r3, #0]
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8004cd4:	193b      	adds	r3, r7, r4
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	197a      	adds	r2, r7, r5
 8004cda:	18d0      	adds	r0, r2, r3
 8004cdc:	2308      	movs	r3, #8
 8004cde:	18f2      	adds	r2, r6, r3
 8004ce0:	19d3      	adds	r3, r2, r7
 8004ce2:	781a      	ldrb	r2, [r3, #0]
 8004ce4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ce6:	0019      	movs	r1, r3
 8004ce8:	f001 f9db 	bl	80060a2 <memcpy>
  indx +=  LocalNameLen;
 8004cec:	193b      	adds	r3, r7, r4
 8004cee:	1939      	adds	r1, r7, r4
 8004cf0:	2008      	movs	r0, #8
 8004cf2:	1832      	adds	r2, r6, r0
 8004cf4:	19d2      	adds	r2, r2, r7
 8004cf6:	7809      	ldrb	r1, [r1, #0]
 8004cf8:	7812      	ldrb	r2, [r2, #0]
 8004cfa:	188a      	adds	r2, r1, r2
 8004cfc:	701a      	strb	r2, [r3, #0]
  
  buffer[indx] = ServiceUUIDLen;
 8004cfe:	193b      	adds	r3, r7, r4
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	197a      	adds	r2, r7, r5
 8004d04:	266c      	movs	r6, #108	; 0x6c
 8004d06:	1831      	adds	r1, r6, r0
 8004d08:	19c9      	adds	r1, r1, r7
 8004d0a:	7809      	ldrb	r1, [r1, #0]
 8004d0c:	54d1      	strb	r1, [r2, r3]
  indx++;
 8004d0e:	193b      	adds	r3, r7, r4
 8004d10:	781a      	ldrb	r2, [r3, #0]
 8004d12:	193b      	adds	r3, r7, r4
 8004d14:	3201      	adds	r2, #1
 8004d16:	701a      	strb	r2, [r3, #0]

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8004d18:	193b      	adds	r3, r7, r4
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	197a      	adds	r2, r7, r5
 8004d1e:	18d0      	adds	r0, r2, r3
 8004d20:	2308      	movs	r3, #8
 8004d22:	18f2      	adds	r2, r6, r3
 8004d24:	19d3      	adds	r3, r2, r7
 8004d26:	781a      	ldrb	r2, [r3, #0]
 8004d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d2a:	0019      	movs	r1, r3
 8004d2c:	f001 f9b9 	bl	80060a2 <memcpy>
  indx +=  ServiceUUIDLen;  
 8004d30:	0020      	movs	r0, r4
 8004d32:	183b      	adds	r3, r7, r0
 8004d34:	1839      	adds	r1, r7, r0
 8004d36:	2408      	movs	r4, #8
 8004d38:	1932      	adds	r2, r6, r4
 8004d3a:	19d2      	adds	r2, r2, r7
 8004d3c:	7809      	ldrb	r1, [r1, #0]
 8004d3e:	7812      	ldrb	r2, [r2, #0]
 8004d40:	188a      	adds	r2, r1, r2
 8004d42:	701a      	strb	r2, [r3, #0]

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8004d44:	2174      	movs	r1, #116	; 0x74
 8004d46:	0026      	movs	r6, r4
 8004d48:	198b      	adds	r3, r1, r6
 8004d4a:	19db      	adds	r3, r3, r7
 8004d4c:	881a      	ldrh	r2, [r3, #0]
 8004d4e:	198b      	adds	r3, r1, r6
 8004d50:	19db      	adds	r3, r3, r7
 8004d52:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8004d54:	0004      	movs	r4, r0
 8004d56:	183b      	adds	r3, r7, r0
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	197a      	adds	r2, r7, r5
 8004d5c:	18d3      	adds	r3, r2, r3
 8004d5e:	198a      	adds	r2, r1, r6
 8004d60:	19d1      	adds	r1, r2, r7
 8004d62:	2202      	movs	r2, #2
 8004d64:	0018      	movs	r0, r3
 8004d66:	f001 f99c 	bl	80060a2 <memcpy>
  indx +=  2;
 8004d6a:	0020      	movs	r0, r4
 8004d6c:	183b      	adds	r3, r7, r0
 8004d6e:	183a      	adds	r2, r7, r0
 8004d70:	7812      	ldrb	r2, [r2, #0]
 8004d72:	3202      	adds	r2, #2
 8004d74:	701a      	strb	r2, [r3, #0]
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8004d76:	2178      	movs	r1, #120	; 0x78
 8004d78:	198b      	adds	r3, r1, r6
 8004d7a:	19db      	adds	r3, r3, r7
 8004d7c:	881a      	ldrh	r2, [r3, #0]
 8004d7e:	198b      	adds	r3, r1, r6
 8004d80:	19db      	adds	r3, r3, r7
 8004d82:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8004d84:	0004      	movs	r4, r0
 8004d86:	193b      	adds	r3, r7, r4
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	197a      	adds	r2, r7, r5
 8004d8c:	18d3      	adds	r3, r2, r3
 8004d8e:	198a      	adds	r2, r1, r6
 8004d90:	19d1      	adds	r1, r2, r7
 8004d92:	2202      	movs	r2, #2
 8004d94:	0018      	movs	r0, r3
 8004d96:	f001 f984 	bl	80060a2 <memcpy>
  indx +=  2;    
 8004d9a:	193b      	adds	r3, r7, r4
 8004d9c:	193a      	adds	r2, r7, r4
 8004d9e:	7812      	ldrb	r2, [r2, #0]
 8004da0:	3202      	adds	r2, #2
 8004da2:	701a      	strb	r2, [r3, #0]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004da4:	2634      	movs	r6, #52	; 0x34
 8004da6:	19bb      	adds	r3, r7, r6
 8004da8:	2218      	movs	r2, #24
 8004daa:	2100      	movs	r1, #0
 8004dac:	0018      	movs	r0, r3
 8004dae:	f001 f981 	bl	80060b4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004db2:	0031      	movs	r1, r6
 8004db4:	187b      	adds	r3, r7, r1
 8004db6:	223f      	movs	r2, #63	; 0x3f
 8004db8:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8004dba:	187b      	adds	r3, r7, r1
 8004dbc:	2283      	movs	r2, #131	; 0x83
 8004dbe:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 8004dc0:	187b      	adds	r3, r7, r1
 8004dc2:	197a      	adds	r2, r7, r5
 8004dc4:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 8004dc6:	193b      	adds	r3, r7, r4
 8004dc8:	781a      	ldrb	r2, [r3, #0]
 8004dca:	187b      	adds	r3, r7, r1
 8004dcc:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8004dce:	187b      	adds	r3, r7, r1
 8004dd0:	2233      	movs	r2, #51	; 0x33
 8004dd2:	18ba      	adds	r2, r7, r2
 8004dd4:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8004dd6:	187b      	adds	r3, r7, r1
 8004dd8:	2201      	movs	r2, #1
 8004dda:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8004ddc:	187b      	adds	r3, r7, r1
 8004dde:	2100      	movs	r1, #0
 8004de0:	0018      	movs	r0, r3
 8004de2:	f000 fc87 	bl	80056f4 <hci_send_req>
 8004de6:	1e03      	subs	r3, r0, #0
 8004de8:	da01      	bge.n	8004dee <aci_gap_set_discoverable+0x21c>
    return BLE_STATUS_TIMEOUT;
 8004dea:	23ff      	movs	r3, #255	; 0xff
 8004dec:	e008      	b.n	8004e00 <aci_gap_set_discoverable+0x22e>

  if (status) {
 8004dee:	2233      	movs	r2, #51	; 0x33
 8004df0:	18bb      	adds	r3, r7, r2
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <aci_gap_set_discoverable+0x22c>
    return status;
 8004df8:	18bb      	adds	r3, r7, r2
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	e000      	b.n	8004e00 <aci_gap_set_discoverable+0x22e>
  }

  return 0;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	0018      	movs	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	b015      	add	sp, #84	; 0x54
 8004e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e08 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8004e08:	b590      	push	{r4, r7, lr}
 8004e0a:	b089      	sub	sp, #36	; 0x24
 8004e0c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004e0e:	2408      	movs	r4, #8
 8004e10:	193b      	adds	r3, r7, r4
 8004e12:	2218      	movs	r2, #24
 8004e14:	2100      	movs	r1, #0
 8004e16:	0018      	movs	r0, r3
 8004e18:	f001 f94c 	bl	80060b4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004e1c:	0021      	movs	r1, r4
 8004e1e:	187b      	adds	r3, r7, r1
 8004e20:	223f      	movs	r2, #63	; 0x3f
 8004e22:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_INIT;
 8004e24:	187b      	adds	r3, r7, r1
 8004e26:	2202      	movs	r2, #2
 8004e28:	32ff      	adds	r2, #255	; 0xff
 8004e2a:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 8004e2c:	187b      	adds	r3, r7, r1
 8004e2e:	1dfa      	adds	r2, r7, #7
 8004e30:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8004e32:	187b      	adds	r3, r7, r1
 8004e34:	2201      	movs	r2, #1
 8004e36:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8004e38:	187b      	adds	r3, r7, r1
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	f000 fc59 	bl	80056f4 <hci_send_req>
 8004e42:	1e03      	subs	r3, r0, #0
 8004e44:	da01      	bge.n	8004e4a <aci_gatt_init+0x42>
    return BLE_STATUS_TIMEOUT;
 8004e46:	23ff      	movs	r3, #255	; 0xff
 8004e48:	e001      	b.n	8004e4e <aci_gatt_init+0x46>

  return status;
 8004e4a:	1dfb      	adds	r3, r7, #7
 8004e4c:	781b      	ldrb	r3, [r3, #0]
}
 8004e4e:	0018      	movs	r0, r3
 8004e50:	46bd      	mov	sp, r7
 8004e52:	b009      	add	sp, #36	; 0x24
 8004e54:	bd90      	pop	{r4, r7, pc}

08004e56 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8004e56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e58:	b091      	sub	sp, #68	; 0x44
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	0004      	movs	r4, r0
 8004e5e:	6039      	str	r1, [r7, #0]
 8004e60:	0010      	movs	r0, r2
 8004e62:	0019      	movs	r1, r3
 8004e64:	1dfb      	adds	r3, r7, #7
 8004e66:	1c22      	adds	r2, r4, #0
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	1dbb      	adds	r3, r7, #6
 8004e6c:	1c02      	adds	r2, r0, #0
 8004e6e:	701a      	strb	r2, [r3, #0]
 8004e70:	1d7b      	adds	r3, r7, #5
 8004e72:	1c0a      	adds	r2, r1, #0
 8004e74:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8004e76:	203e      	movs	r0, #62	; 0x3e
 8004e78:	183b      	adds	r3, r7, r0
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = service_uuid_type;
 8004e7e:	183b      	adds	r3, r7, r0
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	220c      	movs	r2, #12
 8004e84:	18ba      	adds	r2, r7, r2
 8004e86:	1df9      	adds	r1, r7, #7
 8004e88:	7809      	ldrb	r1, [r1, #0]
 8004e8a:	54d1      	strb	r1, [r2, r3]
  indx++;
 8004e8c:	183b      	adds	r3, r7, r0
 8004e8e:	781a      	ldrb	r2, [r3, #0]
 8004e90:	183b      	adds	r3, r7, r0
 8004e92:	3201      	adds	r2, #1
 8004e94:	701a      	strb	r2, [r3, #0]
    
  if(service_uuid_type == UUID_TYPE_16){
 8004e96:	1dfb      	adds	r3, r7, #7
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d104      	bne.n	8004ea8 <aci_gatt_add_serv+0x52>
    uuid_len = 2;
 8004e9e:	233f      	movs	r3, #63	; 0x3f
 8004ea0:	18fb      	adds	r3, r7, r3
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	701a      	strb	r2, [r3, #0]
 8004ea6:	e003      	b.n	8004eb0 <aci_gatt_add_serv+0x5a>
  }
  else {
    uuid_len = 16;
 8004ea8:	233f      	movs	r3, #63	; 0x3f
 8004eaa:	18fb      	adds	r3, r7, r3
 8004eac:	2210      	movs	r2, #16
 8004eae:	701a      	strb	r2, [r3, #0]
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8004eb0:	243e      	movs	r4, #62	; 0x3e
 8004eb2:	193b      	adds	r3, r7, r4
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	260c      	movs	r6, #12
 8004eb8:	19ba      	adds	r2, r7, r6
 8004eba:	18d0      	adds	r0, r2, r3
 8004ebc:	253f      	movs	r5, #63	; 0x3f
 8004ebe:	197b      	adds	r3, r7, r5
 8004ec0:	781a      	ldrb	r2, [r3, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	0019      	movs	r1, r3
 8004ec6:	f001 f8ec 	bl	80060a2 <memcpy>
  indx +=  uuid_len;
 8004eca:	0020      	movs	r0, r4
 8004ecc:	183b      	adds	r3, r7, r0
 8004ece:	1839      	adds	r1, r7, r0
 8004ed0:	197a      	adds	r2, r7, r5
 8004ed2:	7809      	ldrb	r1, [r1, #0]
 8004ed4:	7812      	ldrb	r2, [r2, #0]
 8004ed6:	188a      	adds	r2, r1, r2
 8004ed8:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = service_type;
 8004eda:	183b      	adds	r3, r7, r0
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	19ba      	adds	r2, r7, r6
 8004ee0:	1db9      	adds	r1, r7, #6
 8004ee2:	7809      	ldrb	r1, [r1, #0]
 8004ee4:	54d1      	strb	r1, [r2, r3]
  indx++;
 8004ee6:	183b      	adds	r3, r7, r0
 8004ee8:	781a      	ldrb	r2, [r3, #0]
 8004eea:	0004      	movs	r4, r0
 8004eec:	183b      	adds	r3, r7, r0
 8004eee:	3201      	adds	r2, #1
 8004ef0:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = max_attr_records;
 8004ef2:	193b      	adds	r3, r7, r4
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	19ba      	adds	r2, r7, r6
 8004ef8:	1d79      	adds	r1, r7, #5
 8004efa:	7809      	ldrb	r1, [r1, #0]
 8004efc:	54d1      	strb	r1, [r2, r3]
  indx++;
 8004efe:	193b      	adds	r3, r7, r4
 8004f00:	781a      	ldrb	r2, [r3, #0]
 8004f02:	193b      	adds	r3, r7, r4
 8004f04:	3201      	adds	r2, #1
 8004f06:	701a      	strb	r2, [r3, #0]
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004f08:	2320      	movs	r3, #32
 8004f0a:	18fb      	adds	r3, r7, r3
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	2100      	movs	r1, #0
 8004f10:	0018      	movs	r0, r3
 8004f12:	f001 f8cf 	bl	80060b4 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004f16:	2524      	movs	r5, #36	; 0x24
 8004f18:	197b      	adds	r3, r7, r5
 8004f1a:	2218      	movs	r2, #24
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	0018      	movs	r0, r3
 8004f20:	f001 f8c8 	bl	80060b4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004f24:	0029      	movs	r1, r5
 8004f26:	187b      	adds	r3, r7, r1
 8004f28:	223f      	movs	r2, #63	; 0x3f
 8004f2a:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_ADD_SERV;
 8004f2c:	187b      	adds	r3, r7, r1
 8004f2e:	2281      	movs	r2, #129	; 0x81
 8004f30:	0052      	lsls	r2, r2, #1
 8004f32:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 8004f34:	187b      	adds	r3, r7, r1
 8004f36:	19ba      	adds	r2, r7, r6
 8004f38:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 8004f3a:	193b      	adds	r3, r7, r4
 8004f3c:	781a      	ldrb	r2, [r3, #0]
 8004f3e:	187b      	adds	r3, r7, r1
 8004f40:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 8004f42:	187b      	adds	r3, r7, r1
 8004f44:	2220      	movs	r2, #32
 8004f46:	18ba      	adds	r2, r7, r2
 8004f48:	611a      	str	r2, [r3, #16]
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8004f4a:	187b      	adds	r3, r7, r1
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8004f50:	187b      	adds	r3, r7, r1
 8004f52:	2100      	movs	r1, #0
 8004f54:	0018      	movs	r0, r3
 8004f56:	f000 fbcd 	bl	80056f4 <hci_send_req>
 8004f5a:	1e03      	subs	r3, r0, #0
 8004f5c:	da01      	bge.n	8004f62 <aci_gatt_add_serv+0x10c>
    return BLE_STATUS_TIMEOUT;
 8004f5e:	23ff      	movs	r3, #255	; 0xff
 8004f60:	e010      	b.n	8004f84 <aci_gatt_add_serv+0x12e>

  if (resp.status) {
 8004f62:	2220      	movs	r2, #32
 8004f64:	18bb      	adds	r3, r7, r2
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <aci_gatt_add_serv+0x11c>
    return resp.status;
 8004f6c:	18bb      	adds	r3, r7, r2
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	e008      	b.n	8004f84 <aci_gatt_add_serv+0x12e>
  }
    
  *serviceHandle = btohs(resp.handle);
 8004f72:	2320      	movs	r3, #32
 8004f74:	18fb      	adds	r3, r7, r3
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	021b      	lsls	r3, r3, #8
 8004f7a:	0c1b      	lsrs	r3, r3, #16
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f80:	801a      	strh	r2, [r3, #0]

  return 0;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	0018      	movs	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	b011      	add	sp, #68	; 0x44
 8004f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f8c <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8004f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f8e:	b093      	sub	sp, #76	; 0x4c
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	0004      	movs	r4, r0
 8004f94:	0008      	movs	r0, r1
 8004f96:	603a      	str	r2, [r7, #0]
 8004f98:	0019      	movs	r1, r3
 8004f9a:	1dbb      	adds	r3, r7, #6
 8004f9c:	1c22      	adds	r2, r4, #0
 8004f9e:	801a      	strh	r2, [r3, #0]
 8004fa0:	1d7b      	adds	r3, r7, #5
 8004fa2:	1c02      	adds	r2, r0, #0
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	1d3b      	adds	r3, r7, #4
 8004fa8:	1c0a      	adds	r2, r1, #0
 8004faa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8004fac:	2146      	movs	r1, #70	; 0x46
 8004fae:	187b      	adds	r3, r7, r1
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	701a      	strb	r2, [r3, #0]
    
  serviceHandle = htobs(serviceHandle);
 8004fb4:	1dbb      	adds	r3, r7, #6
 8004fb6:	881a      	ldrh	r2, [r3, #0]
 8004fb8:	1dbb      	adds	r3, r7, #6
 8004fba:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8004fbc:	000c      	movs	r4, r1
 8004fbe:	187b      	adds	r3, r7, r1
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	250c      	movs	r5, #12
 8004fc4:	197a      	adds	r2, r7, r5
 8004fc6:	18d3      	adds	r3, r2, r3
 8004fc8:	1db9      	adds	r1, r7, #6
 8004fca:	2202      	movs	r2, #2
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f001 f868 	bl	80060a2 <memcpy>
  indx += 2;
 8004fd2:	0020      	movs	r0, r4
 8004fd4:	183b      	adds	r3, r7, r0
 8004fd6:	183a      	adds	r2, r7, r0
 8004fd8:	7812      	ldrb	r2, [r2, #0]
 8004fda:	3202      	adds	r2, #2
 8004fdc:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charUuidType;
 8004fde:	183b      	adds	r3, r7, r0
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	197a      	adds	r2, r7, r5
 8004fe4:	1d79      	adds	r1, r7, #5
 8004fe6:	7809      	ldrb	r1, [r1, #0]
 8004fe8:	54d1      	strb	r1, [r2, r3]
  indx++;
 8004fea:	183b      	adds	r3, r7, r0
 8004fec:	781a      	ldrb	r2, [r3, #0]
 8004fee:	183b      	adds	r3, r7, r0
 8004ff0:	3201      	adds	r2, #1
 8004ff2:	701a      	strb	r2, [r3, #0]
    
  if(charUuidType == UUID_TYPE_16){
 8004ff4:	1d7b      	adds	r3, r7, #5
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d104      	bne.n	8005006 <aci_gatt_add_char+0x7a>
    uuid_len = 2;
 8004ffc:	2347      	movs	r3, #71	; 0x47
 8004ffe:	18fb      	adds	r3, r7, r3
 8005000:	2202      	movs	r2, #2
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	e003      	b.n	800500e <aci_gatt_add_char+0x82>
  }
  else {
    uuid_len = 16;
 8005006:	2347      	movs	r3, #71	; 0x47
 8005008:	18fb      	adds	r3, r7, r3
 800500a:	2210      	movs	r2, #16
 800500c:	701a      	strb	r2, [r3, #0]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800500e:	2446      	movs	r4, #70	; 0x46
 8005010:	193b      	adds	r3, r7, r4
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	250c      	movs	r5, #12
 8005016:	197a      	adds	r2, r7, r5
 8005018:	18d0      	adds	r0, r2, r3
 800501a:	2647      	movs	r6, #71	; 0x47
 800501c:	19bb      	adds	r3, r7, r6
 800501e:	781a      	ldrb	r2, [r3, #0]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	0019      	movs	r1, r3
 8005024:	f001 f83d 	bl	80060a2 <memcpy>
  indx +=  uuid_len;
 8005028:	0020      	movs	r0, r4
 800502a:	183b      	adds	r3, r7, r0
 800502c:	1839      	adds	r1, r7, r0
 800502e:	19ba      	adds	r2, r7, r6
 8005030:	7809      	ldrb	r1, [r1, #0]
 8005032:	7812      	ldrb	r2, [r2, #0]
 8005034:	188a      	adds	r2, r1, r2
 8005036:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charValueLen;
 8005038:	183b      	adds	r3, r7, r0
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	197a      	adds	r2, r7, r5
 800503e:	1d39      	adds	r1, r7, #4
 8005040:	7809      	ldrb	r1, [r1, #0]
 8005042:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005044:	183b      	adds	r3, r7, r0
 8005046:	781a      	ldrb	r2, [r3, #0]
 8005048:	0004      	movs	r4, r0
 800504a:	183b      	adds	r3, r7, r0
 800504c:	3201      	adds	r2, #1
 800504e:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charProperties;
 8005050:	193b      	adds	r3, r7, r4
 8005052:	781a      	ldrb	r2, [r3, #0]
 8005054:	1979      	adds	r1, r7, r5
 8005056:	2358      	movs	r3, #88	; 0x58
 8005058:	2008      	movs	r0, #8
 800505a:	181b      	adds	r3, r3, r0
 800505c:	19db      	adds	r3, r3, r7
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	548b      	strb	r3, [r1, r2]
  indx++;
 8005062:	193b      	adds	r3, r7, r4
 8005064:	781a      	ldrb	r2, [r3, #0]
 8005066:	193b      	adds	r3, r7, r4
 8005068:	3201      	adds	r2, #1
 800506a:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = secPermissions;
 800506c:	193b      	adds	r3, r7, r4
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	197a      	adds	r2, r7, r5
 8005072:	215c      	movs	r1, #92	; 0x5c
 8005074:	1809      	adds	r1, r1, r0
 8005076:	19c9      	adds	r1, r1, r7
 8005078:	7809      	ldrb	r1, [r1, #0]
 800507a:	54d1      	strb	r1, [r2, r3]
  indx++;
 800507c:	193b      	adds	r3, r7, r4
 800507e:	781a      	ldrb	r2, [r3, #0]
 8005080:	193b      	adds	r3, r7, r4
 8005082:	3201      	adds	r2, #1
 8005084:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = gattEvtMask;
 8005086:	193b      	adds	r3, r7, r4
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	197a      	adds	r2, r7, r5
 800508c:	2160      	movs	r1, #96	; 0x60
 800508e:	1809      	adds	r1, r1, r0
 8005090:	19c9      	adds	r1, r1, r7
 8005092:	7809      	ldrb	r1, [r1, #0]
 8005094:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005096:	193b      	adds	r3, r7, r4
 8005098:	781a      	ldrb	r2, [r3, #0]
 800509a:	193b      	adds	r3, r7, r4
 800509c:	3201      	adds	r2, #1
 800509e:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = encryKeySize;
 80050a0:	193b      	adds	r3, r7, r4
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	197a      	adds	r2, r7, r5
 80050a6:	2164      	movs	r1, #100	; 0x64
 80050a8:	1809      	adds	r1, r1, r0
 80050aa:	19c9      	adds	r1, r1, r7
 80050ac:	7809      	ldrb	r1, [r1, #0]
 80050ae:	54d1      	strb	r1, [r2, r3]
  indx++;
 80050b0:	193b      	adds	r3, r7, r4
 80050b2:	781a      	ldrb	r2, [r3, #0]
 80050b4:	193b      	adds	r3, r7, r4
 80050b6:	3201      	adds	r2, #1
 80050b8:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = isVariable;
 80050ba:	193b      	adds	r3, r7, r4
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	197a      	adds	r2, r7, r5
 80050c0:	2168      	movs	r1, #104	; 0x68
 80050c2:	1809      	adds	r1, r1, r0
 80050c4:	19c9      	adds	r1, r1, r7
 80050c6:	7809      	ldrb	r1, [r1, #0]
 80050c8:	54d1      	strb	r1, [r2, r3]
  indx++;
 80050ca:	193b      	adds	r3, r7, r4
 80050cc:	781a      	ldrb	r2, [r3, #0]
 80050ce:	193b      	adds	r3, r7, r4
 80050d0:	3201      	adds	r2, #1
 80050d2:	701a      	strb	r2, [r3, #0]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80050d4:	2328      	movs	r3, #40	; 0x28
 80050d6:	18fb      	adds	r3, r7, r3
 80050d8:	2203      	movs	r2, #3
 80050da:	2100      	movs	r1, #0
 80050dc:	0018      	movs	r0, r3
 80050de:	f000 ffe9 	bl	80060b4 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80050e2:	262c      	movs	r6, #44	; 0x2c
 80050e4:	19bb      	adds	r3, r7, r6
 80050e6:	2218      	movs	r2, #24
 80050e8:	2100      	movs	r1, #0
 80050ea:	0018      	movs	r0, r3
 80050ec:	f000 ffe2 	bl	80060b4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80050f0:	0031      	movs	r1, r6
 80050f2:	187b      	adds	r3, r7, r1
 80050f4:	223f      	movs	r2, #63	; 0x3f
 80050f6:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_ADD_CHAR;
 80050f8:	187b      	adds	r3, r7, r1
 80050fa:	2282      	movs	r2, #130	; 0x82
 80050fc:	0052      	lsls	r2, r2, #1
 80050fe:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 8005100:	187b      	adds	r3, r7, r1
 8005102:	197a      	adds	r2, r7, r5
 8005104:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 8005106:	193b      	adds	r3, r7, r4
 8005108:	781a      	ldrb	r2, [r3, #0]
 800510a:	187b      	adds	r3, r7, r1
 800510c:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 800510e:	187b      	adds	r3, r7, r1
 8005110:	2228      	movs	r2, #40	; 0x28
 8005112:	18ba      	adds	r2, r7, r2
 8005114:	611a      	str	r2, [r3, #16]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8005116:	187b      	adds	r3, r7, r1
 8005118:	2203      	movs	r2, #3
 800511a:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 800511c:	187b      	adds	r3, r7, r1
 800511e:	2100      	movs	r1, #0
 8005120:	0018      	movs	r0, r3
 8005122:	f000 fae7 	bl	80056f4 <hci_send_req>
 8005126:	1e03      	subs	r3, r0, #0
 8005128:	da01      	bge.n	800512e <aci_gatt_add_char+0x1a2>
    return BLE_STATUS_TIMEOUT;
 800512a:	23ff      	movs	r3, #255	; 0xff
 800512c:	e010      	b.n	8005150 <aci_gatt_add_char+0x1c4>

  if (resp.status) {
 800512e:	2228      	movs	r2, #40	; 0x28
 8005130:	18bb      	adds	r3, r7, r2
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <aci_gatt_add_char+0x1b2>
    return resp.status;
 8005138:	18bb      	adds	r3, r7, r2
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	e008      	b.n	8005150 <aci_gatt_add_char+0x1c4>
  }
    
  *charHandle = btohs(resp.handle);
 800513e:	2328      	movs	r3, #40	; 0x28
 8005140:	18fb      	adds	r3, r7, r3
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	021b      	lsls	r3, r3, #8
 8005146:	0c1b      	lsrs	r3, r3, #16
 8005148:	b29a      	uxth	r2, r3
 800514a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800514c:	801a      	strh	r2, [r3, #0]

  return 0;
 800514e:	2300      	movs	r3, #0
}
 8005150:	0018      	movs	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	b013      	add	sp, #76	; 0x4c
 8005156:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005158 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8005158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800515a:	b0ab      	sub	sp, #172	; 0xac
 800515c:	af00      	add	r7, sp, #0
 800515e:	0005      	movs	r5, r0
 8005160:	000c      	movs	r4, r1
 8005162:	0010      	movs	r0, r2
 8005164:	0019      	movs	r1, r3
 8005166:	1dbb      	adds	r3, r7, #6
 8005168:	1c2a      	adds	r2, r5, #0
 800516a:	801a      	strh	r2, [r3, #0]
 800516c:	1d3b      	adds	r3, r7, #4
 800516e:	1c22      	adds	r2, r4, #0
 8005170:	801a      	strh	r2, [r3, #0]
 8005172:	1cfb      	adds	r3, r7, #3
 8005174:	1c02      	adds	r2, r0, #0
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	1cbb      	adds	r3, r7, #2
 800517a:	1c0a      	adds	r2, r1, #0
 800517c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800517e:	23a7      	movs	r3, #167	; 0xa7
 8005180:	18fb      	adds	r3, r7, r3
 8005182:	2200      	movs	r2, #0
 8005184:	701a      	strb	r2, [r3, #0]
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8005186:	1cbb      	adds	r3, r7, #2
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b7a      	cmp	r3, #122	; 0x7a
 800518c:	d901      	bls.n	8005192 <aci_gatt_update_char_value+0x3a>
    return BLE_STATUS_INVALID_PARAMS;
 800518e:	2342      	movs	r3, #66	; 0x42
 8005190:	e082      	b.n	8005298 <aci_gatt_update_char_value+0x140>

  servHandle = htobs(servHandle);
 8005192:	1dbb      	adds	r3, r7, #6
 8005194:	881a      	ldrh	r2, [r3, #0]
 8005196:	1dbb      	adds	r3, r7, #6
 8005198:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800519a:	24a7      	movs	r4, #167	; 0xa7
 800519c:	193b      	adds	r3, r7, r4
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2508      	movs	r5, #8
 80051a2:	197a      	adds	r2, r7, r5
 80051a4:	18d3      	adds	r3, r2, r3
 80051a6:	1db9      	adds	r1, r7, #6
 80051a8:	2202      	movs	r2, #2
 80051aa:	0018      	movs	r0, r3
 80051ac:	f000 ff79 	bl	80060a2 <memcpy>
  indx += 2;
 80051b0:	0021      	movs	r1, r4
 80051b2:	187b      	adds	r3, r7, r1
 80051b4:	187a      	adds	r2, r7, r1
 80051b6:	7812      	ldrb	r2, [r2, #0]
 80051b8:	3202      	adds	r2, #2
 80051ba:	701a      	strb	r2, [r3, #0]
    
  charHandle = htobs(charHandle);
 80051bc:	1d3b      	adds	r3, r7, #4
 80051be:	881a      	ldrh	r2, [r3, #0]
 80051c0:	1d3b      	adds	r3, r7, #4
 80051c2:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80051c4:	000c      	movs	r4, r1
 80051c6:	187b      	adds	r3, r7, r1
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	002e      	movs	r6, r5
 80051cc:	19ba      	adds	r2, r7, r6
 80051ce:	18d3      	adds	r3, r2, r3
 80051d0:	1d39      	adds	r1, r7, #4
 80051d2:	2202      	movs	r2, #2
 80051d4:	0018      	movs	r0, r3
 80051d6:	f000 ff64 	bl	80060a2 <memcpy>
  indx += 2;
 80051da:	193b      	adds	r3, r7, r4
 80051dc:	193a      	adds	r2, r7, r4
 80051de:	7812      	ldrb	r2, [r2, #0]
 80051e0:	3202      	adds	r2, #2
 80051e2:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charValOffset;
 80051e4:	193b      	adds	r3, r7, r4
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	19ba      	adds	r2, r7, r6
 80051ea:	1cf9      	adds	r1, r7, #3
 80051ec:	7809      	ldrb	r1, [r1, #0]
 80051ee:	54d1      	strb	r1, [r2, r3]
  indx++;
 80051f0:	193b      	adds	r3, r7, r4
 80051f2:	781a      	ldrb	r2, [r3, #0]
 80051f4:	193b      	adds	r3, r7, r4
 80051f6:	3201      	adds	r2, #1
 80051f8:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = charValueLen;
 80051fa:	193b      	adds	r3, r7, r4
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	19ba      	adds	r2, r7, r6
 8005200:	1cb9      	adds	r1, r7, #2
 8005202:	7809      	ldrb	r1, [r1, #0]
 8005204:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005206:	193b      	adds	r3, r7, r4
 8005208:	781a      	ldrb	r2, [r3, #0]
 800520a:	193b      	adds	r3, r7, r4
 800520c:	3201      	adds	r2, #1
 800520e:	701a      	strb	r2, [r3, #0]
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8005210:	193b      	adds	r3, r7, r4
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	19ba      	adds	r2, r7, r6
 8005216:	18d0      	adds	r0, r2, r3
 8005218:	1cbb      	adds	r3, r7, #2
 800521a:	781a      	ldrb	r2, [r3, #0]
 800521c:	23b8      	movs	r3, #184	; 0xb8
 800521e:	2108      	movs	r1, #8
 8005220:	185b      	adds	r3, r3, r1
 8005222:	19db      	adds	r3, r3, r7
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	0019      	movs	r1, r3
 8005228:	f000 ff3b 	bl	80060a2 <memcpy>
  indx +=  charValueLen;
 800522c:	193b      	adds	r3, r7, r4
 800522e:	1939      	adds	r1, r7, r4
 8005230:	1cba      	adds	r2, r7, #2
 8005232:	7809      	ldrb	r1, [r1, #0]
 8005234:	7812      	ldrb	r2, [r2, #0]
 8005236:	188a      	adds	r2, r1, r2
 8005238:	701a      	strb	r2, [r3, #0]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800523a:	258c      	movs	r5, #140	; 0x8c
 800523c:	197b      	adds	r3, r7, r5
 800523e:	2218      	movs	r2, #24
 8005240:	2100      	movs	r1, #0
 8005242:	0018      	movs	r0, r3
 8005244:	f000 ff36 	bl	80060b4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005248:	0029      	movs	r1, r5
 800524a:	187b      	adds	r3, r7, r1
 800524c:	223f      	movs	r2, #63	; 0x3f
 800524e:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8005250:	187b      	adds	r3, r7, r1
 8005252:	2283      	movs	r2, #131	; 0x83
 8005254:	0052      	lsls	r2, r2, #1
 8005256:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 8005258:	187b      	adds	r3, r7, r1
 800525a:	19ba      	adds	r2, r7, r6
 800525c:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 800525e:	193b      	adds	r3, r7, r4
 8005260:	781a      	ldrb	r2, [r3, #0]
 8005262:	187b      	adds	r3, r7, r1
 8005264:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8005266:	187b      	adds	r3, r7, r1
 8005268:	228b      	movs	r2, #139	; 0x8b
 800526a:	18ba      	adds	r2, r7, r2
 800526c:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800526e:	187b      	adds	r3, r7, r1
 8005270:	2201      	movs	r2, #1
 8005272:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8005274:	187b      	adds	r3, r7, r1
 8005276:	2100      	movs	r1, #0
 8005278:	0018      	movs	r0, r3
 800527a:	f000 fa3b 	bl	80056f4 <hci_send_req>
 800527e:	1e03      	subs	r3, r0, #0
 8005280:	da01      	bge.n	8005286 <aci_gatt_update_char_value+0x12e>
    return BLE_STATUS_TIMEOUT;
 8005282:	23ff      	movs	r3, #255	; 0xff
 8005284:	e008      	b.n	8005298 <aci_gatt_update_char_value+0x140>

  if (status) {
 8005286:	228b      	movs	r2, #139	; 0x8b
 8005288:	18bb      	adds	r3, r7, r2
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <aci_gatt_update_char_value+0x13e>
    return status;
 8005290:	18bb      	adds	r3, r7, r2
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	e000      	b.n	8005298 <aci_gatt_update_char_value+0x140>
  }

  return 0;
 8005296:	2300      	movs	r3, #0
}
 8005298:	0018      	movs	r0, r3
 800529a:	46bd      	mov	sp, r7
 800529c:	b02b      	add	sp, #172	; 0xac
 800529e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052a0 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 80052a0:	b5b0      	push	{r4, r5, r7, lr}
 80052a2:	b08a      	sub	sp, #40	; 0x28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	0002      	movs	r2, r0
 80052a8:	1dbb      	adds	r3, r7, #6
 80052aa:	801a      	strh	r2, [r3, #0]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 80052ac:	250c      	movs	r5, #12
 80052ae:	197b      	adds	r3, r7, r5
 80052b0:	1dba      	adds	r2, r7, #6
 80052b2:	8812      	ldrh	r2, [r2, #0]
 80052b4:	801a      	strh	r2, [r3, #0]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 80052b6:	2410      	movs	r4, #16
 80052b8:	193b      	adds	r3, r7, r4
 80052ba:	2218      	movs	r2, #24
 80052bc:	2100      	movs	r1, #0
 80052be:	0018      	movs	r0, r3
 80052c0:	f000 fef8 	bl	80060b4 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 80052c4:	0021      	movs	r1, r4
 80052c6:	187b      	adds	r3, r7, r1
 80052c8:	223f      	movs	r2, #63	; 0x3f
 80052ca:	801a      	strh	r2, [r3, #0]
    rq.ocf = OCF_GATT_ALLOW_READ;
 80052cc:	187b      	adds	r3, r7, r1
 80052ce:	2228      	movs	r2, #40	; 0x28
 80052d0:	32ff      	adds	r2, #255	; 0xff
 80052d2:	805a      	strh	r2, [r3, #2]
    rq.cparam = &cp;
 80052d4:	187b      	adds	r3, r7, r1
 80052d6:	197a      	adds	r2, r7, r5
 80052d8:	609a      	str	r2, [r3, #8]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 80052da:	187b      	adds	r3, r7, r1
 80052dc:	2202      	movs	r2, #2
 80052de:	60da      	str	r2, [r3, #12]
    rq.rparam = &status;
 80052e0:	187b      	adds	r3, r7, r1
 80052e2:	220b      	movs	r2, #11
 80052e4:	18ba      	adds	r2, r7, r2
 80052e6:	611a      	str	r2, [r3, #16]
    rq.rlen = 1;
 80052e8:	187b      	adds	r3, r7, r1
 80052ea:	2201      	movs	r2, #1
 80052ec:	615a      	str	r2, [r3, #20]

    if (hci_send_req(&rq, FALSE) < 0)
 80052ee:	187b      	adds	r3, r7, r1
 80052f0:	2100      	movs	r1, #0
 80052f2:	0018      	movs	r0, r3
 80052f4:	f000 f9fe 	bl	80056f4 <hci_send_req>
 80052f8:	1e03      	subs	r3, r0, #0
 80052fa:	da01      	bge.n	8005300 <aci_gatt_allow_read+0x60>
      return BLE_STATUS_TIMEOUT;
 80052fc:	23ff      	movs	r3, #255	; 0xff
 80052fe:	e002      	b.n	8005306 <aci_gatt_allow_read+0x66>

    return status;
 8005300:	230b      	movs	r3, #11
 8005302:	18fb      	adds	r3, r7, r3
 8005304:	781b      	ldrb	r3, [r3, #0]
}
 8005306:	0018      	movs	r0, r3
 8005308:	46bd      	mov	sp, r7
 800530a:	b00a      	add	sp, #40	; 0x28
 800530c:	bdb0      	pop	{r4, r5, r7, pc}

0800530e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800530e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005310:	b0ab      	sub	sp, #172	; 0xac
 8005312:	af00      	add	r7, sp, #0
 8005314:	603a      	str	r2, [r7, #0]
 8005316:	1dfb      	adds	r3, r7, #7
 8005318:	1c02      	adds	r2, r0, #0
 800531a:	701a      	strb	r2, [r3, #0]
 800531c:	1dbb      	adds	r3, r7, #6
 800531e:	1c0a      	adds	r2, r1, #0
 8005320:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8005322:	23a7      	movs	r3, #167	; 0xa7
 8005324:	18fb      	adds	r3, r7, r3
 8005326:	2200      	movs	r2, #0
 8005328:	701a      	strb	r2, [r3, #0]
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800532a:	1dbb      	adds	r3, r7, #6
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b7e      	cmp	r3, #126	; 0x7e
 8005330:	d901      	bls.n	8005336 <aci_hal_write_config_data+0x28>
    return BLE_STATUS_INVALID_PARAMS;
 8005332:	2342      	movs	r3, #66	; 0x42
 8005334:	e050      	b.n	80053d8 <aci_hal_write_config_data+0xca>

  buffer[indx] = offset;
 8005336:	24a7      	movs	r4, #167	; 0xa7
 8005338:	193b      	adds	r3, r7, r4
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2608      	movs	r6, #8
 800533e:	19ba      	adds	r2, r7, r6
 8005340:	1df9      	adds	r1, r7, #7
 8005342:	7809      	ldrb	r1, [r1, #0]
 8005344:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005346:	193b      	adds	r3, r7, r4
 8005348:	781a      	ldrb	r2, [r3, #0]
 800534a:	193b      	adds	r3, r7, r4
 800534c:	3201      	adds	r2, #1
 800534e:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = len;
 8005350:	193b      	adds	r3, r7, r4
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	19ba      	adds	r2, r7, r6
 8005356:	1db9      	adds	r1, r7, #6
 8005358:	7809      	ldrb	r1, [r1, #0]
 800535a:	54d1      	strb	r1, [r2, r3]
  indx++;
 800535c:	193b      	adds	r3, r7, r4
 800535e:	781a      	ldrb	r2, [r3, #0]
 8005360:	193b      	adds	r3, r7, r4
 8005362:	3201      	adds	r2, #1
 8005364:	701a      	strb	r2, [r3, #0]
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8005366:	193b      	adds	r3, r7, r4
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	19ba      	adds	r2, r7, r6
 800536c:	18d0      	adds	r0, r2, r3
 800536e:	1dbb      	adds	r3, r7, #6
 8005370:	781a      	ldrb	r2, [r3, #0]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	0019      	movs	r1, r3
 8005376:	f000 fe94 	bl	80060a2 <memcpy>
  indx +=  len;
 800537a:	193b      	adds	r3, r7, r4
 800537c:	1939      	adds	r1, r7, r4
 800537e:	1dba      	adds	r2, r7, #6
 8005380:	7809      	ldrb	r1, [r1, #0]
 8005382:	7812      	ldrb	r2, [r2, #0]
 8005384:	188a      	adds	r2, r1, r2
 8005386:	701a      	strb	r2, [r3, #0]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005388:	258c      	movs	r5, #140	; 0x8c
 800538a:	197b      	adds	r3, r7, r5
 800538c:	2218      	movs	r2, #24
 800538e:	2100      	movs	r1, #0
 8005390:	0018      	movs	r0, r3
 8005392:	f000 fe8f 	bl	80060b4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005396:	0029      	movs	r1, r5
 8005398:	187b      	adds	r3, r7, r1
 800539a:	223f      	movs	r2, #63	; 0x3f
 800539c:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 800539e:	187b      	adds	r3, r7, r1
 80053a0:	220c      	movs	r2, #12
 80053a2:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 80053a4:	187b      	adds	r3, r7, r1
 80053a6:	19ba      	adds	r2, r7, r6
 80053a8:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 80053aa:	193b      	adds	r3, r7, r4
 80053ac:	781a      	ldrb	r2, [r3, #0]
 80053ae:	187b      	adds	r3, r7, r1
 80053b0:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 80053b2:	187b      	adds	r3, r7, r1
 80053b4:	228b      	movs	r2, #139	; 0x8b
 80053b6:	18ba      	adds	r2, r7, r2
 80053b8:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 80053ba:	187b      	adds	r3, r7, r1
 80053bc:	2201      	movs	r2, #1
 80053be:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 80053c0:	187b      	adds	r3, r7, r1
 80053c2:	2100      	movs	r1, #0
 80053c4:	0018      	movs	r0, r3
 80053c6:	f000 f995 	bl	80056f4 <hci_send_req>
 80053ca:	1e03      	subs	r3, r0, #0
 80053cc:	da01      	bge.n	80053d2 <aci_hal_write_config_data+0xc4>
    return BLE_STATUS_TIMEOUT;
 80053ce:	23ff      	movs	r3, #255	; 0xff
 80053d0:	e002      	b.n	80053d8 <aci_hal_write_config_data+0xca>

  return status;
 80053d2:	238b      	movs	r3, #139	; 0x8b
 80053d4:	18fb      	adds	r3, r7, r3
 80053d6:	781b      	ldrb	r3, [r3, #0]
}
 80053d8:	0018      	movs	r0, r3
 80053da:	46bd      	mov	sp, r7
 80053dc:	b02b      	add	sp, #172	; 0xac
 80053de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053e0 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 80053e0:	b590      	push	{r4, r7, lr}
 80053e2:	b089      	sub	sp, #36	; 0x24
 80053e4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80053e6:	2408      	movs	r4, #8
 80053e8:	193b      	adds	r3, r7, r4
 80053ea:	2218      	movs	r2, #24
 80053ec:	2100      	movs	r1, #0
 80053ee:	0018      	movs	r0, r3
 80053f0:	f000 fe60 	bl	80060b4 <memset>
  rq.ogf = OGF_HOST_CTL;
 80053f4:	0021      	movs	r1, r4
 80053f6:	187b      	adds	r3, r7, r1
 80053f8:	2203      	movs	r2, #3
 80053fa:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_RESET;
 80053fc:	187b      	adds	r3, r7, r1
 80053fe:	2203      	movs	r2, #3
 8005400:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 8005402:	187b      	adds	r3, r7, r1
 8005404:	1dfa      	adds	r2, r7, #7
 8005406:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8005408:	187b      	adds	r3, r7, r1
 800540a:	2201      	movs	r2, #1
 800540c:	615a      	str	r2, [r3, #20]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800540e:	187b      	adds	r3, r7, r1
 8005410:	2100      	movs	r1, #0
 8005412:	0018      	movs	r0, r3
 8005414:	f000 f96e 	bl	80056f4 <hci_send_req>
 8005418:	1e03      	subs	r3, r0, #0
 800541a:	da01      	bge.n	8005420 <hci_reset+0x40>
    return BLE_STATUS_TIMEOUT;
 800541c:	23ff      	movs	r3, #255	; 0xff
 800541e:	e001      	b.n	8005424 <hci_reset+0x44>
  
  return status;  
 8005420:	1dfb      	adds	r3, r7, #7
 8005422:	781b      	ldrb	r3, [r3, #0]
}
 8005424:	0018      	movs	r0, r3
 8005426:	46bd      	mov	sp, r7
 8005428:	b009      	add	sp, #36	; 0x24
 800542a:	bd90      	pop	{r4, r7, pc}

0800542c <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800542c:	b5b0      	push	{r4, r5, r7, lr}
 800542e:	b092      	sub	sp, #72	; 0x48
 8005430:	af00      	add	r7, sp, #0
 8005432:	0002      	movs	r2, r0
 8005434:	6039      	str	r1, [r7, #0]
 8005436:	1dfb      	adds	r3, r7, #7
 8005438:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800543a:	2410      	movs	r4, #16
 800543c:	193b      	adds	r3, r7, r4
 800543e:	2220      	movs	r2, #32
 8005440:	2100      	movs	r1, #0
 8005442:	0018      	movs	r0, r3
 8005444:	f000 fe36 	bl	80060b4 <memset>
  scan_resp_cp.length = length;
 8005448:	193b      	adds	r3, r7, r4
 800544a:	1dfa      	adds	r2, r7, #7
 800544c:	7812      	ldrb	r2, [r2, #0]
 800544e:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8005450:	1dfb      	adds	r3, r7, #7
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	b2da      	uxtb	r2, r3
 8005456:	2a1f      	cmp	r2, #31
 8005458:	d900      	bls.n	800545c <hci_le_set_scan_resp_data+0x30>
 800545a:	231f      	movs	r3, #31
 800545c:	b2db      	uxtb	r3, r3
 800545e:	001a      	movs	r2, r3
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	2510      	movs	r5, #16
 8005464:	197b      	adds	r3, r7, r5
 8005466:	3301      	adds	r3, #1
 8005468:	0018      	movs	r0, r3
 800546a:	f000 fe1a 	bl	80060a2 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800546e:	2430      	movs	r4, #48	; 0x30
 8005470:	193b      	adds	r3, r7, r4
 8005472:	2218      	movs	r2, #24
 8005474:	2100      	movs	r1, #0
 8005476:	0018      	movs	r0, r3
 8005478:	f000 fe1c 	bl	80060b4 <memset>
  rq.ogf = OGF_LE_CTL;
 800547c:	0021      	movs	r1, r4
 800547e:	187b      	adds	r3, r7, r1
 8005480:	2208      	movs	r2, #8
 8005482:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8005484:	187b      	adds	r3, r7, r1
 8005486:	2209      	movs	r2, #9
 8005488:	805a      	strh	r2, [r3, #2]
  rq.cparam = &scan_resp_cp;
 800548a:	187b      	adds	r3, r7, r1
 800548c:	197a      	adds	r2, r7, r5
 800548e:	609a      	str	r2, [r3, #8]
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8005490:	187b      	adds	r3, r7, r1
 8005492:	2220      	movs	r2, #32
 8005494:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8005496:	187b      	adds	r3, r7, r1
 8005498:	220f      	movs	r2, #15
 800549a:	18ba      	adds	r2, r7, r2
 800549c:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800549e:	187b      	adds	r3, r7, r1
 80054a0:	2201      	movs	r2, #1
 80054a2:	615a      	str	r2, [r3, #20]
  
  if (hci_send_req(&rq, FALSE) < 0)
 80054a4:	187b      	adds	r3, r7, r1
 80054a6:	2100      	movs	r1, #0
 80054a8:	0018      	movs	r0, r3
 80054aa:	f000 f923 	bl	80056f4 <hci_send_req>
 80054ae:	1e03      	subs	r3, r0, #0
 80054b0:	da01      	bge.n	80054b6 <hci_le_set_scan_resp_data+0x8a>
    return BLE_STATUS_TIMEOUT;
 80054b2:	23ff      	movs	r3, #255	; 0xff
 80054b4:	e002      	b.n	80054bc <hci_le_set_scan_resp_data+0x90>
  
  return status;
 80054b6:	230f      	movs	r3, #15
 80054b8:	18fb      	adds	r3, r7, r3
 80054ba:	781b      	ldrb	r3, [r3, #0]
}
 80054bc:	0018      	movs	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	b012      	add	sp, #72	; 0x48
 80054c2:	bdb0      	pop	{r4, r5, r7, pc}

080054c4 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3308      	adds	r3, #8
 80054d0:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d001      	beq.n	80054de <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80054da:	2301      	movs	r3, #1
 80054dc:	e00c      	b.n	80054f8 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3302      	adds	r3, #2
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	0019      	movs	r1, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2288      	movs	r2, #136	; 0x88
 80054ea:	5c9b      	ldrb	r3, [r3, r2]
 80054ec:	3b03      	subs	r3, #3
 80054ee:	4299      	cmp	r1, r3
 80054f0:	d001      	beq.n	80054f6 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80054f2:	2302      	movs	r3, #2
 80054f4:	e000      	b.n	80054f8 <verify_packet+0x34>
  
  return 0;      
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	0018      	movs	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	b004      	add	sp, #16
 80054fe:	bd80      	pop	{r7, pc}

08005500 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8005500:	b5b0      	push	{r4, r5, r7, lr}
 8005502:	b0a6      	sub	sp, #152	; 0x98
 8005504:	af00      	add	r7, sp, #0
 8005506:	0004      	movs	r4, r0
 8005508:	0008      	movs	r0, r1
 800550a:	0011      	movs	r1, r2
 800550c:	607b      	str	r3, [r7, #4]
 800550e:	250e      	movs	r5, #14
 8005510:	197b      	adds	r3, r7, r5
 8005512:	1c22      	adds	r2, r4, #0
 8005514:	801a      	strh	r2, [r3, #0]
 8005516:	240c      	movs	r4, #12
 8005518:	193b      	adds	r3, r7, r4
 800551a:	1c02      	adds	r2, r0, #0
 800551c:	801a      	strh	r2, [r3, #0]
 800551e:	200b      	movs	r0, #11
 8005520:	183b      	adds	r3, r7, r0
 8005522:	1c0a      	adds	r2, r1, #0
 8005524:	701a      	strb	r2, [r3, #0]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8005526:	193b      	adds	r3, r7, r4
 8005528:	2200      	movs	r2, #0
 800552a:	5e9b      	ldrsh	r3, [r3, r2]
 800552c:	059b      	lsls	r3, r3, #22
 800552e:	0d9b      	lsrs	r3, r3, #22
 8005530:	b21a      	sxth	r2, r3
 8005532:	197b      	adds	r3, r7, r5
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	029b      	lsls	r3, r3, #10
 8005538:	b21b      	sxth	r3, r3
 800553a:	4313      	orrs	r3, r2
 800553c:	b21b      	sxth	r3, r3
 800553e:	b29a      	uxth	r2, r3
 8005540:	2114      	movs	r1, #20
 8005542:	187b      	adds	r3, r7, r1
 8005544:	801a      	strh	r2, [r3, #0]
  hc.plen = plen;
 8005546:	187b      	adds	r3, r7, r1
 8005548:	0004      	movs	r4, r0
 800554a:	183a      	adds	r2, r7, r0
 800554c:	7812      	ldrb	r2, [r2, #0]
 800554e:	709a      	strb	r2, [r3, #2]

  payload[0] = HCI_COMMAND_PKT;
 8005550:	2518      	movs	r5, #24
 8005552:	197b      	adds	r3, r7, r5
 8005554:	2201      	movs	r2, #1
 8005556:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8005558:	197b      	adds	r3, r7, r5
 800555a:	3301      	adds	r3, #1
 800555c:	187a      	adds	r2, r7, r1
 800555e:	0018      	movs	r0, r3
 8005560:	0011      	movs	r1, r2
 8005562:	2303      	movs	r3, #3
 8005564:	001a      	movs	r2, r3
 8005566:	f000 fd9c 	bl	80060a2 <memcpy>
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800556a:	197b      	adds	r3, r7, r5
 800556c:	3304      	adds	r3, #4
 800556e:	193a      	adds	r2, r7, r4
 8005570:	7812      	ldrb	r2, [r2, #0]
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	0018      	movs	r0, r3
 8005576:	f000 fd94 	bl	80060a2 <memcpy>
  
  if (hciContext.io.Send)
 800557a:	4b09      	ldr	r3, [pc, #36]	; (80055a0 <send_cmd+0xa0>)
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <send_cmd+0x96>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8005582:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <send_cmd+0xa0>)
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	193a      	adds	r2, r7, r4
 8005588:	7812      	ldrb	r2, [r2, #0]
 800558a:	b292      	uxth	r2, r2
 800558c:	3204      	adds	r2, #4
 800558e:	b291      	uxth	r1, r2
 8005590:	197a      	adds	r2, r7, r5
 8005592:	0010      	movs	r0, r2
 8005594:	4798      	blx	r3
  }
}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	46bd      	mov	sp, r7
 800559a:	b026      	add	sp, #152	; 0x98
 800559c:	bdb0      	pop	{r4, r5, r7, pc}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	200005dc 	.word	0x200005dc

080055a4 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80055ae:	e00c      	b.n	80055ca <move_list+0x26>
  {
    list_remove_tail(src_list, &tmp_node);
 80055b0:	230c      	movs	r3, #12
 80055b2:	18fa      	adds	r2, r7, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	0011      	movs	r1, r2
 80055b8:	0018      	movs	r0, r3
 80055ba:	f000 fb13 	bl	8005be4 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	0011      	movs	r1, r2
 80055c4:	0018      	movs	r0, r3
 80055c6:	f000 fa7f 	bl	8005ac8 <list_insert_head>
  while (!list_is_empty(src_list))
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	0018      	movs	r0, r3
 80055ce:	f000 fa55 	bl	8005a7c <list_is_empty>
 80055d2:	1e03      	subs	r3, r0, #0
 80055d4:	d0ec      	beq.n	80055b0 <move_list+0xc>
  }
}
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	46c0      	nop			; (mov r8, r8)
 80055da:	46bd      	mov	sp, r7
 80055dc:	b004      	add	sp, #16
 80055de:	bd80      	pop	{r7, pc}

080055e0 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80055e6:	e00b      	b.n	8005600 <free_event_list+0x20>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80055e8:	1d3a      	adds	r2, r7, #4
 80055ea:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <free_event_list+0x38>)
 80055ec:	0011      	movs	r1, r2
 80055ee:	0018      	movs	r0, r3
 80055f0:	f000 fad1 	bl	8005b96 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	4b09      	ldr	r3, [pc, #36]	; (800561c <free_event_list+0x3c>)
 80055f8:	0011      	movs	r1, r2
 80055fa:	0018      	movs	r0, r3
 80055fc:	f000 fa88 	bl	8005b10 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005600:	4b06      	ldr	r3, [pc, #24]	; (800561c <free_event_list+0x3c>)
 8005602:	0018      	movs	r0, r3
 8005604:	f000 fb15 	bl	8005c32 <list_get_size>
 8005608:	0003      	movs	r3, r0
 800560a:	2b01      	cmp	r3, #1
 800560c:	ddec      	ble.n	80055e8 <free_event_list+0x8>
  }
}
 800560e:	46c0      	nop			; (mov r8, r8)
 8005610:	46c0      	nop			; (mov r8, r8)
 8005612:	46bd      	mov	sp, r7
 8005614:	b002      	add	sp, #8
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20000318 	.word	0x20000318
 800561c:	20000310 	.word	0x20000310

08005620 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005620:	b590      	push	{r4, r7, lr}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8005630:	4b1d      	ldr	r3, [pc, #116]	; (80056a8 <hci_init+0x88>)
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	61da      	str	r2, [r3, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8005636:	4b1d      	ldr	r3, [pc, #116]	; (80056ac <hci_init+0x8c>)
 8005638:	0018      	movs	r0, r3
 800563a:	f000 fa11 	bl	8005a60 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800563e:	4b1c      	ldr	r3, [pc, #112]	; (80056b0 <hci_init+0x90>)
 8005640:	0018      	movs	r0, r3
 8005642:	f000 fa0d 	bl	8005a60 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8005646:	f7fb f973 	bl	8000930 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800564a:	230f      	movs	r3, #15
 800564c:	18fb      	adds	r3, r7, r3
 800564e:	2200      	movs	r2, #0
 8005650:	701a      	strb	r2, [r3, #0]
 8005652:	e010      	b.n	8005676 <hci_init+0x56>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8005654:	240f      	movs	r4, #15
 8005656:	193b      	adds	r3, r7, r4
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	228c      	movs	r2, #140	; 0x8c
 800565c:	435a      	muls	r2, r3
 800565e:	4b15      	ldr	r3, [pc, #84]	; (80056b4 <hci_init+0x94>)
 8005660:	18d2      	adds	r2, r2, r3
 8005662:	4b12      	ldr	r3, [pc, #72]	; (80056ac <hci_init+0x8c>)
 8005664:	0011      	movs	r1, r2
 8005666:	0018      	movs	r0, r3
 8005668:	f000 fa52 	bl	8005b10 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800566c:	193b      	adds	r3, r7, r4
 800566e:	781a      	ldrb	r2, [r3, #0]
 8005670:	193b      	adds	r3, r7, r4
 8005672:	3201      	adds	r2, #1
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	230f      	movs	r3, #15
 8005678:	18fb      	adds	r3, r7, r3
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b04      	cmp	r3, #4
 800567e:	d9e9      	bls.n	8005654 <hci_init+0x34>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8005680:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <hci_init+0x88>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <hci_init+0x70>
 8005688:	4b07      	ldr	r3, [pc, #28]	; (80056a8 <hci_init+0x88>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2000      	movs	r0, #0
 800568e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <hci_init+0x88>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <hci_init+0x7e>
 8005698:	4b03      	ldr	r3, [pc, #12]	; (80056a8 <hci_init+0x88>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	4798      	blx	r3
}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b005      	add	sp, #20
 80056a4:	bd90      	pop	{r4, r7, pc}
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	200005dc 	.word	0x200005dc
 80056ac:	20000310 	.word	0x20000310
 80056b0:	20000318 	.word	0x20000318
 80056b4:	20000320 	.word	0x20000320

080056b8 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <hci_register_io_bus+0x38>)
 80056c6:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	4b08      	ldr	r3, [pc, #32]	; (80056f0 <hci_register_io_bus+0x38>)
 80056ce:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <hci_register_io_bus+0x38>)
 80056d6:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699a      	ldr	r2, [r3, #24]
 80056dc:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <hci_register_io_bus+0x38>)
 80056de:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	4b02      	ldr	r3, [pc, #8]	; (80056f0 <hci_register_io_bus+0x38>)
 80056e6:	609a      	str	r2, [r3, #8]
}
 80056e8:	46c0      	nop			; (mov r8, r8)
 80056ea:	46bd      	mov	sp, r7
 80056ec:	b002      	add	sp, #8
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	200005dc 	.word	0x200005dc

080056f4 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08e      	sub	sp, #56	; 0x38
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	000a      	movs	r2, r1
 80056fe:	1cfb      	adds	r3, r7, #3
 8005700:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	885b      	ldrh	r3, [r3, #2]
 8005706:	b21b      	sxth	r3, r3
 8005708:	059b      	lsls	r3, r3, #22
 800570a:	0d9b      	lsrs	r3, r3, #22
 800570c:	b21a      	sxth	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	029b      	lsls	r3, r3, #10
 8005714:	b21b      	sxth	r3, r3
 8005716:	4313      	orrs	r3, r2
 8005718:	b21a      	sxth	r2, r3
 800571a:	2336      	movs	r3, #54	; 0x36
 800571c:	18fb      	adds	r3, r7, r3
 800571e:	801a      	strh	r2, [r3, #0]
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8005720:	2300      	movs	r3, #0
 8005722:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8005724:	2308      	movs	r3, #8
 8005726:	18fb      	adds	r3, r7, r3
 8005728:	0018      	movs	r0, r3
 800572a:	f000 f999 	bl	8005a60 <list_init_head>

  free_event_list();
 800572e:	f7ff ff57 	bl	80055e0 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	8818      	ldrh	r0, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	8859      	ldrh	r1, [r3, #2]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	b2da      	uxtb	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f7ff fedc 	bl	8005500 <send_cmd>
  
  if (async)
 8005748:	1cfb      	adds	r3, r7, #3
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <hci_send_req+0x60>
  {
    return 0;
 8005750:	2300      	movs	r3, #0
 8005752:	e0f8      	b.n	8005946 <hci_send_req+0x252>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8005754:	f7fc facc 	bl	8001cf0 <HAL_GetTick>
 8005758:	0003      	movs	r3, r0
 800575a:	633b      	str	r3, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800575c:	f7fc fac8 	bl	8001cf0 <HAL_GetTick>
 8005760:	0002      	movs	r2, r0
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	1ad2      	subs	r2, r2, r3
 8005766:	23fa      	movs	r3, #250	; 0xfa
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	429a      	cmp	r2, r3
 800576c:	d900      	bls.n	8005770 <hci_send_req+0x7c>
 800576e:	e0c2      	b.n	80058f6 <hci_send_req+0x202>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8005770:	4b77      	ldr	r3, [pc, #476]	; (8005950 <hci_send_req+0x25c>)
 8005772:	0018      	movs	r0, r3
 8005774:	f000 f982 	bl	8005a7c <list_is_empty>
 8005778:	1e03      	subs	r3, r0, #0
 800577a:	d000      	beq.n	800577e <hci_send_req+0x8a>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800577c:	e7ee      	b.n	800575c <hci_send_req+0x68>
      {
        break;
 800577e:	46c0      	nop			; (mov r8, r8)
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8005780:	2310      	movs	r3, #16
 8005782:	18fa      	adds	r2, r7, r3
 8005784:	4b72      	ldr	r3, [pc, #456]	; (8005950 <hci_send_req+0x25c>)
 8005786:	0011      	movs	r1, r2
 8005788:	0018      	movs	r0, r3
 800578a:	f000 fa04 	bl	8005b96 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	3308      	adds	r3, #8
 8005792:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8005794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b04      	cmp	r3, #4
 800579a:	d000      	beq.n	800579e <hci_send_req+0xaa>
 800579c:	e085      	b.n	80058aa <hci_send_req+0x1b6>
    {
      event_pckt = (void *)(hci_hdr->data);
 800579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a0:	3301      	adds	r3, #1
 80057a2:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	3308      	adds	r3, #8
 80057a8:	3303      	adds	r3, #3
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	2288      	movs	r2, #136	; 0x88
 80057b0:	5c9b      	ldrb	r3, [r3, r2]
 80057b2:	3b03      	subs	r3, #3
 80057b4:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b3e      	cmp	r3, #62	; 0x3e
 80057bc:	d057      	beq.n	800586e <hci_send_req+0x17a>
 80057be:	dd00      	ble.n	80057c2 <hci_send_req+0xce>
 80057c0:	e075      	b.n	80058ae <hci_send_req+0x1ba>
 80057c2:	2b10      	cmp	r3, #16
 80057c4:	d100      	bne.n	80057c8 <hci_send_req+0xd4>
 80057c6:	e098      	b.n	80058fa <hci_send_req+0x206>
 80057c8:	dd00      	ble.n	80057cc <hci_send_req+0xd8>
 80057ca:	e070      	b.n	80058ae <hci_send_req+0x1ba>
 80057cc:	2b0e      	cmp	r3, #14
 80057ce:	d02a      	beq.n	8005826 <hci_send_req+0x132>
 80057d0:	2b0f      	cmp	r3, #15
 80057d2:	d000      	beq.n	80057d6 <hci_send_req+0xe2>
 80057d4:	e06b      	b.n	80058ae <hci_send_req+0x1ba>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	789a      	ldrb	r2, [r3, #2]
 80057de:	78db      	ldrb	r3, [r3, #3]
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	4313      	orrs	r3, r2
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	2236      	movs	r2, #54	; 0x36
 80057e8:	18ba      	adds	r2, r7, r2
 80057ea:	8812      	ldrh	r2, [r2, #0]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d000      	beq.n	80057f2 <hci_send_req+0xfe>
 80057f0:	e085      	b.n	80058fe <hci_send_req+0x20a>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2b0f      	cmp	r3, #15
 80057f8:	d004      	beq.n	8005804 <hci_send_req+0x110>
          if (cs->status) {
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d057      	beq.n	80058b2 <hci_send_req+0x1be>
            goto failed;
 8005802:	e07f      	b.n	8005904 <hci_send_req+0x210>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	695a      	ldr	r2, [r3, #20]
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	4293      	cmp	r3, r2
 800580c:	d900      	bls.n	8005810 <hci_send_req+0x11c>
 800580e:	0013      	movs	r3, r2
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6918      	ldr	r0, [r3, #16]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	695a      	ldr	r2, [r3, #20]
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	0019      	movs	r1, r3
 8005820:	f000 fc3f 	bl	80060a2 <memcpy>
        goto done;
 8005824:	e081      	b.n	800592a <hci_send_req+0x236>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	785a      	ldrb	r2, [r3, #1]
 800582e:	789b      	ldrb	r3, [r3, #2]
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	4313      	orrs	r3, r2
 8005834:	b29b      	uxth	r3, r3
 8005836:	2236      	movs	r2, #54	; 0x36
 8005838:	18ba      	adds	r2, r7, r2
 800583a:	8812      	ldrh	r2, [r2, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d160      	bne.n	8005902 <hci_send_req+0x20e>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	3303      	adds	r3, #3
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	3b03      	subs	r3, #3
 800584a:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	695a      	ldr	r2, [r3, #20]
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	4293      	cmp	r3, r2
 8005854:	d900      	bls.n	8005858 <hci_send_req+0x164>
 8005856:	0013      	movs	r3, r2
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6918      	ldr	r0, [r3, #16]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	695a      	ldr	r2, [r3, #20]
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	0019      	movs	r1, r3
 8005868:	f000 fc1b 	bl	80060a2 <memcpy>
        goto done;
 800586c:	e05d      	b.n	800592a <hci_send_req+0x236>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	001a      	movs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	429a      	cmp	r2, r3
 800587e:	d11a      	bne.n	80058b6 <hci_send_req+0x1c2>
          break;
      
        len -= 1;
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	3b01      	subs	r3, #1
 8005884:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695a      	ldr	r2, [r3, #20]
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	4293      	cmp	r3, r2
 800588e:	d900      	bls.n	8005892 <hci_send_req+0x19e>
 8005890:	0013      	movs	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6918      	ldr	r0, [r3, #16]
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	1c59      	adds	r1, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	001a      	movs	r2, r3
 80058a4:	f000 fbfd 	bl	80060a2 <memcpy>
        goto done;
 80058a8:	e03f      	b.n	800592a <hci_send_req+0x236>
        goto failed;
      
      default:      
        break;
      }
    }
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	e004      	b.n	80058b8 <hci_send_req+0x1c4>
        break;
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	e002      	b.n	80058b8 <hci_send_req+0x1c4>
          break;
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	e000      	b.n	80058b8 <hci_send_req+0x1c4>
          break;
 80058b6:	46c0      	nop			; (mov r8, r8)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80058b8:	4b26      	ldr	r3, [pc, #152]	; (8005954 <hci_send_req+0x260>)
 80058ba:	0018      	movs	r0, r3
 80058bc:	f000 f8de 	bl	8005a7c <list_is_empty>
 80058c0:	1e03      	subs	r3, r0, #0
 80058c2:	d00e      	beq.n	80058e2 <hci_send_req+0x1ee>
 80058c4:	4b22      	ldr	r3, [pc, #136]	; (8005950 <hci_send_req+0x25c>)
 80058c6:	0018      	movs	r0, r3
 80058c8:	f000 f8d8 	bl	8005a7c <list_is_empty>
 80058cc:	1e03      	subs	r3, r0, #0
 80058ce:	d008      	beq.n	80058e2 <hci_send_req+0x1ee>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4b20      	ldr	r3, [pc, #128]	; (8005954 <hci_send_req+0x260>)
 80058d4:	0011      	movs	r1, r2
 80058d6:	0018      	movs	r0, r3
 80058d8:	f000 f91a 	bl	8005b10 <list_insert_tail>
      hciReadPacket=NULL;
 80058dc:	2300      	movs	r3, #0
 80058de:	613b      	str	r3, [r7, #16]
 80058e0:	e008      	b.n	80058f4 <hci_send_req+0x200>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	2308      	movs	r3, #8
 80058e6:	18fb      	adds	r3, r7, r3
 80058e8:	0011      	movs	r1, r2
 80058ea:	0018      	movs	r0, r3
 80058ec:	f000 f910 	bl	8005b10 <list_insert_tail>
      hciReadPacket=NULL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	613b      	str	r3, [r7, #16]
  {
 80058f4:	e72e      	b.n	8005754 <hci_send_req+0x60>
        goto failed;
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	e004      	b.n	8005904 <hci_send_req+0x210>
        goto failed;
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	e002      	b.n	8005904 <hci_send_req+0x210>
          goto failed;
 80058fe:	46c0      	nop			; (mov r8, r8)
 8005900:	e000      	b.n	8005904 <hci_send_req+0x210>
          goto failed;
 8005902:	46c0      	nop			; (mov r8, r8)
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d005      	beq.n	8005916 <hci_send_req+0x222>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4b11      	ldr	r3, [pc, #68]	; (8005954 <hci_send_req+0x260>)
 800590e:	0011      	movs	r1, r2
 8005910:	0018      	movs	r0, r3
 8005912:	f000 f8d9 	bl	8005ac8 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8005916:	2308      	movs	r3, #8
 8005918:	18fa      	adds	r2, r7, r3
 800591a:	4b0d      	ldr	r3, [pc, #52]	; (8005950 <hci_send_req+0x25c>)
 800591c:	0011      	movs	r1, r2
 800591e:	0018      	movs	r0, r3
 8005920:	f7ff fe40 	bl	80055a4 <move_list>

  return -1;
 8005924:	2301      	movs	r3, #1
 8005926:	425b      	negs	r3, r3
 8005928:	e00d      	b.n	8005946 <hci_send_req+0x252>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4b09      	ldr	r3, [pc, #36]	; (8005954 <hci_send_req+0x260>)
 800592e:	0011      	movs	r1, r2
 8005930:	0018      	movs	r0, r3
 8005932:	f000 f8c9 	bl	8005ac8 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8005936:	2308      	movs	r3, #8
 8005938:	18fa      	adds	r2, r7, r3
 800593a:	4b05      	ldr	r3, [pc, #20]	; (8005950 <hci_send_req+0x25c>)
 800593c:	0011      	movs	r1, r2
 800593e:	0018      	movs	r0, r3
 8005940:	f7ff fe30 	bl	80055a4 <move_list>

  return 0;
 8005944:	2300      	movs	r3, #0
}
 8005946:	0018      	movs	r0, r3
 8005948:	46bd      	mov	sp, r7
 800594a:	b00e      	add	sp, #56	; 0x38
 800594c:	bd80      	pop	{r7, pc}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	20000318 	.word	0x20000318
 8005954:	20000310 	.word	0x20000310

08005958 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800595e:	2300      	movs	r3, #0
 8005960:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8005962:	e015      	b.n	8005990 <hci_user_evt_proc+0x38>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8005964:	1d3a      	adds	r2, r7, #4
 8005966:	4b10      	ldr	r3, [pc, #64]	; (80059a8 <hci_user_evt_proc+0x50>)
 8005968:	0011      	movs	r1, r2
 800596a:	0018      	movs	r0, r3
 800596c:	f000 f913 	bl	8005b96 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8005970:	4b0e      	ldr	r3, [pc, #56]	; (80059ac <hci_user_evt_proc+0x54>)
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d005      	beq.n	8005984 <hci_user_evt_proc+0x2c>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8005978:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <hci_user_evt_proc+0x54>)
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	3208      	adds	r2, #8
 8005980:	0010      	movs	r0, r2
 8005982:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <hci_user_evt_proc+0x58>)
 8005988:	0011      	movs	r1, r2
 800598a:	0018      	movs	r0, r3
 800598c:	f000 f8c0 	bl	8005b10 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8005990:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <hci_user_evt_proc+0x50>)
 8005992:	0018      	movs	r0, r3
 8005994:	f000 f872 	bl	8005a7c <list_is_empty>
 8005998:	1e03      	subs	r3, r0, #0
 800599a:	d0e3      	beq.n	8005964 <hci_user_evt_proc+0xc>
  }
}
 800599c:	46c0      	nop			; (mov r8, r8)
 800599e:	46c0      	nop			; (mov r8, r8)
 80059a0:	46bd      	mov	sp, r7
 80059a2:	b002      	add	sp, #8
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	20000318 	.word	0x20000318
 80059ac:	200005dc 	.word	0x200005dc
 80059b0:	20000310 	.word	0x20000310

080059b4 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80059c4:	4b23      	ldr	r3, [pc, #140]	; (8005a54 <hci_notify_asynch_evt+0xa0>)
 80059c6:	0018      	movs	r0, r3
 80059c8:	f000 f858 	bl	8005a7c <list_is_empty>
 80059cc:	1e03      	subs	r3, r0, #0
 80059ce:	d13a      	bne.n	8005a46 <hci_notify_asynch_evt+0x92>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80059d0:	230c      	movs	r3, #12
 80059d2:	18fa      	adds	r2, r7, r3
 80059d4:	4b1f      	ldr	r3, [pc, #124]	; (8005a54 <hci_notify_asynch_evt+0xa0>)
 80059d6:	0011      	movs	r1, r2
 80059d8:	0018      	movs	r0, r3
 80059da:	f000 f8dc 	bl	8005b96 <list_remove_head>
    
    if (hciContext.io.Receive)
 80059de:	4b1e      	ldr	r3, [pc, #120]	; (8005a58 <hci_notify_asynch_evt+0xa4>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d031      	beq.n	8005a4a <hci_notify_asynch_evt+0x96>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80059e6:	4b1c      	ldr	r3, [pc, #112]	; (8005a58 <hci_notify_asynch_evt+0xa4>)
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	3208      	adds	r2, #8
 80059ee:	2180      	movs	r1, #128	; 0x80
 80059f0:	0010      	movs	r0, r2
 80059f2:	4798      	blx	r3
 80059f4:	0002      	movs	r2, r0
 80059f6:	2113      	movs	r1, #19
 80059f8:	187b      	adds	r3, r7, r1
 80059fa:	701a      	strb	r2, [r3, #0]
      if (data_len > 0)
 80059fc:	000a      	movs	r2, r1
 80059fe:	18bb      	adds	r3, r7, r2
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d018      	beq.n	8005a38 <hci_notify_asynch_evt+0x84>
      {                    
        hciReadPacket->data_len = data_len;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	18ba      	adds	r2, r7, r2
 8005a0a:	2188      	movs	r1, #136	; 0x88
 8005a0c:	7812      	ldrb	r2, [r2, #0]
 8005a0e:	545a      	strb	r2, [r3, r1]
        if (verify_packet(hciReadPacket) == 0)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	0018      	movs	r0, r3
 8005a14:	f7ff fd56 	bl	80054c4 <verify_packet>
 8005a18:	1e03      	subs	r3, r0, #0
 8005a1a:	d106      	bne.n	8005a2a <hci_notify_asynch_evt+0x76>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <hci_notify_asynch_evt+0xa8>)
 8005a20:	0011      	movs	r1, r2
 8005a22:	0018      	movs	r0, r3
 8005a24:	f000 f874 	bl	8005b10 <list_insert_tail>
 8005a28:	e00f      	b.n	8005a4a <hci_notify_asynch_evt+0x96>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	4b09      	ldr	r3, [pc, #36]	; (8005a54 <hci_notify_asynch_evt+0xa0>)
 8005a2e:	0011      	movs	r1, r2
 8005a30:	0018      	movs	r0, r3
 8005a32:	f000 f849 	bl	8005ac8 <list_insert_head>
 8005a36:	e008      	b.n	8005a4a <hci_notify_asynch_evt+0x96>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <hci_notify_asynch_evt+0xa0>)
 8005a3c:	0011      	movs	r1, r2
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f000 f842 	bl	8005ac8 <list_insert_head>
 8005a44:	e001      	b.n	8005a4a <hci_notify_asynch_evt+0x96>
      }
    }
  }
  else 
  {
    ret = 1;
 8005a46:	2301      	movs	r3, #1
 8005a48:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8005a4a:	697b      	ldr	r3, [r7, #20]

}
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b006      	add	sp, #24
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	20000310 	.word	0x20000310
 8005a58:	200005dc 	.word	0x200005dc
 8005a5c:	20000318 	.word	0x20000318

08005a60 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	605a      	str	r2, [r3, #4]
}
 8005a74:	46c0      	nop			; (mov r8, r8)
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b002      	add	sp, #8
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a84:	f3ef 8310 	mrs	r3, PRIMASK
 8005a88:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005a8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a8e:	b672      	cpsid	i
}
 8005a90:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d104      	bne.n	8005aa6 <list_is_empty+0x2a>
  {
    return_value = 1;
 8005a9c:	2317      	movs	r3, #23
 8005a9e:	18fb      	adds	r3, r7, r3
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	e003      	b.n	8005aae <list_is_empty+0x32>
  }
  else
  {
    return_value = 0;
 8005aa6:	2317      	movs	r3, #23
 8005aa8:	18fb      	adds	r3, r7, r3
 8005aaa:	2200      	movs	r2, #0
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f383 8810 	msr	PRIMASK, r3
}
 8005ab8:	46c0      	nop			; (mov r8, r8)
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8005aba:	2317      	movs	r3, #23
 8005abc:	18fb      	adds	r3, r7, r3
 8005abe:	781b      	ldrb	r3, [r3, #0]
}
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	b006      	add	sp, #24
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ad6:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005ada:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005adc:	b672      	cpsid	i
}
 8005ade:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	605a      	str	r2, [r3, #4]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f383 8810 	msr	PRIMASK, r3
}
 8005b06:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005b08:	46c0      	nop			; (mov r8, r8)
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b006      	add	sp, #24
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b20:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005b22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b24:	b672      	cpsid	i
}
 8005b26:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f383 8810 	msr	PRIMASK, r3
}
 8005b4e:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005b50:	46c0      	nop			; (mov r8, r8)
 8005b52:	46bd      	mov	sp, r7
 8005b54:	b006      	add	sp, #24
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b60:	f3ef 8310 	mrs	r3, PRIMASK
 8005b64:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b66:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005b68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b6a:	b672      	cpsid	i
}
 8005b6c:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6852      	ldr	r2, [r2, #4]
 8005b80:	605a      	str	r2, [r3, #4]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f383 8810 	msr	PRIMASK, r3
}
 8005b8c:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005b8e:	46c0      	nop			; (mov r8, r8)
 8005b90:	46bd      	mov	sp, r7
 8005b92:	b006      	add	sp, #24
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b086      	sub	sp, #24
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ba0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ba4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005ba8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005baa:	b672      	cpsid	i
}
 8005bac:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f7ff ffcc 	bl	8005b58 <list_remove_node>
  (*node)->next = NULL;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	605a      	str	r2, [r3, #4]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f383 8810 	msr	PRIMASK, r3
}
 8005bda:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005bdc:	46c0      	nop			; (mov r8, r8)
 8005bde:	46bd      	mov	sp, r7
 8005be0:	b006      	add	sp, #24
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bee:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005bf6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bf8:	b672      	cpsid	i
}
 8005bfa:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f7ff ffa5 	bl	8005b58 <list_remove_node>
  (*node)->next = NULL;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	605a      	str	r2, [r3, #4]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f383 8810 	msr	PRIMASK, r3
}
 8005c28:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	b006      	add	sp, #24
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b088      	sub	sp, #32
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  int size = 0;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c42:	613b      	str	r3, [r7, #16]
  return(result);
 8005c44:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005c46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c48:	b672      	cpsid	i
}
 8005c4a:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8005c52:	e005      	b.n	8005c60 <list_get_size+0x2e>
  {
    size++;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	3301      	adds	r3, #1
 8005c58:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d1f5      	bne.n	8005c54 <list_get_size+0x22>
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f383 8810 	msr	PRIMASK, r3
}
 8005c72:	46c0      	nop			; (mov r8, r8)
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8005c74:	69fb      	ldr	r3, [r7, #28]
}
 8005c76:	0018      	movs	r0, r3
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	b008      	add	sp, #32
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <__errno>:
 8005c80:	4b01      	ldr	r3, [pc, #4]	; (8005c88 <__errno+0x8>)
 8005c82:	6818      	ldr	r0, [r3, #0]
 8005c84:	4770      	bx	lr
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	20000068 	.word	0x20000068

08005c8c <__sflush_r>:
 8005c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c8e:	898b      	ldrh	r3, [r1, #12]
 8005c90:	0005      	movs	r5, r0
 8005c92:	000c      	movs	r4, r1
 8005c94:	071a      	lsls	r2, r3, #28
 8005c96:	d45f      	bmi.n	8005d58 <__sflush_r+0xcc>
 8005c98:	684a      	ldr	r2, [r1, #4]
 8005c9a:	2a00      	cmp	r2, #0
 8005c9c:	dc04      	bgt.n	8005ca8 <__sflush_r+0x1c>
 8005c9e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005ca0:	2a00      	cmp	r2, #0
 8005ca2:	dc01      	bgt.n	8005ca8 <__sflush_r+0x1c>
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ca8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005caa:	2f00      	cmp	r7, #0
 8005cac:	d0fa      	beq.n	8005ca4 <__sflush_r+0x18>
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2180      	movs	r1, #128	; 0x80
 8005cb2:	682e      	ldr	r6, [r5, #0]
 8005cb4:	602a      	str	r2, [r5, #0]
 8005cb6:	001a      	movs	r2, r3
 8005cb8:	0149      	lsls	r1, r1, #5
 8005cba:	400a      	ands	r2, r1
 8005cbc:	420b      	tst	r3, r1
 8005cbe:	d034      	beq.n	8005d2a <__sflush_r+0x9e>
 8005cc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	075b      	lsls	r3, r3, #29
 8005cc6:	d506      	bpl.n	8005cd6 <__sflush_r+0x4a>
 8005cc8:	6863      	ldr	r3, [r4, #4]
 8005cca:	1ac0      	subs	r0, r0, r3
 8005ccc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <__sflush_r+0x4a>
 8005cd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cd4:	1ac0      	subs	r0, r0, r3
 8005cd6:	0002      	movs	r2, r0
 8005cd8:	6a21      	ldr	r1, [r4, #32]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	0028      	movs	r0, r5
 8005cde:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005ce0:	47b8      	blx	r7
 8005ce2:	89a1      	ldrh	r1, [r4, #12]
 8005ce4:	1c43      	adds	r3, r0, #1
 8005ce6:	d106      	bne.n	8005cf6 <__sflush_r+0x6a>
 8005ce8:	682b      	ldr	r3, [r5, #0]
 8005cea:	2b1d      	cmp	r3, #29
 8005cec:	d831      	bhi.n	8005d52 <__sflush_r+0xc6>
 8005cee:	4a2c      	ldr	r2, [pc, #176]	; (8005da0 <__sflush_r+0x114>)
 8005cf0:	40da      	lsrs	r2, r3
 8005cf2:	07d3      	lsls	r3, r2, #31
 8005cf4:	d52d      	bpl.n	8005d52 <__sflush_r+0xc6>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	6063      	str	r3, [r4, #4]
 8005cfa:	6923      	ldr	r3, [r4, #16]
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	04cb      	lsls	r3, r1, #19
 8005d00:	d505      	bpl.n	8005d0e <__sflush_r+0x82>
 8005d02:	1c43      	adds	r3, r0, #1
 8005d04:	d102      	bne.n	8005d0c <__sflush_r+0x80>
 8005d06:	682b      	ldr	r3, [r5, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d100      	bne.n	8005d0e <__sflush_r+0x82>
 8005d0c:	6560      	str	r0, [r4, #84]	; 0x54
 8005d0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d10:	602e      	str	r6, [r5, #0]
 8005d12:	2900      	cmp	r1, #0
 8005d14:	d0c6      	beq.n	8005ca4 <__sflush_r+0x18>
 8005d16:	0023      	movs	r3, r4
 8005d18:	3344      	adds	r3, #68	; 0x44
 8005d1a:	4299      	cmp	r1, r3
 8005d1c:	d002      	beq.n	8005d24 <__sflush_r+0x98>
 8005d1e:	0028      	movs	r0, r5
 8005d20:	f000 f9d0 	bl	80060c4 <_free_r>
 8005d24:	2000      	movs	r0, #0
 8005d26:	6360      	str	r0, [r4, #52]	; 0x34
 8005d28:	e7bd      	b.n	8005ca6 <__sflush_r+0x1a>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	0028      	movs	r0, r5
 8005d2e:	6a21      	ldr	r1, [r4, #32]
 8005d30:	47b8      	blx	r7
 8005d32:	1c43      	adds	r3, r0, #1
 8005d34:	d1c5      	bne.n	8005cc2 <__sflush_r+0x36>
 8005d36:	682b      	ldr	r3, [r5, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0c2      	beq.n	8005cc2 <__sflush_r+0x36>
 8005d3c:	2b1d      	cmp	r3, #29
 8005d3e:	d001      	beq.n	8005d44 <__sflush_r+0xb8>
 8005d40:	2b16      	cmp	r3, #22
 8005d42:	d101      	bne.n	8005d48 <__sflush_r+0xbc>
 8005d44:	602e      	str	r6, [r5, #0]
 8005d46:	e7ad      	b.n	8005ca4 <__sflush_r+0x18>
 8005d48:	2340      	movs	r3, #64	; 0x40
 8005d4a:	89a2      	ldrh	r2, [r4, #12]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	81a3      	strh	r3, [r4, #12]
 8005d50:	e7a9      	b.n	8005ca6 <__sflush_r+0x1a>
 8005d52:	2340      	movs	r3, #64	; 0x40
 8005d54:	430b      	orrs	r3, r1
 8005d56:	e7fa      	b.n	8005d4e <__sflush_r+0xc2>
 8005d58:	690f      	ldr	r7, [r1, #16]
 8005d5a:	2f00      	cmp	r7, #0
 8005d5c:	d0a2      	beq.n	8005ca4 <__sflush_r+0x18>
 8005d5e:	680a      	ldr	r2, [r1, #0]
 8005d60:	600f      	str	r7, [r1, #0]
 8005d62:	1bd2      	subs	r2, r2, r7
 8005d64:	9201      	str	r2, [sp, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	079b      	lsls	r3, r3, #30
 8005d6a:	d100      	bne.n	8005d6e <__sflush_r+0xe2>
 8005d6c:	694a      	ldr	r2, [r1, #20]
 8005d6e:	60a2      	str	r2, [r4, #8]
 8005d70:	9b01      	ldr	r3, [sp, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	dc00      	bgt.n	8005d78 <__sflush_r+0xec>
 8005d76:	e795      	b.n	8005ca4 <__sflush_r+0x18>
 8005d78:	003a      	movs	r2, r7
 8005d7a:	0028      	movs	r0, r5
 8005d7c:	9b01      	ldr	r3, [sp, #4]
 8005d7e:	6a21      	ldr	r1, [r4, #32]
 8005d80:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d82:	47b0      	blx	r6
 8005d84:	2800      	cmp	r0, #0
 8005d86:	dc06      	bgt.n	8005d96 <__sflush_r+0x10a>
 8005d88:	2340      	movs	r3, #64	; 0x40
 8005d8a:	2001      	movs	r0, #1
 8005d8c:	89a2      	ldrh	r2, [r4, #12]
 8005d8e:	4240      	negs	r0, r0
 8005d90:	4313      	orrs	r3, r2
 8005d92:	81a3      	strh	r3, [r4, #12]
 8005d94:	e787      	b.n	8005ca6 <__sflush_r+0x1a>
 8005d96:	9b01      	ldr	r3, [sp, #4]
 8005d98:	183f      	adds	r7, r7, r0
 8005d9a:	1a1b      	subs	r3, r3, r0
 8005d9c:	9301      	str	r3, [sp, #4]
 8005d9e:	e7e7      	b.n	8005d70 <__sflush_r+0xe4>
 8005da0:	20400001 	.word	0x20400001

08005da4 <_fflush_r>:
 8005da4:	690b      	ldr	r3, [r1, #16]
 8005da6:	b570      	push	{r4, r5, r6, lr}
 8005da8:	0005      	movs	r5, r0
 8005daa:	000c      	movs	r4, r1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d102      	bne.n	8005db6 <_fflush_r+0x12>
 8005db0:	2500      	movs	r5, #0
 8005db2:	0028      	movs	r0, r5
 8005db4:	bd70      	pop	{r4, r5, r6, pc}
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d004      	beq.n	8005dc4 <_fflush_r+0x20>
 8005dba:	6983      	ldr	r3, [r0, #24]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <_fflush_r+0x20>
 8005dc0:	f000 f8a8 	bl	8005f14 <__sinit>
 8005dc4:	4b14      	ldr	r3, [pc, #80]	; (8005e18 <_fflush_r+0x74>)
 8005dc6:	429c      	cmp	r4, r3
 8005dc8:	d11b      	bne.n	8005e02 <_fflush_r+0x5e>
 8005dca:	686c      	ldr	r4, [r5, #4]
 8005dcc:	220c      	movs	r2, #12
 8005dce:	5ea3      	ldrsh	r3, [r4, r2]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0ed      	beq.n	8005db0 <_fflush_r+0xc>
 8005dd4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005dd6:	07d2      	lsls	r2, r2, #31
 8005dd8:	d404      	bmi.n	8005de4 <_fflush_r+0x40>
 8005dda:	059b      	lsls	r3, r3, #22
 8005ddc:	d402      	bmi.n	8005de4 <_fflush_r+0x40>
 8005dde:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005de0:	f000 f95d 	bl	800609e <__retarget_lock_acquire_recursive>
 8005de4:	0028      	movs	r0, r5
 8005de6:	0021      	movs	r1, r4
 8005de8:	f7ff ff50 	bl	8005c8c <__sflush_r>
 8005dec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dee:	0005      	movs	r5, r0
 8005df0:	07db      	lsls	r3, r3, #31
 8005df2:	d4de      	bmi.n	8005db2 <_fflush_r+0xe>
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	059b      	lsls	r3, r3, #22
 8005df8:	d4db      	bmi.n	8005db2 <_fflush_r+0xe>
 8005dfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dfc:	f000 f950 	bl	80060a0 <__retarget_lock_release_recursive>
 8005e00:	e7d7      	b.n	8005db2 <_fflush_r+0xe>
 8005e02:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <_fflush_r+0x78>)
 8005e04:	429c      	cmp	r4, r3
 8005e06:	d101      	bne.n	8005e0c <_fflush_r+0x68>
 8005e08:	68ac      	ldr	r4, [r5, #8]
 8005e0a:	e7df      	b.n	8005dcc <_fflush_r+0x28>
 8005e0c:	4b04      	ldr	r3, [pc, #16]	; (8005e20 <_fflush_r+0x7c>)
 8005e0e:	429c      	cmp	r4, r3
 8005e10:	d1dc      	bne.n	8005dcc <_fflush_r+0x28>
 8005e12:	68ec      	ldr	r4, [r5, #12]
 8005e14:	e7da      	b.n	8005dcc <_fflush_r+0x28>
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	08007068 	.word	0x08007068
 8005e1c:	08007088 	.word	0x08007088
 8005e20:	08007048 	.word	0x08007048

08005e24 <fflush>:
 8005e24:	0001      	movs	r1, r0
 8005e26:	b510      	push	{r4, lr}
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d105      	bne.n	8005e38 <fflush+0x14>
 8005e2c:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <fflush+0x20>)
 8005e2e:	4906      	ldr	r1, [pc, #24]	; (8005e48 <fflush+0x24>)
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	f000 f8ef 	bl	8006014 <_fwalk_reent>
 8005e36:	bd10      	pop	{r4, pc}
 8005e38:	4b04      	ldr	r3, [pc, #16]	; (8005e4c <fflush+0x28>)
 8005e3a:	6818      	ldr	r0, [r3, #0]
 8005e3c:	f7ff ffb2 	bl	8005da4 <_fflush_r>
 8005e40:	e7f9      	b.n	8005e36 <fflush+0x12>
 8005e42:	46c0      	nop			; (mov r8, r8)
 8005e44:	080070a8 	.word	0x080070a8
 8005e48:	08005da5 	.word	0x08005da5
 8005e4c:	20000068 	.word	0x20000068

08005e50 <std>:
 8005e50:	2300      	movs	r3, #0
 8005e52:	b510      	push	{r4, lr}
 8005e54:	0004      	movs	r4, r0
 8005e56:	6003      	str	r3, [r0, #0]
 8005e58:	6043      	str	r3, [r0, #4]
 8005e5a:	6083      	str	r3, [r0, #8]
 8005e5c:	8181      	strh	r1, [r0, #12]
 8005e5e:	6643      	str	r3, [r0, #100]	; 0x64
 8005e60:	0019      	movs	r1, r3
 8005e62:	81c2      	strh	r2, [r0, #14]
 8005e64:	6103      	str	r3, [r0, #16]
 8005e66:	6143      	str	r3, [r0, #20]
 8005e68:	6183      	str	r3, [r0, #24]
 8005e6a:	2208      	movs	r2, #8
 8005e6c:	305c      	adds	r0, #92	; 0x5c
 8005e6e:	f000 f921 	bl	80060b4 <memset>
 8005e72:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <std+0x38>)
 8005e74:	6224      	str	r4, [r4, #32]
 8005e76:	6263      	str	r3, [r4, #36]	; 0x24
 8005e78:	4b04      	ldr	r3, [pc, #16]	; (8005e8c <std+0x3c>)
 8005e7a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e7c:	4b04      	ldr	r3, [pc, #16]	; (8005e90 <std+0x40>)
 8005e7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e80:	4b04      	ldr	r3, [pc, #16]	; (8005e94 <std+0x44>)
 8005e82:	6323      	str	r3, [r4, #48]	; 0x30
 8005e84:	bd10      	pop	{r4, pc}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	080062e1 	.word	0x080062e1
 8005e8c:	08006309 	.word	0x08006309
 8005e90:	08006341 	.word	0x08006341
 8005e94:	0800636d 	.word	0x0800636d

08005e98 <_cleanup_r>:
 8005e98:	b510      	push	{r4, lr}
 8005e9a:	4902      	ldr	r1, [pc, #8]	; (8005ea4 <_cleanup_r+0xc>)
 8005e9c:	f000 f8ba 	bl	8006014 <_fwalk_reent>
 8005ea0:	bd10      	pop	{r4, pc}
 8005ea2:	46c0      	nop			; (mov r8, r8)
 8005ea4:	08005da5 	.word	0x08005da5

08005ea8 <__sfmoreglue>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	2568      	movs	r5, #104	; 0x68
 8005eac:	1e4a      	subs	r2, r1, #1
 8005eae:	4355      	muls	r5, r2
 8005eb0:	000e      	movs	r6, r1
 8005eb2:	0029      	movs	r1, r5
 8005eb4:	3174      	adds	r1, #116	; 0x74
 8005eb6:	f000 f971 	bl	800619c <_malloc_r>
 8005eba:	1e04      	subs	r4, r0, #0
 8005ebc:	d008      	beq.n	8005ed0 <__sfmoreglue+0x28>
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	002a      	movs	r2, r5
 8005ec2:	6001      	str	r1, [r0, #0]
 8005ec4:	6046      	str	r6, [r0, #4]
 8005ec6:	300c      	adds	r0, #12
 8005ec8:	60a0      	str	r0, [r4, #8]
 8005eca:	3268      	adds	r2, #104	; 0x68
 8005ecc:	f000 f8f2 	bl	80060b4 <memset>
 8005ed0:	0020      	movs	r0, r4
 8005ed2:	bd70      	pop	{r4, r5, r6, pc}

08005ed4 <__sfp_lock_acquire>:
 8005ed4:	b510      	push	{r4, lr}
 8005ed6:	4802      	ldr	r0, [pc, #8]	; (8005ee0 <__sfp_lock_acquire+0xc>)
 8005ed8:	f000 f8e1 	bl	800609e <__retarget_lock_acquire_recursive>
 8005edc:	bd10      	pop	{r4, pc}
 8005ede:	46c0      	nop			; (mov r8, r8)
 8005ee0:	200005fd 	.word	0x200005fd

08005ee4 <__sfp_lock_release>:
 8005ee4:	b510      	push	{r4, lr}
 8005ee6:	4802      	ldr	r0, [pc, #8]	; (8005ef0 <__sfp_lock_release+0xc>)
 8005ee8:	f000 f8da 	bl	80060a0 <__retarget_lock_release_recursive>
 8005eec:	bd10      	pop	{r4, pc}
 8005eee:	46c0      	nop			; (mov r8, r8)
 8005ef0:	200005fd 	.word	0x200005fd

08005ef4 <__sinit_lock_acquire>:
 8005ef4:	b510      	push	{r4, lr}
 8005ef6:	4802      	ldr	r0, [pc, #8]	; (8005f00 <__sinit_lock_acquire+0xc>)
 8005ef8:	f000 f8d1 	bl	800609e <__retarget_lock_acquire_recursive>
 8005efc:	bd10      	pop	{r4, pc}
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	200005fe 	.word	0x200005fe

08005f04 <__sinit_lock_release>:
 8005f04:	b510      	push	{r4, lr}
 8005f06:	4802      	ldr	r0, [pc, #8]	; (8005f10 <__sinit_lock_release+0xc>)
 8005f08:	f000 f8ca 	bl	80060a0 <__retarget_lock_release_recursive>
 8005f0c:	bd10      	pop	{r4, pc}
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	200005fe 	.word	0x200005fe

08005f14 <__sinit>:
 8005f14:	b513      	push	{r0, r1, r4, lr}
 8005f16:	0004      	movs	r4, r0
 8005f18:	f7ff ffec 	bl	8005ef4 <__sinit_lock_acquire>
 8005f1c:	69a3      	ldr	r3, [r4, #24]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <__sinit+0x14>
 8005f22:	f7ff ffef 	bl	8005f04 <__sinit_lock_release>
 8005f26:	bd13      	pop	{r0, r1, r4, pc}
 8005f28:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f2a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005f2c:	6523      	str	r3, [r4, #80]	; 0x50
 8005f2e:	4b13      	ldr	r3, [pc, #76]	; (8005f7c <__sinit+0x68>)
 8005f30:	4a13      	ldr	r2, [pc, #76]	; (8005f80 <__sinit+0x6c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f36:	9301      	str	r3, [sp, #4]
 8005f38:	42a3      	cmp	r3, r4
 8005f3a:	d101      	bne.n	8005f40 <__sinit+0x2c>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	61a3      	str	r3, [r4, #24]
 8005f40:	0020      	movs	r0, r4
 8005f42:	f000 f81f 	bl	8005f84 <__sfp>
 8005f46:	6060      	str	r0, [r4, #4]
 8005f48:	0020      	movs	r0, r4
 8005f4a:	f000 f81b 	bl	8005f84 <__sfp>
 8005f4e:	60a0      	str	r0, [r4, #8]
 8005f50:	0020      	movs	r0, r4
 8005f52:	f000 f817 	bl	8005f84 <__sfp>
 8005f56:	2200      	movs	r2, #0
 8005f58:	2104      	movs	r1, #4
 8005f5a:	60e0      	str	r0, [r4, #12]
 8005f5c:	6860      	ldr	r0, [r4, #4]
 8005f5e:	f7ff ff77 	bl	8005e50 <std>
 8005f62:	2201      	movs	r2, #1
 8005f64:	2109      	movs	r1, #9
 8005f66:	68a0      	ldr	r0, [r4, #8]
 8005f68:	f7ff ff72 	bl	8005e50 <std>
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	2112      	movs	r1, #18
 8005f70:	68e0      	ldr	r0, [r4, #12]
 8005f72:	f7ff ff6d 	bl	8005e50 <std>
 8005f76:	2301      	movs	r3, #1
 8005f78:	61a3      	str	r3, [r4, #24]
 8005f7a:	e7d2      	b.n	8005f22 <__sinit+0xe>
 8005f7c:	080070a8 	.word	0x080070a8
 8005f80:	08005e99 	.word	0x08005e99

08005f84 <__sfp>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	0007      	movs	r7, r0
 8005f88:	f7ff ffa4 	bl	8005ed4 <__sfp_lock_acquire>
 8005f8c:	4b1f      	ldr	r3, [pc, #124]	; (800600c <__sfp+0x88>)
 8005f8e:	681e      	ldr	r6, [r3, #0]
 8005f90:	69b3      	ldr	r3, [r6, #24]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d102      	bne.n	8005f9c <__sfp+0x18>
 8005f96:	0030      	movs	r0, r6
 8005f98:	f7ff ffbc 	bl	8005f14 <__sinit>
 8005f9c:	3648      	adds	r6, #72	; 0x48
 8005f9e:	68b4      	ldr	r4, [r6, #8]
 8005fa0:	6873      	ldr	r3, [r6, #4]
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	d504      	bpl.n	8005fb0 <__sfp+0x2c>
 8005fa6:	6833      	ldr	r3, [r6, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d022      	beq.n	8005ff2 <__sfp+0x6e>
 8005fac:	6836      	ldr	r6, [r6, #0]
 8005fae:	e7f6      	b.n	8005f9e <__sfp+0x1a>
 8005fb0:	220c      	movs	r2, #12
 8005fb2:	5ea5      	ldrsh	r5, [r4, r2]
 8005fb4:	2d00      	cmp	r5, #0
 8005fb6:	d11a      	bne.n	8005fee <__sfp+0x6a>
 8005fb8:	0020      	movs	r0, r4
 8005fba:	4b15      	ldr	r3, [pc, #84]	; (8006010 <__sfp+0x8c>)
 8005fbc:	3058      	adds	r0, #88	; 0x58
 8005fbe:	60e3      	str	r3, [r4, #12]
 8005fc0:	6665      	str	r5, [r4, #100]	; 0x64
 8005fc2:	f000 f86b 	bl	800609c <__retarget_lock_init_recursive>
 8005fc6:	f7ff ff8d 	bl	8005ee4 <__sfp_lock_release>
 8005fca:	0020      	movs	r0, r4
 8005fcc:	2208      	movs	r2, #8
 8005fce:	0029      	movs	r1, r5
 8005fd0:	6025      	str	r5, [r4, #0]
 8005fd2:	60a5      	str	r5, [r4, #8]
 8005fd4:	6065      	str	r5, [r4, #4]
 8005fd6:	6125      	str	r5, [r4, #16]
 8005fd8:	6165      	str	r5, [r4, #20]
 8005fda:	61a5      	str	r5, [r4, #24]
 8005fdc:	305c      	adds	r0, #92	; 0x5c
 8005fde:	f000 f869 	bl	80060b4 <memset>
 8005fe2:	6365      	str	r5, [r4, #52]	; 0x34
 8005fe4:	63a5      	str	r5, [r4, #56]	; 0x38
 8005fe6:	64a5      	str	r5, [r4, #72]	; 0x48
 8005fe8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005fea:	0020      	movs	r0, r4
 8005fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fee:	3468      	adds	r4, #104	; 0x68
 8005ff0:	e7d7      	b.n	8005fa2 <__sfp+0x1e>
 8005ff2:	2104      	movs	r1, #4
 8005ff4:	0038      	movs	r0, r7
 8005ff6:	f7ff ff57 	bl	8005ea8 <__sfmoreglue>
 8005ffa:	1e04      	subs	r4, r0, #0
 8005ffc:	6030      	str	r0, [r6, #0]
 8005ffe:	d1d5      	bne.n	8005fac <__sfp+0x28>
 8006000:	f7ff ff70 	bl	8005ee4 <__sfp_lock_release>
 8006004:	230c      	movs	r3, #12
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	e7ef      	b.n	8005fea <__sfp+0x66>
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	080070a8 	.word	0x080070a8
 8006010:	ffff0001 	.word	0xffff0001

08006014 <_fwalk_reent>:
 8006014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006016:	0004      	movs	r4, r0
 8006018:	0006      	movs	r6, r0
 800601a:	2700      	movs	r7, #0
 800601c:	9101      	str	r1, [sp, #4]
 800601e:	3448      	adds	r4, #72	; 0x48
 8006020:	6863      	ldr	r3, [r4, #4]
 8006022:	68a5      	ldr	r5, [r4, #8]
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	9b00      	ldr	r3, [sp, #0]
 8006028:	3b01      	subs	r3, #1
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	d504      	bpl.n	8006038 <_fwalk_reent+0x24>
 800602e:	6824      	ldr	r4, [r4, #0]
 8006030:	2c00      	cmp	r4, #0
 8006032:	d1f5      	bne.n	8006020 <_fwalk_reent+0xc>
 8006034:	0038      	movs	r0, r7
 8006036:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006038:	89ab      	ldrh	r3, [r5, #12]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d908      	bls.n	8006050 <_fwalk_reent+0x3c>
 800603e:	220e      	movs	r2, #14
 8006040:	5eab      	ldrsh	r3, [r5, r2]
 8006042:	3301      	adds	r3, #1
 8006044:	d004      	beq.n	8006050 <_fwalk_reent+0x3c>
 8006046:	0029      	movs	r1, r5
 8006048:	0030      	movs	r0, r6
 800604a:	9b01      	ldr	r3, [sp, #4]
 800604c:	4798      	blx	r3
 800604e:	4307      	orrs	r7, r0
 8006050:	3568      	adds	r5, #104	; 0x68
 8006052:	e7e8      	b.n	8006026 <_fwalk_reent+0x12>

08006054 <__libc_init_array>:
 8006054:	b570      	push	{r4, r5, r6, lr}
 8006056:	2600      	movs	r6, #0
 8006058:	4d0c      	ldr	r5, [pc, #48]	; (800608c <__libc_init_array+0x38>)
 800605a:	4c0d      	ldr	r4, [pc, #52]	; (8006090 <__libc_init_array+0x3c>)
 800605c:	1b64      	subs	r4, r4, r5
 800605e:	10a4      	asrs	r4, r4, #2
 8006060:	42a6      	cmp	r6, r4
 8006062:	d109      	bne.n	8006078 <__libc_init_array+0x24>
 8006064:	2600      	movs	r6, #0
 8006066:	f000 fe33 	bl	8006cd0 <_init>
 800606a:	4d0a      	ldr	r5, [pc, #40]	; (8006094 <__libc_init_array+0x40>)
 800606c:	4c0a      	ldr	r4, [pc, #40]	; (8006098 <__libc_init_array+0x44>)
 800606e:	1b64      	subs	r4, r4, r5
 8006070:	10a4      	asrs	r4, r4, #2
 8006072:	42a6      	cmp	r6, r4
 8006074:	d105      	bne.n	8006082 <__libc_init_array+0x2e>
 8006076:	bd70      	pop	{r4, r5, r6, pc}
 8006078:	00b3      	lsls	r3, r6, #2
 800607a:	58eb      	ldr	r3, [r5, r3]
 800607c:	4798      	blx	r3
 800607e:	3601      	adds	r6, #1
 8006080:	e7ee      	b.n	8006060 <__libc_init_array+0xc>
 8006082:	00b3      	lsls	r3, r6, #2
 8006084:	58eb      	ldr	r3, [r5, r3]
 8006086:	4798      	blx	r3
 8006088:	3601      	adds	r6, #1
 800608a:	e7f2      	b.n	8006072 <__libc_init_array+0x1e>
 800608c:	080070e8 	.word	0x080070e8
 8006090:	080070e8 	.word	0x080070e8
 8006094:	080070e8 	.word	0x080070e8
 8006098:	080070ec 	.word	0x080070ec

0800609c <__retarget_lock_init_recursive>:
 800609c:	4770      	bx	lr

0800609e <__retarget_lock_acquire_recursive>:
 800609e:	4770      	bx	lr

080060a0 <__retarget_lock_release_recursive>:
 80060a0:	4770      	bx	lr

080060a2 <memcpy>:
 80060a2:	2300      	movs	r3, #0
 80060a4:	b510      	push	{r4, lr}
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d100      	bne.n	80060ac <memcpy+0xa>
 80060aa:	bd10      	pop	{r4, pc}
 80060ac:	5ccc      	ldrb	r4, [r1, r3]
 80060ae:	54c4      	strb	r4, [r0, r3]
 80060b0:	3301      	adds	r3, #1
 80060b2:	e7f8      	b.n	80060a6 <memcpy+0x4>

080060b4 <memset>:
 80060b4:	0003      	movs	r3, r0
 80060b6:	1882      	adds	r2, r0, r2
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d100      	bne.n	80060be <memset+0xa>
 80060bc:	4770      	bx	lr
 80060be:	7019      	strb	r1, [r3, #0]
 80060c0:	3301      	adds	r3, #1
 80060c2:	e7f9      	b.n	80060b8 <memset+0x4>

080060c4 <_free_r>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	0005      	movs	r5, r0
 80060c8:	2900      	cmp	r1, #0
 80060ca:	d010      	beq.n	80060ee <_free_r+0x2a>
 80060cc:	1f0c      	subs	r4, r1, #4
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	da00      	bge.n	80060d6 <_free_r+0x12>
 80060d4:	18e4      	adds	r4, r4, r3
 80060d6:	0028      	movs	r0, r5
 80060d8:	f000 f988 	bl	80063ec <__malloc_lock>
 80060dc:	4a1d      	ldr	r2, [pc, #116]	; (8006154 <_free_r+0x90>)
 80060de:	6813      	ldr	r3, [r2, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d105      	bne.n	80060f0 <_free_r+0x2c>
 80060e4:	6063      	str	r3, [r4, #4]
 80060e6:	6014      	str	r4, [r2, #0]
 80060e8:	0028      	movs	r0, r5
 80060ea:	f000 f987 	bl	80063fc <__malloc_unlock>
 80060ee:	bd70      	pop	{r4, r5, r6, pc}
 80060f0:	42a3      	cmp	r3, r4
 80060f2:	d908      	bls.n	8006106 <_free_r+0x42>
 80060f4:	6821      	ldr	r1, [r4, #0]
 80060f6:	1860      	adds	r0, r4, r1
 80060f8:	4283      	cmp	r3, r0
 80060fa:	d1f3      	bne.n	80060e4 <_free_r+0x20>
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	1841      	adds	r1, r0, r1
 8006102:	6021      	str	r1, [r4, #0]
 8006104:	e7ee      	b.n	80060e4 <_free_r+0x20>
 8006106:	001a      	movs	r2, r3
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <_free_r+0x4e>
 800610e:	42a3      	cmp	r3, r4
 8006110:	d9f9      	bls.n	8006106 <_free_r+0x42>
 8006112:	6811      	ldr	r1, [r2, #0]
 8006114:	1850      	adds	r0, r2, r1
 8006116:	42a0      	cmp	r0, r4
 8006118:	d10b      	bne.n	8006132 <_free_r+0x6e>
 800611a:	6820      	ldr	r0, [r4, #0]
 800611c:	1809      	adds	r1, r1, r0
 800611e:	1850      	adds	r0, r2, r1
 8006120:	6011      	str	r1, [r2, #0]
 8006122:	4283      	cmp	r3, r0
 8006124:	d1e0      	bne.n	80060e8 <_free_r+0x24>
 8006126:	6818      	ldr	r0, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	1841      	adds	r1, r0, r1
 800612c:	6011      	str	r1, [r2, #0]
 800612e:	6053      	str	r3, [r2, #4]
 8006130:	e7da      	b.n	80060e8 <_free_r+0x24>
 8006132:	42a0      	cmp	r0, r4
 8006134:	d902      	bls.n	800613c <_free_r+0x78>
 8006136:	230c      	movs	r3, #12
 8006138:	602b      	str	r3, [r5, #0]
 800613a:	e7d5      	b.n	80060e8 <_free_r+0x24>
 800613c:	6821      	ldr	r1, [r4, #0]
 800613e:	1860      	adds	r0, r4, r1
 8006140:	4283      	cmp	r3, r0
 8006142:	d103      	bne.n	800614c <_free_r+0x88>
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	1841      	adds	r1, r0, r1
 800614a:	6021      	str	r1, [r4, #0]
 800614c:	6063      	str	r3, [r4, #4]
 800614e:	6054      	str	r4, [r2, #4]
 8006150:	e7ca      	b.n	80060e8 <_free_r+0x24>
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	20000600 	.word	0x20000600

08006158 <sbrk_aligned>:
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	4e0f      	ldr	r6, [pc, #60]	; (8006198 <sbrk_aligned+0x40>)
 800615c:	000d      	movs	r5, r1
 800615e:	6831      	ldr	r1, [r6, #0]
 8006160:	0004      	movs	r4, r0
 8006162:	2900      	cmp	r1, #0
 8006164:	d102      	bne.n	800616c <sbrk_aligned+0x14>
 8006166:	f000 f8a9 	bl	80062bc <_sbrk_r>
 800616a:	6030      	str	r0, [r6, #0]
 800616c:	0029      	movs	r1, r5
 800616e:	0020      	movs	r0, r4
 8006170:	f000 f8a4 	bl	80062bc <_sbrk_r>
 8006174:	1c43      	adds	r3, r0, #1
 8006176:	d00a      	beq.n	800618e <sbrk_aligned+0x36>
 8006178:	2303      	movs	r3, #3
 800617a:	1cc5      	adds	r5, r0, #3
 800617c:	439d      	bics	r5, r3
 800617e:	42a8      	cmp	r0, r5
 8006180:	d007      	beq.n	8006192 <sbrk_aligned+0x3a>
 8006182:	1a29      	subs	r1, r5, r0
 8006184:	0020      	movs	r0, r4
 8006186:	f000 f899 	bl	80062bc <_sbrk_r>
 800618a:	1c43      	adds	r3, r0, #1
 800618c:	d101      	bne.n	8006192 <sbrk_aligned+0x3a>
 800618e:	2501      	movs	r5, #1
 8006190:	426d      	negs	r5, r5
 8006192:	0028      	movs	r0, r5
 8006194:	bd70      	pop	{r4, r5, r6, pc}
 8006196:	46c0      	nop			; (mov r8, r8)
 8006198:	20000604 	.word	0x20000604

0800619c <_malloc_r>:
 800619c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800619e:	2203      	movs	r2, #3
 80061a0:	1ccb      	adds	r3, r1, #3
 80061a2:	4393      	bics	r3, r2
 80061a4:	3308      	adds	r3, #8
 80061a6:	0006      	movs	r6, r0
 80061a8:	001f      	movs	r7, r3
 80061aa:	2b0c      	cmp	r3, #12
 80061ac:	d232      	bcs.n	8006214 <_malloc_r+0x78>
 80061ae:	270c      	movs	r7, #12
 80061b0:	42b9      	cmp	r1, r7
 80061b2:	d831      	bhi.n	8006218 <_malloc_r+0x7c>
 80061b4:	0030      	movs	r0, r6
 80061b6:	f000 f919 	bl	80063ec <__malloc_lock>
 80061ba:	4d32      	ldr	r5, [pc, #200]	; (8006284 <_malloc_r+0xe8>)
 80061bc:	682b      	ldr	r3, [r5, #0]
 80061be:	001c      	movs	r4, r3
 80061c0:	2c00      	cmp	r4, #0
 80061c2:	d12e      	bne.n	8006222 <_malloc_r+0x86>
 80061c4:	0039      	movs	r1, r7
 80061c6:	0030      	movs	r0, r6
 80061c8:	f7ff ffc6 	bl	8006158 <sbrk_aligned>
 80061cc:	0004      	movs	r4, r0
 80061ce:	1c43      	adds	r3, r0, #1
 80061d0:	d11e      	bne.n	8006210 <_malloc_r+0x74>
 80061d2:	682c      	ldr	r4, [r5, #0]
 80061d4:	0025      	movs	r5, r4
 80061d6:	2d00      	cmp	r5, #0
 80061d8:	d14a      	bne.n	8006270 <_malloc_r+0xd4>
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	0029      	movs	r1, r5
 80061de:	18e3      	adds	r3, r4, r3
 80061e0:	0030      	movs	r0, r6
 80061e2:	9301      	str	r3, [sp, #4]
 80061e4:	f000 f86a 	bl	80062bc <_sbrk_r>
 80061e8:	9b01      	ldr	r3, [sp, #4]
 80061ea:	4283      	cmp	r3, r0
 80061ec:	d143      	bne.n	8006276 <_malloc_r+0xda>
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	3703      	adds	r7, #3
 80061f2:	1aff      	subs	r7, r7, r3
 80061f4:	2303      	movs	r3, #3
 80061f6:	439f      	bics	r7, r3
 80061f8:	3708      	adds	r7, #8
 80061fa:	2f0c      	cmp	r7, #12
 80061fc:	d200      	bcs.n	8006200 <_malloc_r+0x64>
 80061fe:	270c      	movs	r7, #12
 8006200:	0039      	movs	r1, r7
 8006202:	0030      	movs	r0, r6
 8006204:	f7ff ffa8 	bl	8006158 <sbrk_aligned>
 8006208:	1c43      	adds	r3, r0, #1
 800620a:	d034      	beq.n	8006276 <_malloc_r+0xda>
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	19df      	adds	r7, r3, r7
 8006210:	6027      	str	r7, [r4, #0]
 8006212:	e013      	b.n	800623c <_malloc_r+0xa0>
 8006214:	2b00      	cmp	r3, #0
 8006216:	dacb      	bge.n	80061b0 <_malloc_r+0x14>
 8006218:	230c      	movs	r3, #12
 800621a:	2500      	movs	r5, #0
 800621c:	6033      	str	r3, [r6, #0]
 800621e:	0028      	movs	r0, r5
 8006220:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006222:	6822      	ldr	r2, [r4, #0]
 8006224:	1bd1      	subs	r1, r2, r7
 8006226:	d420      	bmi.n	800626a <_malloc_r+0xce>
 8006228:	290b      	cmp	r1, #11
 800622a:	d917      	bls.n	800625c <_malloc_r+0xc0>
 800622c:	19e2      	adds	r2, r4, r7
 800622e:	6027      	str	r7, [r4, #0]
 8006230:	42a3      	cmp	r3, r4
 8006232:	d111      	bne.n	8006258 <_malloc_r+0xbc>
 8006234:	602a      	str	r2, [r5, #0]
 8006236:	6863      	ldr	r3, [r4, #4]
 8006238:	6011      	str	r1, [r2, #0]
 800623a:	6053      	str	r3, [r2, #4]
 800623c:	0030      	movs	r0, r6
 800623e:	0025      	movs	r5, r4
 8006240:	f000 f8dc 	bl	80063fc <__malloc_unlock>
 8006244:	2207      	movs	r2, #7
 8006246:	350b      	adds	r5, #11
 8006248:	1d23      	adds	r3, r4, #4
 800624a:	4395      	bics	r5, r2
 800624c:	1aea      	subs	r2, r5, r3
 800624e:	429d      	cmp	r5, r3
 8006250:	d0e5      	beq.n	800621e <_malloc_r+0x82>
 8006252:	1b5b      	subs	r3, r3, r5
 8006254:	50a3      	str	r3, [r4, r2]
 8006256:	e7e2      	b.n	800621e <_malloc_r+0x82>
 8006258:	605a      	str	r2, [r3, #4]
 800625a:	e7ec      	b.n	8006236 <_malloc_r+0x9a>
 800625c:	6862      	ldr	r2, [r4, #4]
 800625e:	42a3      	cmp	r3, r4
 8006260:	d101      	bne.n	8006266 <_malloc_r+0xca>
 8006262:	602a      	str	r2, [r5, #0]
 8006264:	e7ea      	b.n	800623c <_malloc_r+0xa0>
 8006266:	605a      	str	r2, [r3, #4]
 8006268:	e7e8      	b.n	800623c <_malloc_r+0xa0>
 800626a:	0023      	movs	r3, r4
 800626c:	6864      	ldr	r4, [r4, #4]
 800626e:	e7a7      	b.n	80061c0 <_malloc_r+0x24>
 8006270:	002c      	movs	r4, r5
 8006272:	686d      	ldr	r5, [r5, #4]
 8006274:	e7af      	b.n	80061d6 <_malloc_r+0x3a>
 8006276:	230c      	movs	r3, #12
 8006278:	0030      	movs	r0, r6
 800627a:	6033      	str	r3, [r6, #0]
 800627c:	f000 f8be 	bl	80063fc <__malloc_unlock>
 8006280:	e7cd      	b.n	800621e <_malloc_r+0x82>
 8006282:	46c0      	nop			; (mov r8, r8)
 8006284:	20000600 	.word	0x20000600

08006288 <iprintf>:
 8006288:	b40f      	push	{r0, r1, r2, r3}
 800628a:	4b0b      	ldr	r3, [pc, #44]	; (80062b8 <iprintf+0x30>)
 800628c:	b513      	push	{r0, r1, r4, lr}
 800628e:	681c      	ldr	r4, [r3, #0]
 8006290:	2c00      	cmp	r4, #0
 8006292:	d005      	beq.n	80062a0 <iprintf+0x18>
 8006294:	69a3      	ldr	r3, [r4, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d102      	bne.n	80062a0 <iprintf+0x18>
 800629a:	0020      	movs	r0, r4
 800629c:	f7ff fe3a 	bl	8005f14 <__sinit>
 80062a0:	ab05      	add	r3, sp, #20
 80062a2:	0020      	movs	r0, r4
 80062a4:	9a04      	ldr	r2, [sp, #16]
 80062a6:	68a1      	ldr	r1, [r4, #8]
 80062a8:	9301      	str	r3, [sp, #4]
 80062aa:	f000 f8d7 	bl	800645c <_vfiprintf_r>
 80062ae:	bc16      	pop	{r1, r2, r4}
 80062b0:	bc08      	pop	{r3}
 80062b2:	b004      	add	sp, #16
 80062b4:	4718      	bx	r3
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	20000068 	.word	0x20000068

080062bc <_sbrk_r>:
 80062bc:	2300      	movs	r3, #0
 80062be:	b570      	push	{r4, r5, r6, lr}
 80062c0:	4d06      	ldr	r5, [pc, #24]	; (80062dc <_sbrk_r+0x20>)
 80062c2:	0004      	movs	r4, r0
 80062c4:	0008      	movs	r0, r1
 80062c6:	602b      	str	r3, [r5, #0]
 80062c8:	f7fb fb82 	bl	80019d0 <_sbrk>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d103      	bne.n	80062d8 <_sbrk_r+0x1c>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d000      	beq.n	80062d8 <_sbrk_r+0x1c>
 80062d6:	6023      	str	r3, [r4, #0]
 80062d8:	bd70      	pop	{r4, r5, r6, pc}
 80062da:	46c0      	nop			; (mov r8, r8)
 80062dc:	20000608 	.word	0x20000608

080062e0 <__sread>:
 80062e0:	b570      	push	{r4, r5, r6, lr}
 80062e2:	000c      	movs	r4, r1
 80062e4:	250e      	movs	r5, #14
 80062e6:	5f49      	ldrsh	r1, [r1, r5]
 80062e8:	f000 fb74 	bl	80069d4 <_read_r>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	db03      	blt.n	80062f8 <__sread+0x18>
 80062f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80062f2:	181b      	adds	r3, r3, r0
 80062f4:	6563      	str	r3, [r4, #84]	; 0x54
 80062f6:	bd70      	pop	{r4, r5, r6, pc}
 80062f8:	89a3      	ldrh	r3, [r4, #12]
 80062fa:	4a02      	ldr	r2, [pc, #8]	; (8006304 <__sread+0x24>)
 80062fc:	4013      	ands	r3, r2
 80062fe:	81a3      	strh	r3, [r4, #12]
 8006300:	e7f9      	b.n	80062f6 <__sread+0x16>
 8006302:	46c0      	nop			; (mov r8, r8)
 8006304:	ffffefff 	.word	0xffffefff

08006308 <__swrite>:
 8006308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630a:	001f      	movs	r7, r3
 800630c:	898b      	ldrh	r3, [r1, #12]
 800630e:	0005      	movs	r5, r0
 8006310:	000c      	movs	r4, r1
 8006312:	0016      	movs	r6, r2
 8006314:	05db      	lsls	r3, r3, #23
 8006316:	d505      	bpl.n	8006324 <__swrite+0x1c>
 8006318:	230e      	movs	r3, #14
 800631a:	5ec9      	ldrsh	r1, [r1, r3]
 800631c:	2200      	movs	r2, #0
 800631e:	2302      	movs	r3, #2
 8006320:	f000 f850 	bl	80063c4 <_lseek_r>
 8006324:	89a3      	ldrh	r3, [r4, #12]
 8006326:	4a05      	ldr	r2, [pc, #20]	; (800633c <__swrite+0x34>)
 8006328:	0028      	movs	r0, r5
 800632a:	4013      	ands	r3, r2
 800632c:	81a3      	strh	r3, [r4, #12]
 800632e:	0032      	movs	r2, r6
 8006330:	230e      	movs	r3, #14
 8006332:	5ee1      	ldrsh	r1, [r4, r3]
 8006334:	003b      	movs	r3, r7
 8006336:	f000 f81f 	bl	8006378 <_write_r>
 800633a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800633c:	ffffefff 	.word	0xffffefff

08006340 <__sseek>:
 8006340:	b570      	push	{r4, r5, r6, lr}
 8006342:	000c      	movs	r4, r1
 8006344:	250e      	movs	r5, #14
 8006346:	5f49      	ldrsh	r1, [r1, r5]
 8006348:	f000 f83c 	bl	80063c4 <_lseek_r>
 800634c:	89a3      	ldrh	r3, [r4, #12]
 800634e:	1c42      	adds	r2, r0, #1
 8006350:	d103      	bne.n	800635a <__sseek+0x1a>
 8006352:	4a05      	ldr	r2, [pc, #20]	; (8006368 <__sseek+0x28>)
 8006354:	4013      	ands	r3, r2
 8006356:	81a3      	strh	r3, [r4, #12]
 8006358:	bd70      	pop	{r4, r5, r6, pc}
 800635a:	2280      	movs	r2, #128	; 0x80
 800635c:	0152      	lsls	r2, r2, #5
 800635e:	4313      	orrs	r3, r2
 8006360:	81a3      	strh	r3, [r4, #12]
 8006362:	6560      	str	r0, [r4, #84]	; 0x54
 8006364:	e7f8      	b.n	8006358 <__sseek+0x18>
 8006366:	46c0      	nop			; (mov r8, r8)
 8006368:	ffffefff 	.word	0xffffefff

0800636c <__sclose>:
 800636c:	b510      	push	{r4, lr}
 800636e:	230e      	movs	r3, #14
 8006370:	5ec9      	ldrsh	r1, [r1, r3]
 8006372:	f000 f815 	bl	80063a0 <_close_r>
 8006376:	bd10      	pop	{r4, pc}

08006378 <_write_r>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	0004      	movs	r4, r0
 800637c:	0008      	movs	r0, r1
 800637e:	0011      	movs	r1, r2
 8006380:	001a      	movs	r2, r3
 8006382:	2300      	movs	r3, #0
 8006384:	4d05      	ldr	r5, [pc, #20]	; (800639c <_write_r+0x24>)
 8006386:	602b      	str	r3, [r5, #0]
 8006388:	f7fb fad9 	bl	800193e <_write>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d103      	bne.n	8006398 <_write_r+0x20>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d000      	beq.n	8006398 <_write_r+0x20>
 8006396:	6023      	str	r3, [r4, #0]
 8006398:	bd70      	pop	{r4, r5, r6, pc}
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	20000608 	.word	0x20000608

080063a0 <_close_r>:
 80063a0:	2300      	movs	r3, #0
 80063a2:	b570      	push	{r4, r5, r6, lr}
 80063a4:	4d06      	ldr	r5, [pc, #24]	; (80063c0 <_close_r+0x20>)
 80063a6:	0004      	movs	r4, r0
 80063a8:	0008      	movs	r0, r1
 80063aa:	602b      	str	r3, [r5, #0]
 80063ac:	f7fb fae3 	bl	8001976 <_close>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d103      	bne.n	80063bc <_close_r+0x1c>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d000      	beq.n	80063bc <_close_r+0x1c>
 80063ba:	6023      	str	r3, [r4, #0]
 80063bc:	bd70      	pop	{r4, r5, r6, pc}
 80063be:	46c0      	nop			; (mov r8, r8)
 80063c0:	20000608 	.word	0x20000608

080063c4 <_lseek_r>:
 80063c4:	b570      	push	{r4, r5, r6, lr}
 80063c6:	0004      	movs	r4, r0
 80063c8:	0008      	movs	r0, r1
 80063ca:	0011      	movs	r1, r2
 80063cc:	001a      	movs	r2, r3
 80063ce:	2300      	movs	r3, #0
 80063d0:	4d05      	ldr	r5, [pc, #20]	; (80063e8 <_lseek_r+0x24>)
 80063d2:	602b      	str	r3, [r5, #0]
 80063d4:	f7fb faf0 	bl	80019b8 <_lseek>
 80063d8:	1c43      	adds	r3, r0, #1
 80063da:	d103      	bne.n	80063e4 <_lseek_r+0x20>
 80063dc:	682b      	ldr	r3, [r5, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d000      	beq.n	80063e4 <_lseek_r+0x20>
 80063e2:	6023      	str	r3, [r4, #0]
 80063e4:	bd70      	pop	{r4, r5, r6, pc}
 80063e6:	46c0      	nop			; (mov r8, r8)
 80063e8:	20000608 	.word	0x20000608

080063ec <__malloc_lock>:
 80063ec:	b510      	push	{r4, lr}
 80063ee:	4802      	ldr	r0, [pc, #8]	; (80063f8 <__malloc_lock+0xc>)
 80063f0:	f7ff fe55 	bl	800609e <__retarget_lock_acquire_recursive>
 80063f4:	bd10      	pop	{r4, pc}
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	200005fc 	.word	0x200005fc

080063fc <__malloc_unlock>:
 80063fc:	b510      	push	{r4, lr}
 80063fe:	4802      	ldr	r0, [pc, #8]	; (8006408 <__malloc_unlock+0xc>)
 8006400:	f7ff fe4e 	bl	80060a0 <__retarget_lock_release_recursive>
 8006404:	bd10      	pop	{r4, pc}
 8006406:	46c0      	nop			; (mov r8, r8)
 8006408:	200005fc 	.word	0x200005fc

0800640c <__sfputc_r>:
 800640c:	6893      	ldr	r3, [r2, #8]
 800640e:	b510      	push	{r4, lr}
 8006410:	3b01      	subs	r3, #1
 8006412:	6093      	str	r3, [r2, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	da04      	bge.n	8006422 <__sfputc_r+0x16>
 8006418:	6994      	ldr	r4, [r2, #24]
 800641a:	42a3      	cmp	r3, r4
 800641c:	db07      	blt.n	800642e <__sfputc_r+0x22>
 800641e:	290a      	cmp	r1, #10
 8006420:	d005      	beq.n	800642e <__sfputc_r+0x22>
 8006422:	6813      	ldr	r3, [r2, #0]
 8006424:	1c58      	adds	r0, r3, #1
 8006426:	6010      	str	r0, [r2, #0]
 8006428:	7019      	strb	r1, [r3, #0]
 800642a:	0008      	movs	r0, r1
 800642c:	bd10      	pop	{r4, pc}
 800642e:	f000 fae5 	bl	80069fc <__swbuf_r>
 8006432:	0001      	movs	r1, r0
 8006434:	e7f9      	b.n	800642a <__sfputc_r+0x1e>

08006436 <__sfputs_r>:
 8006436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006438:	0006      	movs	r6, r0
 800643a:	000f      	movs	r7, r1
 800643c:	0014      	movs	r4, r2
 800643e:	18d5      	adds	r5, r2, r3
 8006440:	42ac      	cmp	r4, r5
 8006442:	d101      	bne.n	8006448 <__sfputs_r+0x12>
 8006444:	2000      	movs	r0, #0
 8006446:	e007      	b.n	8006458 <__sfputs_r+0x22>
 8006448:	7821      	ldrb	r1, [r4, #0]
 800644a:	003a      	movs	r2, r7
 800644c:	0030      	movs	r0, r6
 800644e:	f7ff ffdd 	bl	800640c <__sfputc_r>
 8006452:	3401      	adds	r4, #1
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	d1f3      	bne.n	8006440 <__sfputs_r+0xa>
 8006458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800645c <_vfiprintf_r>:
 800645c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800645e:	b0a1      	sub	sp, #132	; 0x84
 8006460:	0006      	movs	r6, r0
 8006462:	000c      	movs	r4, r1
 8006464:	001f      	movs	r7, r3
 8006466:	9203      	str	r2, [sp, #12]
 8006468:	2800      	cmp	r0, #0
 800646a:	d004      	beq.n	8006476 <_vfiprintf_r+0x1a>
 800646c:	6983      	ldr	r3, [r0, #24]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <_vfiprintf_r+0x1a>
 8006472:	f7ff fd4f 	bl	8005f14 <__sinit>
 8006476:	4b8e      	ldr	r3, [pc, #568]	; (80066b0 <_vfiprintf_r+0x254>)
 8006478:	429c      	cmp	r4, r3
 800647a:	d11c      	bne.n	80064b6 <_vfiprintf_r+0x5a>
 800647c:	6874      	ldr	r4, [r6, #4]
 800647e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006480:	07db      	lsls	r3, r3, #31
 8006482:	d405      	bmi.n	8006490 <_vfiprintf_r+0x34>
 8006484:	89a3      	ldrh	r3, [r4, #12]
 8006486:	059b      	lsls	r3, r3, #22
 8006488:	d402      	bmi.n	8006490 <_vfiprintf_r+0x34>
 800648a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800648c:	f7ff fe07 	bl	800609e <__retarget_lock_acquire_recursive>
 8006490:	89a3      	ldrh	r3, [r4, #12]
 8006492:	071b      	lsls	r3, r3, #28
 8006494:	d502      	bpl.n	800649c <_vfiprintf_r+0x40>
 8006496:	6923      	ldr	r3, [r4, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d11d      	bne.n	80064d8 <_vfiprintf_r+0x7c>
 800649c:	0021      	movs	r1, r4
 800649e:	0030      	movs	r0, r6
 80064a0:	f000 fb02 	bl	8006aa8 <__swsetup_r>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d017      	beq.n	80064d8 <_vfiprintf_r+0x7c>
 80064a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064aa:	07db      	lsls	r3, r3, #31
 80064ac:	d50d      	bpl.n	80064ca <_vfiprintf_r+0x6e>
 80064ae:	2001      	movs	r0, #1
 80064b0:	4240      	negs	r0, r0
 80064b2:	b021      	add	sp, #132	; 0x84
 80064b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064b6:	4b7f      	ldr	r3, [pc, #508]	; (80066b4 <_vfiprintf_r+0x258>)
 80064b8:	429c      	cmp	r4, r3
 80064ba:	d101      	bne.n	80064c0 <_vfiprintf_r+0x64>
 80064bc:	68b4      	ldr	r4, [r6, #8]
 80064be:	e7de      	b.n	800647e <_vfiprintf_r+0x22>
 80064c0:	4b7d      	ldr	r3, [pc, #500]	; (80066b8 <_vfiprintf_r+0x25c>)
 80064c2:	429c      	cmp	r4, r3
 80064c4:	d1db      	bne.n	800647e <_vfiprintf_r+0x22>
 80064c6:	68f4      	ldr	r4, [r6, #12]
 80064c8:	e7d9      	b.n	800647e <_vfiprintf_r+0x22>
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	059b      	lsls	r3, r3, #22
 80064ce:	d4ee      	bmi.n	80064ae <_vfiprintf_r+0x52>
 80064d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064d2:	f7ff fde5 	bl	80060a0 <__retarget_lock_release_recursive>
 80064d6:	e7ea      	b.n	80064ae <_vfiprintf_r+0x52>
 80064d8:	2300      	movs	r3, #0
 80064da:	ad08      	add	r5, sp, #32
 80064dc:	616b      	str	r3, [r5, #20]
 80064de:	3320      	adds	r3, #32
 80064e0:	766b      	strb	r3, [r5, #25]
 80064e2:	3310      	adds	r3, #16
 80064e4:	76ab      	strb	r3, [r5, #26]
 80064e6:	9707      	str	r7, [sp, #28]
 80064e8:	9f03      	ldr	r7, [sp, #12]
 80064ea:	783b      	ldrb	r3, [r7, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <_vfiprintf_r+0x98>
 80064f0:	2b25      	cmp	r3, #37	; 0x25
 80064f2:	d14e      	bne.n	8006592 <_vfiprintf_r+0x136>
 80064f4:	9b03      	ldr	r3, [sp, #12]
 80064f6:	1afb      	subs	r3, r7, r3
 80064f8:	9305      	str	r3, [sp, #20]
 80064fa:	9b03      	ldr	r3, [sp, #12]
 80064fc:	429f      	cmp	r7, r3
 80064fe:	d00d      	beq.n	800651c <_vfiprintf_r+0xc0>
 8006500:	9b05      	ldr	r3, [sp, #20]
 8006502:	0021      	movs	r1, r4
 8006504:	0030      	movs	r0, r6
 8006506:	9a03      	ldr	r2, [sp, #12]
 8006508:	f7ff ff95 	bl	8006436 <__sfputs_r>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d100      	bne.n	8006512 <_vfiprintf_r+0xb6>
 8006510:	e0b5      	b.n	800667e <_vfiprintf_r+0x222>
 8006512:	696a      	ldr	r2, [r5, #20]
 8006514:	9b05      	ldr	r3, [sp, #20]
 8006516:	4694      	mov	ip, r2
 8006518:	4463      	add	r3, ip
 800651a:	616b      	str	r3, [r5, #20]
 800651c:	783b      	ldrb	r3, [r7, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d100      	bne.n	8006524 <_vfiprintf_r+0xc8>
 8006522:	e0ac      	b.n	800667e <_vfiprintf_r+0x222>
 8006524:	2201      	movs	r2, #1
 8006526:	1c7b      	adds	r3, r7, #1
 8006528:	9303      	str	r3, [sp, #12]
 800652a:	2300      	movs	r3, #0
 800652c:	4252      	negs	r2, r2
 800652e:	606a      	str	r2, [r5, #4]
 8006530:	a904      	add	r1, sp, #16
 8006532:	3254      	adds	r2, #84	; 0x54
 8006534:	1852      	adds	r2, r2, r1
 8006536:	602b      	str	r3, [r5, #0]
 8006538:	60eb      	str	r3, [r5, #12]
 800653a:	60ab      	str	r3, [r5, #8]
 800653c:	7013      	strb	r3, [r2, #0]
 800653e:	65ab      	str	r3, [r5, #88]	; 0x58
 8006540:	9b03      	ldr	r3, [sp, #12]
 8006542:	2205      	movs	r2, #5
 8006544:	7819      	ldrb	r1, [r3, #0]
 8006546:	485d      	ldr	r0, [pc, #372]	; (80066bc <_vfiprintf_r+0x260>)
 8006548:	f000 fb92 	bl	8006c70 <memchr>
 800654c:	9b03      	ldr	r3, [sp, #12]
 800654e:	1c5f      	adds	r7, r3, #1
 8006550:	2800      	cmp	r0, #0
 8006552:	d120      	bne.n	8006596 <_vfiprintf_r+0x13a>
 8006554:	682a      	ldr	r2, [r5, #0]
 8006556:	06d3      	lsls	r3, r2, #27
 8006558:	d504      	bpl.n	8006564 <_vfiprintf_r+0x108>
 800655a:	2353      	movs	r3, #83	; 0x53
 800655c:	a904      	add	r1, sp, #16
 800655e:	185b      	adds	r3, r3, r1
 8006560:	2120      	movs	r1, #32
 8006562:	7019      	strb	r1, [r3, #0]
 8006564:	0713      	lsls	r3, r2, #28
 8006566:	d504      	bpl.n	8006572 <_vfiprintf_r+0x116>
 8006568:	2353      	movs	r3, #83	; 0x53
 800656a:	a904      	add	r1, sp, #16
 800656c:	185b      	adds	r3, r3, r1
 800656e:	212b      	movs	r1, #43	; 0x2b
 8006570:	7019      	strb	r1, [r3, #0]
 8006572:	9b03      	ldr	r3, [sp, #12]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b2a      	cmp	r3, #42	; 0x2a
 8006578:	d016      	beq.n	80065a8 <_vfiprintf_r+0x14c>
 800657a:	2100      	movs	r1, #0
 800657c:	68eb      	ldr	r3, [r5, #12]
 800657e:	9f03      	ldr	r7, [sp, #12]
 8006580:	783a      	ldrb	r2, [r7, #0]
 8006582:	1c78      	adds	r0, r7, #1
 8006584:	3a30      	subs	r2, #48	; 0x30
 8006586:	4684      	mov	ip, r0
 8006588:	2a09      	cmp	r2, #9
 800658a:	d94f      	bls.n	800662c <_vfiprintf_r+0x1d0>
 800658c:	2900      	cmp	r1, #0
 800658e:	d111      	bne.n	80065b4 <_vfiprintf_r+0x158>
 8006590:	e017      	b.n	80065c2 <_vfiprintf_r+0x166>
 8006592:	3701      	adds	r7, #1
 8006594:	e7a9      	b.n	80064ea <_vfiprintf_r+0x8e>
 8006596:	4b49      	ldr	r3, [pc, #292]	; (80066bc <_vfiprintf_r+0x260>)
 8006598:	682a      	ldr	r2, [r5, #0]
 800659a:	1ac0      	subs	r0, r0, r3
 800659c:	2301      	movs	r3, #1
 800659e:	4083      	lsls	r3, r0
 80065a0:	4313      	orrs	r3, r2
 80065a2:	602b      	str	r3, [r5, #0]
 80065a4:	9703      	str	r7, [sp, #12]
 80065a6:	e7cb      	b.n	8006540 <_vfiprintf_r+0xe4>
 80065a8:	9b07      	ldr	r3, [sp, #28]
 80065aa:	1d19      	adds	r1, r3, #4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	9107      	str	r1, [sp, #28]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	db01      	blt.n	80065b8 <_vfiprintf_r+0x15c>
 80065b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80065b6:	e004      	b.n	80065c2 <_vfiprintf_r+0x166>
 80065b8:	425b      	negs	r3, r3
 80065ba:	60eb      	str	r3, [r5, #12]
 80065bc:	2302      	movs	r3, #2
 80065be:	4313      	orrs	r3, r2
 80065c0:	602b      	str	r3, [r5, #0]
 80065c2:	783b      	ldrb	r3, [r7, #0]
 80065c4:	2b2e      	cmp	r3, #46	; 0x2e
 80065c6:	d10a      	bne.n	80065de <_vfiprintf_r+0x182>
 80065c8:	787b      	ldrb	r3, [r7, #1]
 80065ca:	2b2a      	cmp	r3, #42	; 0x2a
 80065cc:	d137      	bne.n	800663e <_vfiprintf_r+0x1e2>
 80065ce:	9b07      	ldr	r3, [sp, #28]
 80065d0:	3702      	adds	r7, #2
 80065d2:	1d1a      	adds	r2, r3, #4
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	9207      	str	r2, [sp, #28]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	db2d      	blt.n	8006638 <_vfiprintf_r+0x1dc>
 80065dc:	9309      	str	r3, [sp, #36]	; 0x24
 80065de:	2203      	movs	r2, #3
 80065e0:	7839      	ldrb	r1, [r7, #0]
 80065e2:	4837      	ldr	r0, [pc, #220]	; (80066c0 <_vfiprintf_r+0x264>)
 80065e4:	f000 fb44 	bl	8006c70 <memchr>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d007      	beq.n	80065fc <_vfiprintf_r+0x1a0>
 80065ec:	4b34      	ldr	r3, [pc, #208]	; (80066c0 <_vfiprintf_r+0x264>)
 80065ee:	682a      	ldr	r2, [r5, #0]
 80065f0:	1ac0      	subs	r0, r0, r3
 80065f2:	2340      	movs	r3, #64	; 0x40
 80065f4:	4083      	lsls	r3, r0
 80065f6:	4313      	orrs	r3, r2
 80065f8:	3701      	adds	r7, #1
 80065fa:	602b      	str	r3, [r5, #0]
 80065fc:	7839      	ldrb	r1, [r7, #0]
 80065fe:	1c7b      	adds	r3, r7, #1
 8006600:	2206      	movs	r2, #6
 8006602:	4830      	ldr	r0, [pc, #192]	; (80066c4 <_vfiprintf_r+0x268>)
 8006604:	9303      	str	r3, [sp, #12]
 8006606:	7629      	strb	r1, [r5, #24]
 8006608:	f000 fb32 	bl	8006c70 <memchr>
 800660c:	2800      	cmp	r0, #0
 800660e:	d045      	beq.n	800669c <_vfiprintf_r+0x240>
 8006610:	4b2d      	ldr	r3, [pc, #180]	; (80066c8 <_vfiprintf_r+0x26c>)
 8006612:	2b00      	cmp	r3, #0
 8006614:	d127      	bne.n	8006666 <_vfiprintf_r+0x20a>
 8006616:	2207      	movs	r2, #7
 8006618:	9b07      	ldr	r3, [sp, #28]
 800661a:	3307      	adds	r3, #7
 800661c:	4393      	bics	r3, r2
 800661e:	3308      	adds	r3, #8
 8006620:	9307      	str	r3, [sp, #28]
 8006622:	696b      	ldr	r3, [r5, #20]
 8006624:	9a04      	ldr	r2, [sp, #16]
 8006626:	189b      	adds	r3, r3, r2
 8006628:	616b      	str	r3, [r5, #20]
 800662a:	e75d      	b.n	80064e8 <_vfiprintf_r+0x8c>
 800662c:	210a      	movs	r1, #10
 800662e:	434b      	muls	r3, r1
 8006630:	4667      	mov	r7, ip
 8006632:	189b      	adds	r3, r3, r2
 8006634:	3909      	subs	r1, #9
 8006636:	e7a3      	b.n	8006580 <_vfiprintf_r+0x124>
 8006638:	2301      	movs	r3, #1
 800663a:	425b      	negs	r3, r3
 800663c:	e7ce      	b.n	80065dc <_vfiprintf_r+0x180>
 800663e:	2300      	movs	r3, #0
 8006640:	001a      	movs	r2, r3
 8006642:	3701      	adds	r7, #1
 8006644:	606b      	str	r3, [r5, #4]
 8006646:	7839      	ldrb	r1, [r7, #0]
 8006648:	1c78      	adds	r0, r7, #1
 800664a:	3930      	subs	r1, #48	; 0x30
 800664c:	4684      	mov	ip, r0
 800664e:	2909      	cmp	r1, #9
 8006650:	d903      	bls.n	800665a <_vfiprintf_r+0x1fe>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d0c3      	beq.n	80065de <_vfiprintf_r+0x182>
 8006656:	9209      	str	r2, [sp, #36]	; 0x24
 8006658:	e7c1      	b.n	80065de <_vfiprintf_r+0x182>
 800665a:	230a      	movs	r3, #10
 800665c:	435a      	muls	r2, r3
 800665e:	4667      	mov	r7, ip
 8006660:	1852      	adds	r2, r2, r1
 8006662:	3b09      	subs	r3, #9
 8006664:	e7ef      	b.n	8006646 <_vfiprintf_r+0x1ea>
 8006666:	ab07      	add	r3, sp, #28
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	0022      	movs	r2, r4
 800666c:	0029      	movs	r1, r5
 800666e:	0030      	movs	r0, r6
 8006670:	4b16      	ldr	r3, [pc, #88]	; (80066cc <_vfiprintf_r+0x270>)
 8006672:	e000      	b.n	8006676 <_vfiprintf_r+0x21a>
 8006674:	bf00      	nop
 8006676:	9004      	str	r0, [sp, #16]
 8006678:	9b04      	ldr	r3, [sp, #16]
 800667a:	3301      	adds	r3, #1
 800667c:	d1d1      	bne.n	8006622 <_vfiprintf_r+0x1c6>
 800667e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006680:	07db      	lsls	r3, r3, #31
 8006682:	d405      	bmi.n	8006690 <_vfiprintf_r+0x234>
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	059b      	lsls	r3, r3, #22
 8006688:	d402      	bmi.n	8006690 <_vfiprintf_r+0x234>
 800668a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800668c:	f7ff fd08 	bl	80060a0 <__retarget_lock_release_recursive>
 8006690:	89a3      	ldrh	r3, [r4, #12]
 8006692:	065b      	lsls	r3, r3, #25
 8006694:	d500      	bpl.n	8006698 <_vfiprintf_r+0x23c>
 8006696:	e70a      	b.n	80064ae <_vfiprintf_r+0x52>
 8006698:	980d      	ldr	r0, [sp, #52]	; 0x34
 800669a:	e70a      	b.n	80064b2 <_vfiprintf_r+0x56>
 800669c:	ab07      	add	r3, sp, #28
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	0022      	movs	r2, r4
 80066a2:	0029      	movs	r1, r5
 80066a4:	0030      	movs	r0, r6
 80066a6:	4b09      	ldr	r3, [pc, #36]	; (80066cc <_vfiprintf_r+0x270>)
 80066a8:	f000 f882 	bl	80067b0 <_printf_i>
 80066ac:	e7e3      	b.n	8006676 <_vfiprintf_r+0x21a>
 80066ae:	46c0      	nop			; (mov r8, r8)
 80066b0:	08007068 	.word	0x08007068
 80066b4:	08007088 	.word	0x08007088
 80066b8:	08007048 	.word	0x08007048
 80066bc:	080070ac 	.word	0x080070ac
 80066c0:	080070b2 	.word	0x080070b2
 80066c4:	080070b6 	.word	0x080070b6
 80066c8:	00000000 	.word	0x00000000
 80066cc:	08006437 	.word	0x08006437

080066d0 <_printf_common>:
 80066d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066d2:	0015      	movs	r5, r2
 80066d4:	9301      	str	r3, [sp, #4]
 80066d6:	688a      	ldr	r2, [r1, #8]
 80066d8:	690b      	ldr	r3, [r1, #16]
 80066da:	000c      	movs	r4, r1
 80066dc:	9000      	str	r0, [sp, #0]
 80066de:	4293      	cmp	r3, r2
 80066e0:	da00      	bge.n	80066e4 <_printf_common+0x14>
 80066e2:	0013      	movs	r3, r2
 80066e4:	0022      	movs	r2, r4
 80066e6:	602b      	str	r3, [r5, #0]
 80066e8:	3243      	adds	r2, #67	; 0x43
 80066ea:	7812      	ldrb	r2, [r2, #0]
 80066ec:	2a00      	cmp	r2, #0
 80066ee:	d001      	beq.n	80066f4 <_printf_common+0x24>
 80066f0:	3301      	adds	r3, #1
 80066f2:	602b      	str	r3, [r5, #0]
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	069b      	lsls	r3, r3, #26
 80066f8:	d502      	bpl.n	8006700 <_printf_common+0x30>
 80066fa:	682b      	ldr	r3, [r5, #0]
 80066fc:	3302      	adds	r3, #2
 80066fe:	602b      	str	r3, [r5, #0]
 8006700:	6822      	ldr	r2, [r4, #0]
 8006702:	2306      	movs	r3, #6
 8006704:	0017      	movs	r7, r2
 8006706:	401f      	ands	r7, r3
 8006708:	421a      	tst	r2, r3
 800670a:	d027      	beq.n	800675c <_printf_common+0x8c>
 800670c:	0023      	movs	r3, r4
 800670e:	3343      	adds	r3, #67	; 0x43
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	1e5a      	subs	r2, r3, #1
 8006714:	4193      	sbcs	r3, r2
 8006716:	6822      	ldr	r2, [r4, #0]
 8006718:	0692      	lsls	r2, r2, #26
 800671a:	d430      	bmi.n	800677e <_printf_common+0xae>
 800671c:	0022      	movs	r2, r4
 800671e:	9901      	ldr	r1, [sp, #4]
 8006720:	9800      	ldr	r0, [sp, #0]
 8006722:	9e08      	ldr	r6, [sp, #32]
 8006724:	3243      	adds	r2, #67	; 0x43
 8006726:	47b0      	blx	r6
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	d025      	beq.n	8006778 <_printf_common+0xa8>
 800672c:	2306      	movs	r3, #6
 800672e:	6820      	ldr	r0, [r4, #0]
 8006730:	682a      	ldr	r2, [r5, #0]
 8006732:	68e1      	ldr	r1, [r4, #12]
 8006734:	2500      	movs	r5, #0
 8006736:	4003      	ands	r3, r0
 8006738:	2b04      	cmp	r3, #4
 800673a:	d103      	bne.n	8006744 <_printf_common+0x74>
 800673c:	1a8d      	subs	r5, r1, r2
 800673e:	43eb      	mvns	r3, r5
 8006740:	17db      	asrs	r3, r3, #31
 8006742:	401d      	ands	r5, r3
 8006744:	68a3      	ldr	r3, [r4, #8]
 8006746:	6922      	ldr	r2, [r4, #16]
 8006748:	4293      	cmp	r3, r2
 800674a:	dd01      	ble.n	8006750 <_printf_common+0x80>
 800674c:	1a9b      	subs	r3, r3, r2
 800674e:	18ed      	adds	r5, r5, r3
 8006750:	2700      	movs	r7, #0
 8006752:	42bd      	cmp	r5, r7
 8006754:	d120      	bne.n	8006798 <_printf_common+0xc8>
 8006756:	2000      	movs	r0, #0
 8006758:	e010      	b.n	800677c <_printf_common+0xac>
 800675a:	3701      	adds	r7, #1
 800675c:	68e3      	ldr	r3, [r4, #12]
 800675e:	682a      	ldr	r2, [r5, #0]
 8006760:	1a9b      	subs	r3, r3, r2
 8006762:	42bb      	cmp	r3, r7
 8006764:	ddd2      	ble.n	800670c <_printf_common+0x3c>
 8006766:	0022      	movs	r2, r4
 8006768:	2301      	movs	r3, #1
 800676a:	9901      	ldr	r1, [sp, #4]
 800676c:	9800      	ldr	r0, [sp, #0]
 800676e:	9e08      	ldr	r6, [sp, #32]
 8006770:	3219      	adds	r2, #25
 8006772:	47b0      	blx	r6
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d1f0      	bne.n	800675a <_printf_common+0x8a>
 8006778:	2001      	movs	r0, #1
 800677a:	4240      	negs	r0, r0
 800677c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800677e:	2030      	movs	r0, #48	; 0x30
 8006780:	18e1      	adds	r1, r4, r3
 8006782:	3143      	adds	r1, #67	; 0x43
 8006784:	7008      	strb	r0, [r1, #0]
 8006786:	0021      	movs	r1, r4
 8006788:	1c5a      	adds	r2, r3, #1
 800678a:	3145      	adds	r1, #69	; 0x45
 800678c:	7809      	ldrb	r1, [r1, #0]
 800678e:	18a2      	adds	r2, r4, r2
 8006790:	3243      	adds	r2, #67	; 0x43
 8006792:	3302      	adds	r3, #2
 8006794:	7011      	strb	r1, [r2, #0]
 8006796:	e7c1      	b.n	800671c <_printf_common+0x4c>
 8006798:	0022      	movs	r2, r4
 800679a:	2301      	movs	r3, #1
 800679c:	9901      	ldr	r1, [sp, #4]
 800679e:	9800      	ldr	r0, [sp, #0]
 80067a0:	9e08      	ldr	r6, [sp, #32]
 80067a2:	321a      	adds	r2, #26
 80067a4:	47b0      	blx	r6
 80067a6:	1c43      	adds	r3, r0, #1
 80067a8:	d0e6      	beq.n	8006778 <_printf_common+0xa8>
 80067aa:	3701      	adds	r7, #1
 80067ac:	e7d1      	b.n	8006752 <_printf_common+0x82>
	...

080067b0 <_printf_i>:
 80067b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067b2:	b08b      	sub	sp, #44	; 0x2c
 80067b4:	9206      	str	r2, [sp, #24]
 80067b6:	000a      	movs	r2, r1
 80067b8:	3243      	adds	r2, #67	; 0x43
 80067ba:	9307      	str	r3, [sp, #28]
 80067bc:	9005      	str	r0, [sp, #20]
 80067be:	9204      	str	r2, [sp, #16]
 80067c0:	7e0a      	ldrb	r2, [r1, #24]
 80067c2:	000c      	movs	r4, r1
 80067c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067c6:	2a78      	cmp	r2, #120	; 0x78
 80067c8:	d807      	bhi.n	80067da <_printf_i+0x2a>
 80067ca:	2a62      	cmp	r2, #98	; 0x62
 80067cc:	d809      	bhi.n	80067e2 <_printf_i+0x32>
 80067ce:	2a00      	cmp	r2, #0
 80067d0:	d100      	bne.n	80067d4 <_printf_i+0x24>
 80067d2:	e0c1      	b.n	8006958 <_printf_i+0x1a8>
 80067d4:	2a58      	cmp	r2, #88	; 0x58
 80067d6:	d100      	bne.n	80067da <_printf_i+0x2a>
 80067d8:	e08c      	b.n	80068f4 <_printf_i+0x144>
 80067da:	0026      	movs	r6, r4
 80067dc:	3642      	adds	r6, #66	; 0x42
 80067de:	7032      	strb	r2, [r6, #0]
 80067e0:	e022      	b.n	8006828 <_printf_i+0x78>
 80067e2:	0010      	movs	r0, r2
 80067e4:	3863      	subs	r0, #99	; 0x63
 80067e6:	2815      	cmp	r0, #21
 80067e8:	d8f7      	bhi.n	80067da <_printf_i+0x2a>
 80067ea:	f7f9 fc93 	bl	8000114 <__gnu_thumb1_case_shi>
 80067ee:	0016      	.short	0x0016
 80067f0:	fff6001f 	.word	0xfff6001f
 80067f4:	fff6fff6 	.word	0xfff6fff6
 80067f8:	001ffff6 	.word	0x001ffff6
 80067fc:	fff6fff6 	.word	0xfff6fff6
 8006800:	fff6fff6 	.word	0xfff6fff6
 8006804:	003600a8 	.word	0x003600a8
 8006808:	fff6009a 	.word	0xfff6009a
 800680c:	00b9fff6 	.word	0x00b9fff6
 8006810:	0036fff6 	.word	0x0036fff6
 8006814:	fff6fff6 	.word	0xfff6fff6
 8006818:	009e      	.short	0x009e
 800681a:	0026      	movs	r6, r4
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	3642      	adds	r6, #66	; 0x42
 8006820:	1d11      	adds	r1, r2, #4
 8006822:	6019      	str	r1, [r3, #0]
 8006824:	6813      	ldr	r3, [r2, #0]
 8006826:	7033      	strb	r3, [r6, #0]
 8006828:	2301      	movs	r3, #1
 800682a:	e0a7      	b.n	800697c <_printf_i+0x1cc>
 800682c:	6808      	ldr	r0, [r1, #0]
 800682e:	6819      	ldr	r1, [r3, #0]
 8006830:	1d0a      	adds	r2, r1, #4
 8006832:	0605      	lsls	r5, r0, #24
 8006834:	d50b      	bpl.n	800684e <_printf_i+0x9e>
 8006836:	680d      	ldr	r5, [r1, #0]
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	2d00      	cmp	r5, #0
 800683c:	da03      	bge.n	8006846 <_printf_i+0x96>
 800683e:	232d      	movs	r3, #45	; 0x2d
 8006840:	9a04      	ldr	r2, [sp, #16]
 8006842:	426d      	negs	r5, r5
 8006844:	7013      	strb	r3, [r2, #0]
 8006846:	4b61      	ldr	r3, [pc, #388]	; (80069cc <_printf_i+0x21c>)
 8006848:	270a      	movs	r7, #10
 800684a:	9303      	str	r3, [sp, #12]
 800684c:	e01b      	b.n	8006886 <_printf_i+0xd6>
 800684e:	680d      	ldr	r5, [r1, #0]
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	0641      	lsls	r1, r0, #25
 8006854:	d5f1      	bpl.n	800683a <_printf_i+0x8a>
 8006856:	b22d      	sxth	r5, r5
 8006858:	e7ef      	b.n	800683a <_printf_i+0x8a>
 800685a:	680d      	ldr	r5, [r1, #0]
 800685c:	6819      	ldr	r1, [r3, #0]
 800685e:	1d08      	adds	r0, r1, #4
 8006860:	6018      	str	r0, [r3, #0]
 8006862:	062e      	lsls	r6, r5, #24
 8006864:	d501      	bpl.n	800686a <_printf_i+0xba>
 8006866:	680d      	ldr	r5, [r1, #0]
 8006868:	e003      	b.n	8006872 <_printf_i+0xc2>
 800686a:	066d      	lsls	r5, r5, #25
 800686c:	d5fb      	bpl.n	8006866 <_printf_i+0xb6>
 800686e:	680d      	ldr	r5, [r1, #0]
 8006870:	b2ad      	uxth	r5, r5
 8006872:	4b56      	ldr	r3, [pc, #344]	; (80069cc <_printf_i+0x21c>)
 8006874:	2708      	movs	r7, #8
 8006876:	9303      	str	r3, [sp, #12]
 8006878:	2a6f      	cmp	r2, #111	; 0x6f
 800687a:	d000      	beq.n	800687e <_printf_i+0xce>
 800687c:	3702      	adds	r7, #2
 800687e:	0023      	movs	r3, r4
 8006880:	2200      	movs	r2, #0
 8006882:	3343      	adds	r3, #67	; 0x43
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	6863      	ldr	r3, [r4, #4]
 8006888:	60a3      	str	r3, [r4, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	db03      	blt.n	8006896 <_printf_i+0xe6>
 800688e:	2204      	movs	r2, #4
 8006890:	6821      	ldr	r1, [r4, #0]
 8006892:	4391      	bics	r1, r2
 8006894:	6021      	str	r1, [r4, #0]
 8006896:	2d00      	cmp	r5, #0
 8006898:	d102      	bne.n	80068a0 <_printf_i+0xf0>
 800689a:	9e04      	ldr	r6, [sp, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00c      	beq.n	80068ba <_printf_i+0x10a>
 80068a0:	9e04      	ldr	r6, [sp, #16]
 80068a2:	0028      	movs	r0, r5
 80068a4:	0039      	movs	r1, r7
 80068a6:	f7f9 fcc5 	bl	8000234 <__aeabi_uidivmod>
 80068aa:	9b03      	ldr	r3, [sp, #12]
 80068ac:	3e01      	subs	r6, #1
 80068ae:	5c5b      	ldrb	r3, [r3, r1]
 80068b0:	7033      	strb	r3, [r6, #0]
 80068b2:	002b      	movs	r3, r5
 80068b4:	0005      	movs	r5, r0
 80068b6:	429f      	cmp	r7, r3
 80068b8:	d9f3      	bls.n	80068a2 <_printf_i+0xf2>
 80068ba:	2f08      	cmp	r7, #8
 80068bc:	d109      	bne.n	80068d2 <_printf_i+0x122>
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	07db      	lsls	r3, r3, #31
 80068c2:	d506      	bpl.n	80068d2 <_printf_i+0x122>
 80068c4:	6863      	ldr	r3, [r4, #4]
 80068c6:	6922      	ldr	r2, [r4, #16]
 80068c8:	4293      	cmp	r3, r2
 80068ca:	dc02      	bgt.n	80068d2 <_printf_i+0x122>
 80068cc:	2330      	movs	r3, #48	; 0x30
 80068ce:	3e01      	subs	r6, #1
 80068d0:	7033      	strb	r3, [r6, #0]
 80068d2:	9b04      	ldr	r3, [sp, #16]
 80068d4:	1b9b      	subs	r3, r3, r6
 80068d6:	6123      	str	r3, [r4, #16]
 80068d8:	9b07      	ldr	r3, [sp, #28]
 80068da:	0021      	movs	r1, r4
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	9805      	ldr	r0, [sp, #20]
 80068e0:	9b06      	ldr	r3, [sp, #24]
 80068e2:	aa09      	add	r2, sp, #36	; 0x24
 80068e4:	f7ff fef4 	bl	80066d0 <_printf_common>
 80068e8:	1c43      	adds	r3, r0, #1
 80068ea:	d14c      	bne.n	8006986 <_printf_i+0x1d6>
 80068ec:	2001      	movs	r0, #1
 80068ee:	4240      	negs	r0, r0
 80068f0:	b00b      	add	sp, #44	; 0x2c
 80068f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068f4:	3145      	adds	r1, #69	; 0x45
 80068f6:	700a      	strb	r2, [r1, #0]
 80068f8:	4a34      	ldr	r2, [pc, #208]	; (80069cc <_printf_i+0x21c>)
 80068fa:	9203      	str	r2, [sp, #12]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	6821      	ldr	r1, [r4, #0]
 8006900:	ca20      	ldmia	r2!, {r5}
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	0608      	lsls	r0, r1, #24
 8006906:	d516      	bpl.n	8006936 <_printf_i+0x186>
 8006908:	07cb      	lsls	r3, r1, #31
 800690a:	d502      	bpl.n	8006912 <_printf_i+0x162>
 800690c:	2320      	movs	r3, #32
 800690e:	4319      	orrs	r1, r3
 8006910:	6021      	str	r1, [r4, #0]
 8006912:	2710      	movs	r7, #16
 8006914:	2d00      	cmp	r5, #0
 8006916:	d1b2      	bne.n	800687e <_printf_i+0xce>
 8006918:	2320      	movs	r3, #32
 800691a:	6822      	ldr	r2, [r4, #0]
 800691c:	439a      	bics	r2, r3
 800691e:	6022      	str	r2, [r4, #0]
 8006920:	e7ad      	b.n	800687e <_printf_i+0xce>
 8006922:	2220      	movs	r2, #32
 8006924:	6809      	ldr	r1, [r1, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	6022      	str	r2, [r4, #0]
 800692a:	0022      	movs	r2, r4
 800692c:	2178      	movs	r1, #120	; 0x78
 800692e:	3245      	adds	r2, #69	; 0x45
 8006930:	7011      	strb	r1, [r2, #0]
 8006932:	4a27      	ldr	r2, [pc, #156]	; (80069d0 <_printf_i+0x220>)
 8006934:	e7e1      	b.n	80068fa <_printf_i+0x14a>
 8006936:	0648      	lsls	r0, r1, #25
 8006938:	d5e6      	bpl.n	8006908 <_printf_i+0x158>
 800693a:	b2ad      	uxth	r5, r5
 800693c:	e7e4      	b.n	8006908 <_printf_i+0x158>
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	680d      	ldr	r5, [r1, #0]
 8006942:	1d10      	adds	r0, r2, #4
 8006944:	6949      	ldr	r1, [r1, #20]
 8006946:	6018      	str	r0, [r3, #0]
 8006948:	6813      	ldr	r3, [r2, #0]
 800694a:	062e      	lsls	r6, r5, #24
 800694c:	d501      	bpl.n	8006952 <_printf_i+0x1a2>
 800694e:	6019      	str	r1, [r3, #0]
 8006950:	e002      	b.n	8006958 <_printf_i+0x1a8>
 8006952:	066d      	lsls	r5, r5, #25
 8006954:	d5fb      	bpl.n	800694e <_printf_i+0x19e>
 8006956:	8019      	strh	r1, [r3, #0]
 8006958:	2300      	movs	r3, #0
 800695a:	9e04      	ldr	r6, [sp, #16]
 800695c:	6123      	str	r3, [r4, #16]
 800695e:	e7bb      	b.n	80068d8 <_printf_i+0x128>
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	1d11      	adds	r1, r2, #4
 8006964:	6019      	str	r1, [r3, #0]
 8006966:	6816      	ldr	r6, [r2, #0]
 8006968:	2100      	movs	r1, #0
 800696a:	0030      	movs	r0, r6
 800696c:	6862      	ldr	r2, [r4, #4]
 800696e:	f000 f97f 	bl	8006c70 <memchr>
 8006972:	2800      	cmp	r0, #0
 8006974:	d001      	beq.n	800697a <_printf_i+0x1ca>
 8006976:	1b80      	subs	r0, r0, r6
 8006978:	6060      	str	r0, [r4, #4]
 800697a:	6863      	ldr	r3, [r4, #4]
 800697c:	6123      	str	r3, [r4, #16]
 800697e:	2300      	movs	r3, #0
 8006980:	9a04      	ldr	r2, [sp, #16]
 8006982:	7013      	strb	r3, [r2, #0]
 8006984:	e7a8      	b.n	80068d8 <_printf_i+0x128>
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	0032      	movs	r2, r6
 800698a:	9906      	ldr	r1, [sp, #24]
 800698c:	9805      	ldr	r0, [sp, #20]
 800698e:	9d07      	ldr	r5, [sp, #28]
 8006990:	47a8      	blx	r5
 8006992:	1c43      	adds	r3, r0, #1
 8006994:	d0aa      	beq.n	80068ec <_printf_i+0x13c>
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	079b      	lsls	r3, r3, #30
 800699a:	d415      	bmi.n	80069c8 <_printf_i+0x218>
 800699c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800699e:	68e0      	ldr	r0, [r4, #12]
 80069a0:	4298      	cmp	r0, r3
 80069a2:	daa5      	bge.n	80068f0 <_printf_i+0x140>
 80069a4:	0018      	movs	r0, r3
 80069a6:	e7a3      	b.n	80068f0 <_printf_i+0x140>
 80069a8:	0022      	movs	r2, r4
 80069aa:	2301      	movs	r3, #1
 80069ac:	9906      	ldr	r1, [sp, #24]
 80069ae:	9805      	ldr	r0, [sp, #20]
 80069b0:	9e07      	ldr	r6, [sp, #28]
 80069b2:	3219      	adds	r2, #25
 80069b4:	47b0      	blx	r6
 80069b6:	1c43      	adds	r3, r0, #1
 80069b8:	d098      	beq.n	80068ec <_printf_i+0x13c>
 80069ba:	3501      	adds	r5, #1
 80069bc:	68e3      	ldr	r3, [r4, #12]
 80069be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069c0:	1a9b      	subs	r3, r3, r2
 80069c2:	42ab      	cmp	r3, r5
 80069c4:	dcf0      	bgt.n	80069a8 <_printf_i+0x1f8>
 80069c6:	e7e9      	b.n	800699c <_printf_i+0x1ec>
 80069c8:	2500      	movs	r5, #0
 80069ca:	e7f7      	b.n	80069bc <_printf_i+0x20c>
 80069cc:	080070bd 	.word	0x080070bd
 80069d0:	080070ce 	.word	0x080070ce

080069d4 <_read_r>:
 80069d4:	b570      	push	{r4, r5, r6, lr}
 80069d6:	0004      	movs	r4, r0
 80069d8:	0008      	movs	r0, r1
 80069da:	0011      	movs	r1, r2
 80069dc:	001a      	movs	r2, r3
 80069de:	2300      	movs	r3, #0
 80069e0:	4d05      	ldr	r5, [pc, #20]	; (80069f8 <_read_r+0x24>)
 80069e2:	602b      	str	r3, [r5, #0]
 80069e4:	f7fa ff8e 	bl	8001904 <_read>
 80069e8:	1c43      	adds	r3, r0, #1
 80069ea:	d103      	bne.n	80069f4 <_read_r+0x20>
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d000      	beq.n	80069f4 <_read_r+0x20>
 80069f2:	6023      	str	r3, [r4, #0]
 80069f4:	bd70      	pop	{r4, r5, r6, pc}
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	20000608 	.word	0x20000608

080069fc <__swbuf_r>:
 80069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fe:	0005      	movs	r5, r0
 8006a00:	000e      	movs	r6, r1
 8006a02:	0014      	movs	r4, r2
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d004      	beq.n	8006a12 <__swbuf_r+0x16>
 8006a08:	6983      	ldr	r3, [r0, #24]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <__swbuf_r+0x16>
 8006a0e:	f7ff fa81 	bl	8005f14 <__sinit>
 8006a12:	4b22      	ldr	r3, [pc, #136]	; (8006a9c <__swbuf_r+0xa0>)
 8006a14:	429c      	cmp	r4, r3
 8006a16:	d12e      	bne.n	8006a76 <__swbuf_r+0x7a>
 8006a18:	686c      	ldr	r4, [r5, #4]
 8006a1a:	69a3      	ldr	r3, [r4, #24]
 8006a1c:	60a3      	str	r3, [r4, #8]
 8006a1e:	89a3      	ldrh	r3, [r4, #12]
 8006a20:	071b      	lsls	r3, r3, #28
 8006a22:	d532      	bpl.n	8006a8a <__swbuf_r+0x8e>
 8006a24:	6923      	ldr	r3, [r4, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d02f      	beq.n	8006a8a <__swbuf_r+0x8e>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	6922      	ldr	r2, [r4, #16]
 8006a2e:	b2f7      	uxtb	r7, r6
 8006a30:	1a98      	subs	r0, r3, r2
 8006a32:	6963      	ldr	r3, [r4, #20]
 8006a34:	b2f6      	uxtb	r6, r6
 8006a36:	4283      	cmp	r3, r0
 8006a38:	dc05      	bgt.n	8006a46 <__swbuf_r+0x4a>
 8006a3a:	0021      	movs	r1, r4
 8006a3c:	0028      	movs	r0, r5
 8006a3e:	f7ff f9b1 	bl	8005da4 <_fflush_r>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d127      	bne.n	8006a96 <__swbuf_r+0x9a>
 8006a46:	68a3      	ldr	r3, [r4, #8]
 8006a48:	3001      	adds	r0, #1
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	60a3      	str	r3, [r4, #8]
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	6022      	str	r2, [r4, #0]
 8006a54:	701f      	strb	r7, [r3, #0]
 8006a56:	6963      	ldr	r3, [r4, #20]
 8006a58:	4283      	cmp	r3, r0
 8006a5a:	d004      	beq.n	8006a66 <__swbuf_r+0x6a>
 8006a5c:	89a3      	ldrh	r3, [r4, #12]
 8006a5e:	07db      	lsls	r3, r3, #31
 8006a60:	d507      	bpl.n	8006a72 <__swbuf_r+0x76>
 8006a62:	2e0a      	cmp	r6, #10
 8006a64:	d105      	bne.n	8006a72 <__swbuf_r+0x76>
 8006a66:	0021      	movs	r1, r4
 8006a68:	0028      	movs	r0, r5
 8006a6a:	f7ff f99b 	bl	8005da4 <_fflush_r>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d111      	bne.n	8006a96 <__swbuf_r+0x9a>
 8006a72:	0030      	movs	r0, r6
 8006a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a76:	4b0a      	ldr	r3, [pc, #40]	; (8006aa0 <__swbuf_r+0xa4>)
 8006a78:	429c      	cmp	r4, r3
 8006a7a:	d101      	bne.n	8006a80 <__swbuf_r+0x84>
 8006a7c:	68ac      	ldr	r4, [r5, #8]
 8006a7e:	e7cc      	b.n	8006a1a <__swbuf_r+0x1e>
 8006a80:	4b08      	ldr	r3, [pc, #32]	; (8006aa4 <__swbuf_r+0xa8>)
 8006a82:	429c      	cmp	r4, r3
 8006a84:	d1c9      	bne.n	8006a1a <__swbuf_r+0x1e>
 8006a86:	68ec      	ldr	r4, [r5, #12]
 8006a88:	e7c7      	b.n	8006a1a <__swbuf_r+0x1e>
 8006a8a:	0021      	movs	r1, r4
 8006a8c:	0028      	movs	r0, r5
 8006a8e:	f000 f80b 	bl	8006aa8 <__swsetup_r>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	d0c9      	beq.n	8006a2a <__swbuf_r+0x2e>
 8006a96:	2601      	movs	r6, #1
 8006a98:	4276      	negs	r6, r6
 8006a9a:	e7ea      	b.n	8006a72 <__swbuf_r+0x76>
 8006a9c:	08007068 	.word	0x08007068
 8006aa0:	08007088 	.word	0x08007088
 8006aa4:	08007048 	.word	0x08007048

08006aa8 <__swsetup_r>:
 8006aa8:	4b37      	ldr	r3, [pc, #220]	; (8006b88 <__swsetup_r+0xe0>)
 8006aaa:	b570      	push	{r4, r5, r6, lr}
 8006aac:	681d      	ldr	r5, [r3, #0]
 8006aae:	0006      	movs	r6, r0
 8006ab0:	000c      	movs	r4, r1
 8006ab2:	2d00      	cmp	r5, #0
 8006ab4:	d005      	beq.n	8006ac2 <__swsetup_r+0x1a>
 8006ab6:	69ab      	ldr	r3, [r5, #24]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d102      	bne.n	8006ac2 <__swsetup_r+0x1a>
 8006abc:	0028      	movs	r0, r5
 8006abe:	f7ff fa29 	bl	8005f14 <__sinit>
 8006ac2:	4b32      	ldr	r3, [pc, #200]	; (8006b8c <__swsetup_r+0xe4>)
 8006ac4:	429c      	cmp	r4, r3
 8006ac6:	d10f      	bne.n	8006ae8 <__swsetup_r+0x40>
 8006ac8:	686c      	ldr	r4, [r5, #4]
 8006aca:	230c      	movs	r3, #12
 8006acc:	5ee2      	ldrsh	r2, [r4, r3]
 8006ace:	b293      	uxth	r3, r2
 8006ad0:	0711      	lsls	r1, r2, #28
 8006ad2:	d42d      	bmi.n	8006b30 <__swsetup_r+0x88>
 8006ad4:	06d9      	lsls	r1, r3, #27
 8006ad6:	d411      	bmi.n	8006afc <__swsetup_r+0x54>
 8006ad8:	2309      	movs	r3, #9
 8006ada:	2001      	movs	r0, #1
 8006adc:	6033      	str	r3, [r6, #0]
 8006ade:	3337      	adds	r3, #55	; 0x37
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	81a3      	strh	r3, [r4, #12]
 8006ae4:	4240      	negs	r0, r0
 8006ae6:	bd70      	pop	{r4, r5, r6, pc}
 8006ae8:	4b29      	ldr	r3, [pc, #164]	; (8006b90 <__swsetup_r+0xe8>)
 8006aea:	429c      	cmp	r4, r3
 8006aec:	d101      	bne.n	8006af2 <__swsetup_r+0x4a>
 8006aee:	68ac      	ldr	r4, [r5, #8]
 8006af0:	e7eb      	b.n	8006aca <__swsetup_r+0x22>
 8006af2:	4b28      	ldr	r3, [pc, #160]	; (8006b94 <__swsetup_r+0xec>)
 8006af4:	429c      	cmp	r4, r3
 8006af6:	d1e8      	bne.n	8006aca <__swsetup_r+0x22>
 8006af8:	68ec      	ldr	r4, [r5, #12]
 8006afa:	e7e6      	b.n	8006aca <__swsetup_r+0x22>
 8006afc:	075b      	lsls	r3, r3, #29
 8006afe:	d513      	bpl.n	8006b28 <__swsetup_r+0x80>
 8006b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b02:	2900      	cmp	r1, #0
 8006b04:	d008      	beq.n	8006b18 <__swsetup_r+0x70>
 8006b06:	0023      	movs	r3, r4
 8006b08:	3344      	adds	r3, #68	; 0x44
 8006b0a:	4299      	cmp	r1, r3
 8006b0c:	d002      	beq.n	8006b14 <__swsetup_r+0x6c>
 8006b0e:	0030      	movs	r0, r6
 8006b10:	f7ff fad8 	bl	80060c4 <_free_r>
 8006b14:	2300      	movs	r3, #0
 8006b16:	6363      	str	r3, [r4, #52]	; 0x34
 8006b18:	2224      	movs	r2, #36	; 0x24
 8006b1a:	89a3      	ldrh	r3, [r4, #12]
 8006b1c:	4393      	bics	r3, r2
 8006b1e:	81a3      	strh	r3, [r4, #12]
 8006b20:	2300      	movs	r3, #0
 8006b22:	6063      	str	r3, [r4, #4]
 8006b24:	6923      	ldr	r3, [r4, #16]
 8006b26:	6023      	str	r3, [r4, #0]
 8006b28:	2308      	movs	r3, #8
 8006b2a:	89a2      	ldrh	r2, [r4, #12]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	81a3      	strh	r3, [r4, #12]
 8006b30:	6923      	ldr	r3, [r4, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10b      	bne.n	8006b4e <__swsetup_r+0xa6>
 8006b36:	21a0      	movs	r1, #160	; 0xa0
 8006b38:	2280      	movs	r2, #128	; 0x80
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	0089      	lsls	r1, r1, #2
 8006b3e:	0092      	lsls	r2, r2, #2
 8006b40:	400b      	ands	r3, r1
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d003      	beq.n	8006b4e <__swsetup_r+0xa6>
 8006b46:	0021      	movs	r1, r4
 8006b48:	0030      	movs	r0, r6
 8006b4a:	f000 f84d 	bl	8006be8 <__smakebuf_r>
 8006b4e:	220c      	movs	r2, #12
 8006b50:	5ea3      	ldrsh	r3, [r4, r2]
 8006b52:	2001      	movs	r0, #1
 8006b54:	001a      	movs	r2, r3
 8006b56:	b299      	uxth	r1, r3
 8006b58:	4002      	ands	r2, r0
 8006b5a:	4203      	tst	r3, r0
 8006b5c:	d00f      	beq.n	8006b7e <__swsetup_r+0xd6>
 8006b5e:	2200      	movs	r2, #0
 8006b60:	60a2      	str	r2, [r4, #8]
 8006b62:	6962      	ldr	r2, [r4, #20]
 8006b64:	4252      	negs	r2, r2
 8006b66:	61a2      	str	r2, [r4, #24]
 8006b68:	2000      	movs	r0, #0
 8006b6a:	6922      	ldr	r2, [r4, #16]
 8006b6c:	4282      	cmp	r2, r0
 8006b6e:	d1ba      	bne.n	8006ae6 <__swsetup_r+0x3e>
 8006b70:	060a      	lsls	r2, r1, #24
 8006b72:	d5b8      	bpl.n	8006ae6 <__swsetup_r+0x3e>
 8006b74:	2240      	movs	r2, #64	; 0x40
 8006b76:	4313      	orrs	r3, r2
 8006b78:	81a3      	strh	r3, [r4, #12]
 8006b7a:	3801      	subs	r0, #1
 8006b7c:	e7b3      	b.n	8006ae6 <__swsetup_r+0x3e>
 8006b7e:	0788      	lsls	r0, r1, #30
 8006b80:	d400      	bmi.n	8006b84 <__swsetup_r+0xdc>
 8006b82:	6962      	ldr	r2, [r4, #20]
 8006b84:	60a2      	str	r2, [r4, #8]
 8006b86:	e7ef      	b.n	8006b68 <__swsetup_r+0xc0>
 8006b88:	20000068 	.word	0x20000068
 8006b8c:	08007068 	.word	0x08007068
 8006b90:	08007088 	.word	0x08007088
 8006b94:	08007048 	.word	0x08007048

08006b98 <__swhatbuf_r>:
 8006b98:	b570      	push	{r4, r5, r6, lr}
 8006b9a:	000e      	movs	r6, r1
 8006b9c:	001d      	movs	r5, r3
 8006b9e:	230e      	movs	r3, #14
 8006ba0:	5ec9      	ldrsh	r1, [r1, r3]
 8006ba2:	0014      	movs	r4, r2
 8006ba4:	b096      	sub	sp, #88	; 0x58
 8006ba6:	2900      	cmp	r1, #0
 8006ba8:	da08      	bge.n	8006bbc <__swhatbuf_r+0x24>
 8006baa:	220c      	movs	r2, #12
 8006bac:	5eb3      	ldrsh	r3, [r6, r2]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	602a      	str	r2, [r5, #0]
 8006bb2:	061b      	lsls	r3, r3, #24
 8006bb4:	d411      	bmi.n	8006bda <__swhatbuf_r+0x42>
 8006bb6:	2380      	movs	r3, #128	; 0x80
 8006bb8:	00db      	lsls	r3, r3, #3
 8006bba:	e00f      	b.n	8006bdc <__swhatbuf_r+0x44>
 8006bbc:	466a      	mov	r2, sp
 8006bbe:	f000 f863 	bl	8006c88 <_fstat_r>
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	dbf1      	blt.n	8006baa <__swhatbuf_r+0x12>
 8006bc6:	23f0      	movs	r3, #240	; 0xf0
 8006bc8:	9901      	ldr	r1, [sp, #4]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	4019      	ands	r1, r3
 8006bce:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <__swhatbuf_r+0x4c>)
 8006bd0:	18c9      	adds	r1, r1, r3
 8006bd2:	424b      	negs	r3, r1
 8006bd4:	4159      	adcs	r1, r3
 8006bd6:	6029      	str	r1, [r5, #0]
 8006bd8:	e7ed      	b.n	8006bb6 <__swhatbuf_r+0x1e>
 8006bda:	2340      	movs	r3, #64	; 0x40
 8006bdc:	2000      	movs	r0, #0
 8006bde:	6023      	str	r3, [r4, #0]
 8006be0:	b016      	add	sp, #88	; 0x58
 8006be2:	bd70      	pop	{r4, r5, r6, pc}
 8006be4:	ffffe000 	.word	0xffffe000

08006be8 <__smakebuf_r>:
 8006be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bea:	2602      	movs	r6, #2
 8006bec:	898b      	ldrh	r3, [r1, #12]
 8006bee:	0005      	movs	r5, r0
 8006bf0:	000c      	movs	r4, r1
 8006bf2:	4233      	tst	r3, r6
 8006bf4:	d006      	beq.n	8006c04 <__smakebuf_r+0x1c>
 8006bf6:	0023      	movs	r3, r4
 8006bf8:	3347      	adds	r3, #71	; 0x47
 8006bfa:	6023      	str	r3, [r4, #0]
 8006bfc:	6123      	str	r3, [r4, #16]
 8006bfe:	2301      	movs	r3, #1
 8006c00:	6163      	str	r3, [r4, #20]
 8006c02:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006c04:	466a      	mov	r2, sp
 8006c06:	ab01      	add	r3, sp, #4
 8006c08:	f7ff ffc6 	bl	8006b98 <__swhatbuf_r>
 8006c0c:	9900      	ldr	r1, [sp, #0]
 8006c0e:	0007      	movs	r7, r0
 8006c10:	0028      	movs	r0, r5
 8006c12:	f7ff fac3 	bl	800619c <_malloc_r>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d108      	bne.n	8006c2c <__smakebuf_r+0x44>
 8006c1a:	220c      	movs	r2, #12
 8006c1c:	5ea3      	ldrsh	r3, [r4, r2]
 8006c1e:	059a      	lsls	r2, r3, #22
 8006c20:	d4ef      	bmi.n	8006c02 <__smakebuf_r+0x1a>
 8006c22:	2203      	movs	r2, #3
 8006c24:	4393      	bics	r3, r2
 8006c26:	431e      	orrs	r6, r3
 8006c28:	81a6      	strh	r6, [r4, #12]
 8006c2a:	e7e4      	b.n	8006bf6 <__smakebuf_r+0xe>
 8006c2c:	4b0f      	ldr	r3, [pc, #60]	; (8006c6c <__smakebuf_r+0x84>)
 8006c2e:	62ab      	str	r3, [r5, #40]	; 0x28
 8006c30:	2380      	movs	r3, #128	; 0x80
 8006c32:	89a2      	ldrh	r2, [r4, #12]
 8006c34:	6020      	str	r0, [r4, #0]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	81a3      	strh	r3, [r4, #12]
 8006c3a:	9b00      	ldr	r3, [sp, #0]
 8006c3c:	6120      	str	r0, [r4, #16]
 8006c3e:	6163      	str	r3, [r4, #20]
 8006c40:	9b01      	ldr	r3, [sp, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00d      	beq.n	8006c62 <__smakebuf_r+0x7a>
 8006c46:	0028      	movs	r0, r5
 8006c48:	230e      	movs	r3, #14
 8006c4a:	5ee1      	ldrsh	r1, [r4, r3]
 8006c4c:	f000 f82e 	bl	8006cac <_isatty_r>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d006      	beq.n	8006c62 <__smakebuf_r+0x7a>
 8006c54:	2203      	movs	r2, #3
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	4393      	bics	r3, r2
 8006c5a:	001a      	movs	r2, r3
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	81a3      	strh	r3, [r4, #12]
 8006c62:	89a0      	ldrh	r0, [r4, #12]
 8006c64:	4307      	orrs	r7, r0
 8006c66:	81a7      	strh	r7, [r4, #12]
 8006c68:	e7cb      	b.n	8006c02 <__smakebuf_r+0x1a>
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	08005e99 	.word	0x08005e99

08006c70 <memchr>:
 8006c70:	b2c9      	uxtb	r1, r1
 8006c72:	1882      	adds	r2, r0, r2
 8006c74:	4290      	cmp	r0, r2
 8006c76:	d101      	bne.n	8006c7c <memchr+0xc>
 8006c78:	2000      	movs	r0, #0
 8006c7a:	4770      	bx	lr
 8006c7c:	7803      	ldrb	r3, [r0, #0]
 8006c7e:	428b      	cmp	r3, r1
 8006c80:	d0fb      	beq.n	8006c7a <memchr+0xa>
 8006c82:	3001      	adds	r0, #1
 8006c84:	e7f6      	b.n	8006c74 <memchr+0x4>
	...

08006c88 <_fstat_r>:
 8006c88:	2300      	movs	r3, #0
 8006c8a:	b570      	push	{r4, r5, r6, lr}
 8006c8c:	4d06      	ldr	r5, [pc, #24]	; (8006ca8 <_fstat_r+0x20>)
 8006c8e:	0004      	movs	r4, r0
 8006c90:	0008      	movs	r0, r1
 8006c92:	0011      	movs	r1, r2
 8006c94:	602b      	str	r3, [r5, #0]
 8006c96:	f7fa fe78 	bl	800198a <_fstat>
 8006c9a:	1c43      	adds	r3, r0, #1
 8006c9c:	d103      	bne.n	8006ca6 <_fstat_r+0x1e>
 8006c9e:	682b      	ldr	r3, [r5, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d000      	beq.n	8006ca6 <_fstat_r+0x1e>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd70      	pop	{r4, r5, r6, pc}
 8006ca8:	20000608 	.word	0x20000608

08006cac <_isatty_r>:
 8006cac:	2300      	movs	r3, #0
 8006cae:	b570      	push	{r4, r5, r6, lr}
 8006cb0:	4d06      	ldr	r5, [pc, #24]	; (8006ccc <_isatty_r+0x20>)
 8006cb2:	0004      	movs	r4, r0
 8006cb4:	0008      	movs	r0, r1
 8006cb6:	602b      	str	r3, [r5, #0]
 8006cb8:	f7fa fe75 	bl	80019a6 <_isatty>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d103      	bne.n	8006cc8 <_isatty_r+0x1c>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d000      	beq.n	8006cc8 <_isatty_r+0x1c>
 8006cc6:	6023      	str	r3, [r4, #0]
 8006cc8:	bd70      	pop	{r4, r5, r6, pc}
 8006cca:	46c0      	nop			; (mov r8, r8)
 8006ccc:	20000608 	.word	0x20000608

08006cd0 <_init>:
 8006cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd2:	46c0      	nop			; (mov r8, r8)
 8006cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cd6:	bc08      	pop	{r3}
 8006cd8:	469e      	mov	lr, r3
 8006cda:	4770      	bx	lr

08006cdc <_fini>:
 8006cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cde:	46c0      	nop			; (mov r8, r8)
 8006ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ce2:	bc08      	pop	{r3}
 8006ce4:	469e      	mov	lr, r3
 8006ce6:	4770      	bx	lr
